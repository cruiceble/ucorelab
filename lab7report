task0:
    移植lab6的stride后无法通过priority，对stride做了一些表述修改（换一种表述就对了虽然感觉没有区别）
task1:
    内核级信号量semaphore里面有一个value表示当前剩余资源数以及waitqueue表示等待队列。
　　其基本操作包括P操作(down)和V操作(up)，这两个操作的核心代码分别在__down和__up函数中实现
　　一个线程请求资源时使用__down。如果value大于0，那么获得并返回。；否则把当前线程加入到等待队列中让schedule调度其他的线程。
　　一个线程释放资源时使用__up。如果等待队列为空，那么value自增；否则唤醒一个等待队列中的线程。
　　给用户态进程提供信号量:新建三个系统调用分别用来新建信号量，释放资源和申请资源，通过中断处理函数调用内核信号量使用的内核函数。
　　                      比较：两者实质所用方法相同，但是特权级的不同导致用户态要借用系统调用的“壳”来实现
task2：
    内核条件变量：线程使用cond_signal时，表示此时该条件成立，把当前线程放入等待队列，唤醒相应线程，重新调度。
                  线程使用cond_wait时，表示此时需要等待条件，所以让出管程的控制权，唤醒等待管程的线程或者释放管程的锁，然后睡眠等待条件。
    哲学家就餐：申请叉子时，如果“本人相邻的人都不在吃”不能满足，那么进入等待。 
                释放叉子时，把自己的状态设置为思考，然后唤醒相邻的人（如果可以）让其停止申请。
                其中管程互斥锁的操作在代码框架中已经完成。
    用户态条件变量：与上一个task的问题类似，也可以建立三个系统调用来做类似实现
                    比较：实质方法相同，特权级的不同导致用户态要借用系统调用的“壳”来实现
