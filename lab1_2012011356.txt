练习1.2：
	从sign.c中发现磁盘主引导扇区大小应为512字节，倒数两个字节分别是0x55和0xAA
练习2.1，练习2.2
	Make ex21之后使用ni和si进行跟踪。tool/labinit文件中在0x7c00处设置了断点。
练习2.3
	两者代码相同。
练习3：
从%cs=0 $pc=0x7c00，进入后
首先清理环境：
　　包括将flag置0和将段寄存器置0
	.code16
	    cli
	    cld
	    xorw %ax, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %ss

开启A20：
　　通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，
可以访问4G的内存空间。
	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xd1, %al     # 发送写8042输出端口的指令
	    outb %al, $0x64     #
	
	seta20.1:               # 等待8042键盘控制器不忙
	    inb $0x64, %al      # 
	    testb $0x2, %al     #
	    jnz seta20.1        #
	
	    movb $0xdf, %al     # 打开A20
	    outb %al, $0x60     # 

初始化GDT表：
　　一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可
	    lgdt gdtdesc

进入保护模式：
　　通过将cr0寄存器PE位置1便开启了保护模式
	    movl %cr0, %eax
	    orl $CR0_PE_ON, %eax
	    movl %eax, %cr0

通过长跳转更新cs的基地址
	    ljmp $PROT_MODE_CSEG, $protcseg
	.code32
	protcseg:

设置段寄存器，并建立堆栈
	    movw $PROT_MODE_DSEG, %ax
	    movw %ax, %ds
	    movw %ax, %es
	    movw %ax, %fs
	    movw %ax, %gs
	    movw %ax, %ss
	    movl $0x0, %ebp
	    movl $start, %esp

转到保护模式完成，进入boot主方法
	    call bootmain

练习4：
	首先看readsect函数，
readsect从设备的第secno扇区读取数据到dst位置
	static void
	readsect(void *dst, uint32_t secno) {
	    waitdisk();
	
	    outb(0x1F2, 1);                         // 设置读取扇区的数目为1
	    outb(0x1F3, secno & 0xFF);
	    outb(0x1F4, (secno >> 8) & 0xFF);
	    outb(0x1F5, (secno >> 16) & 0xFF);
	    outb(0x1F6, ((secno >> 24) & 0xF) | 0xE0);
	        // 上面四条指令联合制定了扇区号
	        // 在这4个字节线联合构成的32位参数中
	        //   29-31位强制设为1
	        //   28位(=0)表示访问"Disk 0"
	        //   0-27位是28位的偏移量
	    outb(0x1F7, 0x20);                      // 0x20命令，读取扇区
	
	    waitdisk();

	    insl(0x1F0, dst, SECTSIZE / 4);         // 读取到dst位置，
	                                            // 幻数4因为这里以DW为单位(32位为一个单位）
	}

readseg简单包装了readsect，可以从设备读取任意长度的内容。
	static void
	readseg(uintptr_t va, uint32_t count, uint32_t offset) {
	    uintptr_t end_va = va + count;
	
	    va -= offset % SECTSIZE;		//change va? write to the correct position?
	
	    uint32_t secno = (offset / SECTSIZE) + 1; 
	    // 加1因为0扇区被引导占用
	    // ELF文件从1扇区开始
	
	    for (; va < end_va; va += SECTSIZE, secno ++) {
	        readsect((void *)va, secno);
	    }
	}


在bootmain函数中，
	void
	bootmain(void) {
	    // 首先读取ELF的头部
	    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);
	
	    // 通过储存在头部的幻数判断是否是合法的ELF文件
	    if (ELFHDR->e_magic != ELF_MAGIC) {
	        goto bad;
	    }
	
	    struct proghdr *ph, *eph;
	
	    // ELF头部有描述ELF文件应加载到内存什么位置的描述表，
	    // 先将描述表的头地址存在ph
	    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR->e_phoff);
	    eph = ph + ELFHDR->e_phnum;
	
	    // 按照描述表将ELF文件中数据载入内存
	    for (; ph < eph; ph ++) {
	        readseg(ph->p_va & 0xFFFFFF, ph->p_memsz, ph->p_offset);
	    }
	    // ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000
	    // ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000

	    // 根据ELF头部储存的入口信息，找到内核的入口
	    ((void (*)(void))(ELFHDR->e_entry & 0xFFFFFF))();
	
	bad:
	    outw(0x8A00, 0x8A00);
	    outw(0x8A00, 0x8E00);
	    while (1);
	}

练习5：
	调用read_eip()与read_ebp()获取最后调用函数的eip与ebp，开始遍历堆栈，先打印eip与ebp以及ebp+2中存的这个函数调用时候的4个参数，用print_debuginfo输出函数信息，更新eip与ebp为上一次调用的值。这里当发现ebp=0（即为达到提示中指明的boundary）跳出循环。
	最后一行是：
	ebp:0x00007bf8 eip:0x00007d68 args:0x00000000 0x00000000 0x00000000 0x00007c4f <unknow>: -- 0x00007d67 --
　　这是bootmain.c中的bootmain使用堆栈的信息，bootloader设置堆栈开头是0x7c00， call bootmain之后 call指令压栈，bootmain中的ebp是0x7bf8。

练习6.1：
	一个表项占8字节， 2-3字节是段选择子，0-1字节和6-7字节拼起来是位移，
这两个信息共同指出中断处理程序的入口地址。
练习6.2:
	根据提示，声明extern uintptr_t __vectors[],然后使用SETGATE宏逐个建立IDT各项，使用lidt告诉cpu IDT的位置
练习6.3：
	根据提示，每次timer interrupt都要记录其已经发生的次数（tick++）,当每满100次(tick % TICK_NUM==0)就输出信息（print_ticks()）
