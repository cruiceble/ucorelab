
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 e0 14 00 	lgdtl  0x14e018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba 04 32 15 c0       	mov    $0xc0153204,%edx
c0100035:	b8 d0 ee 14 c0       	mov    $0xc014eed0,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 d0 ee 14 c0 	movl   $0xc014eed0,(%esp)
c0100051:	e8 23 54 01 00       	call   c0115479 <memset>

    cons_init();                // init the console
c0100056:	e8 7d 17 00 00       	call   c01017d8 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 20 56 11 c0 	movl   $0xc0115620,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 3c 56 11 c0 	movl   $0xc011563c,(%esp)
c0100070:	e8 f0 02 00 00       	call   c0100365 <cprintf>

    print_kerninfo();
c0100075:	e8 f8 09 00 00       	call   c0100a72 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a7 00 00 00       	call   c0100126 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 e5 56 00 00       	call   c0105769 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2d 21 00 00       	call   c01021b6 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 a5 22 00 00       	call   c0102333 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 db 85 00 00       	call   c010866e <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 ff e3 00 00       	call   c010e497 <sched_init>
    proc_init();                // init process table
c0100098:	e8 a0 dc 00 00       	call   c010dd3d <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 67 18 00 00       	call   c0101909 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 6b 6d 00 00       	call   c0106e12 <swap_init>
    fs_init();                  // init fs
c01000a7:	e8 2a af 00 00       	call   c010afd6 <fs_init>
    
    clock_init();               // init clock interrupt
c01000ac:	e8 dd 0e 00 00       	call   c0100f8e <clock_init>
    intr_enable();              // enable irq interrupt
c01000b1:	e8 6e 20 00 00       	call   c0102124 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b6:	e8 90 de 00 00       	call   c010df4b <cpu_idle>

c01000bb <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bb:	55                   	push   %ebp
c01000bc:	89 e5                	mov    %esp,%ebp
c01000be:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c8:	00 
c01000c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d0:	00 
c01000d1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d8:	e8 d9 0d 00 00       	call   c0100eb6 <mon_backtrace>
}
c01000dd:	c9                   	leave  
c01000de:	c3                   	ret    

c01000df <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000df:	55                   	push   %ebp
c01000e0:	89 e5                	mov    %esp,%ebp
c01000e2:	53                   	push   %ebx
c01000e3:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e6:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000ec:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fe:	89 04 24             	mov    %eax,(%esp)
c0100101:	e8 b5 ff ff ff       	call   c01000bb <grade_backtrace2>
}
c0100106:	83 c4 14             	add    $0x14,%esp
c0100109:	5b                   	pop    %ebx
c010010a:	5d                   	pop    %ebp
c010010b:	c3                   	ret    

c010010c <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010c:	55                   	push   %ebp
c010010d:	89 e5                	mov    %esp,%ebp
c010010f:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100112:	8b 45 10             	mov    0x10(%ebp),%eax
c0100115:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100119:	8b 45 08             	mov    0x8(%ebp),%eax
c010011c:	89 04 24             	mov    %eax,(%esp)
c010011f:	e8 bb ff ff ff       	call   c01000df <grade_backtrace1>
}
c0100124:	c9                   	leave  
c0100125:	c3                   	ret    

c0100126 <grade_backtrace>:

void
grade_backtrace(void) {
c0100126:	55                   	push   %ebp
c0100127:	89 e5                	mov    %esp,%ebp
c0100129:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012c:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100131:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100138:	ff 
c0100139:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100144:	e8 c3 ff ff ff       	call   c010010c <grade_backtrace0>
}
c0100149:	c9                   	leave  
c010014a:	c3                   	ret    

c010014b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014b:	55                   	push   %ebp
c010014c:	89 e5                	mov    %esp,%ebp
c010014e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100151:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100154:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100157:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010015a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100161:	0f b7 c0             	movzwl %ax,%eax
c0100164:	83 e0 03             	and    $0x3,%eax
c0100167:	89 c2                	mov    %eax,%edx
c0100169:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010016e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100172:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100176:	c7 04 24 41 56 11 c0 	movl   $0xc0115641,(%esp)
c010017d:	e8 e3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100182:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100186:	0f b7 d0             	movzwl %ax,%edx
c0100189:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c010018e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100192:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100196:	c7 04 24 4f 56 11 c0 	movl   $0xc011564f,(%esp)
c010019d:	e8 c3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a6:	0f b7 d0             	movzwl %ax,%edx
c01001a9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ae:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b6:	c7 04 24 5d 56 11 c0 	movl   $0xc011565d,(%esp)
c01001bd:	e8 a3 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c6:	0f b7 d0             	movzwl %ax,%edx
c01001c9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ce:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d6:	c7 04 24 6b 56 11 c0 	movl   $0xc011566b,(%esp)
c01001dd:	e8 83 01 00 00       	call   c0100365 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e2:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e6:	0f b7 d0             	movzwl %ax,%edx
c01001e9:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c01001ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f6:	c7 04 24 79 56 11 c0 	movl   $0xc0115679,(%esp)
c01001fd:	e8 63 01 00 00       	call   c0100365 <cprintf>
    round ++;
c0100202:	a1 e0 ee 14 c0       	mov    0xc014eee0,%eax
c0100207:	83 c0 01             	add    $0x1,%eax
c010020a:	a3 e0 ee 14 c0       	mov    %eax,0xc014eee0
}
c010020f:	c9                   	leave  
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
c010021e:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100221:	e8 25 ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100226:	c7 04 24 88 56 11 c0 	movl   $0xc0115688,(%esp)
c010022d:	e8 33 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_user();
c0100232:	e8 da ff ff ff       	call   c0100211 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100237:	e8 0f ff ff ff       	call   c010014b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023c:	c7 04 24 a8 56 11 c0 	movl   $0xc01156a8,(%esp)
c0100243:	e8 1d 01 00 00       	call   c0100365 <cprintf>
    lab1_switch_to_kernel();
c0100248:	e8 c9 ff ff ff       	call   c0100216 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024d:	e8 f9 fe ff ff       	call   c010014b <lab1_print_cur_status>
}
c0100252:	c9                   	leave  
c0100253:	c3                   	ret    

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 c7 56 11 c0 	movl   $0xc01156c7,(%esp)
c010026e:	e8 f2 00 00 00       	call   c0100365 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010027a:	e8 6e 01 00 00       	call   c01003ed <getchar>
c010027f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100282:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100286:	79 07                	jns    c010028f <readline+0x3b>
            return NULL;
c0100288:	b8 00 00 00 00       	mov    $0x0,%eax
c010028d:	eb 79                	jmp    c0100308 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028f:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100293:	7e 28                	jle    c01002bd <readline+0x69>
c0100295:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029c:	7f 1f                	jg     c01002bd <readline+0x69>
            cputchar(c);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	89 04 24             	mov    %eax,(%esp)
c01002a4:	e8 e2 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ac:	8d 50 01             	lea    0x1(%eax),%edx
c01002af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b5:	88 90 00 ef 14 c0    	mov    %dl,-0x3feb1100(%eax)
c01002bb:	eb 46                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002bd:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c1:	75 17                	jne    c01002da <readline+0x86>
c01002c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c7:	7e 11                	jle    c01002da <readline+0x86>
            cputchar(c);
c01002c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cc:	89 04 24             	mov    %eax,(%esp)
c01002cf:	e8 b7 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d8:	eb 29                	jmp    c0100303 <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002da:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002de:	74 06                	je     c01002e6 <readline+0x92>
c01002e0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e4:	75 1d                	jne    c0100303 <readline+0xaf>
            cputchar(c);
c01002e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e9:	89 04 24             	mov    %eax,(%esp)
c01002ec:	e8 9a 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f4:	05 00 ef 14 c0       	add    $0xc014ef00,%eax
c01002f9:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002fc:	b8 00 ef 14 c0       	mov    $0xc014ef00,%eax
c0100301:	eb 05                	jmp    c0100308 <readline+0xb4>
        }
    }
c0100303:	e9 72 ff ff ff       	jmp    c010027a <readline+0x26>
}
c0100308:	c9                   	leave  
c0100309:	c3                   	ret    

c010030a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010030a:	55                   	push   %ebp
c010030b:	89 e5                	mov    %esp,%ebp
c010030d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100310:	8b 45 08             	mov    0x8(%ebp),%eax
c0100313:	89 04 24             	mov    %eax,(%esp)
c0100316:	e8 e9 14 00 00       	call   c0101804 <cons_putc>
    (*cnt) ++;
c010031b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010031e:	8b 00                	mov    (%eax),%eax
c0100320:	8d 50 01             	lea    0x1(%eax),%edx
c0100323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100326:	89 10                	mov    %edx,(%eax)
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 38             	sub    $0x38,%esp
    int cnt = 0;
c0100330:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010033a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010033e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100341:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100345:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100348:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0100353:	ff 
c0100354:	c7 04 24 0a 03 10 c0 	movl   $0xc010030a,(%esp)
c010035b:	e8 c9 47 01 00       	call   c0114b29 <vprintfmt>
    return cnt;
c0100360:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100363:	c9                   	leave  
c0100364:	c3                   	ret    

c0100365 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100365:	55                   	push   %ebp
c0100366:	89 e5                	mov    %esp,%ebp
c0100368:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010036b:	8d 45 0c             	lea    0xc(%ebp),%eax
c010036e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 a7 ff ff ff       	call   c010032a <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 68 14 00 00       	call   c0101804 <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 4a ff ff ff       	call   c010030a <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	8d 50 01             	lea    0x1(%eax),%edx
c01003c6:	89 55 08             	mov    %edx,0x8(%ebp)
c01003c9:	0f b6 00             	movzbl (%eax),%eax
c01003cc:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003cf:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003d3:	75 d8                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003dc:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e3:	e8 22 ff ff ff       	call   c010030a <cputch>
    return cnt;
c01003e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003eb:	c9                   	leave  
c01003ec:	c3                   	ret    

c01003ed <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003ed:	55                   	push   %ebp
c01003ee:	89 e5                	mov    %esp,%ebp
c01003f0:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f3:	e8 48 14 00 00       	call   c0101840 <cons_getc>
c01003f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003ff:	74 f2                	je     c01003f3 <getchar+0x6>
        /* do nothing */;
    return c;
c0100401:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100404:	c9                   	leave  
c0100405:	c3                   	ret    

c0100406 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100406:	55                   	push   %ebp
c0100407:	89 e5                	mov    %esp,%ebp
c0100409:	83 ec 28             	sub    $0x28,%esp
    char *dst;
    size_t len = strlen(src);
c010040c:	8b 45 08             	mov    0x8(%ebp),%eax
c010040f:	89 04 24             	mov    %eax,(%esp)
c0100412:	e8 0c 4d 01 00       	call   c0115123 <strlen>
c0100417:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010041a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010041d:	83 c0 01             	add    $0x1,%eax
c0100420:	89 04 24             	mov    %eax,(%esp)
c0100423:	e8 99 48 00 00       	call   c0104cc1 <kmalloc>
c0100428:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010042b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010042f:	74 24                	je     c0100455 <strdup+0x4f>
        memcpy(dst, src, len);
c0100431:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100434:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100438:	8b 45 08             	mov    0x8(%ebp),%eax
c010043b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010043f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100442:	89 04 24             	mov    %eax,(%esp)
c0100445:	e8 11 51 01 00       	call   c011555b <memcpy>
        dst[len] = '\0';
c010044a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010044d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100450:	01 d0                	add    %edx,%eax
c0100452:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100455:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100458:	c9                   	leave  
c0100459:	c3                   	ret    

c010045a <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010045a:	55                   	push   %ebp
c010045b:	89 e5                	mov    %esp,%ebp
c010045d:	83 ec 28             	sub    $0x28,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c0100460:	8b 45 08             	mov    0x8(%ebp),%eax
c0100463:	89 04 24             	mov    %eax,(%esp)
c0100466:	e8 b8 4c 01 00       	call   c0115123 <strlen>
c010046b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010046e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100471:	89 04 24             	mov    %eax,(%esp)
c0100474:	e8 aa 4c 01 00       	call   c0115123 <strlen>
c0100479:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c010047c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010047f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100482:	01 d0                	add    %edx,%eax
c0100484:	83 c0 01             	add    $0x1,%eax
c0100487:	89 04 24             	mov    %eax,(%esp)
c010048a:	e8 32 48 00 00       	call   c0104cc1 <kmalloc>
c010048f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100495:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0100498:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010049c:	74 44                	je     c01004e2 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c010049e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01004a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004af:	89 04 24             	mov    %eax,(%esp)
c01004b2:	e8 a4 50 01 00       	call   c011555b <memcpy>
c01004b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c01004bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01004c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01004cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ce:	89 04 24             	mov    %eax,(%esp)
c01004d1:	e8 85 50 01 00       	call   c011555b <memcpy>
c01004d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d9:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c01004dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004df:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c01004e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c01004e5:	c9                   	leave  
c01004e6:	c3                   	ret    

c01004e7 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004e7:	55                   	push   %ebp
c01004e8:	89 e5                	mov    %esp,%ebp
c01004ea:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004f0:	8b 00                	mov    (%eax),%eax
c01004f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01004f8:	8b 00                	mov    (%eax),%eax
c01004fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100504:	e9 d2 00 00 00       	jmp    c01005db <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c0100509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010050c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010050f:	01 d0                	add    %edx,%eax
c0100511:	89 c2                	mov    %eax,%edx
c0100513:	c1 ea 1f             	shr    $0x1f,%edx
c0100516:	01 d0                	add    %edx,%eax
c0100518:	d1 f8                	sar    %eax
c010051a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010051d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100520:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100523:	eb 04                	jmp    c0100529 <stab_binsearch+0x42>
            m --;
c0100525:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010052c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052f:	7c 1f                	jl     c0100550 <stab_binsearch+0x69>
c0100531:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100534:	89 d0                	mov    %edx,%eax
c0100536:	01 c0                	add    %eax,%eax
c0100538:	01 d0                	add    %edx,%eax
c010053a:	c1 e0 02             	shl    $0x2,%eax
c010053d:	89 c2                	mov    %eax,%edx
c010053f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100542:	01 d0                	add    %edx,%eax
c0100544:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100548:	0f b6 c0             	movzbl %al,%eax
c010054b:	3b 45 14             	cmp    0x14(%ebp),%eax
c010054e:	75 d5                	jne    c0100525 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100550:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100553:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100556:	7d 0b                	jge    c0100563 <stab_binsearch+0x7c>
            l = true_m + 1;
c0100558:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010055b:	83 c0 01             	add    $0x1,%eax
c010055e:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100561:	eb 78                	jmp    c01005db <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100563:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010056a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010056d:	89 d0                	mov    %edx,%eax
c010056f:	01 c0                	add    %eax,%eax
c0100571:	01 d0                	add    %edx,%eax
c0100573:	c1 e0 02             	shl    $0x2,%eax
c0100576:	89 c2                	mov    %eax,%edx
c0100578:	8b 45 08             	mov    0x8(%ebp),%eax
c010057b:	01 d0                	add    %edx,%eax
c010057d:	8b 40 08             	mov    0x8(%eax),%eax
c0100580:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100583:	73 13                	jae    c0100598 <stab_binsearch+0xb1>
            *region_left = m;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010058b:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010058d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100590:	83 c0 01             	add    $0x1,%eax
c0100593:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100596:	eb 43                	jmp    c01005db <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100598:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010059b:	89 d0                	mov    %edx,%eax
c010059d:	01 c0                	add    %eax,%eax
c010059f:	01 d0                	add    %edx,%eax
c01005a1:	c1 e0 02             	shl    $0x2,%eax
c01005a4:	89 c2                	mov    %eax,%edx
c01005a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01005a9:	01 d0                	add    %edx,%eax
c01005ab:	8b 40 08             	mov    0x8(%eax),%eax
c01005ae:	3b 45 18             	cmp    0x18(%ebp),%eax
c01005b1:	76 16                	jbe    c01005c9 <stab_binsearch+0xe2>
            *region_right = m - 1;
c01005b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005b9:	8b 45 10             	mov    0x10(%ebp),%eax
c01005bc:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005c1:	83 e8 01             	sub    $0x1,%eax
c01005c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005c7:	eb 12                	jmp    c01005db <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005cf:	89 10                	mov    %edx,(%eax)
            l = m;
c01005d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005d7:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005de:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005e1:	0f 8e 22 ff ff ff    	jle    c0100509 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005eb:	75 0f                	jne    c01005fc <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f0:	8b 00                	mov    (%eax),%eax
c01005f2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01005f8:	89 10                	mov    %edx,(%eax)
c01005fa:	eb 3f                	jmp    c010063b <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ff:	8b 00                	mov    (%eax),%eax
c0100601:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100604:	eb 04                	jmp    c010060a <stab_binsearch+0x123>
c0100606:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010060a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010060d:	8b 00                	mov    (%eax),%eax
c010060f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100612:	7d 1f                	jge    c0100633 <stab_binsearch+0x14c>
c0100614:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100617:	89 d0                	mov    %edx,%eax
c0100619:	01 c0                	add    %eax,%eax
c010061b:	01 d0                	add    %edx,%eax
c010061d:	c1 e0 02             	shl    $0x2,%eax
c0100620:	89 c2                	mov    %eax,%edx
c0100622:	8b 45 08             	mov    0x8(%ebp),%eax
c0100625:	01 d0                	add    %edx,%eax
c0100627:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010062b:	0f b6 c0             	movzbl %al,%eax
c010062e:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100631:	75 d3                	jne    c0100606 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100633:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100636:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100639:	89 10                	mov    %edx,(%eax)
    }
}
c010063b:	c9                   	leave  
c010063c:	c3                   	ret    

c010063d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010063d:	55                   	push   %ebp
c010063e:	89 e5                	mov    %esp,%ebp
c0100640:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100643:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100646:	c7 00 cc 56 11 c0    	movl   $0xc01156cc,(%eax)
    info->eip_line = 0;
c010064c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100659:	c7 40 08 cc 56 11 c0 	movl   $0xc01156cc,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100660:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100663:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010066a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010066d:	8b 55 08             	mov    0x8(%ebp),%edx
c0100670:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100676:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010067d:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100684:	76 21                	jbe    c01006a7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100686:	c7 45 f4 c0 9c 11 c0 	movl   $0xc0119cc0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010068d:	c7 45 f0 98 f5 13 c0 	movl   $0xc013f598,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100694:	c7 45 ec 99 f5 13 c0 	movl   $0xc013f599,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010069b:	c7 45 e8 7b be 14 c0 	movl   $0xc014be7b,-0x18(%ebp)
c01006a2:	e9 ea 00 00 00       	jmp    c0100791 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01006a7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01006ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006b3:	85 c0                	test   %eax,%eax
c01006b5:	74 11                	je     c01006c8 <debuginfo_eip+0x8b>
c01006b7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01006bc:	8b 40 18             	mov    0x18(%eax),%eax
c01006bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006c6:	75 0a                	jne    c01006d2 <debuginfo_eip+0x95>
            return -1;
c01006c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006cd:	e9 9e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006d5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01006dc:	00 
c01006dd:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01006e4:	00 
c01006e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006ec:	89 04 24             	mov    %eax,(%esp)
c01006ef:	e8 d9 88 00 00       	call   c0108fcd <user_mem_check>
c01006f4:	85 c0                	test   %eax,%eax
c01006f6:	75 0a                	jne    c0100702 <debuginfo_eip+0xc5>
            return -1;
c01006f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006fd:	e9 6e 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100705:	8b 00                	mov    (%eax),%eax
c0100707:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010070d:	8b 40 04             	mov    0x4(%eax),%eax
c0100710:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100713:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100716:	8b 40 08             	mov    0x8(%eax),%eax
c0100719:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010071c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010071f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100722:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100725:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010072b:	29 c2                	sub    %eax,%edx
c010072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100730:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100737:	00 
c0100738:	89 54 24 08          	mov    %edx,0x8(%esp)
c010073c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100740:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100743:	89 04 24             	mov    %eax,(%esp)
c0100746:	e8 82 88 00 00       	call   c0108fcd <user_mem_check>
c010074b:	85 c0                	test   %eax,%eax
c010074d:	75 0a                	jne    c0100759 <debuginfo_eip+0x11c>
            return -1;
c010074f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100754:	e9 17 03 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100759:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010075c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010075f:	29 c2                	sub    %eax,%edx
c0100761:	89 d0                	mov    %edx,%eax
c0100763:	89 c2                	mov    %eax,%edx
c0100765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100768:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010076f:	00 
c0100770:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100774:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100778:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010077b:	89 04 24             	mov    %eax,(%esp)
c010077e:	e8 4a 88 00 00       	call   c0108fcd <user_mem_check>
c0100783:	85 c0                	test   %eax,%eax
c0100785:	75 0a                	jne    c0100791 <debuginfo_eip+0x154>
            return -1;
c0100787:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010078c:	e9 df 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100791:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100794:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100797:	76 0d                	jbe    c01007a6 <debuginfo_eip+0x169>
c0100799:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010079c:	83 e8 01             	sub    $0x1,%eax
c010079f:	0f b6 00             	movzbl (%eax),%eax
c01007a2:	84 c0                	test   %al,%al
c01007a4:	74 0a                	je     c01007b0 <debuginfo_eip+0x173>
        return -1;
c01007a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007ab:	e9 c0 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01007b0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01007b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007bd:	29 c2                	sub    %eax,%edx
c01007bf:	89 d0                	mov    %edx,%eax
c01007c1:	c1 f8 02             	sar    $0x2,%eax
c01007c4:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01007ca:	83 e8 01             	sub    $0x1,%eax
c01007cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01007d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01007d3:	89 44 24 10          	mov    %eax,0x10(%esp)
c01007d7:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01007de:	00 
c01007df:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01007e2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01007e6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01007ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f0:	89 04 24             	mov    %eax,(%esp)
c01007f3:	e8 ef fc ff ff       	call   c01004e7 <stab_binsearch>
    if (lfile == 0)
c01007f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007fb:	85 c0                	test   %eax,%eax
c01007fd:	75 0a                	jne    c0100809 <debuginfo_eip+0x1cc>
        return -1;
c01007ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100804:	e9 67 02 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100809:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010080c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010080f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100812:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100815:	8b 45 08             	mov    0x8(%ebp),%eax
c0100818:	89 44 24 10          	mov    %eax,0x10(%esp)
c010081c:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100823:	00 
c0100824:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100827:	89 44 24 08          	mov    %eax,0x8(%esp)
c010082b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010082e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100835:	89 04 24             	mov    %eax,(%esp)
c0100838:	e8 aa fc ff ff       	call   c01004e7 <stab_binsearch>

    if (lfun <= rfun) {
c010083d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100840:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100843:	39 c2                	cmp    %eax,%edx
c0100845:	7f 7c                	jg     c01008c3 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100847:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010084a:	89 c2                	mov    %eax,%edx
c010084c:	89 d0                	mov    %edx,%eax
c010084e:	01 c0                	add    %eax,%eax
c0100850:	01 d0                	add    %edx,%eax
c0100852:	c1 e0 02             	shl    $0x2,%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010085a:	01 d0                	add    %edx,%eax
c010085c:	8b 10                	mov    (%eax),%edx
c010085e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100861:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100864:	29 c1                	sub    %eax,%ecx
c0100866:	89 c8                	mov    %ecx,%eax
c0100868:	39 c2                	cmp    %eax,%edx
c010086a:	73 22                	jae    c010088e <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010086c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010086f:	89 c2                	mov    %eax,%edx
c0100871:	89 d0                	mov    %edx,%eax
c0100873:	01 c0                	add    %eax,%eax
c0100875:	01 d0                	add    %edx,%eax
c0100877:	c1 e0 02             	shl    $0x2,%eax
c010087a:	89 c2                	mov    %eax,%edx
c010087c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010087f:	01 d0                	add    %edx,%eax
c0100881:	8b 10                	mov    (%eax),%edx
c0100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100886:	01 c2                	add    %eax,%edx
c0100888:	8b 45 0c             	mov    0xc(%ebp),%eax
c010088b:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c010088e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	89 d0                	mov    %edx,%eax
c0100895:	01 c0                	add    %eax,%eax
c0100897:	01 d0                	add    %edx,%eax
c0100899:	c1 e0 02             	shl    $0x2,%eax
c010089c:	89 c2                	mov    %eax,%edx
c010089e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a1:	01 d0                	add    %edx,%eax
c01008a3:	8b 50 08             	mov    0x8(%eax),%edx
c01008a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01008ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008af:	8b 40 10             	mov    0x10(%eax),%eax
c01008b2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01008b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01008bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008be:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01008c1:	eb 15                	jmp    c01008d8 <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01008c9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01008cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01008d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01008d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008db:	8b 40 08             	mov    0x8(%eax),%eax
c01008de:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01008e5:	00 
c01008e6:	89 04 24             	mov    %eax,(%esp)
c01008e9:	e8 ff 49 01 00       	call   c01152ed <strfind>
c01008ee:	89 c2                	mov    %eax,%edx
c01008f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008f3:	8b 40 08             	mov    0x8(%eax),%eax
c01008f6:	29 c2                	sub    %eax,%edx
c01008f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008fb:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0100901:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100905:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010090c:	00 
c010090d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100910:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100914:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100917:	89 44 24 04          	mov    %eax,0x4(%esp)
c010091b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091e:	89 04 24             	mov    %eax,(%esp)
c0100921:	e8 c1 fb ff ff       	call   c01004e7 <stab_binsearch>
    if (lline <= rline) {
c0100926:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100929:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010092c:	39 c2                	cmp    %eax,%edx
c010092e:	7f 24                	jg     c0100954 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100930:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100933:	89 c2                	mov    %eax,%edx
c0100935:	89 d0                	mov    %edx,%eax
c0100937:	01 c0                	add    %eax,%eax
c0100939:	01 d0                	add    %edx,%eax
c010093b:	c1 e0 02             	shl    $0x2,%eax
c010093e:	89 c2                	mov    %eax,%edx
c0100940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100943:	01 d0                	add    %edx,%eax
c0100945:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100949:	0f b7 d0             	movzwl %ax,%edx
c010094c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094f:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100952:	eb 13                	jmp    c0100967 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100954:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100959:	e9 12 01 00 00       	jmp    c0100a70 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010095e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100961:	83 e8 01             	sub    $0x1,%eax
c0100964:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100967:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010096a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010096d:	39 c2                	cmp    %eax,%edx
c010096f:	7c 56                	jl     c01009c7 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100971:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100974:	89 c2                	mov    %eax,%edx
c0100976:	89 d0                	mov    %edx,%eax
c0100978:	01 c0                	add    %eax,%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	c1 e0 02             	shl    $0x2,%eax
c010097f:	89 c2                	mov    %eax,%edx
c0100981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100984:	01 d0                	add    %edx,%eax
c0100986:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010098a:	3c 84                	cmp    $0x84,%al
c010098c:	74 39                	je     c01009c7 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c010098e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100991:	89 c2                	mov    %eax,%edx
c0100993:	89 d0                	mov    %edx,%eax
c0100995:	01 c0                	add    %eax,%eax
c0100997:	01 d0                	add    %edx,%eax
c0100999:	c1 e0 02             	shl    $0x2,%eax
c010099c:	89 c2                	mov    %eax,%edx
c010099e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a1:	01 d0                	add    %edx,%eax
c01009a3:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009a7:	3c 64                	cmp    $0x64,%al
c01009a9:	75 b3                	jne    c010095e <debuginfo_eip+0x321>
c01009ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ae:	89 c2                	mov    %eax,%edx
c01009b0:	89 d0                	mov    %edx,%eax
c01009b2:	01 c0                	add    %eax,%eax
c01009b4:	01 d0                	add    %edx,%eax
c01009b6:	c1 e0 02             	shl    $0x2,%eax
c01009b9:	89 c2                	mov    %eax,%edx
c01009bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009be:	01 d0                	add    %edx,%eax
c01009c0:	8b 40 08             	mov    0x8(%eax),%eax
c01009c3:	85 c0                	test   %eax,%eax
c01009c5:	74 97                	je     c010095e <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01009c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009cd:	39 c2                	cmp    %eax,%edx
c01009cf:	7c 46                	jl     c0100a17 <debuginfo_eip+0x3da>
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	89 c2                	mov    %eax,%edx
c01009d6:	89 d0                	mov    %edx,%eax
c01009d8:	01 c0                	add    %eax,%eax
c01009da:	01 d0                	add    %edx,%eax
c01009dc:	c1 e0 02             	shl    $0x2,%eax
c01009df:	89 c2                	mov    %eax,%edx
c01009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009e4:	01 d0                	add    %edx,%eax
c01009e6:	8b 10                	mov    (%eax),%edx
c01009e8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01009eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ee:	29 c1                	sub    %eax,%ecx
c01009f0:	89 c8                	mov    %ecx,%eax
c01009f2:	39 c2                	cmp    %eax,%edx
c01009f4:	73 21                	jae    c0100a17 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01009f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f9:	89 c2                	mov    %eax,%edx
c01009fb:	89 d0                	mov    %edx,%eax
c01009fd:	01 c0                	add    %eax,%eax
c01009ff:	01 d0                	add    %edx,%eax
c0100a01:	c1 e0 02             	shl    $0x2,%eax
c0100a04:	89 c2                	mov    %eax,%edx
c0100a06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a09:	01 d0                	add    %edx,%eax
c0100a0b:	8b 10                	mov    (%eax),%edx
c0100a0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a10:	01 c2                	add    %eax,%edx
c0100a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a15:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100a1d:	39 c2                	cmp    %eax,%edx
c0100a1f:	7d 4a                	jge    c0100a6b <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100a21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100a24:	83 c0 01             	add    $0x1,%eax
c0100a27:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100a2a:	eb 18                	jmp    c0100a44 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a2f:	8b 40 14             	mov    0x14(%eax),%eax
c0100a32:	8d 50 01             	lea    0x1(%eax),%edx
c0100a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a38:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100a3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a3e:	83 c0 01             	add    $0x1,%eax
c0100a41:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a44:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100a4a:	39 c2                	cmp    %eax,%edx
c0100a4c:	7d 1d                	jge    c0100a6b <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100a4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a51:	89 c2                	mov    %eax,%edx
c0100a53:	89 d0                	mov    %edx,%eax
c0100a55:	01 c0                	add    %eax,%eax
c0100a57:	01 d0                	add    %edx,%eax
c0100a59:	c1 e0 02             	shl    $0x2,%eax
c0100a5c:	89 c2                	mov    %eax,%edx
c0100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a61:	01 d0                	add    %edx,%eax
c0100a63:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a67:	3c a0                	cmp    $0xa0,%al
c0100a69:	74 c1                	je     c0100a2c <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a70:	c9                   	leave  
c0100a71:	c3                   	ret    

c0100a72 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a72:	55                   	push   %ebp
c0100a73:	89 e5                	mov    %esp,%ebp
c0100a75:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a78:	c7 04 24 d6 56 11 c0 	movl   $0xc01156d6,(%esp)
c0100a7f:	e8 e1 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a84:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c0100a8b:	c0 
c0100a8c:	c7 04 24 ef 56 11 c0 	movl   $0xc01156ef,(%esp)
c0100a93:	e8 cd f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a98:	c7 44 24 04 02 56 11 	movl   $0xc0115602,0x4(%esp)
c0100a9f:	c0 
c0100aa0:	c7 04 24 07 57 11 c0 	movl   $0xc0115707,(%esp)
c0100aa7:	e8 b9 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100aac:	c7 44 24 04 d0 ee 14 	movl   $0xc014eed0,0x4(%esp)
c0100ab3:	c0 
c0100ab4:	c7 04 24 1f 57 11 c0 	movl   $0xc011571f,(%esp)
c0100abb:	e8 a5 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c0100ac0:	c7 44 24 04 04 32 15 	movl   $0xc0153204,0x4(%esp)
c0100ac7:	c0 
c0100ac8:	c7 04 24 37 57 11 c0 	movl   $0xc0115737,(%esp)
c0100acf:	e8 91 f8 ff ff       	call   c0100365 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100ad4:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c0100ad9:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100adf:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c0100ae4:	29 c2                	sub    %eax,%edx
c0100ae6:	89 d0                	mov    %edx,%eax
c0100ae8:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100aee:	85 c0                	test   %eax,%eax
c0100af0:	0f 48 c2             	cmovs  %edx,%eax
c0100af3:	c1 f8 0a             	sar    $0xa,%eax
c0100af6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100afa:	c7 04 24 50 57 11 c0 	movl   $0xc0115750,(%esp)
c0100b01:	e8 5f f8 ff ff       	call   c0100365 <cprintf>
}
c0100b06:	c9                   	leave  
c0100b07:	c3                   	ret    

c0100b08 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b08:	55                   	push   %ebp
c0100b09:	89 e5                	mov    %esp,%ebp
c0100b0b:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b11:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b1b:	89 04 24             	mov    %eax,(%esp)
c0100b1e:	e8 1a fb ff ff       	call   c010063d <debuginfo_eip>
c0100b23:	85 c0                	test   %eax,%eax
c0100b25:	74 15                	je     c0100b3c <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100b27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2e:	c7 04 24 7a 57 11 c0 	movl   $0xc011577a,(%esp)
c0100b35:	e8 2b f8 ff ff       	call   c0100365 <cprintf>
c0100b3a:	eb 6d                	jmp    c0100ba9 <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100b43:	eb 1c                	jmp    c0100b61 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100b45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4b:	01 d0                	add    %edx,%eax
c0100b4d:	0f b6 00             	movzbl (%eax),%eax
c0100b50:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100b59:	01 ca                	add    %ecx,%edx
c0100b5b:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100b5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b64:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b67:	7f dc                	jg     c0100b45 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b69:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	01 d0                	add    %edx,%eax
c0100b74:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b77:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b7d:	89 d1                	mov    %edx,%ecx
c0100b7f:	29 c1                	sub    %eax,%ecx
c0100b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b84:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b87:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100b8b:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b91:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100b95:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100b99:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b9d:	c7 04 24 96 57 11 c0 	movl   $0xc0115796,(%esp)
c0100ba4:	e8 bc f7 ff ff       	call   c0100365 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ba9:	c9                   	leave  
c0100baa:	c3                   	ret    

c0100bab <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100bab:	55                   	push   %ebp
c0100bac:	89 e5                	mov    %esp,%ebp
c0100bae:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100bb1:	8b 45 04             	mov    0x4(%ebp),%eax
c0100bb4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100bb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100bba:	c9                   	leave  
c0100bbb:	c3                   	ret    

c0100bbc <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100bbc:	55                   	push   %ebp
c0100bbd:	89 e5                	mov    %esp,%ebp
c0100bbf:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100bc2:	89 e8                	mov    %ebp,%eax
c0100bc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100bc7:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100bca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100bcd:	e8 d9 ff ff ff       	call   c0100bab <read_eip>
c0100bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100bd5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100bdc:	e9 88 00 00 00       	jmp    c0100c69 <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100beb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bef:	c7 04 24 a8 57 11 c0 	movl   $0xc01157a8,(%esp)
c0100bf6:	e8 6a f7 ff ff       	call   c0100365 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100bfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfe:	83 c0 08             	add    $0x8,%eax
c0100c01:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100c04:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c0b:	eb 25                	jmp    c0100c32 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100c0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100c1a:	01 d0                	add    %edx,%eax
c0100c1c:	8b 00                	mov    (%eax),%eax
c0100c1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c22:	c7 04 24 c4 57 11 c0 	movl   $0xc01157c4,(%esp)
c0100c29:	e8 37 f7 ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100c2e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100c32:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100c36:	7e d5                	jle    c0100c0d <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100c38:	c7 04 24 cc 57 11 c0 	movl   $0xc01157cc,(%esp)
c0100c3f:	e8 21 f7 ff ff       	call   c0100365 <cprintf>
        print_debuginfo(eip - 1);
c0100c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c47:	83 e8 01             	sub    $0x1,%eax
c0100c4a:	89 04 24             	mov    %eax,(%esp)
c0100c4d:	e8 b6 fe ff ff       	call   c0100b08 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c55:	83 c0 04             	add    $0x4,%eax
c0100c58:	8b 00                	mov    (%eax),%eax
c0100c5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100c5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c60:	8b 00                	mov    (%eax),%eax
c0100c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100c65:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c6d:	74 0a                	je     c0100c79 <print_stackframe+0xbd>
c0100c6f:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c73:	0f 8e 68 ff ff ff    	jle    c0100be1 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100c79:	c9                   	leave  
c0100c7a:	c3                   	ret    

c0100c7b <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c7b:	55                   	push   %ebp
c0100c7c:	89 e5                	mov    %esp,%ebp
c0100c7e:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100c81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c88:	eb 0c                	jmp    c0100c96 <parse+0x1b>
            *buf ++ = '\0';
c0100c8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8d:	8d 50 01             	lea    0x1(%eax),%edx
c0100c90:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c93:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c96:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c99:	0f b6 00             	movzbl (%eax),%eax
c0100c9c:	84 c0                	test   %al,%al
c0100c9e:	74 1d                	je     c0100cbd <parse+0x42>
c0100ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca3:	0f b6 00             	movzbl (%eax),%eax
c0100ca6:	0f be c0             	movsbl %al,%eax
c0100ca9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cad:	c7 04 24 50 58 11 c0 	movl   $0xc0115850,(%esp)
c0100cb4:	e8 01 46 01 00       	call   c01152ba <strchr>
c0100cb9:	85 c0                	test   %eax,%eax
c0100cbb:	75 cd                	jne    c0100c8a <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100cbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc0:	0f b6 00             	movzbl (%eax),%eax
c0100cc3:	84 c0                	test   %al,%al
c0100cc5:	75 02                	jne    c0100cc9 <parse+0x4e>
            break;
c0100cc7:	eb 67                	jmp    c0100d30 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100cc9:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100ccd:	75 14                	jne    c0100ce3 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100ccf:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100cd6:	00 
c0100cd7:	c7 04 24 55 58 11 c0 	movl   $0xc0115855,(%esp)
c0100cde:	e8 82 f6 ff ff       	call   c0100365 <cprintf>
        }
        argv[argc ++] = buf;
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	8d 50 01             	lea    0x1(%eax),%edx
c0100ce9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cf6:	01 c2                	add    %eax,%edx
c0100cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cfb:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cfd:	eb 04                	jmp    c0100d03 <parse+0x88>
            buf ++;
c0100cff:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d06:	0f b6 00             	movzbl (%eax),%eax
c0100d09:	84 c0                	test   %al,%al
c0100d0b:	74 1d                	je     c0100d2a <parse+0xaf>
c0100d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d10:	0f b6 00             	movzbl (%eax),%eax
c0100d13:	0f be c0             	movsbl %al,%eax
c0100d16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d1a:	c7 04 24 50 58 11 c0 	movl   $0xc0115850,(%esp)
c0100d21:	e8 94 45 01 00       	call   c01152ba <strchr>
c0100d26:	85 c0                	test   %eax,%eax
c0100d28:	74 d5                	je     c0100cff <parse+0x84>
            buf ++;
        }
    }
c0100d2a:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2b:	e9 66 ff ff ff       	jmp    c0100c96 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100d33:	c9                   	leave  
c0100d34:	c3                   	ret    

c0100d35 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d35:	55                   	push   %ebp
c0100d36:	89 e5                	mov    %esp,%ebp
c0100d38:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d3b:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d42:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d45:	89 04 24             	mov    %eax,(%esp)
c0100d48:	e8 2e ff ff ff       	call   c0100c7b <parse>
c0100d4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d54:	75 0a                	jne    c0100d60 <runcmd+0x2b>
        return 0;
c0100d56:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d5b:	e9 85 00 00 00       	jmp    c0100de5 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d67:	eb 5c                	jmp    c0100dc5 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d69:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6f:	89 d0                	mov    %edx,%eax
c0100d71:	01 c0                	add    %eax,%eax
c0100d73:	01 d0                	add    %edx,%eax
c0100d75:	c1 e0 02             	shl    $0x2,%eax
c0100d78:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100d7d:	8b 00                	mov    (%eax),%eax
c0100d7f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100d83:	89 04 24             	mov    %eax,(%esp)
c0100d86:	e8 90 44 01 00       	call   c011521b <strcmp>
c0100d8b:	85 c0                	test   %eax,%eax
c0100d8d:	75 32                	jne    c0100dc1 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d92:	89 d0                	mov    %edx,%eax
c0100d94:	01 c0                	add    %eax,%eax
c0100d96:	01 d0                	add    %edx,%eax
c0100d98:	c1 e0 02             	shl    $0x2,%eax
c0100d9b:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100da0:	8b 40 08             	mov    0x8(%eax),%eax
c0100da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100da6:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100da9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100dac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100db0:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100db3:	83 c2 04             	add    $0x4,%edx
c0100db6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100dba:	89 0c 24             	mov    %ecx,(%esp)
c0100dbd:	ff d0                	call   *%eax
c0100dbf:	eb 24                	jmp    c0100de5 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dc1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100dc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dc8:	83 f8 02             	cmp    $0x2,%eax
c0100dcb:	76 9c                	jbe    c0100d69 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100dcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100dd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dd4:	c7 04 24 73 58 11 c0 	movl   $0xc0115873,(%esp)
c0100ddb:	e8 85 f5 ff ff       	call   c0100365 <cprintf>
    return 0;
c0100de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100de5:	c9                   	leave  
c0100de6:	c3                   	ret    

c0100de7 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100de7:	55                   	push   %ebp
c0100de8:	89 e5                	mov    %esp,%ebp
c0100dea:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ded:	c7 04 24 8c 58 11 c0 	movl   $0xc011588c,(%esp)
c0100df4:	e8 6c f5 ff ff       	call   c0100365 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100df9:	c7 04 24 b4 58 11 c0 	movl   $0xc01158b4,(%esp)
c0100e00:	e8 60 f5 ff ff       	call   c0100365 <cprintf>

    if (tf != NULL) {
c0100e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100e09:	74 0b                	je     c0100e16 <kmonitor+0x2f>
        print_trapframe(tf);
c0100e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e0e:	89 04 24             	mov    %eax,(%esp)
c0100e11:	e8 d2 16 00 00       	call   c01024e8 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100e16:	c7 04 24 d9 58 11 c0 	movl   $0xc01158d9,(%esp)
c0100e1d:	e8 32 f4 ff ff       	call   c0100254 <readline>
c0100e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100e25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e29:	74 18                	je     c0100e43 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e35:	89 04 24             	mov    %eax,(%esp)
c0100e38:	e8 f8 fe ff ff       	call   c0100d35 <runcmd>
c0100e3d:	85 c0                	test   %eax,%eax
c0100e3f:	79 02                	jns    c0100e43 <kmonitor+0x5c>
                break;
c0100e41:	eb 02                	jmp    c0100e45 <kmonitor+0x5e>
            }
        }
    }
c0100e43:	eb d1                	jmp    c0100e16 <kmonitor+0x2f>
}
c0100e45:	c9                   	leave  
c0100e46:	c3                   	ret    

c0100e47 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e47:	55                   	push   %ebp
c0100e48:	89 e5                	mov    %esp,%ebp
c0100e4a:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e54:	eb 3f                	jmp    c0100e95 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e56:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e59:	89 d0                	mov    %edx,%eax
c0100e5b:	01 c0                	add    %eax,%eax
c0100e5d:	01 d0                	add    %edx,%eax
c0100e5f:	c1 e0 02             	shl    $0x2,%eax
c0100e62:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e67:	8b 48 04             	mov    0x4(%eax),%ecx
c0100e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e6d:	89 d0                	mov    %edx,%eax
c0100e6f:	01 c0                	add    %eax,%eax
c0100e71:	01 d0                	add    %edx,%eax
c0100e73:	c1 e0 02             	shl    $0x2,%eax
c0100e76:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c0100e7b:	8b 00                	mov    (%eax),%eax
c0100e7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100e81:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e85:	c7 04 24 dd 58 11 c0 	movl   $0xc01158dd,(%esp)
c0100e8c:	e8 d4 f4 ff ff       	call   c0100365 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e91:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e98:	83 f8 02             	cmp    $0x2,%eax
c0100e9b:	76 b9                	jbe    c0100e56 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ea2:	c9                   	leave  
c0100ea3:	c3                   	ret    

c0100ea4 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100ea4:	55                   	push   %ebp
c0100ea5:	89 e5                	mov    %esp,%ebp
c0100ea7:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100eaa:	e8 c3 fb ff ff       	call   c0100a72 <print_kerninfo>
    return 0;
c0100eaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100eb4:	c9                   	leave  
c0100eb5:	c3                   	ret    

c0100eb6 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100eb6:	55                   	push   %ebp
c0100eb7:	89 e5                	mov    %esp,%ebp
c0100eb9:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100ebc:	e8 fb fc ff ff       	call   c0100bbc <print_stackframe>
    return 0;
c0100ec1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ec6:	c9                   	leave  
c0100ec7:	c3                   	ret    

c0100ec8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100ec8:	55                   	push   %ebp
c0100ec9:	89 e5                	mov    %esp,%ebp
c0100ecb:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100ece:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
c0100ed3:	85 c0                	test   %eax,%eax
c0100ed5:	74 02                	je     c0100ed9 <__panic+0x11>
        goto panic_dead;
c0100ed7:	eb 48                	jmp    c0100f21 <__panic+0x59>
    }
    is_panic = 1;
c0100ed9:	c7 05 00 f3 14 c0 01 	movl   $0x1,0xc014f300
c0100ee0:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100ee3:	8d 45 14             	lea    0x14(%ebp),%eax
c0100ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100eec:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ef0:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ef3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ef7:	c7 04 24 e6 58 11 c0 	movl   $0xc01158e6,(%esp)
c0100efe:	e8 62 f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f0a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f0d:	89 04 24             	mov    %eax,(%esp)
c0100f10:	e8 15 f4 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f15:	c7 04 24 02 59 11 c0 	movl   $0xc0115902,(%esp)
c0100f1c:	e8 44 f4 ff ff       	call   c0100365 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100f21:	e8 04 12 00 00       	call   c010212a <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100f26:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f2d:	e8 b5 fe ff ff       	call   c0100de7 <kmonitor>
    }
c0100f32:	eb f2                	jmp    c0100f26 <__panic+0x5e>

c0100f34 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100f34:	55                   	push   %ebp
c0100f35:	89 e5                	mov    %esp,%ebp
c0100f37:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100f3a:	8d 45 14             	lea    0x14(%ebp),%eax
c0100f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100f40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100f43:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f4a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f4e:	c7 04 24 04 59 11 c0 	movl   $0xc0115904,(%esp)
c0100f55:	e8 0b f4 ff ff       	call   c0100365 <cprintf>
    vcprintf(fmt, ap);
c0100f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100f61:	8b 45 10             	mov    0x10(%ebp),%eax
c0100f64:	89 04 24             	mov    %eax,(%esp)
c0100f67:	e8 be f3 ff ff       	call   c010032a <vcprintf>
    cprintf("\n");
c0100f6c:	c7 04 24 02 59 11 c0 	movl   $0xc0115902,(%esp)
c0100f73:	e8 ed f3 ff ff       	call   c0100365 <cprintf>
    va_end(ap);
}
c0100f78:	c9                   	leave  
c0100f79:	c3                   	ret    

c0100f7a <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100f7a:	55                   	push   %ebp
c0100f7b:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100f7d:	a1 00 f3 14 c0       	mov    0xc014f300,%eax
}
c0100f82:	5d                   	pop    %ebp
c0100f83:	c3                   	ret    

c0100f84 <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c0100f84:	55                   	push   %ebp
c0100f85:	89 e5                	mov    %esp,%ebp
    return ticks;
c0100f87:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c0100f8c:	5d                   	pop    %ebp
c0100f8d:	c3                   	ret    

c0100f8e <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100f8e:	55                   	push   %ebp
c0100f8f:	89 e5                	mov    %esp,%ebp
c0100f91:	83 ec 28             	sub    $0x28,%esp
c0100f94:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100f9a:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f9e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100fa2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fa6:	ee                   	out    %al,(%dx)
c0100fa7:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100fad:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100fb1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fb5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fb9:	ee                   	out    %al,(%dx)
c0100fba:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100fc0:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100fc4:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100fc8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100fcc:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100fcd:	c7 05 10 30 15 c0 00 	movl   $0x0,0xc0153010
c0100fd4:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100fd7:	c7 04 24 22 59 11 c0 	movl   $0xc0115922,(%esp)
c0100fde:	e8 82 f3 ff ff       	call   c0100365 <cprintf>
    pic_enable(IRQ_TIMER);
c0100fe3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100fea:	e8 99 11 00 00       	call   c0102188 <pic_enable>
}
c0100fef:	c9                   	leave  
c0100ff0:	c3                   	ret    

c0100ff1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ff1:	55                   	push   %ebp
c0100ff2:	89 e5                	mov    %esp,%ebp
c0100ff4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ff7:	9c                   	pushf  
c0100ff8:	58                   	pop    %eax
c0100ff9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100fff:	25 00 02 00 00       	and    $0x200,%eax
c0101004:	85 c0                	test   %eax,%eax
c0101006:	74 0c                	je     c0101014 <__intr_save+0x23>
        intr_disable();
c0101008:	e8 1d 11 00 00       	call   c010212a <intr_disable>
        return 1;
c010100d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101012:	eb 05                	jmp    c0101019 <__intr_save+0x28>
    }
    return 0;
c0101014:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101019:	c9                   	leave  
c010101a:	c3                   	ret    

c010101b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010101b:	55                   	push   %ebp
c010101c:	89 e5                	mov    %esp,%ebp
c010101e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101021:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101025:	74 05                	je     c010102c <__intr_restore+0x11>
        intr_enable();
c0101027:	e8 f8 10 00 00       	call   c0102124 <intr_enable>
    }
}
c010102c:	c9                   	leave  
c010102d:	c3                   	ret    

c010102e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010102e:	55                   	push   %ebp
c010102f:	89 e5                	mov    %esp,%ebp
c0101031:	83 ec 10             	sub    $0x10,%esp
c0101034:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010103e:	89 c2                	mov    %eax,%edx
c0101040:	ec                   	in     (%dx),%al
c0101041:	88 45 fd             	mov    %al,-0x3(%ebp)
c0101044:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010104a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010104e:	89 c2                	mov    %eax,%edx
c0101050:	ec                   	in     (%dx),%al
c0101051:	88 45 f9             	mov    %al,-0x7(%ebp)
c0101054:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c010105a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010105e:	89 c2                	mov    %eax,%edx
c0101060:	ec                   	in     (%dx),%al
c0101061:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101064:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c010106a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010106e:	89 c2                	mov    %eax,%edx
c0101070:	ec                   	in     (%dx),%al
c0101071:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101074:	c9                   	leave  
c0101075:	c3                   	ret    

c0101076 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101076:	55                   	push   %ebp
c0101077:	89 e5                	mov    %esp,%ebp
c0101079:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010107c:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0101083:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101086:	0f b7 00             	movzwl (%eax),%eax
c0101089:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c010108d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101090:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0101095:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101098:	0f b7 00             	movzwl (%eax),%eax
c010109b:	66 3d 5a a5          	cmp    $0xa55a,%ax
c010109f:	74 12                	je     c01010b3 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01010a1:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01010a8:	66 c7 05 26 f3 14 c0 	movw   $0x3b4,0xc014f326
c01010af:	b4 03 
c01010b1:	eb 13                	jmp    c01010c6 <cga_init+0x50>
    } else {
        *cp = was;
c01010b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01010b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01010ba:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01010bd:	66 c7 05 26 f3 14 c0 	movw   $0x3d4,0xc014f326
c01010c4:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01010c6:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010cd:	0f b7 c0             	movzwl %ax,%eax
c01010d0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01010d4:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d8:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c01010e1:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c01010e8:	83 c0 01             	add    $0x1,%eax
c01010eb:	0f b7 c0             	movzwl %ax,%eax
c01010ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f2:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c01010f6:	89 c2                	mov    %eax,%edx
c01010f8:	ec                   	in     (%dx),%al
c01010f9:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c01010fc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101100:	0f b6 c0             	movzbl %al,%eax
c0101103:	c1 e0 08             	shl    $0x8,%eax
c0101106:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101109:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101110:	0f b7 c0             	movzwl %ax,%eax
c0101113:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101117:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010111b:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010111f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101123:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101124:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010112b:	83 c0 01             	add    $0x1,%eax
c010112e:	0f b7 c0             	movzwl %ax,%eax
c0101131:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101135:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101139:	89 c2                	mov    %eax,%edx
c010113b:	ec                   	in     (%dx),%al
c010113c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c010113f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101143:	0f b6 c0             	movzbl %al,%eax
c0101146:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101149:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010114c:	a3 20 f3 14 c0       	mov    %eax,0xc014f320
    crt_pos = pos;
c0101151:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101154:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
}
c010115a:	c9                   	leave  
c010115b:	c3                   	ret    

c010115c <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010115c:	55                   	push   %ebp
c010115d:	89 e5                	mov    %esp,%ebp
c010115f:	83 ec 48             	sub    $0x48,%esp
c0101162:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101168:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010116c:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101170:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101174:	ee                   	out    %al,(%dx)
c0101175:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010117b:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c010117f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101183:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101187:	ee                   	out    %al,(%dx)
c0101188:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010118e:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101192:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101196:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010119a:	ee                   	out    %al,(%dx)
c010119b:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01011a1:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01011a5:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01011a9:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01011ad:	ee                   	out    %al,(%dx)
c01011ae:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01011b4:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01011b8:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01011bc:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01011c0:	ee                   	out    %al,(%dx)
c01011c1:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01011c7:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01011cb:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01011cf:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01011d3:	ee                   	out    %al,(%dx)
c01011d4:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01011da:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01011de:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01011e2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01011e6:	ee                   	out    %al,(%dx)
c01011e7:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01011ed:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01011f1:	89 c2                	mov    %eax,%edx
c01011f3:	ec                   	in     (%dx),%al
c01011f4:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01011f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01011fb:	3c ff                	cmp    $0xff,%al
c01011fd:	0f 95 c0             	setne  %al
c0101200:	0f b6 c0             	movzbl %al,%eax
c0101203:	a3 28 f3 14 c0       	mov    %eax,0xc014f328
c0101208:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010120e:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101212:	89 c2                	mov    %eax,%edx
c0101214:	ec                   	in     (%dx),%al
c0101215:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101218:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010121e:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101222:	89 c2                	mov    %eax,%edx
c0101224:	ec                   	in     (%dx),%al
c0101225:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101228:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c010122d:	85 c0                	test   %eax,%eax
c010122f:	74 0c                	je     c010123d <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101231:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101238:	e8 4b 0f 00 00       	call   c0102188 <pic_enable>
    }
}
c010123d:	c9                   	leave  
c010123e:	c3                   	ret    

c010123f <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010123f:	55                   	push   %ebp
c0101240:	89 e5                	mov    %esp,%ebp
c0101242:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101245:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010124c:	eb 09                	jmp    c0101257 <lpt_putc_sub+0x18>
        delay();
c010124e:	e8 db fd ff ff       	call   c010102e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101253:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101257:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010125d:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101261:	89 c2                	mov    %eax,%edx
c0101263:	ec                   	in     (%dx),%al
c0101264:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101267:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010126b:	84 c0                	test   %al,%al
c010126d:	78 09                	js     c0101278 <lpt_putc_sub+0x39>
c010126f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101276:	7e d6                	jle    c010124e <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101278:	8b 45 08             	mov    0x8(%ebp),%eax
c010127b:	0f b6 c0             	movzbl %al,%eax
c010127e:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101284:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101287:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010128b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010128f:	ee                   	out    %al,(%dx)
c0101290:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101296:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010129a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010129e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01012a2:	ee                   	out    %al,(%dx)
c01012a3:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01012a9:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01012ad:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01012b1:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01012b5:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01012b6:	c9                   	leave  
c01012b7:	c3                   	ret    

c01012b8 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01012b8:	55                   	push   %ebp
c01012b9:	89 e5                	mov    %esp,%ebp
c01012bb:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01012be:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01012c2:	74 0d                	je     c01012d1 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01012c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01012c7:	89 04 24             	mov    %eax,(%esp)
c01012ca:	e8 70 ff ff ff       	call   c010123f <lpt_putc_sub>
c01012cf:	eb 24                	jmp    c01012f5 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01012d1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012d8:	e8 62 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub(' ');
c01012dd:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01012e4:	e8 56 ff ff ff       	call   c010123f <lpt_putc_sub>
        lpt_putc_sub('\b');
c01012e9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01012f0:	e8 4a ff ff ff       	call   c010123f <lpt_putc_sub>
    }
}
c01012f5:	c9                   	leave  
c01012f6:	c3                   	ret    

c01012f7 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01012f7:	55                   	push   %ebp
c01012f8:	89 e5                	mov    %esp,%ebp
c01012fa:	53                   	push   %ebx
c01012fb:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01012fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0101301:	b0 00                	mov    $0x0,%al
c0101303:	85 c0                	test   %eax,%eax
c0101305:	75 07                	jne    c010130e <cga_putc+0x17>
        c |= 0x0700;
c0101307:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010130e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101311:	0f b6 c0             	movzbl %al,%eax
c0101314:	83 f8 0a             	cmp    $0xa,%eax
c0101317:	74 4c                	je     c0101365 <cga_putc+0x6e>
c0101319:	83 f8 0d             	cmp    $0xd,%eax
c010131c:	74 57                	je     c0101375 <cga_putc+0x7e>
c010131e:	83 f8 08             	cmp    $0x8,%eax
c0101321:	0f 85 88 00 00 00    	jne    c01013af <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101327:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010132e:	66 85 c0             	test   %ax,%ax
c0101331:	74 30                	je     c0101363 <cga_putc+0x6c>
            crt_pos --;
c0101333:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010133a:	83 e8 01             	sub    $0x1,%eax
c010133d:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101343:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101348:	0f b7 15 24 f3 14 c0 	movzwl 0xc014f324,%edx
c010134f:	0f b7 d2             	movzwl %dx,%edx
c0101352:	01 d2                	add    %edx,%edx
c0101354:	01 c2                	add    %eax,%edx
c0101356:	8b 45 08             	mov    0x8(%ebp),%eax
c0101359:	b0 00                	mov    $0x0,%al
c010135b:	83 c8 20             	or     $0x20,%eax
c010135e:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101361:	eb 72                	jmp    c01013d5 <cga_putc+0xde>
c0101363:	eb 70                	jmp    c01013d5 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101365:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010136c:	83 c0 50             	add    $0x50,%eax
c010136f:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101375:	0f b7 1d 24 f3 14 c0 	movzwl 0xc014f324,%ebx
c010137c:	0f b7 0d 24 f3 14 c0 	movzwl 0xc014f324,%ecx
c0101383:	0f b7 c1             	movzwl %cx,%eax
c0101386:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010138c:	c1 e8 10             	shr    $0x10,%eax
c010138f:	89 c2                	mov    %eax,%edx
c0101391:	66 c1 ea 06          	shr    $0x6,%dx
c0101395:	89 d0                	mov    %edx,%eax
c0101397:	c1 e0 02             	shl    $0x2,%eax
c010139a:	01 d0                	add    %edx,%eax
c010139c:	c1 e0 04             	shl    $0x4,%eax
c010139f:	29 c1                	sub    %eax,%ecx
c01013a1:	89 ca                	mov    %ecx,%edx
c01013a3:	89 d8                	mov    %ebx,%eax
c01013a5:	29 d0                	sub    %edx,%eax
c01013a7:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
        break;
c01013ad:	eb 26                	jmp    c01013d5 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01013af:	8b 0d 20 f3 14 c0    	mov    0xc014f320,%ecx
c01013b5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013bc:	8d 50 01             	lea    0x1(%eax),%edx
c01013bf:	66 89 15 24 f3 14 c0 	mov    %dx,0xc014f324
c01013c6:	0f b7 c0             	movzwl %ax,%eax
c01013c9:	01 c0                	add    %eax,%eax
c01013cb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01013ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01013d1:	66 89 02             	mov    %ax,(%edx)
        break;
c01013d4:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01013d5:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01013dc:	66 3d cf 07          	cmp    $0x7cf,%ax
c01013e0:	76 5b                	jbe    c010143d <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01013e2:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013e7:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01013ed:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c01013f2:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01013f9:	00 
c01013fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01013fe:	89 04 24             	mov    %eax,(%esp)
c0101401:	e8 b2 40 01 00       	call   c01154b8 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101406:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010140d:	eb 15                	jmp    c0101424 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c010140f:	a1 20 f3 14 c0       	mov    0xc014f320,%eax
c0101414:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101417:	01 d2                	add    %edx,%edx
c0101419:	01 d0                	add    %edx,%eax
c010141b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101420:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101424:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010142b:	7e e2                	jle    c010140f <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010142d:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c0101434:	83 e8 50             	sub    $0x50,%eax
c0101437:	66 a3 24 f3 14 c0    	mov    %ax,0xc014f324
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010143d:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c0101444:	0f b7 c0             	movzwl %ax,%eax
c0101447:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010144b:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c010144f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101453:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101457:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101458:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c010145f:	66 c1 e8 08          	shr    $0x8,%ax
c0101463:	0f b6 c0             	movzbl %al,%eax
c0101466:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c010146d:	83 c2 01             	add    $0x1,%edx
c0101470:	0f b7 d2             	movzwl %dx,%edx
c0101473:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101477:	88 45 ed             	mov    %al,-0x13(%ebp)
c010147a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010147e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101482:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101483:	0f b7 05 26 f3 14 c0 	movzwl 0xc014f326,%eax
c010148a:	0f b7 c0             	movzwl %ax,%eax
c010148d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101491:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101495:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101499:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010149d:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010149e:	0f b7 05 24 f3 14 c0 	movzwl 0xc014f324,%eax
c01014a5:	0f b6 c0             	movzbl %al,%eax
c01014a8:	0f b7 15 26 f3 14 c0 	movzwl 0xc014f326,%edx
c01014af:	83 c2 01             	add    $0x1,%edx
c01014b2:	0f b7 d2             	movzwl %dx,%edx
c01014b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01014b9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01014bc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01014c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01014c4:	ee                   	out    %al,(%dx)
}
c01014c5:	83 c4 34             	add    $0x34,%esp
c01014c8:	5b                   	pop    %ebx
c01014c9:	5d                   	pop    %ebp
c01014ca:	c3                   	ret    

c01014cb <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01014cb:	55                   	push   %ebp
c01014cc:	89 e5                	mov    %esp,%ebp
c01014ce:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014d1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01014d8:	eb 09                	jmp    c01014e3 <serial_putc_sub+0x18>
        delay();
c01014da:	e8 4f fb ff ff       	call   c010102e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01014df:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01014e3:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014ed:	89 c2                	mov    %eax,%edx
c01014ef:	ec                   	in     (%dx),%al
c01014f0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014f3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01014f7:	0f b6 c0             	movzbl %al,%eax
c01014fa:	83 e0 20             	and    $0x20,%eax
c01014fd:	85 c0                	test   %eax,%eax
c01014ff:	75 09                	jne    c010150a <serial_putc_sub+0x3f>
c0101501:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101508:	7e d0                	jle    c01014da <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010150a:	8b 45 08             	mov    0x8(%ebp),%eax
c010150d:	0f b6 c0             	movzbl %al,%eax
c0101510:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101516:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101519:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010151d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101521:	ee                   	out    %al,(%dx)
}
c0101522:	c9                   	leave  
c0101523:	c3                   	ret    

c0101524 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101524:	55                   	push   %ebp
c0101525:	89 e5                	mov    %esp,%ebp
c0101527:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010152a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010152e:	74 0d                	je     c010153d <serial_putc+0x19>
        serial_putc_sub(c);
c0101530:	8b 45 08             	mov    0x8(%ebp),%eax
c0101533:	89 04 24             	mov    %eax,(%esp)
c0101536:	e8 90 ff ff ff       	call   c01014cb <serial_putc_sub>
c010153b:	eb 24                	jmp    c0101561 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010153d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101544:	e8 82 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub(' ');
c0101549:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101550:	e8 76 ff ff ff       	call   c01014cb <serial_putc_sub>
        serial_putc_sub('\b');
c0101555:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010155c:	e8 6a ff ff ff       	call   c01014cb <serial_putc_sub>
    }
}
c0101561:	c9                   	leave  
c0101562:	c3                   	ret    

c0101563 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101563:	55                   	push   %ebp
c0101564:	89 e5                	mov    %esp,%ebp
c0101566:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101569:	eb 33                	jmp    c010159e <cons_intr+0x3b>
        if (c != 0) {
c010156b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010156f:	74 2d                	je     c010159e <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101571:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c0101576:	8d 50 01             	lea    0x1(%eax),%edx
c0101579:	89 15 44 f5 14 c0    	mov    %edx,0xc014f544
c010157f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101582:	88 90 40 f3 14 c0    	mov    %dl,-0x3feb0cc0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101588:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010158d:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101592:	75 0a                	jne    c010159e <cons_intr+0x3b>
                cons.wpos = 0;
c0101594:	c7 05 44 f5 14 c0 00 	movl   $0x0,0xc014f544
c010159b:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010159e:	8b 45 08             	mov    0x8(%ebp),%eax
c01015a1:	ff d0                	call   *%eax
c01015a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01015a6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01015aa:	75 bf                	jne    c010156b <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01015ac:	c9                   	leave  
c01015ad:	c3                   	ret    

c01015ae <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01015ae:	55                   	push   %ebp
c01015af:	89 e5                	mov    %esp,%ebp
c01015b1:	83 ec 10             	sub    $0x10,%esp
c01015b4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015ba:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01015be:	89 c2                	mov    %eax,%edx
c01015c0:	ec                   	in     (%dx),%al
c01015c1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01015c4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 07                	jne    c01015d9 <serial_proc_data+0x2b>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	eb 2a                	jmp    c0101603 <serial_proc_data+0x55>
c01015d9:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015df:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01015e3:	89 c2                	mov    %eax,%edx
c01015e5:	ec                   	in     (%dx),%al
c01015e6:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01015e9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01015ed:	0f b6 c0             	movzbl %al,%eax
c01015f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01015f3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01015f7:	75 07                	jne    c0101600 <serial_proc_data+0x52>
        c = '\b';
c01015f9:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101600:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101603:	c9                   	leave  
c0101604:	c3                   	ret    

c0101605 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101605:	55                   	push   %ebp
c0101606:	89 e5                	mov    %esp,%ebp
c0101608:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010160b:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c0101610:	85 c0                	test   %eax,%eax
c0101612:	74 0c                	je     c0101620 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101614:	c7 04 24 ae 15 10 c0 	movl   $0xc01015ae,(%esp)
c010161b:	e8 43 ff ff ff       	call   c0101563 <cons_intr>
    }
}
c0101620:	c9                   	leave  
c0101621:	c3                   	ret    

c0101622 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101622:	55                   	push   %ebp
c0101623:	89 e5                	mov    %esp,%ebp
c0101625:	83 ec 38             	sub    $0x38,%esp
c0101628:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010162e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101632:	89 c2                	mov    %eax,%edx
c0101634:	ec                   	in     (%dx),%al
c0101635:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101638:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010163c:	0f b6 c0             	movzbl %al,%eax
c010163f:	83 e0 01             	and    $0x1,%eax
c0101642:	85 c0                	test   %eax,%eax
c0101644:	75 0a                	jne    c0101650 <kbd_proc_data+0x2e>
        return -1;
c0101646:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010164b:	e9 59 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
c0101650:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101656:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010165a:	89 c2                	mov    %eax,%edx
c010165c:	ec                   	in     (%dx),%al
c010165d:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101660:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101664:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101667:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010166b:	75 17                	jne    c0101684 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010166d:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101672:	83 c8 40             	or     $0x40,%eax
c0101675:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c010167a:	b8 00 00 00 00       	mov    $0x0,%eax
c010167f:	e9 25 01 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	84 c0                	test   %al,%al
c010168a:	79 47                	jns    c01016d3 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010168c:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101691:	83 e0 40             	and    $0x40,%eax
c0101694:	85 c0                	test   %eax,%eax
c0101696:	75 09                	jne    c01016a1 <kbd_proc_data+0x7f>
c0101698:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010169c:	83 e0 7f             	and    $0x7f,%eax
c010169f:	eb 04                	jmp    c01016a5 <kbd_proc_data+0x83>
c01016a1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a5:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01016a8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016ac:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016b3:	83 c8 40             	or     $0x40,%eax
c01016b6:	0f b6 c0             	movzbl %al,%eax
c01016b9:	f7 d0                	not    %eax
c01016bb:	89 c2                	mov    %eax,%edx
c01016bd:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016c2:	21 d0                	and    %edx,%eax
c01016c4:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
        return 0;
c01016c9:	b8 00 00 00 00       	mov    $0x0,%eax
c01016ce:	e9 d6 00 00 00       	jmp    c01017a9 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01016d3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016d8:	83 e0 40             	and    $0x40,%eax
c01016db:	85 c0                	test   %eax,%eax
c01016dd:	74 11                	je     c01016f0 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01016df:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01016e3:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c01016e8:	83 e0 bf             	and    $0xffffffbf,%eax
c01016eb:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    }

    shift |= shiftcode[data];
c01016f0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016f4:	0f b6 80 60 e0 14 c0 	movzbl -0x3feb1fa0(%eax),%eax
c01016fb:	0f b6 d0             	movzbl %al,%edx
c01016fe:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101703:	09 d0                	or     %edx,%eax
c0101705:	a3 48 f5 14 c0       	mov    %eax,0xc014f548
    shift ^= togglecode[data];
c010170a:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010170e:	0f b6 80 60 e1 14 c0 	movzbl -0x3feb1ea0(%eax),%eax
c0101715:	0f b6 d0             	movzbl %al,%edx
c0101718:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c010171d:	31 d0                	xor    %edx,%eax
c010171f:	a3 48 f5 14 c0       	mov    %eax,0xc014f548

    c = charcode[shift & (CTL | SHIFT)][data];
c0101724:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101729:	83 e0 03             	and    $0x3,%eax
c010172c:	8b 14 85 60 e5 14 c0 	mov    -0x3feb1aa0(,%eax,4),%edx
c0101733:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101737:	01 d0                	add    %edx,%eax
c0101739:	0f b6 00             	movzbl (%eax),%eax
c010173c:	0f b6 c0             	movzbl %al,%eax
c010173f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101742:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101747:	83 e0 08             	and    $0x8,%eax
c010174a:	85 c0                	test   %eax,%eax
c010174c:	74 22                	je     c0101770 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010174e:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101752:	7e 0c                	jle    c0101760 <kbd_proc_data+0x13e>
c0101754:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101758:	7f 06                	jg     c0101760 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010175a:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010175e:	eb 10                	jmp    c0101770 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101760:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101764:	7e 0a                	jle    c0101770 <kbd_proc_data+0x14e>
c0101766:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010176a:	7f 04                	jg     c0101770 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010176c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101770:	a1 48 f5 14 c0       	mov    0xc014f548,%eax
c0101775:	f7 d0                	not    %eax
c0101777:	83 e0 06             	and    $0x6,%eax
c010177a:	85 c0                	test   %eax,%eax
c010177c:	75 28                	jne    c01017a6 <kbd_proc_data+0x184>
c010177e:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101785:	75 1f                	jne    c01017a6 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101787:	c7 04 24 3d 59 11 c0 	movl   $0xc011593d,(%esp)
c010178e:	e8 d2 eb ff ff       	call   c0100365 <cprintf>
c0101793:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c0101799:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010179d:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01017a1:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01017a5:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01017a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017a9:	c9                   	leave  
c01017aa:	c3                   	ret    

c01017ab <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01017ab:	55                   	push   %ebp
c01017ac:	89 e5                	mov    %esp,%ebp
c01017ae:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01017b1:	c7 04 24 22 16 10 c0 	movl   $0xc0101622,(%esp)
c01017b8:	e8 a6 fd ff ff       	call   c0101563 <cons_intr>
}
c01017bd:	c9                   	leave  
c01017be:	c3                   	ret    

c01017bf <kbd_init>:

static void
kbd_init(void) {
c01017bf:	55                   	push   %ebp
c01017c0:	89 e5                	mov    %esp,%ebp
c01017c2:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01017c5:	e8 e1 ff ff ff       	call   c01017ab <kbd_intr>
    pic_enable(IRQ_KBD);
c01017ca:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01017d1:	e8 b2 09 00 00       	call   c0102188 <pic_enable>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01017de:	e8 93 f8 ff ff       	call   c0101076 <cga_init>
    serial_init();
c01017e3:	e8 74 f9 ff ff       	call   c010115c <serial_init>
    kbd_init();
c01017e8:	e8 d2 ff ff ff       	call   c01017bf <kbd_init>
    if (!serial_exists) {
c01017ed:	a1 28 f3 14 c0       	mov    0xc014f328,%eax
c01017f2:	85 c0                	test   %eax,%eax
c01017f4:	75 0c                	jne    c0101802 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01017f6:	c7 04 24 49 59 11 c0 	movl   $0xc0115949,(%esp)
c01017fd:	e8 63 eb ff ff       	call   c0100365 <cprintf>
    }
}
c0101802:	c9                   	leave  
c0101803:	c3                   	ret    

c0101804 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101804:	55                   	push   %ebp
c0101805:	89 e5                	mov    %esp,%ebp
c0101807:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010180a:	e8 e2 f7 ff ff       	call   c0100ff1 <__intr_save>
c010180f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101812:	8b 45 08             	mov    0x8(%ebp),%eax
c0101815:	89 04 24             	mov    %eax,(%esp)
c0101818:	e8 9b fa ff ff       	call   c01012b8 <lpt_putc>
        cga_putc(c);
c010181d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101820:	89 04 24             	mov    %eax,(%esp)
c0101823:	e8 cf fa ff ff       	call   c01012f7 <cga_putc>
        serial_putc(c);
c0101828:	8b 45 08             	mov    0x8(%ebp),%eax
c010182b:	89 04 24             	mov    %eax,(%esp)
c010182e:	e8 f1 fc ff ff       	call   c0101524 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101833:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101836:	89 04 24             	mov    %eax,(%esp)
c0101839:	e8 dd f7 ff ff       	call   c010101b <__intr_restore>
}
c010183e:	c9                   	leave  
c010183f:	c3                   	ret    

c0101840 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101840:	55                   	push   %ebp
c0101841:	89 e5                	mov    %esp,%ebp
c0101843:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010184d:	e8 9f f7 ff ff       	call   c0100ff1 <__intr_save>
c0101852:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101855:	e8 ab fd ff ff       	call   c0101605 <serial_intr>
        kbd_intr();
c010185a:	e8 4c ff ff ff       	call   c01017ab <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c010185f:	8b 15 40 f5 14 c0    	mov    0xc014f540,%edx
c0101865:	a1 44 f5 14 c0       	mov    0xc014f544,%eax
c010186a:	39 c2                	cmp    %eax,%edx
c010186c:	74 31                	je     c010189f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010186e:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c0101873:	8d 50 01             	lea    0x1(%eax),%edx
c0101876:	89 15 40 f5 14 c0    	mov    %edx,0xc014f540
c010187c:	0f b6 80 40 f3 14 c0 	movzbl -0x3feb0cc0(%eax),%eax
c0101883:	0f b6 c0             	movzbl %al,%eax
c0101886:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101889:	a1 40 f5 14 c0       	mov    0xc014f540,%eax
c010188e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101893:	75 0a                	jne    c010189f <cons_getc+0x5f>
                cons.rpos = 0;
c0101895:	c7 05 40 f5 14 c0 00 	movl   $0x0,0xc014f540
c010189c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010189f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01018a2:	89 04 24             	mov    %eax,(%esp)
c01018a5:	e8 71 f7 ff ff       	call   c010101b <__intr_restore>
    return c;
c01018aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01018ad:	c9                   	leave  
c01018ae:	c3                   	ret    

c01018af <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	83 ec 14             	sub    $0x14,%esp
c01018b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01018b8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01018bc:	90                   	nop
c01018bd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01018c1:	83 c0 07             	add    $0x7,%eax
c01018c4:	0f b7 c0             	movzwl %ax,%eax
c01018c7:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018cb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01018cf:	89 c2                	mov    %eax,%edx
c01018d1:	ec                   	in     (%dx),%al
c01018d2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01018d5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01018d9:	0f b6 c0             	movzbl %al,%eax
c01018dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01018df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018e2:	25 80 00 00 00       	and    $0x80,%eax
c01018e7:	85 c0                	test   %eax,%eax
c01018e9:	75 d2                	jne    c01018bd <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01018eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01018ef:	74 11                	je     c0101902 <ide_wait_ready+0x53>
c01018f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018f4:	83 e0 21             	and    $0x21,%eax
c01018f7:	85 c0                	test   %eax,%eax
c01018f9:	74 07                	je     c0101902 <ide_wait_ready+0x53>
        return -1;
c01018fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101900:	eb 05                	jmp    c0101907 <ide_wait_ready+0x58>
    }
    return 0;
c0101902:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101907:	c9                   	leave  
c0101908:	c3                   	ret    

c0101909 <ide_init>:

void
ide_init(void) {
c0101909:	55                   	push   %ebp
c010190a:	89 e5                	mov    %esp,%ebp
c010190c:	57                   	push   %edi
c010190d:	53                   	push   %ebx
c010190e:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101914:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010191a:	e9 d6 02 00 00       	jmp    c0101bf5 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c010191f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101923:	c1 e0 03             	shl    $0x3,%eax
c0101926:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010192d:	29 c2                	sub    %eax,%edx
c010192f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101935:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101938:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010193c:	66 d1 e8             	shr    %ax
c010193f:	0f b7 c0             	movzwl %ax,%eax
c0101942:	0f b7 04 85 68 59 11 	movzwl -0x3feea698(,%eax,4),%eax
c0101949:	c0 
c010194a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010194e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101952:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101959:	00 
c010195a:	89 04 24             	mov    %eax,(%esp)
c010195d:	e8 4d ff ff ff       	call   c01018af <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101962:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101966:	83 e0 01             	and    $0x1,%eax
c0101969:	c1 e0 04             	shl    $0x4,%eax
c010196c:	83 c8 e0             	or     $0xffffffe0,%eax
c010196f:	0f b6 c0             	movzbl %al,%eax
c0101972:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101976:	83 c2 06             	add    $0x6,%edx
c0101979:	0f b7 d2             	movzwl %dx,%edx
c010197c:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101980:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101983:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101987:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010198b:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010198c:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101990:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101997:	00 
c0101998:	89 04 24             	mov    %eax,(%esp)
c010199b:	e8 0f ff ff ff       	call   c01018af <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01019a0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019a4:	83 c0 07             	add    $0x7,%eax
c01019a7:	0f b7 c0             	movzwl %ax,%eax
c01019aa:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01019ae:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01019b2:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01019b6:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01019ba:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01019bb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019bf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01019c6:	00 
c01019c7:	89 04 24             	mov    %eax,(%esp)
c01019ca:	e8 e0 fe ff ff       	call   c01018af <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01019cf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019d3:	83 c0 07             	add    $0x7,%eax
c01019d6:	0f b7 c0             	movzwl %ax,%eax
c01019d9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01019dd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01019e1:	89 c2                	mov    %eax,%edx
c01019e3:	ec                   	in     (%dx),%al
c01019e4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01019e7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01019eb:	84 c0                	test   %al,%al
c01019ed:	0f 84 f7 01 00 00    	je     c0101bea <ide_init+0x2e1>
c01019f3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019f7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019fe:	00 
c01019ff:	89 04 24             	mov    %eax,(%esp)
c0101a02:	e8 a8 fe ff ff       	call   c01018af <ide_wait_ready>
c0101a07:	85 c0                	test   %eax,%eax
c0101a09:	0f 85 db 01 00 00    	jne    c0101bea <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101a0f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a13:	c1 e0 03             	shl    $0x3,%eax
c0101a16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1d:	29 c2                	sub    %eax,%edx
c0101a1f:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101a25:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101a28:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101a2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101a2f:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a35:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101a38:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101a3f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101a42:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101a45:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101a48:	89 cb                	mov    %ecx,%ebx
c0101a4a:	89 df                	mov    %ebx,%edi
c0101a4c:	89 c1                	mov    %eax,%ecx
c0101a4e:	fc                   	cld    
c0101a4f:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a51:	89 c8                	mov    %ecx,%eax
c0101a53:	89 fb                	mov    %edi,%ebx
c0101a55:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101a58:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a5b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101a61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a67:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a70:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a73:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a78:	85 c0                	test   %eax,%eax
c0101a7a:	74 0e                	je     c0101a8a <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a7f:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a88:	eb 09                	jmp    c0101a93 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a8d:	8b 40 78             	mov    0x78(%eax),%eax
c0101a90:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a93:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a97:	c1 e0 03             	shl    $0x3,%eax
c0101a9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aa1:	29 c2                	sub    %eax,%edx
c0101aa3:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101aa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101aac:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101aaf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ab3:	c1 e0 03             	shl    $0x3,%eax
c0101ab6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101abd:	29 c2                	sub    %eax,%edx
c0101abf:	81 c2 60 f5 14 c0    	add    $0xc014f560,%edx
c0101ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101ac8:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101acb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101ace:	83 c0 62             	add    $0x62,%eax
c0101ad1:	0f b7 00             	movzwl (%eax),%eax
c0101ad4:	0f b7 c0             	movzwl %ax,%eax
c0101ad7:	25 00 02 00 00       	and    $0x200,%eax
c0101adc:	85 c0                	test   %eax,%eax
c0101ade:	75 24                	jne    c0101b04 <ide_init+0x1fb>
c0101ae0:	c7 44 24 0c 70 59 11 	movl   $0xc0115970,0xc(%esp)
c0101ae7:	c0 
c0101ae8:	c7 44 24 08 b3 59 11 	movl   $0xc01159b3,0x8(%esp)
c0101aef:	c0 
c0101af0:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101af7:	00 
c0101af8:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0101aff:	e8 c4 f3 ff ff       	call   c0100ec8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101b04:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b08:	c1 e0 03             	shl    $0x3,%eax
c0101b0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b12:	29 c2                	sub    %eax,%edx
c0101b14:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101b1a:	83 c0 0c             	add    $0xc,%eax
c0101b1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101b20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101b23:	83 c0 36             	add    $0x36,%eax
c0101b26:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101b29:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101b30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101b37:	eb 34                	jmp    c0101b6d <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b3f:	01 c2                	add    %eax,%edx
c0101b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b44:	8d 48 01             	lea    0x1(%eax),%ecx
c0101b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101b4a:	01 c8                	add    %ecx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	88 02                	mov    %al,(%edx)
c0101b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b54:	8d 50 01             	lea    0x1(%eax),%edx
c0101b57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b5a:	01 c2                	add    %eax,%edx
c0101b5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b5f:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101b62:	01 c8                	add    %ecx,%eax
c0101b64:	0f b6 00             	movzbl (%eax),%eax
c0101b67:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b69:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101b6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b70:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101b73:	72 c4                	jb     c0101b39 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b78:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b7b:	01 d0                	add    %edx,%eax
c0101b7d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b83:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b86:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b89:	85 c0                	test   %eax,%eax
c0101b8b:	74 0f                	je     c0101b9c <ide_init+0x293>
c0101b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b90:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b93:	01 d0                	add    %edx,%eax
c0101b95:	0f b6 00             	movzbl (%eax),%eax
c0101b98:	3c 20                	cmp    $0x20,%al
c0101b9a:	74 d9                	je     c0101b75 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ba0:	c1 e0 03             	shl    $0x3,%eax
c0101ba3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101baa:	29 c2                	sub    %eax,%edx
c0101bac:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bb2:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101bb5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bb9:	c1 e0 03             	shl    $0x3,%eax
c0101bbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bc3:	29 c2                	sub    %eax,%edx
c0101bc5:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101bcb:	8b 50 08             	mov    0x8(%eax),%edx
c0101bce:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bd2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101bd6:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101bda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101bde:	c7 04 24 da 59 11 c0 	movl   $0xc01159da,(%esp)
c0101be5:	e8 7b e7 ff ff       	call   c0100365 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101bea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101bee:	83 c0 01             	add    $0x1,%eax
c0101bf1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101bf5:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101bfa:	0f 86 1f fd ff ff    	jbe    c010191f <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101c00:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101c07:	e8 7c 05 00 00       	call   c0102188 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101c0c:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101c13:	e8 70 05 00 00       	call   c0102188 <pic_enable>
}
c0101c18:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101c1e:	5b                   	pop    %ebx
c0101c1f:	5f                   	pop    %edi
c0101c20:	5d                   	pop    %ebp
c0101c21:	c3                   	ret    

c0101c22 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101c22:	55                   	push   %ebp
c0101c23:	89 e5                	mov    %esp,%ebp
c0101c25:	83 ec 04             	sub    $0x4,%esp
c0101c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101c2f:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101c34:	77 24                	ja     c0101c5a <ide_device_valid+0x38>
c0101c36:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c3a:	c1 e0 03             	shl    $0x3,%eax
c0101c3d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c44:	29 c2                	sub    %eax,%edx
c0101c46:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c4c:	0f b6 00             	movzbl (%eax),%eax
c0101c4f:	84 c0                	test   %al,%al
c0101c51:	74 07                	je     c0101c5a <ide_device_valid+0x38>
c0101c53:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c58:	eb 05                	jmp    c0101c5f <ide_device_valid+0x3d>
c0101c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c5f:	c9                   	leave  
c0101c60:	c3                   	ret    

c0101c61 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c61:	55                   	push   %ebp
c0101c62:	89 e5                	mov    %esp,%ebp
c0101c64:	83 ec 08             	sub    $0x8,%esp
c0101c67:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c6a:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c6e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c72:	89 04 24             	mov    %eax,(%esp)
c0101c75:	e8 a8 ff ff ff       	call   c0101c22 <ide_device_valid>
c0101c7a:	85 c0                	test   %eax,%eax
c0101c7c:	74 1b                	je     c0101c99 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c7e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c82:	c1 e0 03             	shl    $0x3,%eax
c0101c85:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c8c:	29 c2                	sub    %eax,%edx
c0101c8e:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101c94:	8b 40 08             	mov    0x8(%eax),%eax
c0101c97:	eb 05                	jmp    c0101c9e <ide_device_size+0x3d>
    }
    return 0;
c0101c99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c9e:	c9                   	leave  
c0101c9f:	c3                   	ret    

c0101ca0 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ca0:	55                   	push   %ebp
c0101ca1:	89 e5                	mov    %esp,%ebp
c0101ca3:	57                   	push   %edi
c0101ca4:	53                   	push   %ebx
c0101ca5:	83 ec 50             	sub    $0x50,%esp
c0101ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cab:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101caf:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101cb6:	77 24                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cb8:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101cbd:	77 1d                	ja     c0101cdc <ide_read_secs+0x3c>
c0101cbf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cc3:	c1 e0 03             	shl    $0x3,%eax
c0101cc6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ccd:	29 c2                	sub    %eax,%edx
c0101ccf:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101cd5:	0f b6 00             	movzbl (%eax),%eax
c0101cd8:	84 c0                	test   %al,%al
c0101cda:	75 24                	jne    c0101d00 <ide_read_secs+0x60>
c0101cdc:	c7 44 24 0c f8 59 11 	movl   $0xc01159f8,0xc(%esp)
c0101ce3:	c0 
c0101ce4:	c7 44 24 08 b3 59 11 	movl   $0xc01159b3,0x8(%esp)
c0101ceb:	c0 
c0101cec:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101cf3:	00 
c0101cf4:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0101cfb:	e8 c8 f1 ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101d00:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101d07:	77 0f                	ja     c0101d18 <ide_read_secs+0x78>
c0101d09:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101d0f:	01 d0                	add    %edx,%eax
c0101d11:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101d16:	76 24                	jbe    c0101d3c <ide_read_secs+0x9c>
c0101d18:	c7 44 24 0c 20 5a 11 	movl   $0xc0115a20,0xc(%esp)
c0101d1f:	c0 
c0101d20:	c7 44 24 08 b3 59 11 	movl   $0xc01159b3,0x8(%esp)
c0101d27:	c0 
c0101d28:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101d2f:	00 
c0101d30:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0101d37:	e8 8c f1 ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101d3c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d40:	66 d1 e8             	shr    %ax
c0101d43:	0f b7 c0             	movzwl %ax,%eax
c0101d46:	0f b7 04 85 68 59 11 	movzwl -0x3feea698(,%eax,4),%eax
c0101d4d:	c0 
c0101d4e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101d52:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d56:	66 d1 e8             	shr    %ax
c0101d59:	0f b7 c0             	movzwl %ax,%eax
c0101d5c:	0f b7 04 85 6a 59 11 	movzwl -0x3feea696(,%eax,4),%eax
c0101d63:	c0 
c0101d64:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101d68:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d73:	00 
c0101d74:	89 04 24             	mov    %eax,(%esp)
c0101d77:	e8 33 fb ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d7c:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d80:	83 c0 02             	add    $0x2,%eax
c0101d83:	0f b7 c0             	movzwl %ax,%eax
c0101d86:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101d8a:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d8e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101d92:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101d96:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d97:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d9a:	0f b6 c0             	movzbl %al,%eax
c0101d9d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101da1:	83 c2 02             	add    $0x2,%edx
c0101da4:	0f b7 d2             	movzwl %dx,%edx
c0101da7:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dab:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101dae:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101db2:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101db6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dba:	0f b6 c0             	movzbl %al,%eax
c0101dbd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101dc1:	83 c2 03             	add    $0x3,%edx
c0101dc4:	0f b7 d2             	movzwl %dx,%edx
c0101dc7:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101dcb:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101dce:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101dd2:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101dd6:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dda:	c1 e8 08             	shr    $0x8,%eax
c0101ddd:	0f b6 c0             	movzbl %al,%eax
c0101de0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101de4:	83 c2 04             	add    $0x4,%edx
c0101de7:	0f b7 d2             	movzwl %dx,%edx
c0101dea:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101dee:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101df1:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101df5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101dfd:	c1 e8 10             	shr    $0x10,%eax
c0101e00:	0f b6 c0             	movzbl %al,%eax
c0101e03:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e07:	83 c2 05             	add    $0x5,%edx
c0101e0a:	0f b7 d2             	movzwl %dx,%edx
c0101e0d:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101e11:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101e14:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101e18:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101e1c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101e1d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e21:	83 e0 01             	and    $0x1,%eax
c0101e24:	c1 e0 04             	shl    $0x4,%eax
c0101e27:	89 c2                	mov    %eax,%edx
c0101e29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101e2c:	c1 e8 18             	shr    $0x18,%eax
c0101e2f:	83 e0 0f             	and    $0xf,%eax
c0101e32:	09 d0                	or     %edx,%eax
c0101e34:	83 c8 e0             	or     $0xffffffe0,%eax
c0101e37:	0f b6 c0             	movzbl %al,%eax
c0101e3a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101e3e:	83 c2 06             	add    $0x6,%edx
c0101e41:	0f b7 d2             	movzwl %dx,%edx
c0101e44:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101e48:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101e4b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101e4f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101e53:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e54:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e58:	83 c0 07             	add    $0x7,%eax
c0101e5b:	0f b7 c0             	movzwl %ax,%eax
c0101e5e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101e62:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101e66:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101e6a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101e6e:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e76:	eb 5a                	jmp    c0101ed2 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e78:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e7c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e83:	00 
c0101e84:	89 04 24             	mov    %eax,(%esp)
c0101e87:	e8 23 fa ff ff       	call   c01018af <ide_wait_ready>
c0101e8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e93:	74 02                	je     c0101e97 <ide_read_secs+0x1f7>
            goto out;
c0101e95:	eb 41                	jmp    c0101ed8 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101ea1:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ea4:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101eab:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101eae:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101eb1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101eb4:	89 cb                	mov    %ecx,%ebx
c0101eb6:	89 df                	mov    %ebx,%edi
c0101eb8:	89 c1                	mov    %eax,%ecx
c0101eba:	fc                   	cld    
c0101ebb:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101ebd:	89 c8                	mov    %ecx,%eax
c0101ebf:	89 fb                	mov    %edi,%ebx
c0101ec1:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101ec4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101ec7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101ecb:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101ed2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101ed6:	75 a0                	jne    c0101e78 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101edb:	83 c4 50             	add    $0x50,%esp
c0101ede:	5b                   	pop    %ebx
c0101edf:	5f                   	pop    %edi
c0101ee0:	5d                   	pop    %ebp
c0101ee1:	c3                   	ret    

c0101ee2 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101ee2:	55                   	push   %ebp
c0101ee3:	89 e5                	mov    %esp,%ebp
c0101ee5:	56                   	push   %esi
c0101ee6:	53                   	push   %ebx
c0101ee7:	83 ec 50             	sub    $0x50,%esp
c0101eea:	8b 45 08             	mov    0x8(%ebp),%eax
c0101eed:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ef1:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101ef8:	77 24                	ja     c0101f1e <ide_write_secs+0x3c>
c0101efa:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101eff:	77 1d                	ja     c0101f1e <ide_write_secs+0x3c>
c0101f01:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f05:	c1 e0 03             	shl    $0x3,%eax
c0101f08:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101f0f:	29 c2                	sub    %eax,%edx
c0101f11:	8d 82 60 f5 14 c0    	lea    -0x3feb0aa0(%edx),%eax
c0101f17:	0f b6 00             	movzbl (%eax),%eax
c0101f1a:	84 c0                	test   %al,%al
c0101f1c:	75 24                	jne    c0101f42 <ide_write_secs+0x60>
c0101f1e:	c7 44 24 0c f8 59 11 	movl   $0xc01159f8,0xc(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 08 b3 59 11 	movl   $0xc01159b3,0x8(%esp)
c0101f2d:	c0 
c0101f2e:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101f35:	00 
c0101f36:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0101f3d:	e8 86 ef ff ff       	call   c0100ec8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101f42:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f49:	77 0f                	ja     c0101f5a <ide_write_secs+0x78>
c0101f4b:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f51:	01 d0                	add    %edx,%eax
c0101f53:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f58:	76 24                	jbe    c0101f7e <ide_write_secs+0x9c>
c0101f5a:	c7 44 24 0c 20 5a 11 	movl   $0xc0115a20,0xc(%esp)
c0101f61:	c0 
c0101f62:	c7 44 24 08 b3 59 11 	movl   $0xc01159b3,0x8(%esp)
c0101f69:	c0 
c0101f6a:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f71:	00 
c0101f72:	c7 04 24 c8 59 11 c0 	movl   $0xc01159c8,(%esp)
c0101f79:	e8 4a ef ff ff       	call   c0100ec8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f7e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f82:	66 d1 e8             	shr    %ax
c0101f85:	0f b7 c0             	movzwl %ax,%eax
c0101f88:	0f b7 04 85 68 59 11 	movzwl -0x3feea698(,%eax,4),%eax
c0101f8f:	c0 
c0101f90:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f94:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f98:	66 d1 e8             	shr    %ax
c0101f9b:	0f b7 c0             	movzwl %ax,%eax
c0101f9e:	0f b7 04 85 6a 59 11 	movzwl -0x3feea696(,%eax,4),%eax
c0101fa5:	c0 
c0101fa6:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101faa:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101fb5:	00 
c0101fb6:	89 04 24             	mov    %eax,(%esp)
c0101fb9:	e8 f1 f8 ff ff       	call   c01018af <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101fbe:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101fc2:	83 c0 02             	add    $0x2,%eax
c0101fc5:	0f b7 c0             	movzwl %ax,%eax
c0101fc8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101fcc:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fd0:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101fd4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fd8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101fd9:	8b 45 14             	mov    0x14(%ebp),%eax
c0101fdc:	0f b6 c0             	movzbl %al,%eax
c0101fdf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe3:	83 c2 02             	add    $0x2,%edx
c0101fe6:	0f b7 d2             	movzwl %dx,%edx
c0101fe9:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fed:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ff0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ff4:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ff8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101ff9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffc:	0f b6 c0             	movzbl %al,%eax
c0101fff:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102003:	83 c2 03             	add    $0x3,%edx
c0102006:	0f b7 d2             	movzwl %dx,%edx
c0102009:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010200d:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0102010:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102014:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102018:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0102019:	8b 45 0c             	mov    0xc(%ebp),%eax
c010201c:	c1 e8 08             	shr    $0x8,%eax
c010201f:	0f b6 c0             	movzbl %al,%eax
c0102022:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102026:	83 c2 04             	add    $0x4,%edx
c0102029:	0f b7 d2             	movzwl %dx,%edx
c010202c:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0102030:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0102033:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102037:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010203b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010203f:	c1 e8 10             	shr    $0x10,%eax
c0102042:	0f b6 c0             	movzbl %al,%eax
c0102045:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102049:	83 c2 05             	add    $0x5,%edx
c010204c:	0f b7 d2             	movzwl %dx,%edx
c010204f:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0102053:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102056:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010205a:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010205e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010205f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0102063:	83 e0 01             	and    $0x1,%eax
c0102066:	c1 e0 04             	shl    $0x4,%eax
c0102069:	89 c2                	mov    %eax,%edx
c010206b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010206e:	c1 e8 18             	shr    $0x18,%eax
c0102071:	83 e0 0f             	and    $0xf,%eax
c0102074:	09 d0                	or     %edx,%eax
c0102076:	83 c8 e0             	or     $0xffffffe0,%eax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102080:	83 c2 06             	add    $0x6,%edx
c0102083:	0f b7 d2             	movzwl %dx,%edx
c0102086:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c010208a:	88 45 d9             	mov    %al,-0x27(%ebp)
c010208d:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102091:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102096:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010209a:	83 c0 07             	add    $0x7,%eax
c010209d:	0f b7 c0             	movzwl %ax,%eax
c01020a0:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c01020a4:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c01020a8:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01020ac:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01020b0:	ee                   	out    %al,(%dx)

    int ret = 0;
c01020b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020b8:	eb 5a                	jmp    c0102114 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c01020ba:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020be:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01020c5:	00 
c01020c6:	89 04 24             	mov    %eax,(%esp)
c01020c9:	e8 e1 f7 ff ff       	call   c01018af <ide_wait_ready>
c01020ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01020d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01020d5:	74 02                	je     c01020d9 <ide_write_secs+0x1f7>
            goto out;
c01020d7:	eb 41                	jmp    c010211a <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c01020d9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01020dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01020e0:	8b 45 10             	mov    0x10(%ebp),%eax
c01020e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020e6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01020f0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01020f6:	89 cb                	mov    %ecx,%ebx
c01020f8:	89 de                	mov    %ebx,%esi
c01020fa:	89 c1                	mov    %eax,%ecx
c01020fc:	fc                   	cld    
c01020fd:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020ff:	89 c8                	mov    %ecx,%eax
c0102101:	89 f3                	mov    %esi,%ebx
c0102103:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102106:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102109:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010210d:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102114:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102118:	75 a0                	jne    c01020ba <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010211a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010211d:	83 c4 50             	add    $0x50,%esp
c0102120:	5b                   	pop    %ebx
c0102121:	5e                   	pop    %esi
c0102122:	5d                   	pop    %ebp
c0102123:	c3                   	ret    

c0102124 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102124:	55                   	push   %ebp
c0102125:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102127:	fb                   	sti    
    sti();
}
c0102128:	5d                   	pop    %ebp
c0102129:	c3                   	ret    

c010212a <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010212a:	55                   	push   %ebp
c010212b:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010212d:	fa                   	cli    
    cli();
}
c010212e:	5d                   	pop    %ebp
c010212f:	c3                   	ret    

c0102130 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102130:	55                   	push   %ebp
c0102131:	89 e5                	mov    %esp,%ebp
c0102133:	83 ec 14             	sub    $0x14,%esp
c0102136:	8b 45 08             	mov    0x8(%ebp),%eax
c0102139:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010213d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102141:	66 a3 70 e5 14 c0    	mov    %ax,0xc014e570
    if (did_init) {
c0102147:	a1 40 f6 14 c0       	mov    0xc014f640,%eax
c010214c:	85 c0                	test   %eax,%eax
c010214e:	74 36                	je     c0102186 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102150:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102154:	0f b6 c0             	movzbl %al,%eax
c0102157:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010215d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102160:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102164:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102168:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102169:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010216d:	66 c1 e8 08          	shr    $0x8,%ax
c0102171:	0f b6 c0             	movzbl %al,%eax
c0102174:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010217a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010217d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102181:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102185:	ee                   	out    %al,(%dx)
    }
}
c0102186:	c9                   	leave  
c0102187:	c3                   	ret    

c0102188 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102188:	55                   	push   %ebp
c0102189:	89 e5                	mov    %esp,%ebp
c010218b:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010218e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102191:	ba 01 00 00 00       	mov    $0x1,%edx
c0102196:	89 c1                	mov    %eax,%ecx
c0102198:	d3 e2                	shl    %cl,%edx
c010219a:	89 d0                	mov    %edx,%eax
c010219c:	f7 d0                	not    %eax
c010219e:	89 c2                	mov    %eax,%edx
c01021a0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01021a7:	21 d0                	and    %edx,%eax
c01021a9:	0f b7 c0             	movzwl %ax,%eax
c01021ac:	89 04 24             	mov    %eax,(%esp)
c01021af:	e8 7c ff ff ff       	call   c0102130 <pic_setmask>
}
c01021b4:	c9                   	leave  
c01021b5:	c3                   	ret    

c01021b6 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01021b6:	55                   	push   %ebp
c01021b7:	89 e5                	mov    %esp,%ebp
c01021b9:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01021bc:	c7 05 40 f6 14 c0 01 	movl   $0x1,0xc014f640
c01021c3:	00 00 00 
c01021c6:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01021cc:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01021d0:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01021d4:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021df:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021e3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021e7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021f2:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021f6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021fa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102205:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102209:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010220d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102218:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010221c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102220:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010222b:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c010222f:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102233:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010223e:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102242:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102246:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102251:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102255:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102259:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102264:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102268:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010226c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102277:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010227b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010227f:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010228a:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010228e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102292:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
c0102297:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010229d:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01022a1:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01022a5:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01022a9:	ee                   	out    %al,(%dx)
c01022aa:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01022b0:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01022b4:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01022b8:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01022bc:	ee                   	out    %al,(%dx)
c01022bd:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01022c3:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01022c7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01022cb:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01022cf:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01022d0:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022d7:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022db:	74 12                	je     c01022ef <pic_init+0x139>
        pic_setmask(irq_mask);
c01022dd:	0f b7 05 70 e5 14 c0 	movzwl 0xc014e570,%eax
c01022e4:	0f b7 c0             	movzwl %ax,%eax
c01022e7:	89 04 24             	mov    %eax,(%esp)
c01022ea:	e8 41 fe ff ff       	call   c0102130 <pic_setmask>
    }
}
c01022ef:	c9                   	leave  
c01022f0:	c3                   	ret    

c01022f1 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022f1:	55                   	push   %ebp
c01022f2:	89 e5                	mov    %esp,%ebp
c01022f4:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022f7:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022fe:	00 
c01022ff:	c7 04 24 60 5a 11 c0 	movl   $0xc0115a60,(%esp)
c0102306:	e8 5a e0 ff ff       	call   c0100365 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010230b:	c7 04 24 6a 5a 11 c0 	movl   $0xc0115a6a,(%esp)
c0102312:	e8 4e e0 ff ff       	call   c0100365 <cprintf>
    panic("EOT: kernel seems ok.");
c0102317:	c7 44 24 08 78 5a 11 	movl   $0xc0115a78,0x8(%esp)
c010231e:	c0 
c010231f:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102326:	00 
c0102327:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c010232e:	e8 95 eb ff ff       	call   c0100ec8 <__panic>

c0102333 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102333:	55                   	push   %ebp
c0102334:	89 e5                	mov    %esp,%ebp
c0102336:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102339:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102340:	e9 c3 00 00 00       	jmp    c0102408 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102345:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102348:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c010234f:	89 c2                	mov    %eax,%edx
c0102351:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102354:	66 89 14 c5 60 f6 14 	mov    %dx,-0x3feb09a0(,%eax,8)
c010235b:	c0 
c010235c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235f:	66 c7 04 c5 62 f6 14 	movw   $0x8,-0x3feb099e(,%eax,8)
c0102366:	c0 08 00 
c0102369:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010236c:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102373:	c0 
c0102374:	83 e2 e0             	and    $0xffffffe0,%edx
c0102377:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c010237e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102381:	0f b6 14 c5 64 f6 14 	movzbl -0x3feb099c(,%eax,8),%edx
c0102388:	c0 
c0102389:	83 e2 1f             	and    $0x1f,%edx
c010238c:	88 14 c5 64 f6 14 c0 	mov    %dl,-0x3feb099c(,%eax,8)
c0102393:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102396:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c010239d:	c0 
c010239e:	83 e2 f0             	and    $0xfffffff0,%edx
c01023a1:	83 ca 0e             	or     $0xe,%edx
c01023a4:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ae:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023b5:	c0 
c01023b6:	83 e2 ef             	and    $0xffffffef,%edx
c01023b9:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c3:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023ca:	c0 
c01023cb:	83 e2 9f             	and    $0xffffff9f,%edx
c01023ce:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023d8:	0f b6 14 c5 65 f6 14 	movzbl -0x3feb099b(,%eax,8),%edx
c01023df:	c0 
c01023e0:	83 ca 80             	or     $0xffffff80,%edx
c01023e3:	88 14 c5 65 f6 14 c0 	mov    %dl,-0x3feb099b(,%eax,8)
c01023ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023ed:	8b 04 85 00 e6 14 c0 	mov    -0x3feb1a00(,%eax,4),%eax
c01023f4:	c1 e8 10             	shr    $0x10,%eax
c01023f7:	89 c2                	mov    %eax,%edx
c01023f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023fc:	66 89 14 c5 66 f6 14 	mov    %dx,-0x3feb099a(,%eax,8)
c0102403:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102404:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102408:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010240b:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102410:	0f 86 2f ff ff ff    	jbe    c0102345 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102416:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c010241b:	66 a3 60 fa 14 c0    	mov    %ax,0xc014fa60
c0102421:	66 c7 05 62 fa 14 c0 	movw   $0x8,0xc014fa62
c0102428:	08 00 
c010242a:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c0102431:	83 e0 e0             	and    $0xffffffe0,%eax
c0102434:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102439:	0f b6 05 64 fa 14 c0 	movzbl 0xc014fa64,%eax
c0102440:	83 e0 1f             	and    $0x1f,%eax
c0102443:	a2 64 fa 14 c0       	mov    %al,0xc014fa64
c0102448:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c010244f:	83 c8 0f             	or     $0xf,%eax
c0102452:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102457:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c010245e:	83 e0 ef             	and    $0xffffffef,%eax
c0102461:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102466:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c010246d:	83 c8 60             	or     $0x60,%eax
c0102470:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102475:	0f b6 05 65 fa 14 c0 	movzbl 0xc014fa65,%eax
c010247c:	83 c8 80             	or     $0xffffff80,%eax
c010247f:	a2 65 fa 14 c0       	mov    %al,0xc014fa65
c0102484:	a1 00 e8 14 c0       	mov    0xc014e800,%eax
c0102489:	c1 e8 10             	shr    $0x10,%eax
c010248c:	66 a3 66 fa 14 c0    	mov    %ax,0xc014fa66
c0102492:	c7 45 f8 80 e5 14 c0 	movl   $0xc014e580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102499:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010249c:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c010249f:	c9                   	leave  
c01024a0:	c3                   	ret    

c01024a1 <trapname>:

static const char *
trapname(int trapno) {
c01024a1:	55                   	push   %ebp
c01024a2:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01024a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a7:	83 f8 13             	cmp    $0x13,%eax
c01024aa:	77 0c                	ja     c01024b8 <trapname+0x17>
        return excnames[trapno];
c01024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01024af:	8b 04 85 00 5f 11 c0 	mov    -0x3feea100(,%eax,4),%eax
c01024b6:	eb 18                	jmp    c01024d0 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024b8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024bc:	7e 0d                	jle    c01024cb <trapname+0x2a>
c01024be:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024c2:	7f 07                	jg     c01024cb <trapname+0x2a>
        return "Hardware Interrupt";
c01024c4:	b8 9f 5a 11 c0       	mov    $0xc0115a9f,%eax
c01024c9:	eb 05                	jmp    c01024d0 <trapname+0x2f>
    }
    return "(unknown trap)";
c01024cb:	b8 b2 5a 11 c0       	mov    $0xc0115ab2,%eax
}
c01024d0:	5d                   	pop    %ebp
c01024d1:	c3                   	ret    

c01024d2 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024d2:	55                   	push   %ebp
c01024d3:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d8:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024dc:	66 83 f8 08          	cmp    $0x8,%ax
c01024e0:	0f 94 c0             	sete   %al
c01024e3:	0f b6 c0             	movzbl %al,%eax
}
c01024e6:	5d                   	pop    %ebp
c01024e7:	c3                   	ret    

c01024e8 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024e8:	55                   	push   %ebp
c01024e9:	89 e5                	mov    %esp,%ebp
c01024eb:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f5:	c7 04 24 f3 5a 11 c0 	movl   $0xc0115af3,(%esp)
c01024fc:	e8 64 de ff ff       	call   c0100365 <cprintf>
    print_regs(&tf->tf_regs);
c0102501:	8b 45 08             	mov    0x8(%ebp),%eax
c0102504:	89 04 24             	mov    %eax,(%esp)
c0102507:	e8 a1 01 00 00       	call   c01026ad <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010250c:	8b 45 08             	mov    0x8(%ebp),%eax
c010250f:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102513:	0f b7 c0             	movzwl %ax,%eax
c0102516:	89 44 24 04          	mov    %eax,0x4(%esp)
c010251a:	c7 04 24 04 5b 11 c0 	movl   $0xc0115b04,(%esp)
c0102521:	e8 3f de ff ff       	call   c0100365 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102526:	8b 45 08             	mov    0x8(%ebp),%eax
c0102529:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010252d:	0f b7 c0             	movzwl %ax,%eax
c0102530:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102534:	c7 04 24 17 5b 11 c0 	movl   $0xc0115b17,(%esp)
c010253b:	e8 25 de ff ff       	call   c0100365 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102540:	8b 45 08             	mov    0x8(%ebp),%eax
c0102543:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102547:	0f b7 c0             	movzwl %ax,%eax
c010254a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010254e:	c7 04 24 2a 5b 11 c0 	movl   $0xc0115b2a,(%esp)
c0102555:	e8 0b de ff ff       	call   c0100365 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010255a:	8b 45 08             	mov    0x8(%ebp),%eax
c010255d:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102561:	0f b7 c0             	movzwl %ax,%eax
c0102564:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102568:	c7 04 24 3d 5b 11 c0 	movl   $0xc0115b3d,(%esp)
c010256f:	e8 f1 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102574:	8b 45 08             	mov    0x8(%ebp),%eax
c0102577:	8b 40 30             	mov    0x30(%eax),%eax
c010257a:	89 04 24             	mov    %eax,(%esp)
c010257d:	e8 1f ff ff ff       	call   c01024a1 <trapname>
c0102582:	8b 55 08             	mov    0x8(%ebp),%edx
c0102585:	8b 52 30             	mov    0x30(%edx),%edx
c0102588:	89 44 24 08          	mov    %eax,0x8(%esp)
c010258c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102590:	c7 04 24 50 5b 11 c0 	movl   $0xc0115b50,(%esp)
c0102597:	e8 c9 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c010259c:	8b 45 08             	mov    0x8(%ebp),%eax
c010259f:	8b 40 34             	mov    0x34(%eax),%eax
c01025a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a6:	c7 04 24 62 5b 11 c0 	movl   $0xc0115b62,(%esp)
c01025ad:	e8 b3 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01025b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b5:	8b 40 38             	mov    0x38(%eax),%eax
c01025b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025bc:	c7 04 24 71 5b 11 c0 	movl   $0xc0115b71,(%esp)
c01025c3:	e8 9d dd ff ff       	call   c0100365 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01025cb:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025cf:	0f b7 c0             	movzwl %ax,%eax
c01025d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d6:	c7 04 24 80 5b 11 c0 	movl   $0xc0115b80,(%esp)
c01025dd:	e8 83 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e5:	8b 40 40             	mov    0x40(%eax),%eax
c01025e8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ec:	c7 04 24 93 5b 11 c0 	movl   $0xc0115b93,(%esp)
c01025f3:	e8 6d dd ff ff       	call   c0100365 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102606:	eb 3e                	jmp    c0102646 <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102608:	8b 45 08             	mov    0x8(%ebp),%eax
c010260b:	8b 50 40             	mov    0x40(%eax),%edx
c010260e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102611:	21 d0                	and    %edx,%eax
c0102613:	85 c0                	test   %eax,%eax
c0102615:	74 28                	je     c010263f <print_trapframe+0x157>
c0102617:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010261a:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c0102621:	85 c0                	test   %eax,%eax
c0102623:	74 1a                	je     c010263f <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c0102625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102628:	8b 04 85 a0 e5 14 c0 	mov    -0x3feb1a60(,%eax,4),%eax
c010262f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102633:	c7 04 24 a2 5b 11 c0 	movl   $0xc0115ba2,(%esp)
c010263a:	e8 26 dd ff ff       	call   c0100365 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010263f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102643:	d1 65 f0             	shll   -0x10(%ebp)
c0102646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102649:	83 f8 17             	cmp    $0x17,%eax
c010264c:	76 ba                	jbe    c0102608 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c010264e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102651:	8b 40 40             	mov    0x40(%eax),%eax
c0102654:	25 00 30 00 00       	and    $0x3000,%eax
c0102659:	c1 e8 0c             	shr    $0xc,%eax
c010265c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102660:	c7 04 24 a6 5b 11 c0 	movl   $0xc0115ba6,(%esp)
c0102667:	e8 f9 dc ff ff       	call   c0100365 <cprintf>

    if (!trap_in_kernel(tf)) {
c010266c:	8b 45 08             	mov    0x8(%ebp),%eax
c010266f:	89 04 24             	mov    %eax,(%esp)
c0102672:	e8 5b fe ff ff       	call   c01024d2 <trap_in_kernel>
c0102677:	85 c0                	test   %eax,%eax
c0102679:	75 30                	jne    c01026ab <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010267b:	8b 45 08             	mov    0x8(%ebp),%eax
c010267e:	8b 40 44             	mov    0x44(%eax),%eax
c0102681:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102685:	c7 04 24 af 5b 11 c0 	movl   $0xc0115baf,(%esp)
c010268c:	e8 d4 dc ff ff       	call   c0100365 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102691:	8b 45 08             	mov    0x8(%ebp),%eax
c0102694:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102698:	0f b7 c0             	movzwl %ax,%eax
c010269b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010269f:	c7 04 24 be 5b 11 c0 	movl   $0xc0115bbe,(%esp)
c01026a6:	e8 ba dc ff ff       	call   c0100365 <cprintf>
    }
}
c01026ab:	c9                   	leave  
c01026ac:	c3                   	ret    

c01026ad <print_regs>:

void
print_regs(struct pushregs *regs) {
c01026ad:	55                   	push   %ebp
c01026ae:	89 e5                	mov    %esp,%ebp
c01026b0:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01026b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b6:	8b 00                	mov    (%eax),%eax
c01026b8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026bc:	c7 04 24 d1 5b 11 c0 	movl   $0xc0115bd1,(%esp)
c01026c3:	e8 9d dc ff ff       	call   c0100365 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026cb:	8b 40 04             	mov    0x4(%eax),%eax
c01026ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026d2:	c7 04 24 e0 5b 11 c0 	movl   $0xc0115be0,(%esp)
c01026d9:	e8 87 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026de:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e1:	8b 40 08             	mov    0x8(%eax),%eax
c01026e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e8:	c7 04 24 ef 5b 11 c0 	movl   $0xc0115bef,(%esp)
c01026ef:	e8 71 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01026fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026fe:	c7 04 24 fe 5b 11 c0 	movl   $0xc0115bfe,(%esp)
c0102705:	e8 5b dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c010270a:	8b 45 08             	mov    0x8(%ebp),%eax
c010270d:	8b 40 10             	mov    0x10(%eax),%eax
c0102710:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102714:	c7 04 24 0d 5c 11 c0 	movl   $0xc0115c0d,(%esp)
c010271b:	e8 45 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102720:	8b 45 08             	mov    0x8(%ebp),%eax
c0102723:	8b 40 14             	mov    0x14(%eax),%eax
c0102726:	89 44 24 04          	mov    %eax,0x4(%esp)
c010272a:	c7 04 24 1c 5c 11 c0 	movl   $0xc0115c1c,(%esp)
c0102731:	e8 2f dc ff ff       	call   c0100365 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102736:	8b 45 08             	mov    0x8(%ebp),%eax
c0102739:	8b 40 18             	mov    0x18(%eax),%eax
c010273c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102740:	c7 04 24 2b 5c 11 c0 	movl   $0xc0115c2b,(%esp)
c0102747:	e8 19 dc ff ff       	call   c0100365 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c010274c:	8b 45 08             	mov    0x8(%ebp),%eax
c010274f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102752:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102756:	c7 04 24 3a 5c 11 c0 	movl   $0xc0115c3a,(%esp)
c010275d:	e8 03 dc ff ff       	call   c0100365 <cprintf>
}
c0102762:	c9                   	leave  
c0102763:	c3                   	ret    

c0102764 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c0102764:	55                   	push   %ebp
c0102765:	89 e5                	mov    %esp,%ebp
c0102767:	53                   	push   %ebx
c0102768:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c010276b:	8b 45 08             	mov    0x8(%ebp),%eax
c010276e:	8b 40 34             	mov    0x34(%eax),%eax
c0102771:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102774:	85 c0                	test   %eax,%eax
c0102776:	74 07                	je     c010277f <print_pgfault+0x1b>
c0102778:	b9 49 5c 11 c0       	mov    $0xc0115c49,%ecx
c010277d:	eb 05                	jmp    c0102784 <print_pgfault+0x20>
c010277f:	b9 5a 5c 11 c0       	mov    $0xc0115c5a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102784:	8b 45 08             	mov    0x8(%ebp),%eax
c0102787:	8b 40 34             	mov    0x34(%eax),%eax
c010278a:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010278d:	85 c0                	test   %eax,%eax
c010278f:	74 07                	je     c0102798 <print_pgfault+0x34>
c0102791:	ba 57 00 00 00       	mov    $0x57,%edx
c0102796:	eb 05                	jmp    c010279d <print_pgfault+0x39>
c0102798:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c010279d:	8b 45 08             	mov    0x8(%ebp),%eax
c01027a0:	8b 40 34             	mov    0x34(%eax),%eax
c01027a3:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027a6:	85 c0                	test   %eax,%eax
c01027a8:	74 07                	je     c01027b1 <print_pgfault+0x4d>
c01027aa:	b8 55 00 00 00       	mov    $0x55,%eax
c01027af:	eb 05                	jmp    c01027b6 <print_pgfault+0x52>
c01027b1:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027b6:	0f 20 d3             	mov    %cr2,%ebx
c01027b9:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01027bc:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01027bf:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01027c3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01027c7:	89 44 24 08          	mov    %eax,0x8(%esp)
c01027cb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01027cf:	c7 04 24 68 5c 11 c0 	movl   $0xc0115c68,(%esp)
c01027d6:	e8 8a db ff ff       	call   c0100365 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027db:	83 c4 34             	add    $0x34,%esp
c01027de:	5b                   	pop    %ebx
c01027df:	5d                   	pop    %ebp
c01027e0:	c3                   	ret    

c01027e1 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027e1:	55                   	push   %ebp
c01027e2:	89 e5                	mov    %esp,%ebp
c01027e4:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027e7:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c01027ec:	85 c0                	test   %eax,%eax
c01027ee:	74 0b                	je     c01027fb <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f3:	89 04 24             	mov    %eax,(%esp)
c01027f6:	e8 69 ff ff ff       	call   c0102764 <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027fb:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0102800:	85 c0                	test   %eax,%eax
c0102802:	74 3d                	je     c0102841 <pgfault_handler+0x60>
        assert(current == idleproc);
c0102804:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010280a:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010280f:	39 c2                	cmp    %eax,%edx
c0102811:	74 24                	je     c0102837 <pgfault_handler+0x56>
c0102813:	c7 44 24 0c 8b 5c 11 	movl   $0xc0115c8b,0xc(%esp)
c010281a:	c0 
c010281b:	c7 44 24 08 9f 5c 11 	movl   $0xc0115c9f,0x8(%esp)
c0102822:	c0 
c0102823:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c010282a:	00 
c010282b:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102832:	e8 91 e6 ff ff       	call   c0100ec8 <__panic>
        mm = check_mm_struct;
c0102837:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010283c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010283f:	eb 46                	jmp    c0102887 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102841:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102846:	85 c0                	test   %eax,%eax
c0102848:	75 32                	jne    c010287c <pgfault_handler+0x9b>
            print_trapframe(tf);
c010284a:	8b 45 08             	mov    0x8(%ebp),%eax
c010284d:	89 04 24             	mov    %eax,(%esp)
c0102850:	e8 93 fc ff ff       	call   c01024e8 <print_trapframe>
            print_pgfault(tf);
c0102855:	8b 45 08             	mov    0x8(%ebp),%eax
c0102858:	89 04 24             	mov    %eax,(%esp)
c010285b:	e8 04 ff ff ff       	call   c0102764 <print_pgfault>
            panic("unhandled page fault.\n");
c0102860:	c7 44 24 08 b4 5c 11 	movl   $0xc0115cb4,0x8(%esp)
c0102867:	c0 
c0102868:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c010286f:	00 
c0102870:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102877:	e8 4c e6 ff ff       	call   c0100ec8 <__panic>
        }
        mm = current->mm;
c010287c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102881:	8b 40 18             	mov    0x18(%eax),%eax
c0102884:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102887:	0f 20 d0             	mov    %cr2,%eax
c010288a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010288d:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102890:	89 c2                	mov    %eax,%edx
c0102892:	8b 45 08             	mov    0x8(%ebp),%eax
c0102895:	8b 40 34             	mov    0x34(%eax),%eax
c0102898:	89 54 24 08          	mov    %edx,0x8(%esp)
c010289c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01028a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028a3:	89 04 24             	mov    %eax,(%esp)
c01028a6:	e8 d4 64 00 00       	call   c0108d7f <do_pgfault>
}
c01028ab:	c9                   	leave  
c01028ac:	c3                   	ret    

c01028ad <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01028ad:	55                   	push   %ebp
c01028ae:	89 e5                	mov    %esp,%ebp
c01028b0:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01028bd:	8b 40 30             	mov    0x30(%eax),%eax
c01028c0:	83 f8 2f             	cmp    $0x2f,%eax
c01028c3:	77 38                	ja     c01028fd <trap_dispatch+0x50>
c01028c5:	83 f8 2e             	cmp    $0x2e,%eax
c01028c8:	0f 83 cb 01 00 00    	jae    c0102a99 <trap_dispatch+0x1ec>
c01028ce:	83 f8 20             	cmp    $0x20,%eax
c01028d1:	0f 84 07 01 00 00    	je     c01029de <trap_dispatch+0x131>
c01028d7:	83 f8 20             	cmp    $0x20,%eax
c01028da:	77 0a                	ja     c01028e6 <trap_dispatch+0x39>
c01028dc:	83 f8 0e             	cmp    $0xe,%eax
c01028df:	74 3e                	je     c010291f <trap_dispatch+0x72>
c01028e1:	e9 6b 01 00 00       	jmp    c0102a51 <trap_dispatch+0x1a4>
c01028e6:	83 f8 21             	cmp    $0x21,%eax
c01028e9:	0f 84 30 01 00 00    	je     c0102a1f <trap_dispatch+0x172>
c01028ef:	83 f8 24             	cmp    $0x24,%eax
c01028f2:	0f 84 27 01 00 00    	je     c0102a1f <trap_dispatch+0x172>
c01028f8:	e9 54 01 00 00       	jmp    c0102a51 <trap_dispatch+0x1a4>
c01028fd:	83 f8 78             	cmp    $0x78,%eax
c0102900:	0f 82 4b 01 00 00    	jb     c0102a51 <trap_dispatch+0x1a4>
c0102906:	83 f8 79             	cmp    $0x79,%eax
c0102909:	0f 86 26 01 00 00    	jbe    c0102a35 <trap_dispatch+0x188>
c010290f:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102914:	0f 84 ba 00 00 00    	je     c01029d4 <trap_dispatch+0x127>
c010291a:	e9 32 01 00 00       	jmp    c0102a51 <trap_dispatch+0x1a4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010291f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102922:	89 04 24             	mov    %eax,(%esp)
c0102925:	e8 b7 fe ff ff       	call   c01027e1 <pgfault_handler>
c010292a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010292d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102931:	0f 84 98 00 00 00    	je     c01029cf <trap_dispatch+0x122>
            print_trapframe(tf);
c0102937:	8b 45 08             	mov    0x8(%ebp),%eax
c010293a:	89 04 24             	mov    %eax,(%esp)
c010293d:	e8 a6 fb ff ff       	call   c01024e8 <print_trapframe>
            if (current == NULL) {
c0102942:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102947:	85 c0                	test   %eax,%eax
c0102949:	75 23                	jne    c010296e <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010294e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102952:	c7 44 24 08 cc 5c 11 	movl   $0xc0115ccc,0x8(%esp)
c0102959:	c0 
c010295a:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102961:	00 
c0102962:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102969:	e8 5a e5 ff ff       	call   c0100ec8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c010296e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102971:	89 04 24             	mov    %eax,(%esp)
c0102974:	e8 59 fb ff ff       	call   c01024d2 <trap_in_kernel>
c0102979:	85 c0                	test   %eax,%eax
c010297b:	74 23                	je     c01029a0 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c010297d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102980:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102984:	c7 44 24 08 ec 5c 11 	movl   $0xc0115cec,0x8(%esp)
c010298b:	c0 
c010298c:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0102993:	00 
c0102994:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c010299b:	e8 28 e5 ff ff       	call   c0100ec8 <__panic>
                }
                cprintf("killed by kernel.\n");
c01029a0:	c7 04 24 1a 5d 11 c0 	movl   $0xc0115d1a,(%esp)
c01029a7:	e8 b9 d9 ff ff       	call   c0100365 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01029ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01029af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01029b3:	c7 44 24 08 30 5d 11 	movl   $0xc0115d30,0x8(%esp)
c01029ba:	c0 
c01029bb:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01029c2:	00 
c01029c3:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c01029ca:	e8 f9 e4 ff ff       	call   c0100ec8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01029cf:	e9 c6 00 00 00       	jmp    c0102a9a <trap_dispatch+0x1ed>
    case T_SYSCALL:
        syscall();
c01029d4:	e8 c9 c2 00 00       	call   c010eca2 <syscall>
        break;
c01029d9:	e9 bc 00 00 00       	jmp    c0102a9a <trap_dispatch+0x1ed>
	     *----------------------
	     * you should update your lab5 code (just add ONE or TWO lines of code):
         *    Every tick, you should update the system time, iterate the timers, and trigger the timers which are end to call scheduler.
         *    You can use one funcitons to finish all these things.
         */
		ticks ++;
c01029de:	a1 10 30 15 c0       	mov    0xc0153010,%eax
c01029e3:	83 c0 01             	add    $0x1,%eax
c01029e6:	a3 10 30 15 c0       	mov    %eax,0xc0153010
        assert(current != NULL);
c01029eb:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c01029f0:	85 c0                	test   %eax,%eax
c01029f2:	75 24                	jne    c0102a18 <trap_dispatch+0x16b>
c01029f4:	c7 44 24 0c 59 5d 11 	movl   $0xc0115d59,0xc(%esp)
c01029fb:	c0 
c01029fc:	c7 44 24 08 9f 5c 11 	movl   $0xc0115c9f,0x8(%esp)
c0102a03:	c0 
c0102a04:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
c0102a0b:	00 
c0102a0c:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102a13:	e8 b0 e4 ff ff       	call   c0100ec8 <__panic>
        run_timer_list();
c0102a18:	e8 10 be 00 00       	call   c010e82d <run_timer_list>
        break;
c0102a1d:	eb 7b                	jmp    c0102a9a <trap_dispatch+0x1ed>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102a1f:	e8 1c ee ff ff       	call   c0101840 <cons_getc>
c0102a24:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a27:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a2b:	89 04 24             	mov    %eax,(%esp)
c0102a2e:	e8 71 e5 00 00       	call   c0110fa4 <dev_stdin_write>
        }
        break;
c0102a33:	eb 65                	jmp    c0102a9a <trap_dispatch+0x1ed>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a35:	c7 44 24 08 69 5d 11 	movl   $0xc0115d69,0x8(%esp)
c0102a3c:	c0 
c0102a3d:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0102a44:	00 
c0102a45:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102a4c:	e8 77 e4 ff ff       	call   c0100ec8 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a51:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a54:	89 04 24             	mov    %eax,(%esp)
c0102a57:	e8 8c fa ff ff       	call   c01024e8 <print_trapframe>
        if (current != NULL) {
c0102a5c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102a61:	85 c0                	test   %eax,%eax
c0102a63:	74 18                	je     c0102a7d <trap_dispatch+0x1d0>
            cprintf("unhandled trap.\n");
c0102a65:	c7 04 24 79 5d 11 c0 	movl   $0xc0115d79,(%esp)
c0102a6c:	e8 f4 d8 ff ff       	call   c0100365 <cprintf>
            do_exit(-E_KILLED);
c0102a71:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a78:	e8 64 a0 00 00       	call   c010cae1 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a7d:	c7 44 24 08 8a 5d 11 	movl   $0xc0115d8a,0x8(%esp)
c0102a84:	c0 
c0102a85:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c0102a8c:	00 
c0102a8d:	c7 04 24 8e 5a 11 c0 	movl   $0xc0115a8e,(%esp)
c0102a94:	e8 2f e4 ff ff       	call   c0100ec8 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a99:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a9a:	c9                   	leave  
c0102a9b:	c3                   	ret    

c0102a9c <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a9c:	55                   	push   %ebp
c0102a9d:	89 e5                	mov    %esp,%ebp
c0102a9f:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102aa2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102aa7:	85 c0                	test   %eax,%eax
c0102aa9:	75 0d                	jne    c0102ab8 <trap+0x1c>
        trap_dispatch(tf);
c0102aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aae:	89 04 24             	mov    %eax,(%esp)
c0102ab1:	e8 f7 fd ff ff       	call   c01028ad <trap_dispatch>
c0102ab6:	eb 6c                	jmp    c0102b24 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102ab8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102abd:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ac0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ac3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102ac8:	8b 55 08             	mov    0x8(%ebp),%edx
c0102acb:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ace:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad1:	89 04 24             	mov    %eax,(%esp)
c0102ad4:	e8 f9 f9 ff ff       	call   c01024d2 <trap_in_kernel>
c0102ad9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102adc:	8b 45 08             	mov    0x8(%ebp),%eax
c0102adf:	89 04 24             	mov    %eax,(%esp)
c0102ae2:	e8 c6 fd ff ff       	call   c01028ad <trap_dispatch>
    
        current->tf = otf;
c0102ae7:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102aec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102aef:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102af2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102af6:	75 2c                	jne    c0102b24 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102af8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102afd:	8b 40 44             	mov    0x44(%eax),%eax
c0102b00:	83 e0 01             	and    $0x1,%eax
c0102b03:	85 c0                	test   %eax,%eax
c0102b05:	74 0c                	je     c0102b13 <trap+0x77>
                do_exit(-E_KILLED);
c0102b07:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b0e:	e8 ce 9f 00 00       	call   c010cae1 <do_exit>
            }
            if (current->need_resched) {
c0102b13:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0102b18:	8b 40 10             	mov    0x10(%eax),%eax
c0102b1b:	85 c0                	test   %eax,%eax
c0102b1d:	74 05                	je     c0102b24 <trap+0x88>
                schedule();
c0102b1f:	e8 7c ba 00 00       	call   c010e5a0 <schedule>
            }
        }
    }
}
c0102b24:	c9                   	leave  
c0102b25:	c3                   	ret    

c0102b26 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b26:	1e                   	push   %ds
    pushl %es
c0102b27:	06                   	push   %es
    pushl %fs
c0102b28:	0f a0                	push   %fs
    pushl %gs
c0102b2a:	0f a8                	push   %gs
    pushal
c0102b2c:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b2d:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b32:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b34:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b36:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b37:	e8 60 ff ff ff       	call   c0102a9c <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b3c:	5c                   	pop    %esp

c0102b3d <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b3d:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b3e:	0f a9                	pop    %gs
    popl %fs
c0102b40:	0f a1                	pop    %fs
    popl %es
c0102b42:	07                   	pop    %es
    popl %ds
c0102b43:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b44:	83 c4 08             	add    $0x8,%esp
    iret
c0102b47:	cf                   	iret   

c0102b48 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b48:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b4c:	e9 ec ff ff ff       	jmp    c0102b3d <__trapret>

c0102b51 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b51:	6a 00                	push   $0x0
  pushl $0
c0102b53:	6a 00                	push   $0x0
  jmp __alltraps
c0102b55:	e9 cc ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b5a <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b5a:	6a 00                	push   $0x0
  pushl $1
c0102b5c:	6a 01                	push   $0x1
  jmp __alltraps
c0102b5e:	e9 c3 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b63 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b63:	6a 00                	push   $0x0
  pushl $2
c0102b65:	6a 02                	push   $0x2
  jmp __alltraps
c0102b67:	e9 ba ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b6c <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b6c:	6a 00                	push   $0x0
  pushl $3
c0102b6e:	6a 03                	push   $0x3
  jmp __alltraps
c0102b70:	e9 b1 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b75 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b75:	6a 00                	push   $0x0
  pushl $4
c0102b77:	6a 04                	push   $0x4
  jmp __alltraps
c0102b79:	e9 a8 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b7e <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b7e:	6a 00                	push   $0x0
  pushl $5
c0102b80:	6a 05                	push   $0x5
  jmp __alltraps
c0102b82:	e9 9f ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b87 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b87:	6a 00                	push   $0x0
  pushl $6
c0102b89:	6a 06                	push   $0x6
  jmp __alltraps
c0102b8b:	e9 96 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b90 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b90:	6a 00                	push   $0x0
  pushl $7
c0102b92:	6a 07                	push   $0x7
  jmp __alltraps
c0102b94:	e9 8d ff ff ff       	jmp    c0102b26 <__alltraps>

c0102b99 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b99:	6a 08                	push   $0x8
  jmp __alltraps
c0102b9b:	e9 86 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102ba0 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102ba0:	6a 09                	push   $0x9
  jmp __alltraps
c0102ba2:	e9 7f ff ff ff       	jmp    c0102b26 <__alltraps>

c0102ba7 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102ba7:	6a 0a                	push   $0xa
  jmp __alltraps
c0102ba9:	e9 78 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bae <vector11>:
.globl vector11
vector11:
  pushl $11
c0102bae:	6a 0b                	push   $0xb
  jmp __alltraps
c0102bb0:	e9 71 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bb5 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102bb5:	6a 0c                	push   $0xc
  jmp __alltraps
c0102bb7:	e9 6a ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bbc <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bbc:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bbe:	e9 63 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bc3 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bc3:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bc5:	e9 5c ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bca <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bca:	6a 00                	push   $0x0
  pushl $15
c0102bcc:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bce:	e9 53 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bd3 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bd3:	6a 00                	push   $0x0
  pushl $16
c0102bd5:	6a 10                	push   $0x10
  jmp __alltraps
c0102bd7:	e9 4a ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bdc <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bdc:	6a 11                	push   $0x11
  jmp __alltraps
c0102bde:	e9 43 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102be3 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102be3:	6a 00                	push   $0x0
  pushl $18
c0102be5:	6a 12                	push   $0x12
  jmp __alltraps
c0102be7:	e9 3a ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bec <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bec:	6a 00                	push   $0x0
  pushl $19
c0102bee:	6a 13                	push   $0x13
  jmp __alltraps
c0102bf0:	e9 31 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bf5 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bf5:	6a 00                	push   $0x0
  pushl $20
c0102bf7:	6a 14                	push   $0x14
  jmp __alltraps
c0102bf9:	e9 28 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102bfe <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bfe:	6a 00                	push   $0x0
  pushl $21
c0102c00:	6a 15                	push   $0x15
  jmp __alltraps
c0102c02:	e9 1f ff ff ff       	jmp    c0102b26 <__alltraps>

c0102c07 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102c07:	6a 00                	push   $0x0
  pushl $22
c0102c09:	6a 16                	push   $0x16
  jmp __alltraps
c0102c0b:	e9 16 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102c10 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c10:	6a 00                	push   $0x0
  pushl $23
c0102c12:	6a 17                	push   $0x17
  jmp __alltraps
c0102c14:	e9 0d ff ff ff       	jmp    c0102b26 <__alltraps>

c0102c19 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c19:	6a 00                	push   $0x0
  pushl $24
c0102c1b:	6a 18                	push   $0x18
  jmp __alltraps
c0102c1d:	e9 04 ff ff ff       	jmp    c0102b26 <__alltraps>

c0102c22 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c22:	6a 00                	push   $0x0
  pushl $25
c0102c24:	6a 19                	push   $0x19
  jmp __alltraps
c0102c26:	e9 fb fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c2b <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c2b:	6a 00                	push   $0x0
  pushl $26
c0102c2d:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c2f:	e9 f2 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c34 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c34:	6a 00                	push   $0x0
  pushl $27
c0102c36:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c38:	e9 e9 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c3d <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c3d:	6a 00                	push   $0x0
  pushl $28
c0102c3f:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c41:	e9 e0 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c46 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c46:	6a 00                	push   $0x0
  pushl $29
c0102c48:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c4a:	e9 d7 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c4f <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c4f:	6a 00                	push   $0x0
  pushl $30
c0102c51:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c53:	e9 ce fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c58 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c58:	6a 00                	push   $0x0
  pushl $31
c0102c5a:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c5c:	e9 c5 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c61 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c61:	6a 00                	push   $0x0
  pushl $32
c0102c63:	6a 20                	push   $0x20
  jmp __alltraps
c0102c65:	e9 bc fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c6a <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c6a:	6a 00                	push   $0x0
  pushl $33
c0102c6c:	6a 21                	push   $0x21
  jmp __alltraps
c0102c6e:	e9 b3 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c73 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c73:	6a 00                	push   $0x0
  pushl $34
c0102c75:	6a 22                	push   $0x22
  jmp __alltraps
c0102c77:	e9 aa fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c7c <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c7c:	6a 00                	push   $0x0
  pushl $35
c0102c7e:	6a 23                	push   $0x23
  jmp __alltraps
c0102c80:	e9 a1 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c85 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c85:	6a 00                	push   $0x0
  pushl $36
c0102c87:	6a 24                	push   $0x24
  jmp __alltraps
c0102c89:	e9 98 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c8e <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c8e:	6a 00                	push   $0x0
  pushl $37
c0102c90:	6a 25                	push   $0x25
  jmp __alltraps
c0102c92:	e9 8f fe ff ff       	jmp    c0102b26 <__alltraps>

c0102c97 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c97:	6a 00                	push   $0x0
  pushl $38
c0102c99:	6a 26                	push   $0x26
  jmp __alltraps
c0102c9b:	e9 86 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102ca0 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102ca0:	6a 00                	push   $0x0
  pushl $39
c0102ca2:	6a 27                	push   $0x27
  jmp __alltraps
c0102ca4:	e9 7d fe ff ff       	jmp    c0102b26 <__alltraps>

c0102ca9 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102ca9:	6a 00                	push   $0x0
  pushl $40
c0102cab:	6a 28                	push   $0x28
  jmp __alltraps
c0102cad:	e9 74 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cb2 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102cb2:	6a 00                	push   $0x0
  pushl $41
c0102cb4:	6a 29                	push   $0x29
  jmp __alltraps
c0102cb6:	e9 6b fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cbb <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cbb:	6a 00                	push   $0x0
  pushl $42
c0102cbd:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cbf:	e9 62 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cc4 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cc4:	6a 00                	push   $0x0
  pushl $43
c0102cc6:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cc8:	e9 59 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102ccd <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ccd:	6a 00                	push   $0x0
  pushl $44
c0102ccf:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cd1:	e9 50 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cd6 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cd6:	6a 00                	push   $0x0
  pushl $45
c0102cd8:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cda:	e9 47 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cdf <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cdf:	6a 00                	push   $0x0
  pushl $46
c0102ce1:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102ce3:	e9 3e fe ff ff       	jmp    c0102b26 <__alltraps>

c0102ce8 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ce8:	6a 00                	push   $0x0
  pushl $47
c0102cea:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cec:	e9 35 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cf1 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cf1:	6a 00                	push   $0x0
  pushl $48
c0102cf3:	6a 30                	push   $0x30
  jmp __alltraps
c0102cf5:	e9 2c fe ff ff       	jmp    c0102b26 <__alltraps>

c0102cfa <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cfa:	6a 00                	push   $0x0
  pushl $49
c0102cfc:	6a 31                	push   $0x31
  jmp __alltraps
c0102cfe:	e9 23 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102d03 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102d03:	6a 00                	push   $0x0
  pushl $50
c0102d05:	6a 32                	push   $0x32
  jmp __alltraps
c0102d07:	e9 1a fe ff ff       	jmp    c0102b26 <__alltraps>

c0102d0c <vector51>:
.globl vector51
vector51:
  pushl $0
c0102d0c:	6a 00                	push   $0x0
  pushl $51
c0102d0e:	6a 33                	push   $0x33
  jmp __alltraps
c0102d10:	e9 11 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102d15 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d15:	6a 00                	push   $0x0
  pushl $52
c0102d17:	6a 34                	push   $0x34
  jmp __alltraps
c0102d19:	e9 08 fe ff ff       	jmp    c0102b26 <__alltraps>

c0102d1e <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d1e:	6a 00                	push   $0x0
  pushl $53
c0102d20:	6a 35                	push   $0x35
  jmp __alltraps
c0102d22:	e9 ff fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d27 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d27:	6a 00                	push   $0x0
  pushl $54
c0102d29:	6a 36                	push   $0x36
  jmp __alltraps
c0102d2b:	e9 f6 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d30 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d30:	6a 00                	push   $0x0
  pushl $55
c0102d32:	6a 37                	push   $0x37
  jmp __alltraps
c0102d34:	e9 ed fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d39 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d39:	6a 00                	push   $0x0
  pushl $56
c0102d3b:	6a 38                	push   $0x38
  jmp __alltraps
c0102d3d:	e9 e4 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d42 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d42:	6a 00                	push   $0x0
  pushl $57
c0102d44:	6a 39                	push   $0x39
  jmp __alltraps
c0102d46:	e9 db fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d4b <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d4b:	6a 00                	push   $0x0
  pushl $58
c0102d4d:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d4f:	e9 d2 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d54 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d54:	6a 00                	push   $0x0
  pushl $59
c0102d56:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d58:	e9 c9 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d5d <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d5d:	6a 00                	push   $0x0
  pushl $60
c0102d5f:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d61:	e9 c0 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d66 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d66:	6a 00                	push   $0x0
  pushl $61
c0102d68:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d6a:	e9 b7 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d6f <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d6f:	6a 00                	push   $0x0
  pushl $62
c0102d71:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d73:	e9 ae fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d78 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d78:	6a 00                	push   $0x0
  pushl $63
c0102d7a:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d7c:	e9 a5 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d81 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d81:	6a 00                	push   $0x0
  pushl $64
c0102d83:	6a 40                	push   $0x40
  jmp __alltraps
c0102d85:	e9 9c fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d8a <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d8a:	6a 00                	push   $0x0
  pushl $65
c0102d8c:	6a 41                	push   $0x41
  jmp __alltraps
c0102d8e:	e9 93 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d93 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d93:	6a 00                	push   $0x0
  pushl $66
c0102d95:	6a 42                	push   $0x42
  jmp __alltraps
c0102d97:	e9 8a fd ff ff       	jmp    c0102b26 <__alltraps>

c0102d9c <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d9c:	6a 00                	push   $0x0
  pushl $67
c0102d9e:	6a 43                	push   $0x43
  jmp __alltraps
c0102da0:	e9 81 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102da5 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102da5:	6a 00                	push   $0x0
  pushl $68
c0102da7:	6a 44                	push   $0x44
  jmp __alltraps
c0102da9:	e9 78 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102dae <vector69>:
.globl vector69
vector69:
  pushl $0
c0102dae:	6a 00                	push   $0x0
  pushl $69
c0102db0:	6a 45                	push   $0x45
  jmp __alltraps
c0102db2:	e9 6f fd ff ff       	jmp    c0102b26 <__alltraps>

c0102db7 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102db7:	6a 00                	push   $0x0
  pushl $70
c0102db9:	6a 46                	push   $0x46
  jmp __alltraps
c0102dbb:	e9 66 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102dc0 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102dc0:	6a 00                	push   $0x0
  pushl $71
c0102dc2:	6a 47                	push   $0x47
  jmp __alltraps
c0102dc4:	e9 5d fd ff ff       	jmp    c0102b26 <__alltraps>

c0102dc9 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dc9:	6a 00                	push   $0x0
  pushl $72
c0102dcb:	6a 48                	push   $0x48
  jmp __alltraps
c0102dcd:	e9 54 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102dd2 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dd2:	6a 00                	push   $0x0
  pushl $73
c0102dd4:	6a 49                	push   $0x49
  jmp __alltraps
c0102dd6:	e9 4b fd ff ff       	jmp    c0102b26 <__alltraps>

c0102ddb <vector74>:
.globl vector74
vector74:
  pushl $0
c0102ddb:	6a 00                	push   $0x0
  pushl $74
c0102ddd:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102ddf:	e9 42 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102de4 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102de4:	6a 00                	push   $0x0
  pushl $75
c0102de6:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102de8:	e9 39 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102ded <vector76>:
.globl vector76
vector76:
  pushl $0
c0102ded:	6a 00                	push   $0x0
  pushl $76
c0102def:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102df1:	e9 30 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102df6 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102df6:	6a 00                	push   $0x0
  pushl $77
c0102df8:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dfa:	e9 27 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102dff <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dff:	6a 00                	push   $0x0
  pushl $78
c0102e01:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102e03:	e9 1e fd ff ff       	jmp    c0102b26 <__alltraps>

c0102e08 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102e08:	6a 00                	push   $0x0
  pushl $79
c0102e0a:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102e0c:	e9 15 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102e11 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e11:	6a 00                	push   $0x0
  pushl $80
c0102e13:	6a 50                	push   $0x50
  jmp __alltraps
c0102e15:	e9 0c fd ff ff       	jmp    c0102b26 <__alltraps>

c0102e1a <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e1a:	6a 00                	push   $0x0
  pushl $81
c0102e1c:	6a 51                	push   $0x51
  jmp __alltraps
c0102e1e:	e9 03 fd ff ff       	jmp    c0102b26 <__alltraps>

c0102e23 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e23:	6a 00                	push   $0x0
  pushl $82
c0102e25:	6a 52                	push   $0x52
  jmp __alltraps
c0102e27:	e9 fa fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e2c <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e2c:	6a 00                	push   $0x0
  pushl $83
c0102e2e:	6a 53                	push   $0x53
  jmp __alltraps
c0102e30:	e9 f1 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e35 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e35:	6a 00                	push   $0x0
  pushl $84
c0102e37:	6a 54                	push   $0x54
  jmp __alltraps
c0102e39:	e9 e8 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e3e <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e3e:	6a 00                	push   $0x0
  pushl $85
c0102e40:	6a 55                	push   $0x55
  jmp __alltraps
c0102e42:	e9 df fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e47 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e47:	6a 00                	push   $0x0
  pushl $86
c0102e49:	6a 56                	push   $0x56
  jmp __alltraps
c0102e4b:	e9 d6 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e50 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e50:	6a 00                	push   $0x0
  pushl $87
c0102e52:	6a 57                	push   $0x57
  jmp __alltraps
c0102e54:	e9 cd fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e59 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e59:	6a 00                	push   $0x0
  pushl $88
c0102e5b:	6a 58                	push   $0x58
  jmp __alltraps
c0102e5d:	e9 c4 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e62 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e62:	6a 00                	push   $0x0
  pushl $89
c0102e64:	6a 59                	push   $0x59
  jmp __alltraps
c0102e66:	e9 bb fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e6b <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e6b:	6a 00                	push   $0x0
  pushl $90
c0102e6d:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e6f:	e9 b2 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e74 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e74:	6a 00                	push   $0x0
  pushl $91
c0102e76:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e78:	e9 a9 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e7d <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e7d:	6a 00                	push   $0x0
  pushl $92
c0102e7f:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e81:	e9 a0 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e86 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e86:	6a 00                	push   $0x0
  pushl $93
c0102e88:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e8a:	e9 97 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e8f <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e8f:	6a 00                	push   $0x0
  pushl $94
c0102e91:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e93:	e9 8e fc ff ff       	jmp    c0102b26 <__alltraps>

c0102e98 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e98:	6a 00                	push   $0x0
  pushl $95
c0102e9a:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e9c:	e9 85 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ea1 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102ea1:	6a 00                	push   $0x0
  pushl $96
c0102ea3:	6a 60                	push   $0x60
  jmp __alltraps
c0102ea5:	e9 7c fc ff ff       	jmp    c0102b26 <__alltraps>

c0102eaa <vector97>:
.globl vector97
vector97:
  pushl $0
c0102eaa:	6a 00                	push   $0x0
  pushl $97
c0102eac:	6a 61                	push   $0x61
  jmp __alltraps
c0102eae:	e9 73 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102eb3 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102eb3:	6a 00                	push   $0x0
  pushl $98
c0102eb5:	6a 62                	push   $0x62
  jmp __alltraps
c0102eb7:	e9 6a fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ebc <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ebc:	6a 00                	push   $0x0
  pushl $99
c0102ebe:	6a 63                	push   $0x63
  jmp __alltraps
c0102ec0:	e9 61 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ec5 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ec5:	6a 00                	push   $0x0
  pushl $100
c0102ec7:	6a 64                	push   $0x64
  jmp __alltraps
c0102ec9:	e9 58 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ece <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ece:	6a 00                	push   $0x0
  pushl $101
c0102ed0:	6a 65                	push   $0x65
  jmp __alltraps
c0102ed2:	e9 4f fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ed7 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ed7:	6a 00                	push   $0x0
  pushl $102
c0102ed9:	6a 66                	push   $0x66
  jmp __alltraps
c0102edb:	e9 46 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ee0 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ee0:	6a 00                	push   $0x0
  pushl $103
c0102ee2:	6a 67                	push   $0x67
  jmp __alltraps
c0102ee4:	e9 3d fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ee9 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ee9:	6a 00                	push   $0x0
  pushl $104
c0102eeb:	6a 68                	push   $0x68
  jmp __alltraps
c0102eed:	e9 34 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102ef2 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ef2:	6a 00                	push   $0x0
  pushl $105
c0102ef4:	6a 69                	push   $0x69
  jmp __alltraps
c0102ef6:	e9 2b fc ff ff       	jmp    c0102b26 <__alltraps>

c0102efb <vector106>:
.globl vector106
vector106:
  pushl $0
c0102efb:	6a 00                	push   $0x0
  pushl $106
c0102efd:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102eff:	e9 22 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102f04 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102f04:	6a 00                	push   $0x0
  pushl $107
c0102f06:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102f08:	e9 19 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102f0d <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f0d:	6a 00                	push   $0x0
  pushl $108
c0102f0f:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f11:	e9 10 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102f16 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f16:	6a 00                	push   $0x0
  pushl $109
c0102f18:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f1a:	e9 07 fc ff ff       	jmp    c0102b26 <__alltraps>

c0102f1f <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f1f:	6a 00                	push   $0x0
  pushl $110
c0102f21:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f23:	e9 fe fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f28 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f28:	6a 00                	push   $0x0
  pushl $111
c0102f2a:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f2c:	e9 f5 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f31 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f31:	6a 00                	push   $0x0
  pushl $112
c0102f33:	6a 70                	push   $0x70
  jmp __alltraps
c0102f35:	e9 ec fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f3a <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f3a:	6a 00                	push   $0x0
  pushl $113
c0102f3c:	6a 71                	push   $0x71
  jmp __alltraps
c0102f3e:	e9 e3 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f43 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f43:	6a 00                	push   $0x0
  pushl $114
c0102f45:	6a 72                	push   $0x72
  jmp __alltraps
c0102f47:	e9 da fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f4c <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f4c:	6a 00                	push   $0x0
  pushl $115
c0102f4e:	6a 73                	push   $0x73
  jmp __alltraps
c0102f50:	e9 d1 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f55 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f55:	6a 00                	push   $0x0
  pushl $116
c0102f57:	6a 74                	push   $0x74
  jmp __alltraps
c0102f59:	e9 c8 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f5e <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f5e:	6a 00                	push   $0x0
  pushl $117
c0102f60:	6a 75                	push   $0x75
  jmp __alltraps
c0102f62:	e9 bf fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f67 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f67:	6a 00                	push   $0x0
  pushl $118
c0102f69:	6a 76                	push   $0x76
  jmp __alltraps
c0102f6b:	e9 b6 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f70 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f70:	6a 00                	push   $0x0
  pushl $119
c0102f72:	6a 77                	push   $0x77
  jmp __alltraps
c0102f74:	e9 ad fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f79 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f79:	6a 00                	push   $0x0
  pushl $120
c0102f7b:	6a 78                	push   $0x78
  jmp __alltraps
c0102f7d:	e9 a4 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f82 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f82:	6a 00                	push   $0x0
  pushl $121
c0102f84:	6a 79                	push   $0x79
  jmp __alltraps
c0102f86:	e9 9b fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f8b <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f8b:	6a 00                	push   $0x0
  pushl $122
c0102f8d:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f8f:	e9 92 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f94 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f94:	6a 00                	push   $0x0
  pushl $123
c0102f96:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f98:	e9 89 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102f9d <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f9d:	6a 00                	push   $0x0
  pushl $124
c0102f9f:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102fa1:	e9 80 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fa6 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102fa6:	6a 00                	push   $0x0
  pushl $125
c0102fa8:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102faa:	e9 77 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102faf <vector126>:
.globl vector126
vector126:
  pushl $0
c0102faf:	6a 00                	push   $0x0
  pushl $126
c0102fb1:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fb3:	e9 6e fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fb8 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fb8:	6a 00                	push   $0x0
  pushl $127
c0102fba:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fbc:	e9 65 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fc1 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fc1:	6a 00                	push   $0x0
  pushl $128
c0102fc3:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fc8:	e9 59 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fcd <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $129
c0102fcf:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fd4:	e9 4d fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fd9 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fd9:	6a 00                	push   $0x0
  pushl $130
c0102fdb:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fe0:	e9 41 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102fe5 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fe5:	6a 00                	push   $0x0
  pushl $131
c0102fe7:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fec:	e9 35 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102ff1 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $132
c0102ff3:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102ff8:	e9 29 fb ff ff       	jmp    c0102b26 <__alltraps>

c0102ffd <vector133>:
.globl vector133
vector133:
  pushl $0
c0102ffd:	6a 00                	push   $0x0
  pushl $133
c0102fff:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0103004:	e9 1d fb ff ff       	jmp    c0102b26 <__alltraps>

c0103009 <vector134>:
.globl vector134
vector134:
  pushl $0
c0103009:	6a 00                	push   $0x0
  pushl $134
c010300b:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103010:	e9 11 fb ff ff       	jmp    c0102b26 <__alltraps>

c0103015 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $135
c0103017:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010301c:	e9 05 fb ff ff       	jmp    c0102b26 <__alltraps>

c0103021 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103021:	6a 00                	push   $0x0
  pushl $136
c0103023:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103028:	e9 f9 fa ff ff       	jmp    c0102b26 <__alltraps>

c010302d <vector137>:
.globl vector137
vector137:
  pushl $0
c010302d:	6a 00                	push   $0x0
  pushl $137
c010302f:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103034:	e9 ed fa ff ff       	jmp    c0102b26 <__alltraps>

c0103039 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $138
c010303b:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103040:	e9 e1 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103045 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103045:	6a 00                	push   $0x0
  pushl $139
c0103047:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010304c:	e9 d5 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103051 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103051:	6a 00                	push   $0x0
  pushl $140
c0103053:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103058:	e9 c9 fa ff ff       	jmp    c0102b26 <__alltraps>

c010305d <vector141>:
.globl vector141
vector141:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $141
c010305f:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103064:	e9 bd fa ff ff       	jmp    c0102b26 <__alltraps>

c0103069 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103069:	6a 00                	push   $0x0
  pushl $142
c010306b:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103070:	e9 b1 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103075 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103075:	6a 00                	push   $0x0
  pushl $143
c0103077:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010307c:	e9 a5 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103081 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103081:	6a 00                	push   $0x0
  pushl $144
c0103083:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103088:	e9 99 fa ff ff       	jmp    c0102b26 <__alltraps>

c010308d <vector145>:
.globl vector145
vector145:
  pushl $0
c010308d:	6a 00                	push   $0x0
  pushl $145
c010308f:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103094:	e9 8d fa ff ff       	jmp    c0102b26 <__alltraps>

c0103099 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103099:	6a 00                	push   $0x0
  pushl $146
c010309b:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01030a0:	e9 81 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030a5 <vector147>:
.globl vector147
vector147:
  pushl $0
c01030a5:	6a 00                	push   $0x0
  pushl $147
c01030a7:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01030ac:	e9 75 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030b1 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030b1:	6a 00                	push   $0x0
  pushl $148
c01030b3:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030b8:	e9 69 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030bd <vector149>:
.globl vector149
vector149:
  pushl $0
c01030bd:	6a 00                	push   $0x0
  pushl $149
c01030bf:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030c4:	e9 5d fa ff ff       	jmp    c0102b26 <__alltraps>

c01030c9 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030c9:	6a 00                	push   $0x0
  pushl $150
c01030cb:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030d0:	e9 51 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030d5 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030d5:	6a 00                	push   $0x0
  pushl $151
c01030d7:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030dc:	e9 45 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030e1 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030e1:	6a 00                	push   $0x0
  pushl $152
c01030e3:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030e8:	e9 39 fa ff ff       	jmp    c0102b26 <__alltraps>

c01030ed <vector153>:
.globl vector153
vector153:
  pushl $0
c01030ed:	6a 00                	push   $0x0
  pushl $153
c01030ef:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030f4:	e9 2d fa ff ff       	jmp    c0102b26 <__alltraps>

c01030f9 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030f9:	6a 00                	push   $0x0
  pushl $154
c01030fb:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103100:	e9 21 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103105 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103105:	6a 00                	push   $0x0
  pushl $155
c0103107:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c010310c:	e9 15 fa ff ff       	jmp    c0102b26 <__alltraps>

c0103111 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103111:	6a 00                	push   $0x0
  pushl $156
c0103113:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103118:	e9 09 fa ff ff       	jmp    c0102b26 <__alltraps>

c010311d <vector157>:
.globl vector157
vector157:
  pushl $0
c010311d:	6a 00                	push   $0x0
  pushl $157
c010311f:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103124:	e9 fd f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103129 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103129:	6a 00                	push   $0x0
  pushl $158
c010312b:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103130:	e9 f1 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103135 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103135:	6a 00                	push   $0x0
  pushl $159
c0103137:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010313c:	e9 e5 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103141 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103141:	6a 00                	push   $0x0
  pushl $160
c0103143:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103148:	e9 d9 f9 ff ff       	jmp    c0102b26 <__alltraps>

c010314d <vector161>:
.globl vector161
vector161:
  pushl $0
c010314d:	6a 00                	push   $0x0
  pushl $161
c010314f:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103154:	e9 cd f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103159 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103159:	6a 00                	push   $0x0
  pushl $162
c010315b:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103160:	e9 c1 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103165 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103165:	6a 00                	push   $0x0
  pushl $163
c0103167:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010316c:	e9 b5 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103171 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103171:	6a 00                	push   $0x0
  pushl $164
c0103173:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103178:	e9 a9 f9 ff ff       	jmp    c0102b26 <__alltraps>

c010317d <vector165>:
.globl vector165
vector165:
  pushl $0
c010317d:	6a 00                	push   $0x0
  pushl $165
c010317f:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103184:	e9 9d f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103189 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103189:	6a 00                	push   $0x0
  pushl $166
c010318b:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103190:	e9 91 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103195 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103195:	6a 00                	push   $0x0
  pushl $167
c0103197:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010319c:	e9 85 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031a1 <vector168>:
.globl vector168
vector168:
  pushl $0
c01031a1:	6a 00                	push   $0x0
  pushl $168
c01031a3:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01031a8:	e9 79 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031ad <vector169>:
.globl vector169
vector169:
  pushl $0
c01031ad:	6a 00                	push   $0x0
  pushl $169
c01031af:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031b4:	e9 6d f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031b9 <vector170>:
.globl vector170
vector170:
  pushl $0
c01031b9:	6a 00                	push   $0x0
  pushl $170
c01031bb:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031c0:	e9 61 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031c5 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031c5:	6a 00                	push   $0x0
  pushl $171
c01031c7:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031cc:	e9 55 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031d1 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031d1:	6a 00                	push   $0x0
  pushl $172
c01031d3:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031d8:	e9 49 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031dd <vector173>:
.globl vector173
vector173:
  pushl $0
c01031dd:	6a 00                	push   $0x0
  pushl $173
c01031df:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031e4:	e9 3d f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031e9 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031e9:	6a 00                	push   $0x0
  pushl $174
c01031eb:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031f0:	e9 31 f9 ff ff       	jmp    c0102b26 <__alltraps>

c01031f5 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031f5:	6a 00                	push   $0x0
  pushl $175
c01031f7:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031fc:	e9 25 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103201 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103201:	6a 00                	push   $0x0
  pushl $176
c0103203:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103208:	e9 19 f9 ff ff       	jmp    c0102b26 <__alltraps>

c010320d <vector177>:
.globl vector177
vector177:
  pushl $0
c010320d:	6a 00                	push   $0x0
  pushl $177
c010320f:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103214:	e9 0d f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103219 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103219:	6a 00                	push   $0x0
  pushl $178
c010321b:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103220:	e9 01 f9 ff ff       	jmp    c0102b26 <__alltraps>

c0103225 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103225:	6a 00                	push   $0x0
  pushl $179
c0103227:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010322c:	e9 f5 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103231 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103231:	6a 00                	push   $0x0
  pushl $180
c0103233:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103238:	e9 e9 f8 ff ff       	jmp    c0102b26 <__alltraps>

c010323d <vector181>:
.globl vector181
vector181:
  pushl $0
c010323d:	6a 00                	push   $0x0
  pushl $181
c010323f:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103244:	e9 dd f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103249 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103249:	6a 00                	push   $0x0
  pushl $182
c010324b:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103250:	e9 d1 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103255 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103255:	6a 00                	push   $0x0
  pushl $183
c0103257:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010325c:	e9 c5 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103261 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103261:	6a 00                	push   $0x0
  pushl $184
c0103263:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103268:	e9 b9 f8 ff ff       	jmp    c0102b26 <__alltraps>

c010326d <vector185>:
.globl vector185
vector185:
  pushl $0
c010326d:	6a 00                	push   $0x0
  pushl $185
c010326f:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103274:	e9 ad f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103279 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103279:	6a 00                	push   $0x0
  pushl $186
c010327b:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103280:	e9 a1 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103285 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103285:	6a 00                	push   $0x0
  pushl $187
c0103287:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010328c:	e9 95 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103291 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103291:	6a 00                	push   $0x0
  pushl $188
c0103293:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103298:	e9 89 f8 ff ff       	jmp    c0102b26 <__alltraps>

c010329d <vector189>:
.globl vector189
vector189:
  pushl $0
c010329d:	6a 00                	push   $0x0
  pushl $189
c010329f:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01032a4:	e9 7d f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032a9 <vector190>:
.globl vector190
vector190:
  pushl $0
c01032a9:	6a 00                	push   $0x0
  pushl $190
c01032ab:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032b0:	e9 71 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032b5 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032b5:	6a 00                	push   $0x0
  pushl $191
c01032b7:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032bc:	e9 65 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032c1 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032c1:	6a 00                	push   $0x0
  pushl $192
c01032c3:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032c8:	e9 59 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032cd <vector193>:
.globl vector193
vector193:
  pushl $0
c01032cd:	6a 00                	push   $0x0
  pushl $193
c01032cf:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032d4:	e9 4d f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032d9 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032d9:	6a 00                	push   $0x0
  pushl $194
c01032db:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032e0:	e9 41 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032e5 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032e5:	6a 00                	push   $0x0
  pushl $195
c01032e7:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032ec:	e9 35 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032f1 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032f1:	6a 00                	push   $0x0
  pushl $196
c01032f3:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032f8:	e9 29 f8 ff ff       	jmp    c0102b26 <__alltraps>

c01032fd <vector197>:
.globl vector197
vector197:
  pushl $0
c01032fd:	6a 00                	push   $0x0
  pushl $197
c01032ff:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103304:	e9 1d f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103309 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103309:	6a 00                	push   $0x0
  pushl $198
c010330b:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103310:	e9 11 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103315 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103315:	6a 00                	push   $0x0
  pushl $199
c0103317:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010331c:	e9 05 f8 ff ff       	jmp    c0102b26 <__alltraps>

c0103321 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103321:	6a 00                	push   $0x0
  pushl $200
c0103323:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103328:	e9 f9 f7 ff ff       	jmp    c0102b26 <__alltraps>

c010332d <vector201>:
.globl vector201
vector201:
  pushl $0
c010332d:	6a 00                	push   $0x0
  pushl $201
c010332f:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103334:	e9 ed f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103339 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103339:	6a 00                	push   $0x0
  pushl $202
c010333b:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103340:	e9 e1 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103345 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103345:	6a 00                	push   $0x0
  pushl $203
c0103347:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010334c:	e9 d5 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103351 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103351:	6a 00                	push   $0x0
  pushl $204
c0103353:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103358:	e9 c9 f7 ff ff       	jmp    c0102b26 <__alltraps>

c010335d <vector205>:
.globl vector205
vector205:
  pushl $0
c010335d:	6a 00                	push   $0x0
  pushl $205
c010335f:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103364:	e9 bd f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103369 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103369:	6a 00                	push   $0x0
  pushl $206
c010336b:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103370:	e9 b1 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103375 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103375:	6a 00                	push   $0x0
  pushl $207
c0103377:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010337c:	e9 a5 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103381 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103381:	6a 00                	push   $0x0
  pushl $208
c0103383:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103388:	e9 99 f7 ff ff       	jmp    c0102b26 <__alltraps>

c010338d <vector209>:
.globl vector209
vector209:
  pushl $0
c010338d:	6a 00                	push   $0x0
  pushl $209
c010338f:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103394:	e9 8d f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103399 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103399:	6a 00                	push   $0x0
  pushl $210
c010339b:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01033a0:	e9 81 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033a5 <vector211>:
.globl vector211
vector211:
  pushl $0
c01033a5:	6a 00                	push   $0x0
  pushl $211
c01033a7:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01033ac:	e9 75 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033b1 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033b1:	6a 00                	push   $0x0
  pushl $212
c01033b3:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033b8:	e9 69 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033bd <vector213>:
.globl vector213
vector213:
  pushl $0
c01033bd:	6a 00                	push   $0x0
  pushl $213
c01033bf:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033c4:	e9 5d f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033c9 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033c9:	6a 00                	push   $0x0
  pushl $214
c01033cb:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033d0:	e9 51 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033d5 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033d5:	6a 00                	push   $0x0
  pushl $215
c01033d7:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033dc:	e9 45 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033e1 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033e1:	6a 00                	push   $0x0
  pushl $216
c01033e3:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033e8:	e9 39 f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033ed <vector217>:
.globl vector217
vector217:
  pushl $0
c01033ed:	6a 00                	push   $0x0
  pushl $217
c01033ef:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033f4:	e9 2d f7 ff ff       	jmp    c0102b26 <__alltraps>

c01033f9 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033f9:	6a 00                	push   $0x0
  pushl $218
c01033fb:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103400:	e9 21 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103405 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103405:	6a 00                	push   $0x0
  pushl $219
c0103407:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c010340c:	e9 15 f7 ff ff       	jmp    c0102b26 <__alltraps>

c0103411 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103411:	6a 00                	push   $0x0
  pushl $220
c0103413:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103418:	e9 09 f7 ff ff       	jmp    c0102b26 <__alltraps>

c010341d <vector221>:
.globl vector221
vector221:
  pushl $0
c010341d:	6a 00                	push   $0x0
  pushl $221
c010341f:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103424:	e9 fd f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103429 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103429:	6a 00                	push   $0x0
  pushl $222
c010342b:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103430:	e9 f1 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103435 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103435:	6a 00                	push   $0x0
  pushl $223
c0103437:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010343c:	e9 e5 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103441 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103441:	6a 00                	push   $0x0
  pushl $224
c0103443:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103448:	e9 d9 f6 ff ff       	jmp    c0102b26 <__alltraps>

c010344d <vector225>:
.globl vector225
vector225:
  pushl $0
c010344d:	6a 00                	push   $0x0
  pushl $225
c010344f:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103454:	e9 cd f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103459 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103459:	6a 00                	push   $0x0
  pushl $226
c010345b:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103460:	e9 c1 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103465 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103465:	6a 00                	push   $0x0
  pushl $227
c0103467:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010346c:	e9 b5 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103471 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103471:	6a 00                	push   $0x0
  pushl $228
c0103473:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103478:	e9 a9 f6 ff ff       	jmp    c0102b26 <__alltraps>

c010347d <vector229>:
.globl vector229
vector229:
  pushl $0
c010347d:	6a 00                	push   $0x0
  pushl $229
c010347f:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103484:	e9 9d f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103489 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103489:	6a 00                	push   $0x0
  pushl $230
c010348b:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103490:	e9 91 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103495 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103495:	6a 00                	push   $0x0
  pushl $231
c0103497:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010349c:	e9 85 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034a1 <vector232>:
.globl vector232
vector232:
  pushl $0
c01034a1:	6a 00                	push   $0x0
  pushl $232
c01034a3:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01034a8:	e9 79 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034ad <vector233>:
.globl vector233
vector233:
  pushl $0
c01034ad:	6a 00                	push   $0x0
  pushl $233
c01034af:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034b4:	e9 6d f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034b9 <vector234>:
.globl vector234
vector234:
  pushl $0
c01034b9:	6a 00                	push   $0x0
  pushl $234
c01034bb:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034c0:	e9 61 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034c5 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034c5:	6a 00                	push   $0x0
  pushl $235
c01034c7:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034cc:	e9 55 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034d1 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034d1:	6a 00                	push   $0x0
  pushl $236
c01034d3:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034d8:	e9 49 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034dd <vector237>:
.globl vector237
vector237:
  pushl $0
c01034dd:	6a 00                	push   $0x0
  pushl $237
c01034df:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034e4:	e9 3d f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034e9 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034e9:	6a 00                	push   $0x0
  pushl $238
c01034eb:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034f0:	e9 31 f6 ff ff       	jmp    c0102b26 <__alltraps>

c01034f5 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034f5:	6a 00                	push   $0x0
  pushl $239
c01034f7:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034fc:	e9 25 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103501 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103501:	6a 00                	push   $0x0
  pushl $240
c0103503:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103508:	e9 19 f6 ff ff       	jmp    c0102b26 <__alltraps>

c010350d <vector241>:
.globl vector241
vector241:
  pushl $0
c010350d:	6a 00                	push   $0x0
  pushl $241
c010350f:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103514:	e9 0d f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103519 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103519:	6a 00                	push   $0x0
  pushl $242
c010351b:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103520:	e9 01 f6 ff ff       	jmp    c0102b26 <__alltraps>

c0103525 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103525:	6a 00                	push   $0x0
  pushl $243
c0103527:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010352c:	e9 f5 f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103531 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103531:	6a 00                	push   $0x0
  pushl $244
c0103533:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103538:	e9 e9 f5 ff ff       	jmp    c0102b26 <__alltraps>

c010353d <vector245>:
.globl vector245
vector245:
  pushl $0
c010353d:	6a 00                	push   $0x0
  pushl $245
c010353f:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103544:	e9 dd f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103549 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103549:	6a 00                	push   $0x0
  pushl $246
c010354b:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103550:	e9 d1 f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103555 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103555:	6a 00                	push   $0x0
  pushl $247
c0103557:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010355c:	e9 c5 f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103561 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103561:	6a 00                	push   $0x0
  pushl $248
c0103563:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103568:	e9 b9 f5 ff ff       	jmp    c0102b26 <__alltraps>

c010356d <vector249>:
.globl vector249
vector249:
  pushl $0
c010356d:	6a 00                	push   $0x0
  pushl $249
c010356f:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103574:	e9 ad f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103579 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103579:	6a 00                	push   $0x0
  pushl $250
c010357b:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103580:	e9 a1 f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103585 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103585:	6a 00                	push   $0x0
  pushl $251
c0103587:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010358c:	e9 95 f5 ff ff       	jmp    c0102b26 <__alltraps>

c0103591 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103591:	6a 00                	push   $0x0
  pushl $252
c0103593:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103598:	e9 89 f5 ff ff       	jmp    c0102b26 <__alltraps>

c010359d <vector253>:
.globl vector253
vector253:
  pushl $0
c010359d:	6a 00                	push   $0x0
  pushl $253
c010359f:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01035a4:	e9 7d f5 ff ff       	jmp    c0102b26 <__alltraps>

c01035a9 <vector254>:
.globl vector254
vector254:
  pushl $0
c01035a9:	6a 00                	push   $0x0
  pushl $254
c01035ab:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035b0:	e9 71 f5 ff ff       	jmp    c0102b26 <__alltraps>

c01035b5 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035b5:	6a 00                	push   $0x0
  pushl $255
c01035b7:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035bc:	e9 65 f5 ff ff       	jmp    c0102b26 <__alltraps>

c01035c1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035c1:	55                   	push   %ebp
c01035c2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035c4:	8b 55 08             	mov    0x8(%ebp),%edx
c01035c7:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01035cc:	29 c2                	sub    %eax,%edx
c01035ce:	89 d0                	mov    %edx,%eax
c01035d0:	c1 f8 05             	sar    $0x5,%eax
}
c01035d3:	5d                   	pop    %ebp
c01035d4:	c3                   	ret    

c01035d5 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035d5:	55                   	push   %ebp
c01035d6:	89 e5                	mov    %esp,%ebp
c01035d8:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035db:	8b 45 08             	mov    0x8(%ebp),%eax
c01035de:	89 04 24             	mov    %eax,(%esp)
c01035e1:	e8 db ff ff ff       	call   c01035c1 <page2ppn>
c01035e6:	c1 e0 0c             	shl    $0xc,%eax
}
c01035e9:	c9                   	leave  
c01035ea:	c3                   	ret    

c01035eb <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035eb:	55                   	push   %ebp
c01035ec:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f1:	8b 00                	mov    (%eax),%eax
}
c01035f3:	5d                   	pop    %ebp
c01035f4:	c3                   	ret    

c01035f5 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035f5:	55                   	push   %ebp
c01035f6:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01035fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035fe:	89 10                	mov    %edx,(%eax)
}
c0103600:	5d                   	pop    %ebp
c0103601:	c3                   	ret    

c0103602 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103602:	55                   	push   %ebp
c0103603:	89 e5                	mov    %esp,%ebp
c0103605:	83 ec 10             	sub    $0x10,%esp
c0103608:	c7 45 fc 14 30 15 c0 	movl   $0xc0153014,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010360f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103612:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103615:	89 50 04             	mov    %edx,0x4(%eax)
c0103618:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010361b:	8b 50 04             	mov    0x4(%eax),%edx
c010361e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103621:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103623:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c010362a:	00 00 00 
}
c010362d:	c9                   	leave  
c010362e:	c3                   	ret    

c010362f <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010362f:	55                   	push   %ebp
c0103630:	89 e5                	mov    %esp,%ebp
c0103632:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103635:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103639:	75 24                	jne    c010365f <default_init_memmap+0x30>
c010363b:	c7 44 24 0c 50 5f 11 	movl   $0xc0115f50,0xc(%esp)
c0103642:	c0 
c0103643:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010364a:	c0 
c010364b:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103652:	00 
c0103653:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010365a:	e8 69 d8 ff ff       	call   c0100ec8 <__panic>
    struct Page *p = base;
c010365f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103662:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103665:	e9 dc 00 00 00       	jmp    c0103746 <default_init_memmap+0x117>
        assert(PageReserved(p));
c010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010366d:	83 c0 04             	add    $0x4,%eax
c0103670:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103677:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010367a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010367d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103680:	0f a3 10             	bt     %edx,(%eax)
c0103683:	19 c0                	sbb    %eax,%eax
c0103685:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c0103688:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010368c:	0f 95 c0             	setne  %al
c010368f:	0f b6 c0             	movzbl %al,%eax
c0103692:	85 c0                	test   %eax,%eax
c0103694:	75 24                	jne    c01036ba <default_init_memmap+0x8b>
c0103696:	c7 44 24 0c 81 5f 11 	movl   $0xc0115f81,0xc(%esp)
c010369d:	c0 
c010369e:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01036a5:	c0 
c01036a6:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01036ad:	00 
c01036ae:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01036b5:	e8 0e d8 ff ff       	call   c0100ec8 <__panic>
        p->flags = 0;
c01036ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c7:	83 c0 04             	add    $0x4,%eax
c01036ca:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036da:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036e7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036ee:	00 
c01036ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f2:	89 04 24             	mov    %eax,(%esp)
c01036f5:	e8 fb fe ff ff       	call   c01035f5 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036fd:	83 c0 0c             	add    $0xc,%eax
c0103700:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
c0103707:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010370a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010370d:	8b 00                	mov    (%eax),%eax
c010370f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103712:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103715:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103718:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010371b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010371e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103721:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103724:	89 10                	mov    %edx,(%eax)
c0103726:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103729:	8b 10                	mov    (%eax),%edx
c010372b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010372e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103731:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103734:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103737:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010373a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010373d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103740:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103742:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103746:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103749:	c1 e0 05             	shl    $0x5,%eax
c010374c:	89 c2                	mov    %eax,%edx
c010374e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103751:	01 d0                	add    %edx,%eax
c0103753:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103756:	0f 85 0e ff ff ff    	jne    c010366a <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c010375c:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103762:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103765:	01 d0                	add    %edx,%eax
c0103767:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    //first block
    base->property = n;
c010376c:	8b 45 08             	mov    0x8(%ebp),%eax
c010376f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103772:	89 50 08             	mov    %edx,0x8(%eax)
}
c0103775:	c9                   	leave  
c0103776:	c3                   	ret    

c0103777 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103777:	55                   	push   %ebp
c0103778:	89 e5                	mov    %esp,%ebp
c010377a:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c010377d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103781:	75 24                	jne    c01037a7 <default_alloc_pages+0x30>
c0103783:	c7 44 24 0c 50 5f 11 	movl   $0xc0115f50,0xc(%esp)
c010378a:	c0 
c010378b:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103792:	c0 
c0103793:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c010379a:	00 
c010379b:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01037a2:	e8 21 d7 ff ff       	call   c0100ec8 <__panic>
    if (n > nr_free) {
c01037a7:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01037ac:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037af:	73 0a                	jae    c01037bb <default_alloc_pages+0x44>
        return NULL;
c01037b1:	b8 00 00 00 00       	mov    $0x0,%eax
c01037b6:	e9 37 01 00 00       	jmp    c01038f2 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01037bb:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037c2:	e9 0a 01 00 00       	jmp    c01038d1 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ca:	83 e8 0c             	sub    $0xc,%eax
c01037cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d3:	8b 40 08             	mov    0x8(%eax),%eax
c01037d6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037d9:	0f 82 f2 00 00 00    	jb     c01038d1 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037e6:	eb 7c                	jmp    c0103864 <default_alloc_pages+0xed>
c01037e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037f1:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037fa:	83 e8 0c             	sub    $0xc,%eax
c01037fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0103800:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103803:	83 c0 04             	add    $0x4,%eax
c0103806:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010380d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103810:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103813:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103816:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c0103819:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010381c:	83 c0 04             	add    $0x4,%eax
c010381f:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103826:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103829:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010382c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010382f:	0f b3 10             	btr    %edx,(%eax)
c0103832:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103835:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103838:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010383b:	8b 40 04             	mov    0x4(%eax),%eax
c010383e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103841:	8b 12                	mov    (%edx),%edx
c0103843:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103846:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103849:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010384c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010384f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103852:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103855:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103858:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c010385a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010385d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0103860:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103867:	3b 45 08             	cmp    0x8(%ebp),%eax
c010386a:	0f 82 78 ff ff ff    	jb     c01037e8 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0103870:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103873:	8b 40 08             	mov    0x8(%eax),%eax
c0103876:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103879:	76 12                	jbe    c010388d <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c010387b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010387e:	8d 50 f4             	lea    -0xc(%eax),%edx
c0103881:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103884:	8b 40 08             	mov    0x8(%eax),%eax
c0103887:	2b 45 08             	sub    0x8(%ebp),%eax
c010388a:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c010388d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103890:	83 c0 04             	add    $0x4,%eax
c0103893:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010389a:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010389d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01038a0:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01038a3:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c01038a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038a9:	83 c0 04             	add    $0x4,%eax
c01038ac:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01038b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038b9:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038bc:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01038bf:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01038c4:	2b 45 08             	sub    0x8(%ebp),%eax
c01038c7:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
        return p;
c01038cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038cf:	eb 21                	jmp    c01038f2 <default_alloc_pages+0x17b>
c01038d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d4:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038d7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038da:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038e0:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c01038e7:	0f 85 da fe ff ff    	jne    c01037c7 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038f2:	c9                   	leave  
c01038f3:	c3                   	ret    

c01038f4 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038f4:	55                   	push   %ebp
c01038f5:	89 e5                	mov    %esp,%ebp
c01038f7:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01038fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038fe:	75 24                	jne    c0103924 <default_free_pages+0x30>
c0103900:	c7 44 24 0c 50 5f 11 	movl   $0xc0115f50,0xc(%esp)
c0103907:	c0 
c0103908:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010390f:	c0 
c0103910:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c0103917:	00 
c0103918:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010391f:	e8 a4 d5 ff ff       	call   c0100ec8 <__panic>
    assert(PageReserved(base));
c0103924:	8b 45 08             	mov    0x8(%ebp),%eax
c0103927:	83 c0 04             	add    $0x4,%eax
c010392a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103931:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103934:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103937:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010393a:	0f a3 10             	bt     %edx,(%eax)
c010393d:	19 c0                	sbb    %eax,%eax
c010393f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103942:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103946:	0f 95 c0             	setne  %al
c0103949:	0f b6 c0             	movzbl %al,%eax
c010394c:	85 c0                	test   %eax,%eax
c010394e:	75 24                	jne    c0103974 <default_free_pages+0x80>
c0103950:	c7 44 24 0c 91 5f 11 	movl   $0xc0115f91,0xc(%esp)
c0103957:	c0 
c0103958:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010395f:	c0 
c0103960:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c0103967:	00 
c0103968:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010396f:	e8 54 d5 ff ff       	call   c0100ec8 <__panic>

    list_entry_t *le = &free_list;
c0103974:	c7 45 f4 14 30 15 c0 	movl   $0xc0153014,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010397b:	eb 13                	jmp    c0103990 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c010397d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103980:	83 e8 0c             	sub    $0xc,%eax
c0103983:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0103986:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103989:	3b 45 08             	cmp    0x8(%ebp),%eax
c010398c:	76 02                	jbe    c0103990 <default_free_pages+0x9c>
        break;
c010398e:	eb 18                	jmp    c01039a8 <default_free_pages+0xb4>
c0103990:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103993:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103996:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103999:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010399c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010399f:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c01039a6:	75 d5                	jne    c010397d <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039ae:	eb 4b                	jmp    c01039fb <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c01039b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b3:	8d 50 0c             	lea    0xc(%eax),%edx
c01039b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039bc:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039c2:	8b 00                	mov    (%eax),%eax
c01039c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039c7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039d3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039d6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039d9:	89 10                	mov    %edx,(%eax)
c01039db:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039de:	8b 10                	mov    (%eax),%edx
c01039e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039e3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039e9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039ec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039f2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039f5:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039f7:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c01039fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039fe:	c1 e0 05             	shl    $0x5,%eax
c0103a01:	89 c2                	mov    %eax,%edx
c0103a03:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a06:	01 d0                	add    %edx,%eax
c0103a08:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a0b:	77 a3                	ja     c01039b0 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0103a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a10:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c0103a17:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103a1e:	00 
c0103a1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a22:	89 04 24             	mov    %eax,(%esp)
c0103a25:	e8 cb fb ff ff       	call   c01035f5 <set_page_ref>
    ClearPageProperty(base);
c0103a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a2d:	83 c0 04             	add    $0x4,%eax
c0103a30:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a37:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a3a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a3d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a40:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a43:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a46:	83 c0 04             	add    $0x4,%eax
c0103a49:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a50:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a53:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a56:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a59:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a5f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a62:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a68:	83 e8 0c             	sub    $0xc,%eax
c0103a6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a71:	c1 e0 05             	shl    $0x5,%eax
c0103a74:	89 c2                	mov    %eax,%edx
c0103a76:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a79:	01 d0                	add    %edx,%eax
c0103a7b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a7e:	75 1e                	jne    c0103a9e <default_free_pages+0x1aa>
      base->property += p->property;
c0103a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a83:	8b 50 08             	mov    0x8(%eax),%edx
c0103a86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a89:	8b 40 08             	mov    0x8(%eax),%eax
c0103a8c:	01 c2                	add    %eax,%edx
c0103a8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a91:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a97:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103a9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa1:	83 c0 0c             	add    $0xc,%eax
c0103aa4:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103aa7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103aaa:	8b 00                	mov    (%eax),%eax
c0103aac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ab2:	83 e8 0c             	sub    $0xc,%eax
c0103ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103ab8:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103abf:	74 57                	je     c0103b18 <default_free_pages+0x224>
c0103ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac4:	83 e8 20             	sub    $0x20,%eax
c0103ac7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103aca:	75 4c                	jne    c0103b18 <default_free_pages+0x224>
      while(le!=&free_list){
c0103acc:	eb 41                	jmp    c0103b0f <default_free_pages+0x21b>
        if(p->property){
c0103ace:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ad1:	8b 40 08             	mov    0x8(%eax),%eax
c0103ad4:	85 c0                	test   %eax,%eax
c0103ad6:	74 20                	je     c0103af8 <default_free_pages+0x204>
          p->property += base->property;
c0103ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103adb:	8b 50 08             	mov    0x8(%eax),%edx
c0103ade:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ae1:	8b 40 08             	mov    0x8(%eax),%eax
c0103ae4:	01 c2                	add    %eax,%edx
c0103ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae9:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103aec:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aef:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103af6:	eb 20                	jmp    c0103b18 <default_free_pages+0x224>
c0103af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103afb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103afe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103b01:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103b03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b09:	83 e8 0c             	sub    $0xc,%eax
c0103b0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103b0f:	81 7d f4 14 30 15 c0 	cmpl   $0xc0153014,-0xc(%ebp)
c0103b16:	75 b6                	jne    c0103ace <default_free_pages+0x1da>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103b18:	8b 15 1c 30 15 c0    	mov    0xc015301c,%edx
c0103b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b21:	01 d0                	add    %edx,%eax
c0103b23:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
    return ;
c0103b28:	90                   	nop
}
c0103b29:	c9                   	leave  
c0103b2a:	c3                   	ret    

c0103b2b <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b2b:	55                   	push   %ebp
c0103b2c:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b2e:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
}
c0103b33:	5d                   	pop    %ebp
c0103b34:	c3                   	ret    

c0103b35 <basic_check>:

static void
basic_check(void) {
c0103b35:	55                   	push   %ebp
c0103b36:	89 e5                	mov    %esp,%ebp
c0103b38:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b45:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b4e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b55:	e8 dc 15 00 00       	call   c0105136 <alloc_pages>
c0103b5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b61:	75 24                	jne    c0103b87 <basic_check+0x52>
c0103b63:	c7 44 24 0c a4 5f 11 	movl   $0xc0115fa4,0xc(%esp)
c0103b6a:	c0 
c0103b6b:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103b72:	c0 
c0103b73:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b7a:	00 
c0103b7b:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103b82:	e8 41 d3 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b87:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b8e:	e8 a3 15 00 00       	call   c0105136 <alloc_pages>
c0103b93:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b9a:	75 24                	jne    c0103bc0 <basic_check+0x8b>
c0103b9c:	c7 44 24 0c c0 5f 11 	movl   $0xc0115fc0,0xc(%esp)
c0103ba3:	c0 
c0103ba4:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103bab:	c0 
c0103bac:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103bb3:	00 
c0103bb4:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103bbb:	e8 08 d3 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103bc0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103bc7:	e8 6a 15 00 00       	call   c0105136 <alloc_pages>
c0103bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103bd3:	75 24                	jne    c0103bf9 <basic_check+0xc4>
c0103bd5:	c7 44 24 0c dc 5f 11 	movl   $0xc0115fdc,0xc(%esp)
c0103bdc:	c0 
c0103bdd:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103be4:	c0 
c0103be5:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bec:	00 
c0103bed:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103bf4:	e8 cf d2 ff ff       	call   c0100ec8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bfc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bff:	74 10                	je     c0103c11 <basic_check+0xdc>
c0103c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c07:	74 08                	je     c0103c11 <basic_check+0xdc>
c0103c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103c0f:	75 24                	jne    c0103c35 <basic_check+0x100>
c0103c11:	c7 44 24 0c f8 5f 11 	movl   $0xc0115ff8,0xc(%esp)
c0103c18:	c0 
c0103c19:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103c20:	c0 
c0103c21:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c28:	00 
c0103c29:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103c30:	e8 93 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c35:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c38:	89 04 24             	mov    %eax,(%esp)
c0103c3b:	e8 ab f9 ff ff       	call   c01035eb <page_ref>
c0103c40:	85 c0                	test   %eax,%eax
c0103c42:	75 1e                	jne    c0103c62 <basic_check+0x12d>
c0103c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c47:	89 04 24             	mov    %eax,(%esp)
c0103c4a:	e8 9c f9 ff ff       	call   c01035eb <page_ref>
c0103c4f:	85 c0                	test   %eax,%eax
c0103c51:	75 0f                	jne    c0103c62 <basic_check+0x12d>
c0103c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c56:	89 04 24             	mov    %eax,(%esp)
c0103c59:	e8 8d f9 ff ff       	call   c01035eb <page_ref>
c0103c5e:	85 c0                	test   %eax,%eax
c0103c60:	74 24                	je     c0103c86 <basic_check+0x151>
c0103c62:	c7 44 24 0c 1c 60 11 	movl   $0xc011601c,0xc(%esp)
c0103c69:	c0 
c0103c6a:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103c71:	c0 
c0103c72:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c79:	00 
c0103c7a:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103c81:	e8 42 d2 ff ff       	call   c0100ec8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c89:	89 04 24             	mov    %eax,(%esp)
c0103c8c:	e8 44 f9 ff ff       	call   c01035d5 <page2pa>
c0103c91:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103c97:	c1 e2 0c             	shl    $0xc,%edx
c0103c9a:	39 d0                	cmp    %edx,%eax
c0103c9c:	72 24                	jb     c0103cc2 <basic_check+0x18d>
c0103c9e:	c7 44 24 0c 58 60 11 	movl   $0xc0116058,0xc(%esp)
c0103ca5:	c0 
c0103ca6:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103cad:	c0 
c0103cae:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103cb5:	00 
c0103cb6:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103cbd:	e8 06 d2 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103cc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103cc5:	89 04 24             	mov    %eax,(%esp)
c0103cc8:	e8 08 f9 ff ff       	call   c01035d5 <page2pa>
c0103ccd:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103cd3:	c1 e2 0c             	shl    $0xc,%edx
c0103cd6:	39 d0                	cmp    %edx,%eax
c0103cd8:	72 24                	jb     c0103cfe <basic_check+0x1c9>
c0103cda:	c7 44 24 0c 75 60 11 	movl   $0xc0116075,0xc(%esp)
c0103ce1:	c0 
c0103ce2:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103ce9:	c0 
c0103cea:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103cf1:	00 
c0103cf2:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103cf9:	e8 ca d1 ff ff       	call   c0100ec8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d01:	89 04 24             	mov    %eax,(%esp)
c0103d04:	e8 cc f8 ff ff       	call   c01035d5 <page2pa>
c0103d09:	8b 15 80 fe 14 c0    	mov    0xc014fe80,%edx
c0103d0f:	c1 e2 0c             	shl    $0xc,%edx
c0103d12:	39 d0                	cmp    %edx,%eax
c0103d14:	72 24                	jb     c0103d3a <basic_check+0x205>
c0103d16:	c7 44 24 0c 92 60 11 	movl   $0xc0116092,0xc(%esp)
c0103d1d:	c0 
c0103d1e:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103d25:	c0 
c0103d26:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d2d:	00 
c0103d2e:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103d35:	e8 8e d1 ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c0103d3a:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c0103d3f:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0103d45:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d48:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d4b:	c7 45 e0 14 30 15 c0 	movl   $0xc0153014,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d52:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d55:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d58:	89 50 04             	mov    %edx,0x4(%eax)
c0103d5b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d5e:	8b 50 04             	mov    0x4(%eax),%edx
c0103d61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d64:	89 10                	mov    %edx,(%eax)
c0103d66:	c7 45 dc 14 30 15 c0 	movl   $0xc0153014,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d70:	8b 40 04             	mov    0x4(%eax),%eax
c0103d73:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d76:	0f 94 c0             	sete   %al
c0103d79:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d7c:	85 c0                	test   %eax,%eax
c0103d7e:	75 24                	jne    c0103da4 <basic_check+0x26f>
c0103d80:	c7 44 24 0c af 60 11 	movl   $0xc01160af,0xc(%esp)
c0103d87:	c0 
c0103d88:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103d8f:	c0 
c0103d90:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103d97:	00 
c0103d98:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103d9f:	e8 24 d1 ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0103da4:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103da9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103dac:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0103db3:	00 00 00 

    assert(alloc_page() == NULL);
c0103db6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dbd:	e8 74 13 00 00       	call   c0105136 <alloc_pages>
c0103dc2:	85 c0                	test   %eax,%eax
c0103dc4:	74 24                	je     c0103dea <basic_check+0x2b5>
c0103dc6:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c0103dcd:	c0 
c0103dce:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103dd5:	c0 
c0103dd6:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103ddd:	00 
c0103dde:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103de5:	e8 de d0 ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103dea:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103df1:	00 
c0103df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103df5:	89 04 24             	mov    %eax,(%esp)
c0103df8:	e8 a4 13 00 00       	call   c01051a1 <free_pages>
    free_page(p1);
c0103dfd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e04:	00 
c0103e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e08:	89 04 24             	mov    %eax,(%esp)
c0103e0b:	e8 91 13 00 00       	call   c01051a1 <free_pages>
    free_page(p2);
c0103e10:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e17:	00 
c0103e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e1b:	89 04 24             	mov    %eax,(%esp)
c0103e1e:	e8 7e 13 00 00       	call   c01051a1 <free_pages>
    assert(nr_free == 3);
c0103e23:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103e28:	83 f8 03             	cmp    $0x3,%eax
c0103e2b:	74 24                	je     c0103e51 <basic_check+0x31c>
c0103e2d:	c7 44 24 0c db 60 11 	movl   $0xc01160db,0xc(%esp)
c0103e34:	c0 
c0103e35:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103e3c:	c0 
c0103e3d:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e44:	00 
c0103e45:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103e4c:	e8 77 d0 ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e58:	e8 d9 12 00 00       	call   c0105136 <alloc_pages>
c0103e5d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e64:	75 24                	jne    c0103e8a <basic_check+0x355>
c0103e66:	c7 44 24 0c a4 5f 11 	movl   $0xc0115fa4,0xc(%esp)
c0103e6d:	c0 
c0103e6e:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103e75:	c0 
c0103e76:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e7d:	00 
c0103e7e:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103e85:	e8 3e d0 ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e8a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e91:	e8 a0 12 00 00       	call   c0105136 <alloc_pages>
c0103e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e9d:	75 24                	jne    c0103ec3 <basic_check+0x38e>
c0103e9f:	c7 44 24 0c c0 5f 11 	movl   $0xc0115fc0,0xc(%esp)
c0103ea6:	c0 
c0103ea7:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103eae:	c0 
c0103eaf:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103eb6:	00 
c0103eb7:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103ebe:	e8 05 d0 ff ff       	call   c0100ec8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ec3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eca:	e8 67 12 00 00       	call   c0105136 <alloc_pages>
c0103ecf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ed2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ed6:	75 24                	jne    c0103efc <basic_check+0x3c7>
c0103ed8:	c7 44 24 0c dc 5f 11 	movl   $0xc0115fdc,0xc(%esp)
c0103edf:	c0 
c0103ee0:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103ee7:	c0 
c0103ee8:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103eef:	00 
c0103ef0:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103ef7:	e8 cc cf ff ff       	call   c0100ec8 <__panic>

    assert(alloc_page() == NULL);
c0103efc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f03:	e8 2e 12 00 00       	call   c0105136 <alloc_pages>
c0103f08:	85 c0                	test   %eax,%eax
c0103f0a:	74 24                	je     c0103f30 <basic_check+0x3fb>
c0103f0c:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c0103f13:	c0 
c0103f14:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103f1b:	c0 
c0103f1c:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103f23:	00 
c0103f24:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103f2b:	e8 98 cf ff ff       	call   c0100ec8 <__panic>

    free_page(p0);
c0103f30:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f37:	00 
c0103f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f3b:	89 04 24             	mov    %eax,(%esp)
c0103f3e:	e8 5e 12 00 00       	call   c01051a1 <free_pages>
c0103f43:	c7 45 d8 14 30 15 c0 	movl   $0xc0153014,-0x28(%ebp)
c0103f4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f4d:	8b 40 04             	mov    0x4(%eax),%eax
c0103f50:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f53:	0f 94 c0             	sete   %al
c0103f56:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f59:	85 c0                	test   %eax,%eax
c0103f5b:	74 24                	je     c0103f81 <basic_check+0x44c>
c0103f5d:	c7 44 24 0c e8 60 11 	movl   $0xc01160e8,0xc(%esp)
c0103f64:	c0 
c0103f65:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103f6c:	c0 
c0103f6d:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f74:	00 
c0103f75:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103f7c:	e8 47 cf ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f88:	e8 a9 11 00 00       	call   c0105136 <alloc_pages>
c0103f8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f93:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f96:	74 24                	je     c0103fbc <basic_check+0x487>
c0103f98:	c7 44 24 0c 00 61 11 	movl   $0xc0116100,0xc(%esp)
c0103f9f:	c0 
c0103fa0:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103fa7:	c0 
c0103fa8:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103faf:	00 
c0103fb0:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103fb7:	e8 0c cf ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0103fbc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fc3:	e8 6e 11 00 00       	call   c0105136 <alloc_pages>
c0103fc8:	85 c0                	test   %eax,%eax
c0103fca:	74 24                	je     c0103ff0 <basic_check+0x4bb>
c0103fcc:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c0103fd3:	c0 
c0103fd4:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0103fdb:	c0 
c0103fdc:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103fe3:	00 
c0103fe4:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0103feb:	e8 d8 ce ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c0103ff0:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0103ff5:	85 c0                	test   %eax,%eax
c0103ff7:	74 24                	je     c010401d <basic_check+0x4e8>
c0103ff9:	c7 44 24 0c 19 61 11 	movl   $0xc0116119,0xc(%esp)
c0104000:	c0 
c0104001:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104008:	c0 
c0104009:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0104010:	00 
c0104011:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104018:	e8 ab ce ff ff       	call   c0100ec8 <__panic>
    free_list = free_list_store;
c010401d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104020:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104023:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0104028:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    nr_free = nr_free_store;
c010402e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104031:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_page(p);
c0104036:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010403d:	00 
c010403e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104041:	89 04 24             	mov    %eax,(%esp)
c0104044:	e8 58 11 00 00       	call   c01051a1 <free_pages>
    free_page(p1);
c0104049:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104050:	00 
c0104051:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104054:	89 04 24             	mov    %eax,(%esp)
c0104057:	e8 45 11 00 00       	call   c01051a1 <free_pages>
    free_page(p2);
c010405c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104063:	00 
c0104064:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104067:	89 04 24             	mov    %eax,(%esp)
c010406a:	e8 32 11 00 00       	call   c01051a1 <free_pages>
}
c010406f:	c9                   	leave  
c0104070:	c3                   	ret    

c0104071 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104071:	55                   	push   %ebp
c0104072:	89 e5                	mov    %esp,%ebp
c0104074:	53                   	push   %ebx
c0104075:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c010407b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104082:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104089:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104090:	eb 6b                	jmp    c01040fd <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104092:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104095:	83 e8 0c             	sub    $0xc,%eax
c0104098:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c010409b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010409e:	83 c0 04             	add    $0x4,%eax
c01040a1:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01040a8:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040ae:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01040b1:	0f a3 10             	bt     %edx,(%eax)
c01040b4:	19 c0                	sbb    %eax,%eax
c01040b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01040b9:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01040bd:	0f 95 c0             	setne  %al
c01040c0:	0f b6 c0             	movzbl %al,%eax
c01040c3:	85 c0                	test   %eax,%eax
c01040c5:	75 24                	jne    c01040eb <default_check+0x7a>
c01040c7:	c7 44 24 0c 26 61 11 	movl   $0xc0116126,0xc(%esp)
c01040ce:	c0 
c01040cf:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01040d6:	c0 
c01040d7:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040de:	00 
c01040df:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01040e6:	e8 dd cd ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c01040eb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040f2:	8b 50 08             	mov    0x8(%eax),%edx
c01040f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040f8:	01 d0                	add    %edx,%eax
c01040fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104100:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104103:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104106:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104109:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010410c:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c0104113:	0f 85 79 ff ff ff    	jne    c0104092 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0104119:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010411c:	e8 b2 10 00 00       	call   c01051d3 <nr_free_pages>
c0104121:	39 c3                	cmp    %eax,%ebx
c0104123:	74 24                	je     c0104149 <default_check+0xd8>
c0104125:	c7 44 24 0c 36 61 11 	movl   $0xc0116136,0xc(%esp)
c010412c:	c0 
c010412d:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104134:	c0 
c0104135:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c010413c:	00 
c010413d:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104144:	e8 7f cd ff ff       	call   c0100ec8 <__panic>

    basic_check();
c0104149:	e8 e7 f9 ff ff       	call   c0103b35 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010414e:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104155:	e8 dc 0f 00 00       	call   c0105136 <alloc_pages>
c010415a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010415d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104161:	75 24                	jne    c0104187 <default_check+0x116>
c0104163:	c7 44 24 0c 4f 61 11 	movl   $0xc011614f,0xc(%esp)
c010416a:	c0 
c010416b:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104172:	c0 
c0104173:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010417a:	00 
c010417b:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104182:	e8 41 cd ff ff       	call   c0100ec8 <__panic>
    assert(!PageProperty(p0));
c0104187:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010418a:	83 c0 04             	add    $0x4,%eax
c010418d:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104194:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104197:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010419a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010419d:	0f a3 10             	bt     %edx,(%eax)
c01041a0:	19 c0                	sbb    %eax,%eax
c01041a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01041a5:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041a9:	0f 95 c0             	setne  %al
c01041ac:	0f b6 c0             	movzbl %al,%eax
c01041af:	85 c0                	test   %eax,%eax
c01041b1:	74 24                	je     c01041d7 <default_check+0x166>
c01041b3:	c7 44 24 0c 5a 61 11 	movl   $0xc011615a,0xc(%esp)
c01041ba:	c0 
c01041bb:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01041c2:	c0 
c01041c3:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01041ca:	00 
c01041cb:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01041d2:	e8 f1 cc ff ff       	call   c0100ec8 <__panic>

    list_entry_t free_list_store = free_list;
c01041d7:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c01041dc:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c01041e2:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041e5:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041e8:	c7 45 b4 14 30 15 c0 	movl   $0xc0153014,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041f2:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041f5:	89 50 04             	mov    %edx,0x4(%eax)
c01041f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041fb:	8b 50 04             	mov    0x4(%eax),%edx
c01041fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104201:	89 10                	mov    %edx,(%eax)
c0104203:	c7 45 b0 14 30 15 c0 	movl   $0xc0153014,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010420a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010420d:	8b 40 04             	mov    0x4(%eax),%eax
c0104210:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104213:	0f 94 c0             	sete   %al
c0104216:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104219:	85 c0                	test   %eax,%eax
c010421b:	75 24                	jne    c0104241 <default_check+0x1d0>
c010421d:	c7 44 24 0c af 60 11 	movl   $0xc01160af,0xc(%esp)
c0104224:	c0 
c0104225:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010422c:	c0 
c010422d:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104234:	00 
c0104235:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010423c:	e8 87 cc ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c0104241:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104248:	e8 e9 0e 00 00       	call   c0105136 <alloc_pages>
c010424d:	85 c0                	test   %eax,%eax
c010424f:	74 24                	je     c0104275 <default_check+0x204>
c0104251:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c0104258:	c0 
c0104259:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104260:	c0 
c0104261:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0104268:	00 
c0104269:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104270:	e8 53 cc ff ff       	call   c0100ec8 <__panic>

    unsigned int nr_free_store = nr_free;
c0104275:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010427a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010427d:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c0104284:	00 00 00 

    free_pages(p0 + 2, 3);
c0104287:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010428a:	83 c0 40             	add    $0x40,%eax
c010428d:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104294:	00 
c0104295:	89 04 24             	mov    %eax,(%esp)
c0104298:	e8 04 0f 00 00       	call   c01051a1 <free_pages>
    assert(alloc_pages(4) == NULL);
c010429d:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01042a4:	e8 8d 0e 00 00       	call   c0105136 <alloc_pages>
c01042a9:	85 c0                	test   %eax,%eax
c01042ab:	74 24                	je     c01042d1 <default_check+0x260>
c01042ad:	c7 44 24 0c 6c 61 11 	movl   $0xc011616c,0xc(%esp)
c01042b4:	c0 
c01042b5:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01042bc:	c0 
c01042bd:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01042c4:	00 
c01042c5:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01042cc:	e8 f7 cb ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042d4:	83 c0 40             	add    $0x40,%eax
c01042d7:	83 c0 04             	add    $0x4,%eax
c01042da:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042e1:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042e7:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042ea:	0f a3 10             	bt     %edx,(%eax)
c01042ed:	19 c0                	sbb    %eax,%eax
c01042ef:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01042f2:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042f6:	0f 95 c0             	setne  %al
c01042f9:	0f b6 c0             	movzbl %al,%eax
c01042fc:	85 c0                	test   %eax,%eax
c01042fe:	74 0e                	je     c010430e <default_check+0x29d>
c0104300:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104303:	83 c0 40             	add    $0x40,%eax
c0104306:	8b 40 08             	mov    0x8(%eax),%eax
c0104309:	83 f8 03             	cmp    $0x3,%eax
c010430c:	74 24                	je     c0104332 <default_check+0x2c1>
c010430e:	c7 44 24 0c 84 61 11 	movl   $0xc0116184,0xc(%esp)
c0104315:	c0 
c0104316:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010431d:	c0 
c010431e:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104325:	00 
c0104326:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010432d:	e8 96 cb ff ff       	call   c0100ec8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104332:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104339:	e8 f8 0d 00 00       	call   c0105136 <alloc_pages>
c010433e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104341:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104345:	75 24                	jne    c010436b <default_check+0x2fa>
c0104347:	c7 44 24 0c b0 61 11 	movl   $0xc01161b0,0xc(%esp)
c010434e:	c0 
c010434f:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104356:	c0 
c0104357:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010435e:	00 
c010435f:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104366:	e8 5d cb ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c010436b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104372:	e8 bf 0d 00 00       	call   c0105136 <alloc_pages>
c0104377:	85 c0                	test   %eax,%eax
c0104379:	74 24                	je     c010439f <default_check+0x32e>
c010437b:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c0104382:	c0 
c0104383:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010438a:	c0 
c010438b:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0104392:	00 
c0104393:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010439a:	e8 29 cb ff ff       	call   c0100ec8 <__panic>
    assert(p0 + 2 == p1);
c010439f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043a2:	83 c0 40             	add    $0x40,%eax
c01043a5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01043a8:	74 24                	je     c01043ce <default_check+0x35d>
c01043aa:	c7 44 24 0c ce 61 11 	movl   $0xc01161ce,0xc(%esp)
c01043b1:	c0 
c01043b2:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01043b9:	c0 
c01043ba:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01043c1:	00 
c01043c2:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01043c9:	e8 fa ca ff ff       	call   c0100ec8 <__panic>

    p2 = p0 + 1;
c01043ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d1:	83 c0 20             	add    $0x20,%eax
c01043d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043d7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043de:	00 
c01043df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043e2:	89 04 24             	mov    %eax,(%esp)
c01043e5:	e8 b7 0d 00 00       	call   c01051a1 <free_pages>
    free_pages(p1, 3);
c01043ea:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043f1:	00 
c01043f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043f5:	89 04 24             	mov    %eax,(%esp)
c01043f8:	e8 a4 0d 00 00       	call   c01051a1 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104400:	83 c0 04             	add    $0x4,%eax
c0104403:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c010440a:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010440d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104410:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104413:	0f a3 10             	bt     %edx,(%eax)
c0104416:	19 c0                	sbb    %eax,%eax
c0104418:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010441b:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010441f:	0f 95 c0             	setne  %al
c0104422:	0f b6 c0             	movzbl %al,%eax
c0104425:	85 c0                	test   %eax,%eax
c0104427:	74 0b                	je     c0104434 <default_check+0x3c3>
c0104429:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010442c:	8b 40 08             	mov    0x8(%eax),%eax
c010442f:	83 f8 01             	cmp    $0x1,%eax
c0104432:	74 24                	je     c0104458 <default_check+0x3e7>
c0104434:	c7 44 24 0c dc 61 11 	movl   $0xc01161dc,0xc(%esp)
c010443b:	c0 
c010443c:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104443:	c0 
c0104444:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010444b:	00 
c010444c:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104453:	e8 70 ca ff ff       	call   c0100ec8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104458:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010445b:	83 c0 04             	add    $0x4,%eax
c010445e:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104465:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104468:	8b 45 90             	mov    -0x70(%ebp),%eax
c010446b:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010446e:	0f a3 10             	bt     %edx,(%eax)
c0104471:	19 c0                	sbb    %eax,%eax
c0104473:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104476:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010447a:	0f 95 c0             	setne  %al
c010447d:	0f b6 c0             	movzbl %al,%eax
c0104480:	85 c0                	test   %eax,%eax
c0104482:	74 0b                	je     c010448f <default_check+0x41e>
c0104484:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104487:	8b 40 08             	mov    0x8(%eax),%eax
c010448a:	83 f8 03             	cmp    $0x3,%eax
c010448d:	74 24                	je     c01044b3 <default_check+0x442>
c010448f:	c7 44 24 0c 04 62 11 	movl   $0xc0116204,0xc(%esp)
c0104496:	c0 
c0104497:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010449e:	c0 
c010449f:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01044a6:	00 
c01044a7:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01044ae:	e8 15 ca ff ff       	call   c0100ec8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01044b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044ba:	e8 77 0c 00 00       	call   c0105136 <alloc_pages>
c01044bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044c5:	83 e8 20             	sub    $0x20,%eax
c01044c8:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044cb:	74 24                	je     c01044f1 <default_check+0x480>
c01044cd:	c7 44 24 0c 2a 62 11 	movl   $0xc011622a,0xc(%esp)
c01044d4:	c0 
c01044d5:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01044dc:	c0 
c01044dd:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044e4:	00 
c01044e5:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01044ec:	e8 d7 c9 ff ff       	call   c0100ec8 <__panic>
    free_page(p0);
c01044f1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044f8:	00 
c01044f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044fc:	89 04 24             	mov    %eax,(%esp)
c01044ff:	e8 9d 0c 00 00       	call   c01051a1 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104504:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010450b:	e8 26 0c 00 00       	call   c0105136 <alloc_pages>
c0104510:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104513:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104516:	83 c0 20             	add    $0x20,%eax
c0104519:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010451c:	74 24                	je     c0104542 <default_check+0x4d1>
c010451e:	c7 44 24 0c 48 62 11 	movl   $0xc0116248,0xc(%esp)
c0104525:	c0 
c0104526:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010452d:	c0 
c010452e:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104535:	00 
c0104536:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010453d:	e8 86 c9 ff ff       	call   c0100ec8 <__panic>

    free_pages(p0, 2);
c0104542:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104549:	00 
c010454a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010454d:	89 04 24             	mov    %eax,(%esp)
c0104550:	e8 4c 0c 00 00       	call   c01051a1 <free_pages>
    free_page(p2);
c0104555:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010455c:	00 
c010455d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104560:	89 04 24             	mov    %eax,(%esp)
c0104563:	e8 39 0c 00 00       	call   c01051a1 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104568:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010456f:	e8 c2 0b 00 00       	call   c0105136 <alloc_pages>
c0104574:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104577:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010457b:	75 24                	jne    c01045a1 <default_check+0x530>
c010457d:	c7 44 24 0c 68 62 11 	movl   $0xc0116268,0xc(%esp)
c0104584:	c0 
c0104585:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c010458c:	c0 
c010458d:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0104594:	00 
c0104595:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c010459c:	e8 27 c9 ff ff       	call   c0100ec8 <__panic>
    assert(alloc_page() == NULL);
c01045a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045a8:	e8 89 0b 00 00       	call   c0105136 <alloc_pages>
c01045ad:	85 c0                	test   %eax,%eax
c01045af:	74 24                	je     c01045d5 <default_check+0x564>
c01045b1:	c7 44 24 0c c6 60 11 	movl   $0xc01160c6,0xc(%esp)
c01045b8:	c0 
c01045b9:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01045c0:	c0 
c01045c1:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01045c8:	00 
c01045c9:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01045d0:	e8 f3 c8 ff ff       	call   c0100ec8 <__panic>

    assert(nr_free == 0);
c01045d5:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01045da:	85 c0                	test   %eax,%eax
c01045dc:	74 24                	je     c0104602 <default_check+0x591>
c01045de:	c7 44 24 0c 19 61 11 	movl   $0xc0116119,0xc(%esp)
c01045e5:	c0 
c01045e6:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01045ed:	c0 
c01045ee:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01045f5:	00 
c01045f6:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01045fd:	e8 c6 c8 ff ff       	call   c0100ec8 <__panic>
    nr_free = nr_free_store;
c0104602:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104605:	a3 1c 30 15 c0       	mov    %eax,0xc015301c

    free_list = free_list_store;
c010460a:	8b 45 80             	mov    -0x80(%ebp),%eax
c010460d:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104610:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c0104615:	89 15 18 30 15 c0    	mov    %edx,0xc0153018
    free_pages(p0, 5);
c010461b:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104622:	00 
c0104623:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104626:	89 04 24             	mov    %eax,(%esp)
c0104629:	e8 73 0b 00 00       	call   c01051a1 <free_pages>

    le = &free_list;
c010462e:	c7 45 ec 14 30 15 c0 	movl   $0xc0153014,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104635:	eb 1d                	jmp    c0104654 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c0104637:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010463a:	83 e8 0c             	sub    $0xc,%eax
c010463d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104640:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104644:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104647:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010464a:	8b 40 08             	mov    0x8(%eax),%eax
c010464d:	29 c2                	sub    %eax,%edx
c010464f:	89 d0                	mov    %edx,%eax
c0104651:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104654:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104657:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010465a:	8b 45 88             	mov    -0x78(%ebp),%eax
c010465d:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104660:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104663:	81 7d ec 14 30 15 c0 	cmpl   $0xc0153014,-0x14(%ebp)
c010466a:	75 cb                	jne    c0104637 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010466c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104670:	74 24                	je     c0104696 <default_check+0x625>
c0104672:	c7 44 24 0c 86 62 11 	movl   $0xc0116286,0xc(%esp)
c0104679:	c0 
c010467a:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c0104681:	c0 
c0104682:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104689:	00 
c010468a:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c0104691:	e8 32 c8 ff ff       	call   c0100ec8 <__panic>
    assert(total == 0);
c0104696:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010469a:	74 24                	je     c01046c0 <default_check+0x64f>
c010469c:	c7 44 24 0c 91 62 11 	movl   $0xc0116291,0xc(%esp)
c01046a3:	c0 
c01046a4:	c7 44 24 08 56 5f 11 	movl   $0xc0115f56,0x8(%esp)
c01046ab:	c0 
c01046ac:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01046b3:	00 
c01046b4:	c7 04 24 6b 5f 11 c0 	movl   $0xc0115f6b,(%esp)
c01046bb:	e8 08 c8 ff ff       	call   c0100ec8 <__panic>
}
c01046c0:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046c6:	5b                   	pop    %ebx
c01046c7:	5d                   	pop    %ebp
c01046c8:	c3                   	ret    

c01046c9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046c9:	55                   	push   %ebp
c01046ca:	89 e5                	mov    %esp,%ebp
c01046cc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046cf:	9c                   	pushf  
c01046d0:	58                   	pop    %eax
c01046d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01046d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046d7:	25 00 02 00 00       	and    $0x200,%eax
c01046dc:	85 c0                	test   %eax,%eax
c01046de:	74 0c                	je     c01046ec <__intr_save+0x23>
        intr_disable();
c01046e0:	e8 45 da ff ff       	call   c010212a <intr_disable>
        return 1;
c01046e5:	b8 01 00 00 00       	mov    $0x1,%eax
c01046ea:	eb 05                	jmp    c01046f1 <__intr_save+0x28>
    }
    return 0;
c01046ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046f1:	c9                   	leave  
c01046f2:	c3                   	ret    

c01046f3 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046f3:	55                   	push   %ebp
c01046f4:	89 e5                	mov    %esp,%ebp
c01046f6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046fd:	74 05                	je     c0104704 <__intr_restore+0x11>
        intr_enable();
c01046ff:	e8 20 da ff ff       	call   c0102124 <intr_enable>
    }
}
c0104704:	c9                   	leave  
c0104705:	c3                   	ret    

c0104706 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104706:	55                   	push   %ebp
c0104707:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104709:	8b 55 08             	mov    0x8(%ebp),%edx
c010470c:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104711:	29 c2                	sub    %eax,%edx
c0104713:	89 d0                	mov    %edx,%eax
c0104715:	c1 f8 05             	sar    $0x5,%eax
}
c0104718:	5d                   	pop    %ebp
c0104719:	c3                   	ret    

c010471a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010471a:	55                   	push   %ebp
c010471b:	89 e5                	mov    %esp,%ebp
c010471d:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104720:	8b 45 08             	mov    0x8(%ebp),%eax
c0104723:	89 04 24             	mov    %eax,(%esp)
c0104726:	e8 db ff ff ff       	call   c0104706 <page2ppn>
c010472b:	c1 e0 0c             	shl    $0xc,%eax
}
c010472e:	c9                   	leave  
c010472f:	c3                   	ret    

c0104730 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104730:	55                   	push   %ebp
c0104731:	89 e5                	mov    %esp,%ebp
c0104733:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104736:	8b 45 08             	mov    0x8(%ebp),%eax
c0104739:	c1 e8 0c             	shr    $0xc,%eax
c010473c:	89 c2                	mov    %eax,%edx
c010473e:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104743:	39 c2                	cmp    %eax,%edx
c0104745:	72 1c                	jb     c0104763 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104747:	c7 44 24 08 cc 62 11 	movl   $0xc01162cc,0x8(%esp)
c010474e:	c0 
c010474f:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104756:	00 
c0104757:	c7 04 24 eb 62 11 c0 	movl   $0xc01162eb,(%esp)
c010475e:	e8 65 c7 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104763:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104768:	8b 55 08             	mov    0x8(%ebp),%edx
c010476b:	c1 ea 0c             	shr    $0xc,%edx
c010476e:	c1 e2 05             	shl    $0x5,%edx
c0104771:	01 d0                	add    %edx,%eax
}
c0104773:	c9                   	leave  
c0104774:	c3                   	ret    

c0104775 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104775:	55                   	push   %ebp
c0104776:	89 e5                	mov    %esp,%ebp
c0104778:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010477b:	8b 45 08             	mov    0x8(%ebp),%eax
c010477e:	89 04 24             	mov    %eax,(%esp)
c0104781:	e8 94 ff ff ff       	call   c010471a <page2pa>
c0104786:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104789:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010478c:	c1 e8 0c             	shr    $0xc,%eax
c010478f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104792:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104797:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010479a:	72 23                	jb     c01047bf <page2kva+0x4a>
c010479c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010479f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047a3:	c7 44 24 08 fc 62 11 	movl   $0xc01162fc,0x8(%esp)
c01047aa:	c0 
c01047ab:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01047b2:	00 
c01047b3:	c7 04 24 eb 62 11 c0 	movl   $0xc01162eb,(%esp)
c01047ba:	e8 09 c7 ff ff       	call   c0100ec8 <__panic>
c01047bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047c2:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047c7:	c9                   	leave  
c01047c8:	c3                   	ret    

c01047c9 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047c9:	55                   	push   %ebp
c01047ca:	89 e5                	mov    %esp,%ebp
c01047cc:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01047d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047d5:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047dc:	77 23                	ja     c0104801 <kva2page+0x38>
c01047de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047e5:	c7 44 24 08 20 63 11 	movl   $0xc0116320,0x8(%esp)
c01047ec:	c0 
c01047ed:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047f4:	00 
c01047f5:	c7 04 24 eb 62 11 c0 	movl   $0xc01162eb,(%esp)
c01047fc:	e8 c7 c6 ff ff       	call   c0100ec8 <__panic>
c0104801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104804:	05 00 00 00 40       	add    $0x40000000,%eax
c0104809:	89 04 24             	mov    %eax,(%esp)
c010480c:	e8 1f ff ff ff       	call   c0104730 <pa2page>
}
c0104811:	c9                   	leave  
c0104812:	c3                   	ret    

c0104813 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104813:	55                   	push   %ebp
c0104814:	89 e5                	mov    %esp,%ebp
c0104816:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104819:	8b 45 0c             	mov    0xc(%ebp),%eax
c010481c:	ba 01 00 00 00       	mov    $0x1,%edx
c0104821:	89 c1                	mov    %eax,%ecx
c0104823:	d3 e2                	shl    %cl,%edx
c0104825:	89 d0                	mov    %edx,%eax
c0104827:	89 04 24             	mov    %eax,(%esp)
c010482a:	e8 07 09 00 00       	call   c0105136 <alloc_pages>
c010482f:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104836:	75 07                	jne    c010483f <__slob_get_free_pages+0x2c>
    return NULL;
c0104838:	b8 00 00 00 00       	mov    $0x0,%eax
c010483d:	eb 0b                	jmp    c010484a <__slob_get_free_pages+0x37>
  return page2kva(page);
c010483f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104842:	89 04 24             	mov    %eax,(%esp)
c0104845:	e8 2b ff ff ff       	call   c0104775 <page2kva>
}
c010484a:	c9                   	leave  
c010484b:	c3                   	ret    

c010484c <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010484c:	55                   	push   %ebp
c010484d:	89 e5                	mov    %esp,%ebp
c010484f:	53                   	push   %ebx
c0104850:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104853:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104856:	ba 01 00 00 00       	mov    $0x1,%edx
c010485b:	89 c1                	mov    %eax,%ecx
c010485d:	d3 e2                	shl    %cl,%edx
c010485f:	89 d0                	mov    %edx,%eax
c0104861:	89 c3                	mov    %eax,%ebx
c0104863:	8b 45 08             	mov    0x8(%ebp),%eax
c0104866:	89 04 24             	mov    %eax,(%esp)
c0104869:	e8 5b ff ff ff       	call   c01047c9 <kva2page>
c010486e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104872:	89 04 24             	mov    %eax,(%esp)
c0104875:	e8 27 09 00 00       	call   c01051a1 <free_pages>
}
c010487a:	83 c4 14             	add    $0x14,%esp
c010487d:	5b                   	pop    %ebx
c010487e:	5d                   	pop    %ebp
c010487f:	c3                   	ret    

c0104880 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104880:	55                   	push   %ebp
c0104881:	89 e5                	mov    %esp,%ebp
c0104883:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104886:	8b 45 08             	mov    0x8(%ebp),%eax
c0104889:	83 c0 08             	add    $0x8,%eax
c010488c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104891:	76 24                	jbe    c01048b7 <slob_alloc+0x37>
c0104893:	c7 44 24 0c 44 63 11 	movl   $0xc0116344,0xc(%esp)
c010489a:	c0 
c010489b:	c7 44 24 08 63 63 11 	movl   $0xc0116363,0x8(%esp)
c01048a2:	c0 
c01048a3:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01048aa:	00 
c01048ab:	c7 04 24 78 63 11 c0 	movl   $0xc0116378,(%esp)
c01048b2:	e8 11 c6 ff ff       	call   c0100ec8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01048c8:	83 c0 07             	add    $0x7,%eax
c01048cb:	c1 e8 03             	shr    $0x3,%eax
c01048ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048d1:	e8 f3 fd ff ff       	call   c01046c9 <__intr_save>
c01048d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048d9:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01048de:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048e4:	8b 40 04             	mov    0x4(%eax),%eax
c01048e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048ee:	74 25                	je     c0104915 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048f3:	8b 45 10             	mov    0x10(%ebp),%eax
c01048f6:	01 d0                	add    %edx,%eax
c01048f8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01048fb:	8b 45 10             	mov    0x10(%ebp),%eax
c01048fe:	f7 d8                	neg    %eax
c0104900:	21 d0                	and    %edx,%eax
c0104902:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104905:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104908:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010490b:	29 c2                	sub    %eax,%edx
c010490d:	89 d0                	mov    %edx,%eax
c010490f:	c1 f8 03             	sar    $0x3,%eax
c0104912:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104915:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104918:	8b 00                	mov    (%eax),%eax
c010491a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010491d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104920:	01 ca                	add    %ecx,%edx
c0104922:	39 d0                	cmp    %edx,%eax
c0104924:	0f 8c aa 00 00 00    	jl     c01049d4 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010492a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010492e:	74 38                	je     c0104968 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104930:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104933:	8b 00                	mov    (%eax),%eax
c0104935:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104938:	89 c2                	mov    %eax,%edx
c010493a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010493d:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010493f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104942:	8b 50 04             	mov    0x4(%eax),%edx
c0104945:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104948:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010494b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010494e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104951:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104954:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104957:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010495a:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010495c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010495f:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104962:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104965:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496b:	8b 00                	mov    (%eax),%eax
c010496d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104970:	75 0e                	jne    c0104980 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104972:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104975:	8b 50 04             	mov    0x4(%eax),%edx
c0104978:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010497b:	89 50 04             	mov    %edx,0x4(%eax)
c010497e:	eb 3c                	jmp    c01049bc <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104980:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104983:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010498a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010498d:	01 c2                	add    %eax,%edx
c010498f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104992:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104995:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104998:	8b 40 04             	mov    0x4(%eax),%eax
c010499b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010499e:	8b 12                	mov    (%edx),%edx
c01049a0:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01049a3:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01049a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049a8:	8b 40 04             	mov    0x4(%eax),%eax
c01049ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049ae:	8b 52 04             	mov    0x4(%edx),%edx
c01049b1:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049ba:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049bf:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049c7:	89 04 24             	mov    %eax,(%esp)
c01049ca:	e8 24 fd ff ff       	call   c01046f3 <__intr_restore>
			return cur;
c01049cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d2:	eb 7f                	jmp    c0104a53 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c01049d4:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01049d9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049dc:	75 61                	jne    c0104a3f <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049e1:	89 04 24             	mov    %eax,(%esp)
c01049e4:	e8 0a fd ff ff       	call   c01046f3 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049e9:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049f0:	75 07                	jne    c01049f9 <slob_alloc+0x179>
				return 0;
c01049f2:	b8 00 00 00 00       	mov    $0x0,%eax
c01049f7:	eb 5a                	jmp    c0104a53 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104a00:	00 
c0104a01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a04:	89 04 24             	mov    %eax,(%esp)
c0104a07:	e8 07 fe ff ff       	call   c0104813 <__slob_get_free_pages>
c0104a0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104a0f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a13:	75 07                	jne    c0104a1c <slob_alloc+0x19c>
				return 0;
c0104a15:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a1a:	eb 37                	jmp    c0104a53 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104a1c:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a23:	00 
c0104a24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a27:	89 04 24             	mov    %eax,(%esp)
c0104a2a:	e8 26 00 00 00       	call   c0104a55 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a2f:	e8 95 fc ff ff       	call   c01046c9 <__intr_save>
c0104a34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a37:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a48:	8b 40 04             	mov    0x4(%eax),%eax
c0104a4b:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a4e:	e9 97 fe ff ff       	jmp    c01048ea <slob_alloc+0x6a>
}
c0104a53:	c9                   	leave  
c0104a54:	c3                   	ret    

c0104a55 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a55:	55                   	push   %ebp
c0104a56:	89 e5                	mov    %esp,%ebp
c0104a58:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a61:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a65:	75 05                	jne    c0104a6c <slob_free+0x17>
		return;
c0104a67:	e9 ff 00 00 00       	jmp    c0104b6b <slob_free+0x116>

	if (size)
c0104a6c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a70:	74 10                	je     c0104a82 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104a72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a75:	83 c0 07             	add    $0x7,%eax
c0104a78:	c1 e8 03             	shr    $0x3,%eax
c0104a7b:	89 c2                	mov    %eax,%edx
c0104a7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a80:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a82:	e8 42 fc ff ff       	call   c01046c9 <__intr_save>
c0104a87:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a8a:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104a8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a92:	eb 27                	jmp    c0104abb <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a97:	8b 40 04             	mov    0x4(%eax),%eax
c0104a9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a9d:	77 13                	ja     c0104ab2 <slob_free+0x5d>
c0104a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aa5:	77 27                	ja     c0104ace <slob_free+0x79>
c0104aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aaa:	8b 40 04             	mov    0x4(%eax),%eax
c0104aad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ab0:	77 1c                	ja     c0104ace <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104ab2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab5:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104abe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ac1:	76 d1                	jbe    c0104a94 <slob_free+0x3f>
c0104ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac6:	8b 40 04             	mov    0x4(%eax),%eax
c0104ac9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104acc:	76 c6                	jbe    c0104a94 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ace:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad1:	8b 00                	mov    (%eax),%eax
c0104ad3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104add:	01 c2                	add    %eax,%edx
c0104adf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ae5:	39 c2                	cmp    %eax,%edx
c0104ae7:	75 25                	jne    c0104b0e <slob_free+0xb9>
		b->units += cur->next->units;
c0104ae9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aec:	8b 10                	mov    (%eax),%edx
c0104aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af1:	8b 40 04             	mov    0x4(%eax),%eax
c0104af4:	8b 00                	mov    (%eax),%eax
c0104af6:	01 c2                	add    %eax,%edx
c0104af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104afb:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b00:	8b 40 04             	mov    0x4(%eax),%eax
c0104b03:	8b 50 04             	mov    0x4(%eax),%edx
c0104b06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b09:	89 50 04             	mov    %edx,0x4(%eax)
c0104b0c:	eb 0c                	jmp    c0104b1a <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b11:	8b 50 04             	mov    0x4(%eax),%edx
c0104b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b17:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b1d:	8b 00                	mov    (%eax),%eax
c0104b1f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104b26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b29:	01 d0                	add    %edx,%eax
c0104b2b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b2e:	75 1f                	jne    c0104b4f <slob_free+0xfa>
		cur->units += b->units;
c0104b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b33:	8b 10                	mov    (%eax),%edx
c0104b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b38:	8b 00                	mov    (%eax),%eax
c0104b3a:	01 c2                	add    %eax,%edx
c0104b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b3f:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b44:	8b 50 04             	mov    0x4(%eax),%edx
c0104b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b4a:	89 50 04             	mov    %edx,0x4(%eax)
c0104b4d:	eb 09                	jmp    c0104b58 <slob_free+0x103>
	} else
		cur->next = b;
c0104b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b52:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b55:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b5b:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b63:	89 04 24             	mov    %eax,(%esp)
c0104b66:	e8 88 fb ff ff       	call   c01046f3 <__intr_restore>
}
c0104b6b:	c9                   	leave  
c0104b6c:	c3                   	ret    

c0104b6d <slob_init>:



void
slob_init(void) {
c0104b6d:	55                   	push   %ebp
c0104b6e:	89 e5                	mov    %esp,%ebp
c0104b70:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b73:	c7 04 24 8a 63 11 c0 	movl   $0xc011638a,(%esp)
c0104b7a:	e8 e6 b7 ff ff       	call   c0100365 <cprintf>
}
c0104b7f:	c9                   	leave  
c0104b80:	c3                   	ret    

c0104b81 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b81:	55                   	push   %ebp
c0104b82:	89 e5                	mov    %esp,%ebp
c0104b84:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104b87:	e8 e1 ff ff ff       	call   c0104b6d <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b8c:	c7 04 24 9e 63 11 c0 	movl   $0xc011639e,(%esp)
c0104b93:	e8 cd b7 ff ff       	call   c0100365 <cprintf>
}
c0104b98:	c9                   	leave  
c0104b99:	c3                   	ret    

c0104b9a <slob_allocated>:

size_t
slob_allocated(void) {
c0104b9a:	55                   	push   %ebp
c0104b9b:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ba2:	5d                   	pop    %ebp
c0104ba3:	c3                   	ret    

c0104ba4 <kallocated>:

size_t
kallocated(void) {
c0104ba4:	55                   	push   %ebp
c0104ba5:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104ba7:	e8 ee ff ff ff       	call   c0104b9a <slob_allocated>
}
c0104bac:	5d                   	pop    %ebp
c0104bad:	c3                   	ret    

c0104bae <find_order>:

static int find_order(int size)
{
c0104bae:	55                   	push   %ebp
c0104baf:	89 e5                	mov    %esp,%ebp
c0104bb1:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bb4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bbb:	eb 07                	jmp    c0104bc4 <find_order+0x16>
		order++;
c0104bbd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bc1:	d1 7d 08             	sarl   0x8(%ebp)
c0104bc4:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104bcb:	7f f0                	jg     c0104bbd <find_order+0xf>
		order++;
	return order;
c0104bcd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104bd0:	c9                   	leave  
c0104bd1:	c3                   	ret    

c0104bd2 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104bd2:	55                   	push   %ebp
c0104bd3:	89 e5                	mov    %esp,%ebp
c0104bd5:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bd8:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bdf:	77 38                	ja     c0104c19 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104be4:	8d 50 08             	lea    0x8(%eax),%edx
c0104be7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104bee:	00 
c0104bef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bf2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bf6:	89 14 24             	mov    %edx,(%esp)
c0104bf9:	e8 82 fc ff ff       	call   c0104880 <slob_alloc>
c0104bfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104c01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c05:	74 08                	je     c0104c0f <__kmalloc+0x3d>
c0104c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c0a:	83 c0 08             	add    $0x8,%eax
c0104c0d:	eb 05                	jmp    c0104c14 <__kmalloc+0x42>
c0104c0f:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c14:	e9 a6 00 00 00       	jmp    c0104cbf <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c19:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c20:	00 
c0104c21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c28:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c2f:	e8 4c fc ff ff       	call   c0104880 <slob_alloc>
c0104c34:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c3b:	75 07                	jne    c0104c44 <__kmalloc+0x72>
		return 0;
c0104c3d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c42:	eb 7b                	jmp    c0104cbf <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c44:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c47:	89 04 24             	mov    %eax,(%esp)
c0104c4a:	e8 5f ff ff ff       	call   c0104bae <find_order>
c0104c4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c52:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c57:	8b 00                	mov    (%eax),%eax
c0104c59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c60:	89 04 24             	mov    %eax,(%esp)
c0104c63:	e8 ab fb ff ff       	call   c0104813 <__slob_get_free_pages>
c0104c68:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c6b:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c71:	8b 40 04             	mov    0x4(%eax),%eax
c0104c74:	85 c0                	test   %eax,%eax
c0104c76:	74 2f                	je     c0104ca7 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c78:	e8 4c fa ff ff       	call   c01046c9 <__intr_save>
c0104c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c80:	8b 15 64 fe 14 c0    	mov    0xc014fe64,%edx
c0104c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c89:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8f:	a3 64 fe 14 c0       	mov    %eax,0xc014fe64
		spin_unlock_irqrestore(&block_lock, flags);
c0104c94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c97:	89 04 24             	mov    %eax,(%esp)
c0104c9a:	e8 54 fa ff ff       	call   c01046f3 <__intr_restore>
		return bb->pages;
c0104c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ca5:	eb 18                	jmp    c0104cbf <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104ca7:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104cae:	00 
c0104caf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cb2:	89 04 24             	mov    %eax,(%esp)
c0104cb5:	e8 9b fd ff ff       	call   c0104a55 <slob_free>
	return 0;
c0104cba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cbf:	c9                   	leave  
c0104cc0:	c3                   	ret    

c0104cc1 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cc1:	55                   	push   %ebp
c0104cc2:	89 e5                	mov    %esp,%ebp
c0104cc4:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cc7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cce:	00 
c0104ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd2:	89 04 24             	mov    %eax,(%esp)
c0104cd5:	e8 f8 fe ff ff       	call   c0104bd2 <__kmalloc>
}
c0104cda:	c9                   	leave  
c0104cdb:	c3                   	ret    

c0104cdc <kfree>:


void kfree(void *block)
{
c0104cdc:	55                   	push   %ebp
c0104cdd:	89 e5                	mov    %esp,%ebp
c0104cdf:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104ce2:	c7 45 f0 64 fe 14 c0 	movl   $0xc014fe64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ce9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ced:	75 05                	jne    c0104cf4 <kfree+0x18>
		return;
c0104cef:	e9 a2 00 00 00       	jmp    c0104d96 <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cfc:	85 c0                	test   %eax,%eax
c0104cfe:	75 7f                	jne    c0104d7f <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104d00:	e8 c4 f9 ff ff       	call   c01046c9 <__intr_save>
c0104d05:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d08:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d10:	eb 5c                	jmp    c0104d6e <kfree+0x92>
			if (bb->pages == block) {
c0104d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d15:	8b 40 04             	mov    0x4(%eax),%eax
c0104d18:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d1b:	75 3f                	jne    c0104d5c <kfree+0x80>
				*last = bb->next;
c0104d1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d20:	8b 50 08             	mov    0x8(%eax),%edx
c0104d23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d26:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d2b:	89 04 24             	mov    %eax,(%esp)
c0104d2e:	e8 c0 f9 ff ff       	call   c01046f3 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d36:	8b 10                	mov    (%eax),%edx
c0104d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d3b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d3f:	89 04 24             	mov    %eax,(%esp)
c0104d42:	e8 05 fb ff ff       	call   c010484c <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d47:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d4e:	00 
c0104d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d52:	89 04 24             	mov    %eax,(%esp)
c0104d55:	e8 fb fc ff ff       	call   c0104a55 <slob_free>
				return;
c0104d5a:	eb 3a                	jmp    c0104d96 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d5f:	83 c0 08             	add    $0x8,%eax
c0104d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d68:	8b 40 08             	mov    0x8(%eax),%eax
c0104d6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d72:	75 9e                	jne    c0104d12 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d77:	89 04 24             	mov    %eax,(%esp)
c0104d7a:	e8 74 f9 ff ff       	call   c01046f3 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d82:	83 e8 08             	sub    $0x8,%eax
c0104d85:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d8c:	00 
c0104d8d:	89 04 24             	mov    %eax,(%esp)
c0104d90:	e8 c0 fc ff ff       	call   c0104a55 <slob_free>
	return;
c0104d95:	90                   	nop
}
c0104d96:	c9                   	leave  
c0104d97:	c3                   	ret    

c0104d98 <ksize>:


unsigned int ksize(const void *block)
{
c0104d98:	55                   	push   %ebp
c0104d99:	89 e5                	mov    %esp,%ebp
c0104d9b:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104da2:	75 07                	jne    c0104dab <ksize+0x13>
		return 0;
c0104da4:	b8 00 00 00 00       	mov    $0x0,%eax
c0104da9:	eb 6b                	jmp    c0104e16 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dab:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dae:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104db3:	85 c0                	test   %eax,%eax
c0104db5:	75 54                	jne    c0104e0b <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104db7:	e8 0d f9 ff ff       	call   c01046c9 <__intr_save>
c0104dbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104dbf:	a1 64 fe 14 c0       	mov    0xc014fe64,%eax
c0104dc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dc7:	eb 31                	jmp    c0104dfa <ksize+0x62>
			if (bb->pages == block) {
c0104dc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dcc:	8b 40 04             	mov    0x4(%eax),%eax
c0104dcf:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104dd2:	75 1d                	jne    c0104df1 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd7:	89 04 24             	mov    %eax,(%esp)
c0104dda:	e8 14 f9 ff ff       	call   c01046f3 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104de2:	8b 00                	mov    (%eax),%eax
c0104de4:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104de9:	89 c1                	mov    %eax,%ecx
c0104deb:	d3 e2                	shl    %cl,%edx
c0104ded:	89 d0                	mov    %edx,%eax
c0104def:	eb 25                	jmp    c0104e16 <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df4:	8b 40 08             	mov    0x8(%eax),%eax
c0104df7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104dfe:	75 c9                	jne    c0104dc9 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e03:	89 04 24             	mov    %eax,(%esp)
c0104e06:	e8 e8 f8 ff ff       	call   c01046f3 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e0e:	83 e8 08             	sub    $0x8,%eax
c0104e11:	8b 00                	mov    (%eax),%eax
c0104e13:	c1 e0 03             	shl    $0x3,%eax
}
c0104e16:	c9                   	leave  
c0104e17:	c3                   	ret    

c0104e18 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e18:	55                   	push   %ebp
c0104e19:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e1b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e1e:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e23:	29 c2                	sub    %eax,%edx
c0104e25:	89 d0                	mov    %edx,%eax
c0104e27:	c1 f8 05             	sar    $0x5,%eax
}
c0104e2a:	5d                   	pop    %ebp
c0104e2b:	c3                   	ret    

c0104e2c <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e2c:	55                   	push   %ebp
c0104e2d:	89 e5                	mov    %esp,%ebp
c0104e2f:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e35:	89 04 24             	mov    %eax,(%esp)
c0104e38:	e8 db ff ff ff       	call   c0104e18 <page2ppn>
c0104e3d:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e40:	c9                   	leave  
c0104e41:	c3                   	ret    

c0104e42 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e42:	55                   	push   %ebp
c0104e43:	89 e5                	mov    %esp,%ebp
c0104e45:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4b:	c1 e8 0c             	shr    $0xc,%eax
c0104e4e:	89 c2                	mov    %eax,%edx
c0104e50:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104e55:	39 c2                	cmp    %eax,%edx
c0104e57:	72 1c                	jb     c0104e75 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e59:	c7 44 24 08 bc 63 11 	movl   $0xc01163bc,0x8(%esp)
c0104e60:	c0 
c0104e61:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e68:	00 
c0104e69:	c7 04 24 db 63 11 c0 	movl   $0xc01163db,(%esp)
c0104e70:	e8 53 c0 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0104e75:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0104e7a:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e7d:	c1 ea 0c             	shr    $0xc,%edx
c0104e80:	c1 e2 05             	shl    $0x5,%edx
c0104e83:	01 d0                	add    %edx,%eax
}
c0104e85:	c9                   	leave  
c0104e86:	c3                   	ret    

c0104e87 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e87:	55                   	push   %ebp
c0104e88:	89 e5                	mov    %esp,%ebp
c0104e8a:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e90:	89 04 24             	mov    %eax,(%esp)
c0104e93:	e8 94 ff ff ff       	call   c0104e2c <page2pa>
c0104e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e9e:	c1 e8 0c             	shr    $0xc,%eax
c0104ea1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ea4:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0104ea9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104eac:	72 23                	jb     c0104ed1 <page2kva+0x4a>
c0104eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104eb5:	c7 44 24 08 ec 63 11 	movl   $0xc01163ec,0x8(%esp)
c0104ebc:	c0 
c0104ebd:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ec4:	00 
c0104ec5:	c7 04 24 db 63 11 c0 	movl   $0xc01163db,(%esp)
c0104ecc:	e8 f7 bf ff ff       	call   c0100ec8 <__panic>
c0104ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ed4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104ed9:	c9                   	leave  
c0104eda:	c3                   	ret    

c0104edb <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104edb:	55                   	push   %ebp
c0104edc:	89 e5                	mov    %esp,%ebp
c0104ede:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee4:	83 e0 01             	and    $0x1,%eax
c0104ee7:	85 c0                	test   %eax,%eax
c0104ee9:	75 1c                	jne    c0104f07 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104eeb:	c7 44 24 08 10 64 11 	movl   $0xc0116410,0x8(%esp)
c0104ef2:	c0 
c0104ef3:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104efa:	00 
c0104efb:	c7 04 24 db 63 11 c0 	movl   $0xc01163db,(%esp)
c0104f02:	e8 c1 bf ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f07:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f0f:	89 04 24             	mov    %eax,(%esp)
c0104f12:	e8 2b ff ff ff       	call   c0104e42 <pa2page>
}
c0104f17:	c9                   	leave  
c0104f18:	c3                   	ret    

c0104f19 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f19:	55                   	push   %ebp
c0104f1a:	89 e5                	mov    %esp,%ebp
c0104f1c:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f27:	89 04 24             	mov    %eax,(%esp)
c0104f2a:	e8 13 ff ff ff       	call   c0104e42 <pa2page>
}
c0104f2f:	c9                   	leave  
c0104f30:	c3                   	ret    

c0104f31 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f31:	55                   	push   %ebp
c0104f32:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f34:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f37:	8b 00                	mov    (%eax),%eax
}
c0104f39:	5d                   	pop    %ebp
c0104f3a:	c3                   	ret    

c0104f3b <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f3b:	55                   	push   %ebp
c0104f3c:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f41:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f44:	89 10                	mov    %edx,(%eax)
}
c0104f46:	5d                   	pop    %ebp
c0104f47:	c3                   	ret    

c0104f48 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f48:	55                   	push   %ebp
c0104f49:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f4e:	8b 00                	mov    (%eax),%eax
c0104f50:	8d 50 01             	lea    0x1(%eax),%edx
c0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f56:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f5b:	8b 00                	mov    (%eax),%eax
}
c0104f5d:	5d                   	pop    %ebp
c0104f5e:	c3                   	ret    

c0104f5f <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f5f:	55                   	push   %ebp
c0104f60:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f65:	8b 00                	mov    (%eax),%eax
c0104f67:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6d:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f72:	8b 00                	mov    (%eax),%eax
}
c0104f74:	5d                   	pop    %ebp
c0104f75:	c3                   	ret    

c0104f76 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f76:	55                   	push   %ebp
c0104f77:	89 e5                	mov    %esp,%ebp
c0104f79:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f7c:	9c                   	pushf  
c0104f7d:	58                   	pop    %eax
c0104f7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f84:	25 00 02 00 00       	and    $0x200,%eax
c0104f89:	85 c0                	test   %eax,%eax
c0104f8b:	74 0c                	je     c0104f99 <__intr_save+0x23>
        intr_disable();
c0104f8d:	e8 98 d1 ff ff       	call   c010212a <intr_disable>
        return 1;
c0104f92:	b8 01 00 00 00       	mov    $0x1,%eax
c0104f97:	eb 05                	jmp    c0104f9e <__intr_save+0x28>
    }
    return 0;
c0104f99:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f9e:	c9                   	leave  
c0104f9f:	c3                   	ret    

c0104fa0 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fa0:	55                   	push   %ebp
c0104fa1:	89 e5                	mov    %esp,%ebp
c0104fa3:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fa6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104faa:	74 05                	je     c0104fb1 <__intr_restore+0x11>
        intr_enable();
c0104fac:	e8 73 d1 ff ff       	call   c0102124 <intr_enable>
    }
}
c0104fb1:	c9                   	leave  
c0104fb2:	c3                   	ret    

c0104fb3 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fb3:	55                   	push   %ebp
c0104fb4:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb9:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fbc:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fc1:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104fc3:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fc8:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104fca:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fcf:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fd1:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fd6:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104fd8:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fdd:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104fdf:	ea e6 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104fe6
}
c0104fe6:	5d                   	pop    %ebp
c0104fe7:	c3                   	ret    

c0104fe8 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104fe8:	55                   	push   %ebp
c0104fe9:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104feb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fee:	a3 a4 fe 14 c0       	mov    %eax,0xc014fea4
}
c0104ff3:	5d                   	pop    %ebp
c0104ff4:	c3                   	ret    

c0104ff5 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104ff5:	55                   	push   %ebp
c0104ff6:	89 e5                	mov    %esp,%ebp
c0104ff8:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104ffb:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c0105000:	89 04 24             	mov    %eax,(%esp)
c0105003:	e8 e0 ff ff ff       	call   c0104fe8 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0105008:	66 c7 05 a8 fe 14 c0 	movw   $0x10,0xc014fea8
c010500f:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105011:	66 c7 05 48 ea 14 c0 	movw   $0x68,0xc014ea48
c0105018:	68 00 
c010501a:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c010501f:	66 a3 4a ea 14 c0    	mov    %ax,0xc014ea4a
c0105025:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c010502a:	c1 e8 10             	shr    $0x10,%eax
c010502d:	a2 4c ea 14 c0       	mov    %al,0xc014ea4c
c0105032:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105039:	83 e0 f0             	and    $0xfffffff0,%eax
c010503c:	83 c8 09             	or     $0x9,%eax
c010503f:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105044:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c010504b:	83 e0 ef             	and    $0xffffffef,%eax
c010504e:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105053:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c010505a:	83 e0 9f             	and    $0xffffff9f,%eax
c010505d:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105062:	0f b6 05 4d ea 14 c0 	movzbl 0xc014ea4d,%eax
c0105069:	83 c8 80             	or     $0xffffff80,%eax
c010506c:	a2 4d ea 14 c0       	mov    %al,0xc014ea4d
c0105071:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105078:	83 e0 f0             	and    $0xfffffff0,%eax
c010507b:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c0105080:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105087:	83 e0 ef             	and    $0xffffffef,%eax
c010508a:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c010508f:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c0105096:	83 e0 df             	and    $0xffffffdf,%eax
c0105099:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c010509e:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050a5:	83 c8 40             	or     $0x40,%eax
c01050a8:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050ad:	0f b6 05 4e ea 14 c0 	movzbl 0xc014ea4e,%eax
c01050b4:	83 e0 7f             	and    $0x7f,%eax
c01050b7:	a2 4e ea 14 c0       	mov    %al,0xc014ea4e
c01050bc:	b8 a0 fe 14 c0       	mov    $0xc014fea0,%eax
c01050c1:	c1 e8 18             	shr    $0x18,%eax
c01050c4:	a2 4f ea 14 c0       	mov    %al,0xc014ea4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050c9:	c7 04 24 50 ea 14 c0 	movl   $0xc014ea50,(%esp)
c01050d0:	e8 de fe ff ff       	call   c0104fb3 <lgdt>
c01050d5:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050db:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050df:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050e2:	c9                   	leave  
c01050e3:	c3                   	ret    

c01050e4 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050e4:	55                   	push   %ebp
c01050e5:	89 e5                	mov    %esp,%ebp
c01050e7:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050ea:	c7 05 20 30 15 c0 b0 	movl   $0xc01162b0,0xc0153020
c01050f1:	62 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01050f4:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01050f9:	8b 00                	mov    (%eax),%eax
c01050fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01050ff:	c7 04 24 3c 64 11 c0 	movl   $0xc011643c,(%esp)
c0105106:	e8 5a b2 ff ff       	call   c0100365 <cprintf>
    pmm_manager->init();
c010510b:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105110:	8b 40 04             	mov    0x4(%eax),%eax
c0105113:	ff d0                	call   *%eax
}
c0105115:	c9                   	leave  
c0105116:	c3                   	ret    

c0105117 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105117:	55                   	push   %ebp
c0105118:	89 e5                	mov    %esp,%ebp
c010511a:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010511d:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105122:	8b 40 08             	mov    0x8(%eax),%eax
c0105125:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105128:	89 54 24 04          	mov    %edx,0x4(%esp)
c010512c:	8b 55 08             	mov    0x8(%ebp),%edx
c010512f:	89 14 24             	mov    %edx,(%esp)
c0105132:	ff d0                	call   *%eax
}
c0105134:	c9                   	leave  
c0105135:	c3                   	ret    

c0105136 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105136:	55                   	push   %ebp
c0105137:	89 e5                	mov    %esp,%ebp
c0105139:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010513c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105143:	e8 2e fe ff ff       	call   c0104f76 <__intr_save>
c0105148:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010514b:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c0105150:	8b 40 0c             	mov    0xc(%eax),%eax
c0105153:	8b 55 08             	mov    0x8(%ebp),%edx
c0105156:	89 14 24             	mov    %edx,(%esp)
c0105159:	ff d0                	call   *%eax
c010515b:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010515e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105161:	89 04 24             	mov    %eax,(%esp)
c0105164:	e8 37 fe ff ff       	call   c0104fa0 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105169:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010516d:	75 2d                	jne    c010519c <alloc_pages+0x66>
c010516f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105173:	77 27                	ja     c010519c <alloc_pages+0x66>
c0105175:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c010517a:	85 c0                	test   %eax,%eax
c010517c:	74 1e                	je     c010519c <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010517e:	8b 55 08             	mov    0x8(%ebp),%edx
c0105181:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0105186:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010518d:	00 
c010518e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105192:	89 04 24             	mov    %eax,(%esp)
c0105195:	e8 84 1d 00 00       	call   c0106f1e <swap_out>
    }
c010519a:	eb a7                	jmp    c0105143 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c010519c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010519f:	c9                   	leave  
c01051a0:	c3                   	ret    

c01051a1 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051a1:	55                   	push   %ebp
c01051a2:	89 e5                	mov    %esp,%ebp
c01051a4:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051a7:	e8 ca fd ff ff       	call   c0104f76 <__intr_save>
c01051ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051af:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01051b4:	8b 40 10             	mov    0x10(%eax),%eax
c01051b7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01051ba:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051be:	8b 55 08             	mov    0x8(%ebp),%edx
c01051c1:	89 14 24             	mov    %edx,(%esp)
c01051c4:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01051c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051c9:	89 04 24             	mov    %eax,(%esp)
c01051cc:	e8 cf fd ff ff       	call   c0104fa0 <__intr_restore>
}
c01051d1:	c9                   	leave  
c01051d2:	c3                   	ret    

c01051d3 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01051d3:	55                   	push   %ebp
c01051d4:	89 e5                	mov    %esp,%ebp
c01051d6:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01051d9:	e8 98 fd ff ff       	call   c0104f76 <__intr_save>
c01051de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051e1:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01051e6:	8b 40 14             	mov    0x14(%eax),%eax
c01051e9:	ff d0                	call   *%eax
c01051eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01051ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051f1:	89 04 24             	mov    %eax,(%esp)
c01051f4:	e8 a7 fd ff ff       	call   c0104fa0 <__intr_restore>
    return ret;
c01051f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01051fc:	c9                   	leave  
c01051fd:	c3                   	ret    

c01051fe <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01051fe:	55                   	push   %ebp
c01051ff:	89 e5                	mov    %esp,%ebp
c0105201:	57                   	push   %edi
c0105202:	56                   	push   %esi
c0105203:	53                   	push   %ebx
c0105204:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010520a:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105211:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105218:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010521f:	c7 04 24 53 64 11 c0 	movl   $0xc0116453,(%esp)
c0105226:	e8 3a b1 ff ff       	call   c0100365 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010522b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105232:	e9 15 01 00 00       	jmp    c010534c <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105237:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010523a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010523d:	89 d0                	mov    %edx,%eax
c010523f:	c1 e0 02             	shl    $0x2,%eax
c0105242:	01 d0                	add    %edx,%eax
c0105244:	c1 e0 02             	shl    $0x2,%eax
c0105247:	01 c8                	add    %ecx,%eax
c0105249:	8b 50 08             	mov    0x8(%eax),%edx
c010524c:	8b 40 04             	mov    0x4(%eax),%eax
c010524f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105252:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105255:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105258:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010525b:	89 d0                	mov    %edx,%eax
c010525d:	c1 e0 02             	shl    $0x2,%eax
c0105260:	01 d0                	add    %edx,%eax
c0105262:	c1 e0 02             	shl    $0x2,%eax
c0105265:	01 c8                	add    %ecx,%eax
c0105267:	8b 48 0c             	mov    0xc(%eax),%ecx
c010526a:	8b 58 10             	mov    0x10(%eax),%ebx
c010526d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105270:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0105273:	01 c8                	add    %ecx,%eax
c0105275:	11 da                	adc    %ebx,%edx
c0105277:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010527a:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010527d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105280:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105283:	89 d0                	mov    %edx,%eax
c0105285:	c1 e0 02             	shl    $0x2,%eax
c0105288:	01 d0                	add    %edx,%eax
c010528a:	c1 e0 02             	shl    $0x2,%eax
c010528d:	01 c8                	add    %ecx,%eax
c010528f:	83 c0 14             	add    $0x14,%eax
c0105292:	8b 00                	mov    (%eax),%eax
c0105294:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c010529a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010529d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052a0:	83 c0 ff             	add    $0xffffffff,%eax
c01052a3:	83 d2 ff             	adc    $0xffffffff,%edx
c01052a6:	89 c6                	mov    %eax,%esi
c01052a8:	89 d7                	mov    %edx,%edi
c01052aa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052b0:	89 d0                	mov    %edx,%eax
c01052b2:	c1 e0 02             	shl    $0x2,%eax
c01052b5:	01 d0                	add    %edx,%eax
c01052b7:	c1 e0 02             	shl    $0x2,%eax
c01052ba:	01 c8                	add    %ecx,%eax
c01052bc:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052bf:	8b 58 10             	mov    0x10(%eax),%ebx
c01052c2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01052c8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052cc:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052d0:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01052d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052d7:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052da:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052de:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052e2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052e6:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052ea:	c7 04 24 60 64 11 c0 	movl   $0xc0116460,(%esp)
c01052f1:	e8 6f b0 ff ff       	call   c0100365 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01052f6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052fc:	89 d0                	mov    %edx,%eax
c01052fe:	c1 e0 02             	shl    $0x2,%eax
c0105301:	01 d0                	add    %edx,%eax
c0105303:	c1 e0 02             	shl    $0x2,%eax
c0105306:	01 c8                	add    %ecx,%eax
c0105308:	83 c0 14             	add    $0x14,%eax
c010530b:	8b 00                	mov    (%eax),%eax
c010530d:	83 f8 01             	cmp    $0x1,%eax
c0105310:	75 36                	jne    c0105348 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105312:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105315:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105318:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010531b:	77 2b                	ja     c0105348 <page_init+0x14a>
c010531d:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105320:	72 05                	jb     c0105327 <page_init+0x129>
c0105322:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105325:	73 21                	jae    c0105348 <page_init+0x14a>
c0105327:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010532b:	77 1b                	ja     c0105348 <page_init+0x14a>
c010532d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105331:	72 09                	jb     c010533c <page_init+0x13e>
c0105333:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010533a:	77 0c                	ja     c0105348 <page_init+0x14a>
                maxpa = end;
c010533c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010533f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105342:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105345:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105348:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010534c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010534f:	8b 00                	mov    (%eax),%eax
c0105351:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105354:	0f 8f dd fe ff ff    	jg     c0105237 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010535a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010535e:	72 1d                	jb     c010537d <page_init+0x17f>
c0105360:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105364:	77 09                	ja     c010536f <page_init+0x171>
c0105366:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010536d:	76 0e                	jbe    c010537d <page_init+0x17f>
        maxpa = KMEMSIZE;
c010536f:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105376:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010537d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105380:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105383:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105387:	c1 ea 0c             	shr    $0xc,%edx
c010538a:	a3 80 fe 14 c0       	mov    %eax,0xc014fe80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010538f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105396:	b8 04 32 15 c0       	mov    $0xc0153204,%eax
c010539b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010539e:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01053a1:	01 d0                	add    %edx,%eax
c01053a3:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053a9:	ba 00 00 00 00       	mov    $0x0,%edx
c01053ae:	f7 75 ac             	divl   -0x54(%ebp)
c01053b1:	89 d0                	mov    %edx,%eax
c01053b3:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053b6:	29 c2                	sub    %eax,%edx
c01053b8:	89 d0                	mov    %edx,%eax
c01053ba:	a3 28 30 15 c0       	mov    %eax,0xc0153028

    for (i = 0; i < npage; i ++) {
c01053bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053c6:	eb 27                	jmp    c01053ef <page_init+0x1f1>
        SetPageReserved(pages + i);
c01053c8:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c01053cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053d0:	c1 e2 05             	shl    $0x5,%edx
c01053d3:	01 d0                	add    %edx,%eax
c01053d5:	83 c0 04             	add    $0x4,%eax
c01053d8:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053df:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053e2:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053e5:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053e8:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053eb:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01053ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053f2:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01053f7:	39 c2                	cmp    %eax,%edx
c01053f9:	72 cd                	jb     c01053c8 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01053fb:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105400:	c1 e0 05             	shl    $0x5,%eax
c0105403:	89 c2                	mov    %eax,%edx
c0105405:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010540a:	01 d0                	add    %edx,%eax
c010540c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010540f:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105416:	77 23                	ja     c010543b <page_init+0x23d>
c0105418:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010541b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010541f:	c7 44 24 08 90 64 11 	movl   $0xc0116490,0x8(%esp)
c0105426:	c0 
c0105427:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010542e:	00 
c010542f:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105436:	e8 8d ba ff ff       	call   c0100ec8 <__panic>
c010543b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010543e:	05 00 00 00 40       	add    $0x40000000,%eax
c0105443:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105446:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010544d:	e9 74 01 00 00       	jmp    c01055c6 <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105452:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105455:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105458:	89 d0                	mov    %edx,%eax
c010545a:	c1 e0 02             	shl    $0x2,%eax
c010545d:	01 d0                	add    %edx,%eax
c010545f:	c1 e0 02             	shl    $0x2,%eax
c0105462:	01 c8                	add    %ecx,%eax
c0105464:	8b 50 08             	mov    0x8(%eax),%edx
c0105467:	8b 40 04             	mov    0x4(%eax),%eax
c010546a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010546d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105470:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105473:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105476:	89 d0                	mov    %edx,%eax
c0105478:	c1 e0 02             	shl    $0x2,%eax
c010547b:	01 d0                	add    %edx,%eax
c010547d:	c1 e0 02             	shl    $0x2,%eax
c0105480:	01 c8                	add    %ecx,%eax
c0105482:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105485:	8b 58 10             	mov    0x10(%eax),%ebx
c0105488:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010548b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010548e:	01 c8                	add    %ecx,%eax
c0105490:	11 da                	adc    %ebx,%edx
c0105492:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105495:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105498:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010549b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010549e:	89 d0                	mov    %edx,%eax
c01054a0:	c1 e0 02             	shl    $0x2,%eax
c01054a3:	01 d0                	add    %edx,%eax
c01054a5:	c1 e0 02             	shl    $0x2,%eax
c01054a8:	01 c8                	add    %ecx,%eax
c01054aa:	83 c0 14             	add    $0x14,%eax
c01054ad:	8b 00                	mov    (%eax),%eax
c01054af:	83 f8 01             	cmp    $0x1,%eax
c01054b2:	0f 85 0a 01 00 00    	jne    c01055c2 <page_init+0x3c4>
            if (begin < freemem) {
c01054b8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054bb:	ba 00 00 00 00       	mov    $0x0,%edx
c01054c0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054c3:	72 17                	jb     c01054dc <page_init+0x2de>
c01054c5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054c8:	77 05                	ja     c01054cf <page_init+0x2d1>
c01054ca:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01054cd:	76 0d                	jbe    c01054dc <page_init+0x2de>
                begin = freemem;
c01054cf:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054d5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054dc:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054e0:	72 1d                	jb     c01054ff <page_init+0x301>
c01054e2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054e6:	77 09                	ja     c01054f1 <page_init+0x2f3>
c01054e8:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01054ef:	76 0e                	jbe    c01054ff <page_init+0x301>
                end = KMEMSIZE;
c01054f1:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01054f8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01054ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105502:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105505:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105508:	0f 87 b4 00 00 00    	ja     c01055c2 <page_init+0x3c4>
c010550e:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105511:	72 09                	jb     c010551c <page_init+0x31e>
c0105513:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105516:	0f 83 a6 00 00 00    	jae    c01055c2 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c010551c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105523:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105526:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105529:	01 d0                	add    %edx,%eax
c010552b:	83 e8 01             	sub    $0x1,%eax
c010552e:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105531:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105534:	ba 00 00 00 00       	mov    $0x0,%edx
c0105539:	f7 75 9c             	divl   -0x64(%ebp)
c010553c:	89 d0                	mov    %edx,%eax
c010553e:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105541:	29 c2                	sub    %eax,%edx
c0105543:	89 d0                	mov    %edx,%eax
c0105545:	ba 00 00 00 00       	mov    $0x0,%edx
c010554a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010554d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105550:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105553:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105556:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105559:	ba 00 00 00 00       	mov    $0x0,%edx
c010555e:	89 c7                	mov    %eax,%edi
c0105560:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c0105566:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105569:	89 d0                	mov    %edx,%eax
c010556b:	83 e0 00             	and    $0x0,%eax
c010556e:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105571:	8b 45 80             	mov    -0x80(%ebp),%eax
c0105574:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0105577:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010557a:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010557d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105580:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105583:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105586:	77 3a                	ja     c01055c2 <page_init+0x3c4>
c0105588:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010558b:	72 05                	jb     c0105592 <page_init+0x394>
c010558d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105590:	73 30                	jae    c01055c2 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105592:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0105595:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105598:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010559b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010559e:	29 c8                	sub    %ecx,%eax
c01055a0:	19 da                	sbb    %ebx,%edx
c01055a2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055a6:	c1 ea 0c             	shr    $0xc,%edx
c01055a9:	89 c3                	mov    %eax,%ebx
c01055ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055ae:	89 04 24             	mov    %eax,(%esp)
c01055b1:	e8 8c f8 ff ff       	call   c0104e42 <pa2page>
c01055b6:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055ba:	89 04 24             	mov    %eax,(%esp)
c01055bd:	e8 55 fb ff ff       	call   c0105117 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01055c2:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01055c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01055c9:	8b 00                	mov    (%eax),%eax
c01055cb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01055ce:	0f 8f 7e fe ff ff    	jg     c0105452 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01055d4:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055da:	5b                   	pop    %ebx
c01055db:	5e                   	pop    %esi
c01055dc:	5f                   	pop    %edi
c01055dd:	5d                   	pop    %ebp
c01055de:	c3                   	ret    

c01055df <enable_paging>:

static void
enable_paging(void) {
c01055df:	55                   	push   %ebp
c01055e0:	89 e5                	mov    %esp,%ebp
c01055e2:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01055e5:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c01055ea:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01055ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01055f0:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01055f3:	0f 20 c0             	mov    %cr0,%eax
c01055f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01055f9:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01055fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01055ff:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0105606:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c010560a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010560d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105610:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105613:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105616:	c9                   	leave  
c0105617:	c3                   	ret    

c0105618 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105618:	55                   	push   %ebp
c0105619:	89 e5                	mov    %esp,%ebp
c010561b:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010561e:	8b 45 14             	mov    0x14(%ebp),%eax
c0105621:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105624:	31 d0                	xor    %edx,%eax
c0105626:	25 ff 0f 00 00       	and    $0xfff,%eax
c010562b:	85 c0                	test   %eax,%eax
c010562d:	74 24                	je     c0105653 <boot_map_segment+0x3b>
c010562f:	c7 44 24 0c c2 64 11 	movl   $0xc01164c2,0xc(%esp)
c0105636:	c0 
c0105637:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010563e:	c0 
c010563f:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105646:	00 
c0105647:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010564e:	e8 75 b8 ff ff       	call   c0100ec8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105653:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010565a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010565d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105662:	89 c2                	mov    %eax,%edx
c0105664:	8b 45 10             	mov    0x10(%ebp),%eax
c0105667:	01 c2                	add    %eax,%edx
c0105669:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010566c:	01 d0                	add    %edx,%eax
c010566e:	83 e8 01             	sub    $0x1,%eax
c0105671:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105674:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105677:	ba 00 00 00 00       	mov    $0x0,%edx
c010567c:	f7 75 f0             	divl   -0x10(%ebp)
c010567f:	89 d0                	mov    %edx,%eax
c0105681:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105684:	29 c2                	sub    %eax,%edx
c0105686:	89 d0                	mov    %edx,%eax
c0105688:	c1 e8 0c             	shr    $0xc,%eax
c010568b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010568e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105691:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105694:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105697:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010569c:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010569f:	8b 45 14             	mov    0x14(%ebp),%eax
c01056a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056ad:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056b0:	eb 6b                	jmp    c010571d <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01056b2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01056b9:	00 
c01056ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01056c4:	89 04 24             	mov    %eax,(%esp)
c01056c7:	e8 d1 01 00 00       	call   c010589d <get_pte>
c01056cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01056cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056d3:	75 24                	jne    c01056f9 <boot_map_segment+0xe1>
c01056d5:	c7 44 24 0c ee 64 11 	movl   $0xc01164ee,0xc(%esp)
c01056dc:	c0 
c01056dd:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01056e4:	c0 
c01056e5:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01056ec:	00 
c01056ed:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01056f4:	e8 cf b7 ff ff       	call   c0100ec8 <__panic>
        *ptep = pa | PTE_P | perm;
c01056f9:	8b 45 18             	mov    0x18(%ebp),%eax
c01056fc:	8b 55 14             	mov    0x14(%ebp),%edx
c01056ff:	09 d0                	or     %edx,%eax
c0105701:	83 c8 01             	or     $0x1,%eax
c0105704:	89 c2                	mov    %eax,%edx
c0105706:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105709:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010570b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010570f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105716:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c010571d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105721:	75 8f                	jne    c01056b2 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105723:	c9                   	leave  
c0105724:	c3                   	ret    

c0105725 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105725:	55                   	push   %ebp
c0105726:	89 e5                	mov    %esp,%ebp
c0105728:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c010572b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105732:	e8 ff f9 ff ff       	call   c0105136 <alloc_pages>
c0105737:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010573a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010573e:	75 1c                	jne    c010575c <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105740:	c7 44 24 08 fb 64 11 	movl   $0xc01164fb,0x8(%esp)
c0105747:	c0 
c0105748:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010574f:	00 
c0105750:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105757:	e8 6c b7 ff ff       	call   c0100ec8 <__panic>
    }
    return page2kva(p);
c010575c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010575f:	89 04 24             	mov    %eax,(%esp)
c0105762:	e8 20 f7 ff ff       	call   c0104e87 <page2kva>
}
c0105767:	c9                   	leave  
c0105768:	c3                   	ret    

c0105769 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105769:	55                   	push   %ebp
c010576a:	89 e5                	mov    %esp,%ebp
c010576c:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010576f:	e8 70 f9 ff ff       	call   c01050e4 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105774:	e8 85 fa ff ff       	call   c01051fe <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105779:	e8 58 09 00 00       	call   c01060d6 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c010577e:	e8 a2 ff ff ff       	call   c0105725 <boot_alloc_page>
c0105783:	a3 84 fe 14 c0       	mov    %eax,0xc014fe84
    memset(boot_pgdir, 0, PGSIZE);
c0105788:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010578d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105794:	00 
c0105795:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010579c:	00 
c010579d:	89 04 24             	mov    %eax,(%esp)
c01057a0:	e8 d4 fc 00 00       	call   c0115479 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01057a5:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01057ad:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01057b4:	77 23                	ja     c01057d9 <pmm_init+0x70>
c01057b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057bd:	c7 44 24 08 90 64 11 	movl   $0xc0116490,0x8(%esp)
c01057c4:	c0 
c01057c5:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01057cc:	00 
c01057cd:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01057d4:	e8 ef b6 ff ff       	call   c0100ec8 <__panic>
c01057d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057dc:	05 00 00 00 40       	add    $0x40000000,%eax
c01057e1:	a3 24 30 15 c0       	mov    %eax,0xc0153024

    check_pgdir();
c01057e6:	e8 09 09 00 00       	call   c01060f4 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01057eb:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057f0:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01057f6:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01057fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01057fe:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105805:	77 23                	ja     c010582a <pmm_init+0xc1>
c0105807:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010580a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010580e:	c7 44 24 08 90 64 11 	movl   $0xc0116490,0x8(%esp)
c0105815:	c0 
c0105816:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c010581d:	00 
c010581e:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105825:	e8 9e b6 ff ff       	call   c0100ec8 <__panic>
c010582a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010582d:	05 00 00 00 40       	add    $0x40000000,%eax
c0105832:	83 c8 03             	or     $0x3,%eax
c0105835:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105837:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010583c:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105843:	00 
c0105844:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010584b:	00 
c010584c:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105853:	38 
c0105854:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c010585b:	c0 
c010585c:	89 04 24             	mov    %eax,(%esp)
c010585f:	e8 b4 fd ff ff       	call   c0105618 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105864:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105869:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010586f:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105875:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105877:	e8 63 fd ff ff       	call   c01055df <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010587c:	e8 74 f7 ff ff       	call   c0104ff5 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105881:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0105886:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010588c:	e8 fe 0e 00 00       	call   c010678f <check_boot_pgdir>

    print_pgdir();
c0105891:	e8 8b 13 00 00       	call   c0106c21 <print_pgdir>
    
    kmalloc_init();
c0105896:	e8 e6 f2 ff ff       	call   c0104b81 <kmalloc_init>

}
c010589b:	c9                   	leave  
c010589c:	c3                   	ret    

c010589d <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c010589d:	55                   	push   %ebp
c010589e:	89 e5                	mov    %esp,%ebp
c01058a0:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058a6:	c1 e8 16             	shr    $0x16,%eax
c01058a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01058b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01058b3:	01 d0                	add    %edx,%eax
c01058b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01058b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058bb:	8b 00                	mov    (%eax),%eax
c01058bd:	83 e0 01             	and    $0x1,%eax
c01058c0:	85 c0                	test   %eax,%eax
c01058c2:	0f 85 af 00 00 00    	jne    c0105977 <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c01058c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058cc:	74 15                	je     c01058e3 <get_pte+0x46>
c01058ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058d5:	e8 5c f8 ff ff       	call   c0105136 <alloc_pages>
c01058da:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01058e1:	75 0a                	jne    c01058ed <get_pte+0x50>
            return NULL;
c01058e3:	b8 00 00 00 00       	mov    $0x0,%eax
c01058e8:	e9 e6 00 00 00       	jmp    c01059d3 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c01058ed:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01058f4:	00 
c01058f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058f8:	89 04 24             	mov    %eax,(%esp)
c01058fb:	e8 3b f6 ff ff       	call   c0104f3b <set_page_ref>
        uintptr_t pa = page2pa(page);
c0105900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105903:	89 04 24             	mov    %eax,(%esp)
c0105906:	e8 21 f5 ff ff       	call   c0104e2c <page2pa>
c010590b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c010590e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105911:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105914:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105917:	c1 e8 0c             	shr    $0xc,%eax
c010591a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010591d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105922:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105925:	72 23                	jb     c010594a <get_pte+0xad>
c0105927:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010592a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010592e:	c7 44 24 08 ec 63 11 	movl   $0xc01163ec,0x8(%esp)
c0105935:	c0 
c0105936:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c010593d:	00 
c010593e:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105945:	e8 7e b5 ff ff       	call   c0100ec8 <__panic>
c010594a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010594d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105952:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105959:	00 
c010595a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105961:	00 
c0105962:	89 04 24             	mov    %eax,(%esp)
c0105965:	e8 0f fb 00 00       	call   c0115479 <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c010596a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010596d:	83 c8 07             	or     $0x7,%eax
c0105970:	89 c2                	mov    %eax,%edx
c0105972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105975:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0105977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010597a:	8b 00                	mov    (%eax),%eax
c010597c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105981:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105984:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105987:	c1 e8 0c             	shr    $0xc,%eax
c010598a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010598d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0105992:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105995:	72 23                	jb     c01059ba <get_pte+0x11d>
c0105997:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010599a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010599e:	c7 44 24 08 ec 63 11 	movl   $0xc01163ec,0x8(%esp)
c01059a5:	c0 
c01059a6:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c01059ad:	00 
c01059ae:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01059b5:	e8 0e b5 ff ff       	call   c0100ec8 <__panic>
c01059ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059bd:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059c2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01059c5:	c1 ea 0c             	shr    $0xc,%edx
c01059c8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01059ce:	c1 e2 02             	shl    $0x2,%edx
c01059d1:	01 d0                	add    %edx,%eax
}
c01059d3:	c9                   	leave  
c01059d4:	c3                   	ret    

c01059d5 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01059d5:	55                   	push   %ebp
c01059d6:	89 e5                	mov    %esp,%ebp
c01059d8:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01059db:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059e2:	00 
c01059e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ed:	89 04 24             	mov    %eax,(%esp)
c01059f0:	e8 a8 fe ff ff       	call   c010589d <get_pte>
c01059f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01059f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01059fc:	74 08                	je     c0105a06 <get_page+0x31>
        *ptep_store = ptep;
c01059fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a01:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a04:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a0a:	74 1b                	je     c0105a27 <get_page+0x52>
c0105a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a0f:	8b 00                	mov    (%eax),%eax
c0105a11:	83 e0 01             	and    $0x1,%eax
c0105a14:	85 c0                	test   %eax,%eax
c0105a16:	74 0f                	je     c0105a27 <get_page+0x52>
        return pa2page(*ptep);
c0105a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a1b:	8b 00                	mov    (%eax),%eax
c0105a1d:	89 04 24             	mov    %eax,(%esp)
c0105a20:	e8 1d f4 ff ff       	call   c0104e42 <pa2page>
c0105a25:	eb 05                	jmp    c0105a2c <get_page+0x57>
    }
    return NULL;
c0105a27:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a2c:	c9                   	leave  
c0105a2d:	c3                   	ret    

c0105a2e <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a2e:	55                   	push   %ebp
c0105a2f:	89 e5                	mov    %esp,%ebp
c0105a31:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a34:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a37:	8b 00                	mov    (%eax),%eax
c0105a39:	83 e0 01             	and    $0x1,%eax
c0105a3c:	85 c0                	test   %eax,%eax
c0105a3e:	74 4d                	je     c0105a8d <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105a40:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a43:	8b 00                	mov    (%eax),%eax
c0105a45:	89 04 24             	mov    %eax,(%esp)
c0105a48:	e8 8e f4 ff ff       	call   c0104edb <pte2page>
c0105a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a53:	89 04 24             	mov    %eax,(%esp)
c0105a56:	e8 04 f5 ff ff       	call   c0104f5f <page_ref_dec>
c0105a5b:	85 c0                	test   %eax,%eax
c0105a5d:	75 13                	jne    c0105a72 <page_remove_pte+0x44>
            free_page(page);
c0105a5f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a66:	00 
c0105a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a6a:	89 04 24             	mov    %eax,(%esp)
c0105a6d:	e8 2f f7 ff ff       	call   c01051a1 <free_pages>
        }
        *ptep = 0;
c0105a72:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a7e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a82:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a85:	89 04 24             	mov    %eax,(%esp)
c0105a88:	e8 18 05 00 00       	call   c0105fa5 <tlb_invalidate>
    }
}
c0105a8d:	c9                   	leave  
c0105a8e:	c3                   	ret    

c0105a8f <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105a8f:	55                   	push   %ebp
c0105a90:	89 e5                	mov    %esp,%ebp
c0105a92:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a98:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105a9d:	85 c0                	test   %eax,%eax
c0105a9f:	75 0c                	jne    c0105aad <unmap_range+0x1e>
c0105aa1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105aa4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105aa9:	85 c0                	test   %eax,%eax
c0105aab:	74 24                	je     c0105ad1 <unmap_range+0x42>
c0105aad:	c7 44 24 0c 14 65 11 	movl   $0xc0116514,0xc(%esp)
c0105ab4:	c0 
c0105ab5:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105abc:	c0 
c0105abd:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105ac4:	00 
c0105ac5:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105acc:	e8 f7 b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105ad1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105ad8:	76 11                	jbe    c0105aeb <unmap_range+0x5c>
c0105ada:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105add:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ae0:	73 09                	jae    c0105aeb <unmap_range+0x5c>
c0105ae2:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105ae9:	76 24                	jbe    c0105b0f <unmap_range+0x80>
c0105aeb:	c7 44 24 0c 3d 65 11 	movl   $0xc011653d,0xc(%esp)
c0105af2:	c0 
c0105af3:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105afa:	c0 
c0105afb:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105b02:	00 
c0105b03:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105b0a:	e8 b9 b3 ff ff       	call   c0100ec8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b16:	00 
c0105b17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b21:	89 04 24             	mov    %eax,(%esp)
c0105b24:	e8 74 fd ff ff       	call   c010589d <get_pte>
c0105b29:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b30:	75 18                	jne    c0105b4a <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b35:	05 00 00 40 00       	add    $0x400000,%eax
c0105b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b40:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b45:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b48:	eb 29                	jmp    c0105b73 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b4d:	8b 00                	mov    (%eax),%eax
c0105b4f:	85 c0                	test   %eax,%eax
c0105b51:	74 19                	je     c0105b6c <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b56:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b61:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b64:	89 04 24             	mov    %eax,(%esp)
c0105b67:	e8 c2 fe ff ff       	call   c0105a2e <page_remove_pte>
        }
        start += PGSIZE;
c0105b6c:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b73:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b77:	74 08                	je     c0105b81 <unmap_range+0xf2>
c0105b79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b7c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b7f:	72 8e                	jb     c0105b0f <unmap_range+0x80>
}
c0105b81:	c9                   	leave  
c0105b82:	c3                   	ret    

c0105b83 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b83:	55                   	push   %ebp
c0105b84:	89 e5                	mov    %esp,%ebp
c0105b86:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b8c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b91:	85 c0                	test   %eax,%eax
c0105b93:	75 0c                	jne    c0105ba1 <exit_range+0x1e>
c0105b95:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b98:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b9d:	85 c0                	test   %eax,%eax
c0105b9f:	74 24                	je     c0105bc5 <exit_range+0x42>
c0105ba1:	c7 44 24 0c 14 65 11 	movl   $0xc0116514,0xc(%esp)
c0105ba8:	c0 
c0105ba9:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105bb0:	c0 
c0105bb1:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105bb8:	00 
c0105bb9:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105bc0:	e8 03 b3 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105bc5:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105bcc:	76 11                	jbe    c0105bdf <exit_range+0x5c>
c0105bce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bd1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bd4:	73 09                	jae    c0105bdf <exit_range+0x5c>
c0105bd6:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105bdd:	76 24                	jbe    c0105c03 <exit_range+0x80>
c0105bdf:	c7 44 24 0c 3d 65 11 	movl   $0xc011653d,0xc(%esp)
c0105be6:	c0 
c0105be7:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105bee:	c0 
c0105bef:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105bf6:	00 
c0105bf7:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105bfe:	e8 c5 b2 ff ff       	call   c0100ec8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c0c:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c11:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c14:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c17:	c1 e8 16             	shr    $0x16,%eax
c0105c1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c20:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c27:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c2a:	01 d0                	add    %edx,%eax
c0105c2c:	8b 00                	mov    (%eax),%eax
c0105c2e:	83 e0 01             	and    $0x1,%eax
c0105c31:	85 c0                	test   %eax,%eax
c0105c33:	74 3e                	je     c0105c73 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105c35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c38:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c42:	01 d0                	add    %edx,%eax
c0105c44:	8b 00                	mov    (%eax),%eax
c0105c46:	89 04 24             	mov    %eax,(%esp)
c0105c49:	e8 cb f2 ff ff       	call   c0104f19 <pde2page>
c0105c4e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c55:	00 
c0105c56:	89 04 24             	mov    %eax,(%esp)
c0105c59:	e8 43 f5 ff ff       	call   c01051a1 <free_pages>
            pgdir[pde_idx] = 0;
c0105c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c6b:	01 d0                	add    %edx,%eax
c0105c6d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c73:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c7a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c7e:	74 08                	je     c0105c88 <exit_range+0x105>
c0105c80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c83:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c86:	72 8c                	jb     c0105c14 <exit_range+0x91>
}
c0105c88:	c9                   	leave  
c0105c89:	c3                   	ret    

c0105c8a <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c8a:	55                   	push   %ebp
c0105c8b:	89 e5                	mov    %esp,%ebp
c0105c8d:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c90:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c98:	85 c0                	test   %eax,%eax
c0105c9a:	75 0c                	jne    c0105ca8 <copy_range+0x1e>
c0105c9c:	8b 45 14             	mov    0x14(%ebp),%eax
c0105c9f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ca4:	85 c0                	test   %eax,%eax
c0105ca6:	74 24                	je     c0105ccc <copy_range+0x42>
c0105ca8:	c7 44 24 0c 14 65 11 	movl   $0xc0116514,0xc(%esp)
c0105caf:	c0 
c0105cb0:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105cb7:	c0 
c0105cb8:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105cbf:	00 
c0105cc0:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105cc7:	e8 fc b1 ff ff       	call   c0100ec8 <__panic>
    assert(USER_ACCESS(start, end));
c0105ccc:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105cd3:	76 11                	jbe    c0105ce6 <copy_range+0x5c>
c0105cd5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cd8:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105cdb:	73 09                	jae    c0105ce6 <copy_range+0x5c>
c0105cdd:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105ce4:	76 24                	jbe    c0105d0a <copy_range+0x80>
c0105ce6:	c7 44 24 0c 3d 65 11 	movl   $0xc011653d,0xc(%esp)
c0105ced:	c0 
c0105cee:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105cf5:	c0 
c0105cf6:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105cfd:	00 
c0105cfe:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105d05:	e8 be b1 ff ff       	call   c0100ec8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d0a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d11:	00 
c0105d12:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d1c:	89 04 24             	mov    %eax,(%esp)
c0105d1f:	e8 79 fb ff ff       	call   c010589d <get_pte>
c0105d24:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d2b:	75 1b                	jne    c0105d48 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d30:	05 00 00 40 00       	add    $0x400000,%eax
c0105d35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d3b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d40:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d43:	e9 47 01 00 00       	jmp    c0105e8f <copy_range+0x205>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d4b:	8b 00                	mov    (%eax),%eax
c0105d4d:	83 e0 01             	and    $0x1,%eax
c0105d50:	85 c0                	test   %eax,%eax
c0105d52:	0f 84 30 01 00 00    	je     c0105e88 <copy_range+0x1fe>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d58:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d5f:	00 
c0105d60:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d6a:	89 04 24             	mov    %eax,(%esp)
c0105d6d:	e8 2b fb ff ff       	call   c010589d <get_pte>
c0105d72:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d79:	75 0a                	jne    c0105d85 <copy_range+0xfb>
                return -E_NO_MEM;
c0105d7b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d80:	e9 21 01 00 00       	jmp    c0105ea6 <copy_range+0x21c>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d88:	8b 00                	mov    (%eax),%eax
c0105d8a:	83 e0 07             	and    $0x7,%eax
c0105d8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105d90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d93:	8b 00                	mov    (%eax),%eax
c0105d95:	89 04 24             	mov    %eax,(%esp)
c0105d98:	e8 3e f1 ff ff       	call   c0104edb <pte2page>
c0105d9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105da0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105da7:	e8 8a f3 ff ff       	call   c0105136 <alloc_pages>
c0105dac:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105daf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105db3:	75 24                	jne    c0105dd9 <copy_range+0x14f>
c0105db5:	c7 44 24 0c 55 65 11 	movl   $0xc0116555,0xc(%esp)
c0105dbc:	c0 
c0105dbd:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105dc4:	c0 
c0105dc5:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105dcc:	00 
c0105dcd:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105dd4:	e8 ef b0 ff ff       	call   c0100ec8 <__panic>
        assert(npage!=NULL);
c0105dd9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ddd:	75 24                	jne    c0105e03 <copy_range+0x179>
c0105ddf:	c7 44 24 0c 60 65 11 	movl   $0xc0116560,0xc(%esp)
c0105de6:	c0 
c0105de7:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105dee:	c0 
c0105def:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105df6:	00 
c0105df7:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105dfe:	e8 c5 b0 ff ff       	call   c0100ec8 <__panic>
        int ret=0;
c0105e03:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void *va1,*va2;
		va1 = page2kva(page);
c0105e0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e0d:	89 04 24             	mov    %eax,(%esp)
c0105e10:	e8 72 f0 ff ff       	call   c0104e87 <page2kva>
c0105e15:	89 45 d8             	mov    %eax,-0x28(%ebp)
        va2 = page2kva(npage);
c0105e18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e1b:	89 04 24             	mov    %eax,(%esp)
c0105e1e:	e8 64 f0 ff ff       	call   c0104e87 <page2kva>
c0105e23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(va2,va1,PGSIZE);
c0105e26:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e2d:	00 
c0105e2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e38:	89 04 24             	mov    %eax,(%esp)
c0105e3b:	e8 1b f7 00 00       	call   c011555b <memcpy>
        assert(page_insert(to, npage, start, perm) == 0);
c0105e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e43:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e47:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e4a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e55:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e58:	89 04 24             	mov    %eax,(%esp)
c0105e5b:	e8 8c 00 00 00       	call   c0105eec <page_insert>
c0105e60:	85 c0                	test   %eax,%eax
c0105e62:	74 24                	je     c0105e88 <copy_range+0x1fe>
c0105e64:	c7 44 24 0c 6c 65 11 	movl   $0xc011656c,0xc(%esp)
c0105e6b:	c0 
c0105e6c:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0105e73:	c0 
c0105e74:	c7 44 24 04 25 02 00 	movl   $0x225,0x4(%esp)
c0105e7b:	00 
c0105e7c:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105e83:	e8 40 b0 ff ff       	call   c0100ec8 <__panic>
        }
        start += PGSIZE;
c0105e88:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105e93:	74 0c                	je     c0105ea1 <copy_range+0x217>
c0105e95:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e98:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105e9b:	0f 82 69 fe ff ff    	jb     c0105d0a <copy_range+0x80>
    return 0;
c0105ea1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ea6:	c9                   	leave  
c0105ea7:	c3                   	ret    

c0105ea8 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105ea8:	55                   	push   %ebp
c0105ea9:	89 e5                	mov    %esp,%ebp
c0105eab:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105eae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105eb5:	00 
c0105eb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105eb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec0:	89 04 24             	mov    %eax,(%esp)
c0105ec3:	e8 d5 f9 ff ff       	call   c010589d <get_pte>
c0105ec8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105ecb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ecf:	74 19                	je     c0105eea <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105ed1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ed4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105edb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105edf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ee2:	89 04 24             	mov    %eax,(%esp)
c0105ee5:	e8 44 fb ff ff       	call   c0105a2e <page_remove_pte>
    }
}
c0105eea:	c9                   	leave  
c0105eeb:	c3                   	ret    

c0105eec <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105eec:	55                   	push   %ebp
c0105eed:	89 e5                	mov    %esp,%ebp
c0105eef:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105ef2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ef9:	00 
c0105efa:	8b 45 10             	mov    0x10(%ebp),%eax
c0105efd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f01:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f04:	89 04 24             	mov    %eax,(%esp)
c0105f07:	e8 91 f9 ff ff       	call   c010589d <get_pte>
c0105f0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f13:	75 0a                	jne    c0105f1f <page_insert+0x33>
        return -E_NO_MEM;
c0105f15:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f1a:	e9 84 00 00 00       	jmp    c0105fa3 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f22:	89 04 24             	mov    %eax,(%esp)
c0105f25:	e8 1e f0 ff ff       	call   c0104f48 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f2d:	8b 00                	mov    (%eax),%eax
c0105f2f:	83 e0 01             	and    $0x1,%eax
c0105f32:	85 c0                	test   %eax,%eax
c0105f34:	74 3e                	je     c0105f74 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f39:	8b 00                	mov    (%eax),%eax
c0105f3b:	89 04 24             	mov    %eax,(%esp)
c0105f3e:	e8 98 ef ff ff       	call   c0104edb <pte2page>
c0105f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f49:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f4c:	75 0d                	jne    c0105f5b <page_insert+0x6f>
            page_ref_dec(page);
c0105f4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f51:	89 04 24             	mov    %eax,(%esp)
c0105f54:	e8 06 f0 ff ff       	call   c0104f5f <page_ref_dec>
c0105f59:	eb 19                	jmp    c0105f74 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f5e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f62:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f65:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f69:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f6c:	89 04 24             	mov    %eax,(%esp)
c0105f6f:	e8 ba fa ff ff       	call   c0105a2e <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f77:	89 04 24             	mov    %eax,(%esp)
c0105f7a:	e8 ad ee ff ff       	call   c0104e2c <page2pa>
c0105f7f:	0b 45 14             	or     0x14(%ebp),%eax
c0105f82:	83 c8 01             	or     $0x1,%eax
c0105f85:	89 c2                	mov    %eax,%edx
c0105f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f8a:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f93:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f96:	89 04 24             	mov    %eax,(%esp)
c0105f99:	e8 07 00 00 00       	call   c0105fa5 <tlb_invalidate>
    return 0;
c0105f9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fa3:	c9                   	leave  
c0105fa4:	c3                   	ret    

c0105fa5 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105fa5:	55                   	push   %ebp
c0105fa6:	89 e5                	mov    %esp,%ebp
c0105fa8:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105fab:	0f 20 d8             	mov    %cr3,%eax
c0105fae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105fb4:	89 c2                	mov    %eax,%edx
c0105fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105fbc:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105fc3:	77 23                	ja     c0105fe8 <tlb_invalidate+0x43>
c0105fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fcc:	c7 44 24 08 90 64 11 	movl   $0xc0116490,0x8(%esp)
c0105fd3:	c0 
c0105fd4:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
c0105fdb:	00 
c0105fdc:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0105fe3:	e8 e0 ae ff ff       	call   c0100ec8 <__panic>
c0105fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105feb:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ff0:	39 c2                	cmp    %eax,%edx
c0105ff2:	75 0c                	jne    c0106000 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105ff4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ff7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105ffa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ffd:	0f 01 38             	invlpg (%eax)
    }
}
c0106000:	c9                   	leave  
c0106001:	c3                   	ret    

c0106002 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106002:	55                   	push   %ebp
c0106003:	89 e5                	mov    %esp,%ebp
c0106005:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106008:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010600f:	e8 22 f1 ff ff       	call   c0105136 <alloc_pages>
c0106014:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106017:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010601b:	0f 84 b0 00 00 00    	je     c01060d1 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106021:	8b 45 10             	mov    0x10(%ebp),%eax
c0106024:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106028:	8b 45 0c             	mov    0xc(%ebp),%eax
c010602b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010602f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106032:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106036:	8b 45 08             	mov    0x8(%ebp),%eax
c0106039:	89 04 24             	mov    %eax,(%esp)
c010603c:	e8 ab fe ff ff       	call   c0105eec <page_insert>
c0106041:	85 c0                	test   %eax,%eax
c0106043:	74 1a                	je     c010605f <pgdir_alloc_page+0x5d>
            free_page(page);
c0106045:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010604c:	00 
c010604d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106050:	89 04 24             	mov    %eax,(%esp)
c0106053:	e8 49 f1 ff ff       	call   c01051a1 <free_pages>
            return NULL;
c0106058:	b8 00 00 00 00       	mov    $0x0,%eax
c010605d:	eb 75                	jmp    c01060d4 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010605f:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0106064:	85 c0                	test   %eax,%eax
c0106066:	74 69                	je     c01060d1 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106068:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c010606d:	85 c0                	test   %eax,%eax
c010606f:	74 60                	je     c01060d1 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106071:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0106076:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010607d:	00 
c010607e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106081:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106085:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106088:	89 54 24 04          	mov    %edx,0x4(%esp)
c010608c:	89 04 24             	mov    %eax,(%esp)
c010608f:	e8 3e 0e 00 00       	call   c0106ed2 <swap_map_swappable>
                page->pra_vaddr=la;
c0106094:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106097:	8b 55 0c             	mov    0xc(%ebp),%edx
c010609a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010609d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a0:	89 04 24             	mov    %eax,(%esp)
c01060a3:	e8 89 ee ff ff       	call   c0104f31 <page_ref>
c01060a8:	83 f8 01             	cmp    $0x1,%eax
c01060ab:	74 24                	je     c01060d1 <pgdir_alloc_page+0xcf>
c01060ad:	c7 44 24 0c 95 65 11 	movl   $0xc0116595,0xc(%esp)
c01060b4:	c0 
c01060b5:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01060bc:	c0 
c01060bd:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c01060c4:	00 
c01060c5:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01060cc:	e8 f7 ad ff ff       	call   c0100ec8 <__panic>
            }
        }

    }

    return page;
c01060d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060d4:	c9                   	leave  
c01060d5:	c3                   	ret    

c01060d6 <check_alloc_page>:

static void
check_alloc_page(void) {
c01060d6:	55                   	push   %ebp
c01060d7:	89 e5                	mov    %esp,%ebp
c01060d9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060dc:	a1 20 30 15 c0       	mov    0xc0153020,%eax
c01060e1:	8b 40 18             	mov    0x18(%eax),%eax
c01060e4:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01060e6:	c7 04 24 ac 65 11 c0 	movl   $0xc01165ac,(%esp)
c01060ed:	e8 73 a2 ff ff       	call   c0100365 <cprintf>
}
c01060f2:	c9                   	leave  
c01060f3:	c3                   	ret    

c01060f4 <check_pgdir>:

static void
check_pgdir(void) {
c01060f4:	55                   	push   %ebp
c01060f5:	89 e5                	mov    %esp,%ebp
c01060f7:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01060fa:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01060ff:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106104:	76 24                	jbe    c010612a <check_pgdir+0x36>
c0106106:	c7 44 24 0c cb 65 11 	movl   $0xc01165cb,0xc(%esp)
c010610d:	c0 
c010610e:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106115:	c0 
c0106116:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010611d:	00 
c010611e:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106125:	e8 9e ad ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010612a:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010612f:	85 c0                	test   %eax,%eax
c0106131:	74 0e                	je     c0106141 <check_pgdir+0x4d>
c0106133:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106138:	25 ff 0f 00 00       	and    $0xfff,%eax
c010613d:	85 c0                	test   %eax,%eax
c010613f:	74 24                	je     c0106165 <check_pgdir+0x71>
c0106141:	c7 44 24 0c e8 65 11 	movl   $0xc01165e8,0xc(%esp)
c0106148:	c0 
c0106149:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106150:	c0 
c0106151:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c0106158:	00 
c0106159:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106160:	e8 63 ad ff ff       	call   c0100ec8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106165:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010616a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106171:	00 
c0106172:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106179:	00 
c010617a:	89 04 24             	mov    %eax,(%esp)
c010617d:	e8 53 f8 ff ff       	call   c01059d5 <get_page>
c0106182:	85 c0                	test   %eax,%eax
c0106184:	74 24                	je     c01061aa <check_pgdir+0xb6>
c0106186:	c7 44 24 0c 20 66 11 	movl   $0xc0116620,0xc(%esp)
c010618d:	c0 
c010618e:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106195:	c0 
c0106196:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010619d:	00 
c010619e:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01061a5:	e8 1e ad ff ff       	call   c0100ec8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01061aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061b1:	e8 80 ef ff ff       	call   c0105136 <alloc_pages>
c01061b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01061b9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01061be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061c5:	00 
c01061c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061cd:	00 
c01061ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061d5:	89 04 24             	mov    %eax,(%esp)
c01061d8:	e8 0f fd ff ff       	call   c0105eec <page_insert>
c01061dd:	85 c0                	test   %eax,%eax
c01061df:	74 24                	je     c0106205 <check_pgdir+0x111>
c01061e1:	c7 44 24 0c 48 66 11 	movl   $0xc0116648,0xc(%esp)
c01061e8:	c0 
c01061e9:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01061f0:	c0 
c01061f1:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c01061f8:	00 
c01061f9:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106200:	e8 c3 ac ff ff       	call   c0100ec8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106205:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010620a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106211:	00 
c0106212:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106219:	00 
c010621a:	89 04 24             	mov    %eax,(%esp)
c010621d:	e8 7b f6 ff ff       	call   c010589d <get_pte>
c0106222:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106225:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106229:	75 24                	jne    c010624f <check_pgdir+0x15b>
c010622b:	c7 44 24 0c 74 66 11 	movl   $0xc0116674,0xc(%esp)
c0106232:	c0 
c0106233:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010623a:	c0 
c010623b:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106242:	00 
c0106243:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010624a:	e8 79 ac ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c010624f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106252:	8b 00                	mov    (%eax),%eax
c0106254:	89 04 24             	mov    %eax,(%esp)
c0106257:	e8 e6 eb ff ff       	call   c0104e42 <pa2page>
c010625c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010625f:	74 24                	je     c0106285 <check_pgdir+0x191>
c0106261:	c7 44 24 0c a1 66 11 	movl   $0xc01166a1,0xc(%esp)
c0106268:	c0 
c0106269:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106270:	c0 
c0106271:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c0106278:	00 
c0106279:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106280:	e8 43 ac ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 1);
c0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106288:	89 04 24             	mov    %eax,(%esp)
c010628b:	e8 a1 ec ff ff       	call   c0104f31 <page_ref>
c0106290:	83 f8 01             	cmp    $0x1,%eax
c0106293:	74 24                	je     c01062b9 <check_pgdir+0x1c5>
c0106295:	c7 44 24 0c b6 66 11 	movl   $0xc01166b6,0xc(%esp)
c010629c:	c0 
c010629d:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01062a4:	c0 
c01062a5:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01062ac:	00 
c01062ad:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01062b4:	e8 0f ac ff ff       	call   c0100ec8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01062b9:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01062be:	8b 00                	mov    (%eax),%eax
c01062c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01062c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062cb:	c1 e8 0c             	shr    $0xc,%eax
c01062ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01062d1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01062d6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01062d9:	72 23                	jb     c01062fe <check_pgdir+0x20a>
c01062db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062e2:	c7 44 24 08 ec 63 11 	movl   $0xc01163ec,0x8(%esp)
c01062e9:	c0 
c01062ea:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01062f1:	00 
c01062f2:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01062f9:	e8 ca ab ff ff       	call   c0100ec8 <__panic>
c01062fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106301:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106306:	83 c0 04             	add    $0x4,%eax
c0106309:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010630c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106311:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106318:	00 
c0106319:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106320:	00 
c0106321:	89 04 24             	mov    %eax,(%esp)
c0106324:	e8 74 f5 ff ff       	call   c010589d <get_pte>
c0106329:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010632c:	74 24                	je     c0106352 <check_pgdir+0x25e>
c010632e:	c7 44 24 0c c8 66 11 	movl   $0xc01166c8,0xc(%esp)
c0106335:	c0 
c0106336:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010633d:	c0 
c010633e:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106345:	00 
c0106346:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010634d:	e8 76 ab ff ff       	call   c0100ec8 <__panic>

    p2 = alloc_page();
c0106352:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106359:	e8 d8 ed ff ff       	call   c0105136 <alloc_pages>
c010635e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106361:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106366:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010636d:	00 
c010636e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106375:	00 
c0106376:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106379:	89 54 24 04          	mov    %edx,0x4(%esp)
c010637d:	89 04 24             	mov    %eax,(%esp)
c0106380:	e8 67 fb ff ff       	call   c0105eec <page_insert>
c0106385:	85 c0                	test   %eax,%eax
c0106387:	74 24                	je     c01063ad <check_pgdir+0x2b9>
c0106389:	c7 44 24 0c f0 66 11 	movl   $0xc01166f0,0xc(%esp)
c0106390:	c0 
c0106391:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106398:	c0 
c0106399:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c01063a0:	00 
c01063a1:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01063a8:	e8 1b ab ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01063ad:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01063b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063b9:	00 
c01063ba:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01063c1:	00 
c01063c2:	89 04 24             	mov    %eax,(%esp)
c01063c5:	e8 d3 f4 ff ff       	call   c010589d <get_pte>
c01063ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063d1:	75 24                	jne    c01063f7 <check_pgdir+0x303>
c01063d3:	c7 44 24 0c 28 67 11 	movl   $0xc0116728,0xc(%esp)
c01063da:	c0 
c01063db:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01063e2:	c0 
c01063e3:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01063ea:	00 
c01063eb:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01063f2:	e8 d1 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_U);
c01063f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063fa:	8b 00                	mov    (%eax),%eax
c01063fc:	83 e0 04             	and    $0x4,%eax
c01063ff:	85 c0                	test   %eax,%eax
c0106401:	75 24                	jne    c0106427 <check_pgdir+0x333>
c0106403:	c7 44 24 0c 58 67 11 	movl   $0xc0116758,0xc(%esp)
c010640a:	c0 
c010640b:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106412:	c0 
c0106413:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c010641a:	00 
c010641b:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106422:	e8 a1 aa ff ff       	call   c0100ec8 <__panic>
    assert(*ptep & PTE_W);
c0106427:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010642a:	8b 00                	mov    (%eax),%eax
c010642c:	83 e0 02             	and    $0x2,%eax
c010642f:	85 c0                	test   %eax,%eax
c0106431:	75 24                	jne    c0106457 <check_pgdir+0x363>
c0106433:	c7 44 24 0c 66 67 11 	movl   $0xc0116766,0xc(%esp)
c010643a:	c0 
c010643b:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106442:	c0 
c0106443:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010644a:	00 
c010644b:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106452:	e8 71 aa ff ff       	call   c0100ec8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106457:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010645c:	8b 00                	mov    (%eax),%eax
c010645e:	83 e0 04             	and    $0x4,%eax
c0106461:	85 c0                	test   %eax,%eax
c0106463:	75 24                	jne    c0106489 <check_pgdir+0x395>
c0106465:	c7 44 24 0c 74 67 11 	movl   $0xc0116774,0xc(%esp)
c010646c:	c0 
c010646d:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106474:	c0 
c0106475:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010647c:	00 
c010647d:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106484:	e8 3f aa ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 1);
c0106489:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010648c:	89 04 24             	mov    %eax,(%esp)
c010648f:	e8 9d ea ff ff       	call   c0104f31 <page_ref>
c0106494:	83 f8 01             	cmp    $0x1,%eax
c0106497:	74 24                	je     c01064bd <check_pgdir+0x3c9>
c0106499:	c7 44 24 0c 8a 67 11 	movl   $0xc011678a,0xc(%esp)
c01064a0:	c0 
c01064a1:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01064a8:	c0 
c01064a9:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01064b0:	00 
c01064b1:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01064b8:	e8 0b aa ff ff       	call   c0100ec8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01064bd:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01064c2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01064c9:	00 
c01064ca:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01064d1:	00 
c01064d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064d9:	89 04 24             	mov    %eax,(%esp)
c01064dc:	e8 0b fa ff ff       	call   c0105eec <page_insert>
c01064e1:	85 c0                	test   %eax,%eax
c01064e3:	74 24                	je     c0106509 <check_pgdir+0x415>
c01064e5:	c7 44 24 0c 9c 67 11 	movl   $0xc011679c,0xc(%esp)
c01064ec:	c0 
c01064ed:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01064f4:	c0 
c01064f5:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01064fc:	00 
c01064fd:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106504:	e8 bf a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p1) == 2);
c0106509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010650c:	89 04 24             	mov    %eax,(%esp)
c010650f:	e8 1d ea ff ff       	call   c0104f31 <page_ref>
c0106514:	83 f8 02             	cmp    $0x2,%eax
c0106517:	74 24                	je     c010653d <check_pgdir+0x449>
c0106519:	c7 44 24 0c c8 67 11 	movl   $0xc01167c8,0xc(%esp)
c0106520:	c0 
c0106521:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106528:	c0 
c0106529:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c0106530:	00 
c0106531:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106538:	e8 8b a9 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c010653d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106540:	89 04 24             	mov    %eax,(%esp)
c0106543:	e8 e9 e9 ff ff       	call   c0104f31 <page_ref>
c0106548:	85 c0                	test   %eax,%eax
c010654a:	74 24                	je     c0106570 <check_pgdir+0x47c>
c010654c:	c7 44 24 0c da 67 11 	movl   $0xc01167da,0xc(%esp)
c0106553:	c0 
c0106554:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010655b:	c0 
c010655c:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c0106563:	00 
c0106564:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010656b:	e8 58 a9 ff ff       	call   c0100ec8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106570:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106575:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010657c:	00 
c010657d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106584:	00 
c0106585:	89 04 24             	mov    %eax,(%esp)
c0106588:	e8 10 f3 ff ff       	call   c010589d <get_pte>
c010658d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106590:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106594:	75 24                	jne    c01065ba <check_pgdir+0x4c6>
c0106596:	c7 44 24 0c 28 67 11 	movl   $0xc0116728,0xc(%esp)
c010659d:	c0 
c010659e:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01065a5:	c0 
c01065a6:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c01065ad:	00 
c01065ae:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01065b5:	e8 0e a9 ff ff       	call   c0100ec8 <__panic>
    assert(pa2page(*ptep) == p1);
c01065ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065bd:	8b 00                	mov    (%eax),%eax
c01065bf:	89 04 24             	mov    %eax,(%esp)
c01065c2:	e8 7b e8 ff ff       	call   c0104e42 <pa2page>
c01065c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065ca:	74 24                	je     c01065f0 <check_pgdir+0x4fc>
c01065cc:	c7 44 24 0c a1 66 11 	movl   $0xc01166a1,0xc(%esp)
c01065d3:	c0 
c01065d4:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01065db:	c0 
c01065dc:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01065e3:	00 
c01065e4:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01065eb:	e8 d8 a8 ff ff       	call   c0100ec8 <__panic>
    assert((*ptep & PTE_U) == 0);
c01065f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065f3:	8b 00                	mov    (%eax),%eax
c01065f5:	83 e0 04             	and    $0x4,%eax
c01065f8:	85 c0                	test   %eax,%eax
c01065fa:	74 24                	je     c0106620 <check_pgdir+0x52c>
c01065fc:	c7 44 24 0c ec 67 11 	movl   $0xc01167ec,0xc(%esp)
c0106603:	c0 
c0106604:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010660b:	c0 
c010660c:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106613:	00 
c0106614:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010661b:	e8 a8 a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106620:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106625:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010662c:	00 
c010662d:	89 04 24             	mov    %eax,(%esp)
c0106630:	e8 73 f8 ff ff       	call   c0105ea8 <page_remove>
    assert(page_ref(p1) == 1);
c0106635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106638:	89 04 24             	mov    %eax,(%esp)
c010663b:	e8 f1 e8 ff ff       	call   c0104f31 <page_ref>
c0106640:	83 f8 01             	cmp    $0x1,%eax
c0106643:	74 24                	je     c0106669 <check_pgdir+0x575>
c0106645:	c7 44 24 0c b6 66 11 	movl   $0xc01166b6,0xc(%esp)
c010664c:	c0 
c010664d:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106654:	c0 
c0106655:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c010665c:	00 
c010665d:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106664:	e8 5f a8 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c0106669:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010666c:	89 04 24             	mov    %eax,(%esp)
c010666f:	e8 bd e8 ff ff       	call   c0104f31 <page_ref>
c0106674:	85 c0                	test   %eax,%eax
c0106676:	74 24                	je     c010669c <check_pgdir+0x5a8>
c0106678:	c7 44 24 0c da 67 11 	movl   $0xc01167da,0xc(%esp)
c010667f:	c0 
c0106680:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106687:	c0 
c0106688:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c010668f:	00 
c0106690:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106697:	e8 2c a8 ff ff       	call   c0100ec8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010669c:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01066a1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066a8:	00 
c01066a9:	89 04 24             	mov    %eax,(%esp)
c01066ac:	e8 f7 f7 ff ff       	call   c0105ea8 <page_remove>
    assert(page_ref(p1) == 0);
c01066b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066b4:	89 04 24             	mov    %eax,(%esp)
c01066b7:	e8 75 e8 ff ff       	call   c0104f31 <page_ref>
c01066bc:	85 c0                	test   %eax,%eax
c01066be:	74 24                	je     c01066e4 <check_pgdir+0x5f0>
c01066c0:	c7 44 24 0c 01 68 11 	movl   $0xc0116801,0xc(%esp)
c01066c7:	c0 
c01066c8:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01066cf:	c0 
c01066d0:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c01066d7:	00 
c01066d8:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01066df:	e8 e4 a7 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p2) == 0);
c01066e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066e7:	89 04 24             	mov    %eax,(%esp)
c01066ea:	e8 42 e8 ff ff       	call   c0104f31 <page_ref>
c01066ef:	85 c0                	test   %eax,%eax
c01066f1:	74 24                	je     c0106717 <check_pgdir+0x623>
c01066f3:	c7 44 24 0c da 67 11 	movl   $0xc01167da,0xc(%esp)
c01066fa:	c0 
c01066fb:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106702:	c0 
c0106703:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c010670a:	00 
c010670b:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106712:	e8 b1 a7 ff ff       	call   c0100ec8 <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c0106717:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010671c:	8b 00                	mov    (%eax),%eax
c010671e:	89 04 24             	mov    %eax,(%esp)
c0106721:	e8 1c e7 ff ff       	call   c0104e42 <pa2page>
c0106726:	89 04 24             	mov    %eax,(%esp)
c0106729:	e8 03 e8 ff ff       	call   c0104f31 <page_ref>
c010672e:	83 f8 01             	cmp    $0x1,%eax
c0106731:	74 24                	je     c0106757 <check_pgdir+0x663>
c0106733:	c7 44 24 0c 14 68 11 	movl   $0xc0116814,0xc(%esp)
c010673a:	c0 
c010673b:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106742:	c0 
c0106743:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010674a:	00 
c010674b:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106752:	e8 71 a7 ff ff       	call   c0100ec8 <__panic>
    free_page(pa2page(boot_pgdir[0]));
c0106757:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010675c:	8b 00                	mov    (%eax),%eax
c010675e:	89 04 24             	mov    %eax,(%esp)
c0106761:	e8 dc e6 ff ff       	call   c0104e42 <pa2page>
c0106766:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010676d:	00 
c010676e:	89 04 24             	mov    %eax,(%esp)
c0106771:	e8 2b ea ff ff       	call   c01051a1 <free_pages>
    boot_pgdir[0] = 0;
c0106776:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010677b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106781:	c7 04 24 3a 68 11 c0 	movl   $0xc011683a,(%esp)
c0106788:	e8 d8 9b ff ff       	call   c0100365 <cprintf>
}
c010678d:	c9                   	leave  
c010678e:	c3                   	ret    

c010678f <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010678f:	55                   	push   %ebp
c0106790:	89 e5                	mov    %esp,%ebp
c0106792:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010679c:	e9 ca 00 00 00       	jmp    c010686b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01067a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01067a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067aa:	c1 e8 0c             	shr    $0xc,%eax
c01067ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01067b0:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c01067b5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01067b8:	72 23                	jb     c01067dd <check_boot_pgdir+0x4e>
c01067ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067c1:	c7 44 24 08 ec 63 11 	movl   $0xc01163ec,0x8(%esp)
c01067c8:	c0 
c01067c9:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c01067d0:	00 
c01067d1:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01067d8:	e8 eb a6 ff ff       	call   c0100ec8 <__panic>
c01067dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067e0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067e5:	89 c2                	mov    %eax,%edx
c01067e7:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01067ec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01067f3:	00 
c01067f4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067f8:	89 04 24             	mov    %eax,(%esp)
c01067fb:	e8 9d f0 ff ff       	call   c010589d <get_pte>
c0106800:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106803:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106807:	75 24                	jne    c010682d <check_boot_pgdir+0x9e>
c0106809:	c7 44 24 0c 54 68 11 	movl   $0xc0116854,0xc(%esp)
c0106810:	c0 
c0106811:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106818:	c0 
c0106819:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c0106820:	00 
c0106821:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106828:	e8 9b a6 ff ff       	call   c0100ec8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010682d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106830:	8b 00                	mov    (%eax),%eax
c0106832:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106837:	89 c2                	mov    %eax,%edx
c0106839:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010683c:	39 c2                	cmp    %eax,%edx
c010683e:	74 24                	je     c0106864 <check_boot_pgdir+0xd5>
c0106840:	c7 44 24 0c 91 68 11 	movl   $0xc0116891,0xc(%esp)
c0106847:	c0 
c0106848:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010684f:	c0 
c0106850:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c0106857:	00 
c0106858:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010685f:	e8 64 a6 ff ff       	call   c0100ec8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106864:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010686b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010686e:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106873:	39 c2                	cmp    %eax,%edx
c0106875:	0f 82 26 ff ff ff    	jb     c01067a1 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010687b:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106880:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106885:	8b 00                	mov    (%eax),%eax
c0106887:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010688c:	89 c2                	mov    %eax,%edx
c010688e:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106893:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106896:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010689d:	77 23                	ja     c01068c2 <check_boot_pgdir+0x133>
c010689f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068a6:	c7 44 24 08 90 64 11 	movl   $0xc0116490,0x8(%esp)
c01068ad:	c0 
c01068ae:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c01068b5:	00 
c01068b6:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01068bd:	e8 06 a6 ff ff       	call   c0100ec8 <__panic>
c01068c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068c5:	05 00 00 00 40       	add    $0x40000000,%eax
c01068ca:	39 c2                	cmp    %eax,%edx
c01068cc:	74 24                	je     c01068f2 <check_boot_pgdir+0x163>
c01068ce:	c7 44 24 0c a8 68 11 	movl   $0xc01168a8,0xc(%esp)
c01068d5:	c0 
c01068d6:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01068dd:	c0 
c01068de:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c01068e5:	00 
c01068e6:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01068ed:	e8 d6 a5 ff ff       	call   c0100ec8 <__panic>

    assert(boot_pgdir[0] == 0);
c01068f2:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01068f7:	8b 00                	mov    (%eax),%eax
c01068f9:	85 c0                	test   %eax,%eax
c01068fb:	74 24                	je     c0106921 <check_boot_pgdir+0x192>
c01068fd:	c7 44 24 0c dc 68 11 	movl   $0xc01168dc,0xc(%esp)
c0106904:	c0 
c0106905:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010690c:	c0 
c010690d:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106914:	00 
c0106915:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c010691c:	e8 a7 a5 ff ff       	call   c0100ec8 <__panic>

    struct Page *p;
    p = alloc_page();
c0106921:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106928:	e8 09 e8 ff ff       	call   c0105136 <alloc_pages>
c010692d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106930:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106935:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c010693c:	00 
c010693d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106944:	00 
c0106945:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106948:	89 54 24 04          	mov    %edx,0x4(%esp)
c010694c:	89 04 24             	mov    %eax,(%esp)
c010694f:	e8 98 f5 ff ff       	call   c0105eec <page_insert>
c0106954:	85 c0                	test   %eax,%eax
c0106956:	74 24                	je     c010697c <check_boot_pgdir+0x1ed>
c0106958:	c7 44 24 0c f0 68 11 	movl   $0xc01168f0,0xc(%esp)
c010695f:	c0 
c0106960:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106967:	c0 
c0106968:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c010696f:	00 
c0106970:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106977:	e8 4c a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 1);
c010697c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010697f:	89 04 24             	mov    %eax,(%esp)
c0106982:	e8 aa e5 ff ff       	call   c0104f31 <page_ref>
c0106987:	83 f8 01             	cmp    $0x1,%eax
c010698a:	74 24                	je     c01069b0 <check_boot_pgdir+0x221>
c010698c:	c7 44 24 0c 1e 69 11 	movl   $0xc011691e,0xc(%esp)
c0106993:	c0 
c0106994:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c010699b:	c0 
c010699c:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c01069a3:	00 
c01069a4:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01069ab:	e8 18 a5 ff ff       	call   c0100ec8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01069b0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c01069b5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069bc:	00 
c01069bd:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01069c4:	00 
c01069c5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069c8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069cc:	89 04 24             	mov    %eax,(%esp)
c01069cf:	e8 18 f5 ff ff       	call   c0105eec <page_insert>
c01069d4:	85 c0                	test   %eax,%eax
c01069d6:	74 24                	je     c01069fc <check_boot_pgdir+0x26d>
c01069d8:	c7 44 24 0c 30 69 11 	movl   $0xc0116930,0xc(%esp)
c01069df:	c0 
c01069e0:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c01069e7:	c0 
c01069e8:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c01069ef:	00 
c01069f0:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c01069f7:	e8 cc a4 ff ff       	call   c0100ec8 <__panic>
    assert(page_ref(p) == 2);
c01069fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069ff:	89 04 24             	mov    %eax,(%esp)
c0106a02:	e8 2a e5 ff ff       	call   c0104f31 <page_ref>
c0106a07:	83 f8 02             	cmp    $0x2,%eax
c0106a0a:	74 24                	je     c0106a30 <check_boot_pgdir+0x2a1>
c0106a0c:	c7 44 24 0c 67 69 11 	movl   $0xc0116967,0xc(%esp)
c0106a13:	c0 
c0106a14:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106a1b:	c0 
c0106a1c:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0106a23:	00 
c0106a24:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106a2b:	e8 98 a4 ff ff       	call   c0100ec8 <__panic>

    const char *str = "ucore: Hello world!!";
c0106a30:	c7 45 dc 78 69 11 c0 	movl   $0xc0116978,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a3e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a45:	e8 58 e7 00 00       	call   c01151a2 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a4a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a51:	00 
c0106a52:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a59:	e8 bd e7 00 00       	call   c011521b <strcmp>
c0106a5e:	85 c0                	test   %eax,%eax
c0106a60:	74 24                	je     c0106a86 <check_boot_pgdir+0x2f7>
c0106a62:	c7 44 24 0c 90 69 11 	movl   $0xc0116990,0xc(%esp)
c0106a69:	c0 
c0106a6a:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106a71:	c0 
c0106a72:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c0106a79:	00 
c0106a7a:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106a81:	e8 42 a4 ff ff       	call   c0100ec8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a89:	89 04 24             	mov    %eax,(%esp)
c0106a8c:	e8 f6 e3 ff ff       	call   c0104e87 <page2kva>
c0106a91:	05 00 01 00 00       	add    $0x100,%eax
c0106a96:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106a99:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106aa0:	e8 7e e6 00 00       	call   c0115123 <strlen>
c0106aa5:	85 c0                	test   %eax,%eax
c0106aa7:	74 24                	je     c0106acd <check_boot_pgdir+0x33e>
c0106aa9:	c7 44 24 0c c8 69 11 	movl   $0xc01169c8,0xc(%esp)
c0106ab0:	c0 
c0106ab1:	c7 44 24 08 d9 64 11 	movl   $0xc01164d9,0x8(%esp)
c0106ab8:	c0 
c0106ab9:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c0106ac0:	00 
c0106ac1:	c7 04 24 b4 64 11 c0 	movl   $0xc01164b4,(%esp)
c0106ac8:	e8 fb a3 ff ff       	call   c0100ec8 <__panic>

    free_page(p);
c0106acd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106ad4:	00 
c0106ad5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ad8:	89 04 24             	mov    %eax,(%esp)
c0106adb:	e8 c1 e6 ff ff       	call   c01051a1 <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106ae0:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106ae5:	8b 00                	mov    (%eax),%eax
c0106ae7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106aec:	89 04 24             	mov    %eax,(%esp)
c0106aef:	e8 4e e3 ff ff       	call   c0104e42 <pa2page>
c0106af4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106afb:	00 
c0106afc:	89 04 24             	mov    %eax,(%esp)
c0106aff:	e8 9d e6 ff ff       	call   c01051a1 <free_pages>
    boot_pgdir[0] = 0;
c0106b04:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c0106b09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b0f:	c7 04 24 ec 69 11 c0 	movl   $0xc01169ec,(%esp)
c0106b16:	e8 4a 98 ff ff       	call   c0100365 <cprintf>
}
c0106b1b:	c9                   	leave  
c0106b1c:	c3                   	ret    

c0106b1d <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b1d:	55                   	push   %ebp
c0106b1e:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b20:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b23:	83 e0 04             	and    $0x4,%eax
c0106b26:	85 c0                	test   %eax,%eax
c0106b28:	74 07                	je     c0106b31 <perm2str+0x14>
c0106b2a:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b2f:	eb 05                	jmp    c0106b36 <perm2str+0x19>
c0106b31:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b36:	a2 08 ff 14 c0       	mov    %al,0xc014ff08
    str[1] = 'r';
c0106b3b:	c6 05 09 ff 14 c0 72 	movb   $0x72,0xc014ff09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b45:	83 e0 02             	and    $0x2,%eax
c0106b48:	85 c0                	test   %eax,%eax
c0106b4a:	74 07                	je     c0106b53 <perm2str+0x36>
c0106b4c:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b51:	eb 05                	jmp    c0106b58 <perm2str+0x3b>
c0106b53:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b58:	a2 0a ff 14 c0       	mov    %al,0xc014ff0a
    str[3] = '\0';
c0106b5d:	c6 05 0b ff 14 c0 00 	movb   $0x0,0xc014ff0b
    return str;
c0106b64:	b8 08 ff 14 c0       	mov    $0xc014ff08,%eax
}
c0106b69:	5d                   	pop    %ebp
c0106b6a:	c3                   	ret    

c0106b6b <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b6b:	55                   	push   %ebp
c0106b6c:	89 e5                	mov    %esp,%ebp
c0106b6e:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b71:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b74:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b77:	72 0a                	jb     c0106b83 <get_pgtable_items+0x18>
        return 0;
c0106b79:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b7e:	e9 9c 00 00 00       	jmp    c0106c1f <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b83:	eb 04                	jmp    c0106b89 <get_pgtable_items+0x1e>
        start ++;
c0106b85:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b89:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b8c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b8f:	73 18                	jae    c0106ba9 <get_pgtable_items+0x3e>
c0106b91:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b9b:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b9e:	01 d0                	add    %edx,%eax
c0106ba0:	8b 00                	mov    (%eax),%eax
c0106ba2:	83 e0 01             	and    $0x1,%eax
c0106ba5:	85 c0                	test   %eax,%eax
c0106ba7:	74 dc                	je     c0106b85 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106ba9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bac:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106baf:	73 69                	jae    c0106c1a <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106bb1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106bb5:	74 08                	je     c0106bbf <get_pgtable_items+0x54>
            *left_store = start;
c0106bb7:	8b 45 18             	mov    0x18(%ebp),%eax
c0106bba:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bbd:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106bbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bc2:	8d 50 01             	lea    0x1(%eax),%edx
c0106bc5:	89 55 10             	mov    %edx,0x10(%ebp)
c0106bc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bcf:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bd2:	01 d0                	add    %edx,%eax
c0106bd4:	8b 00                	mov    (%eax),%eax
c0106bd6:	83 e0 07             	and    $0x7,%eax
c0106bd9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106bdc:	eb 04                	jmp    c0106be2 <get_pgtable_items+0x77>
            start ++;
c0106bde:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106be2:	8b 45 10             	mov    0x10(%ebp),%eax
c0106be5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106be8:	73 1d                	jae    c0106c07 <get_pgtable_items+0x9c>
c0106bea:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106bf4:	8b 45 14             	mov    0x14(%ebp),%eax
c0106bf7:	01 d0                	add    %edx,%eax
c0106bf9:	8b 00                	mov    (%eax),%eax
c0106bfb:	83 e0 07             	and    $0x7,%eax
c0106bfe:	89 c2                	mov    %eax,%edx
c0106c00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c03:	39 c2                	cmp    %eax,%edx
c0106c05:	74 d7                	je     c0106bde <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106c07:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c0b:	74 08                	je     c0106c15 <get_pgtable_items+0xaa>
            *right_store = start;
c0106c0d:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c10:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c13:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c15:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c18:	eb 05                	jmp    c0106c1f <get_pgtable_items+0xb4>
    }
    return 0;
c0106c1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c1f:	c9                   	leave  
c0106c20:	c3                   	ret    

c0106c21 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c21:	55                   	push   %ebp
c0106c22:	89 e5                	mov    %esp,%ebp
c0106c24:	57                   	push   %edi
c0106c25:	56                   	push   %esi
c0106c26:	53                   	push   %ebx
c0106c27:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c2a:	c7 04 24 0c 6a 11 c0 	movl   $0xc0116a0c,(%esp)
c0106c31:	e8 2f 97 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
c0106c36:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c3d:	e9 fa 00 00 00       	jmp    c0106d3c <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c45:	89 04 24             	mov    %eax,(%esp)
c0106c48:	e8 d0 fe ff ff       	call   c0106b1d <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c4d:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c50:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c53:	29 d1                	sub    %edx,%ecx
c0106c55:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c57:	89 d6                	mov    %edx,%esi
c0106c59:	c1 e6 16             	shl    $0x16,%esi
c0106c5c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c5f:	89 d3                	mov    %edx,%ebx
c0106c61:	c1 e3 16             	shl    $0x16,%ebx
c0106c64:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c67:	89 d1                	mov    %edx,%ecx
c0106c69:	c1 e1 16             	shl    $0x16,%ecx
c0106c6c:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c6f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c72:	29 d7                	sub    %edx,%edi
c0106c74:	89 fa                	mov    %edi,%edx
c0106c76:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c7a:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c7e:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c82:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c8a:	c7 04 24 3d 6a 11 c0 	movl   $0xc0116a3d,(%esp)
c0106c91:	e8 cf 96 ff ff       	call   c0100365 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c99:	c1 e0 0a             	shl    $0xa,%eax
c0106c9c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c9f:	eb 54                	jmp    c0106cf5 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106ca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ca4:	89 04 24             	mov    %eax,(%esp)
c0106ca7:	e8 71 fe ff ff       	call   c0106b1d <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106cac:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106caf:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cb2:	29 d1                	sub    %edx,%ecx
c0106cb4:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cb6:	89 d6                	mov    %edx,%esi
c0106cb8:	c1 e6 0c             	shl    $0xc,%esi
c0106cbb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106cbe:	89 d3                	mov    %edx,%ebx
c0106cc0:	c1 e3 0c             	shl    $0xc,%ebx
c0106cc3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cc6:	c1 e2 0c             	shl    $0xc,%edx
c0106cc9:	89 d1                	mov    %edx,%ecx
c0106ccb:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106cce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cd1:	29 d7                	sub    %edx,%edi
c0106cd3:	89 fa                	mov    %edi,%edx
c0106cd5:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cd9:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106cdd:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106ce1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106ce5:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ce9:	c7 04 24 5c 6a 11 c0 	movl   $0xc0116a5c,(%esp)
c0106cf0:	e8 70 96 ff ff       	call   c0100365 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cf5:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106cfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106cfd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d00:	89 ce                	mov    %ecx,%esi
c0106d02:	c1 e6 0a             	shl    $0xa,%esi
c0106d05:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d08:	89 cb                	mov    %ecx,%ebx
c0106d0a:	c1 e3 0a             	shl    $0xa,%ebx
c0106d0d:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d10:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d14:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d17:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d1b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d1f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d23:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d27:	89 1c 24             	mov    %ebx,(%esp)
c0106d2a:	e8 3c fe ff ff       	call   c0106b6b <get_pgtable_items>
c0106d2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d32:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d36:	0f 85 65 ff ff ff    	jne    c0106ca1 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d3c:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d44:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d47:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d4b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d4e:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d52:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d56:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d5a:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d61:	00 
c0106d62:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d69:	e8 fd fd ff ff       	call   c0106b6b <get_pgtable_items>
c0106d6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d71:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d75:	0f 85 c7 fe ff ff    	jne    c0106c42 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d7b:	c7 04 24 80 6a 11 c0 	movl   $0xc0116a80,(%esp)
c0106d82:	e8 de 95 ff ff       	call   c0100365 <cprintf>
}
c0106d87:	83 c4 4c             	add    $0x4c,%esp
c0106d8a:	5b                   	pop    %ebx
c0106d8b:	5e                   	pop    %esi
c0106d8c:	5f                   	pop    %edi
c0106d8d:	5d                   	pop    %ebp
c0106d8e:	c3                   	ret    

c0106d8f <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d8f:	55                   	push   %ebp
c0106d90:	89 e5                	mov    %esp,%ebp
c0106d92:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106d95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d98:	c1 e8 0c             	shr    $0xc,%eax
c0106d9b:	89 c2                	mov    %eax,%edx
c0106d9d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0106da2:	39 c2                	cmp    %eax,%edx
c0106da4:	72 1c                	jb     c0106dc2 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106da6:	c7 44 24 08 b4 6a 11 	movl   $0xc0116ab4,0x8(%esp)
c0106dad:	c0 
c0106dae:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106db5:	00 
c0106db6:	c7 04 24 d3 6a 11 c0 	movl   $0xc0116ad3,(%esp)
c0106dbd:	e8 06 a1 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0106dc2:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0106dc7:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dca:	c1 ea 0c             	shr    $0xc,%edx
c0106dcd:	c1 e2 05             	shl    $0x5,%edx
c0106dd0:	01 d0                	add    %edx,%eax
}
c0106dd2:	c9                   	leave  
c0106dd3:	c3                   	ret    

c0106dd4 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106dd4:	55                   	push   %ebp
c0106dd5:	89 e5                	mov    %esp,%ebp
c0106dd7:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106dda:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ddd:	83 e0 01             	and    $0x1,%eax
c0106de0:	85 c0                	test   %eax,%eax
c0106de2:	75 1c                	jne    c0106e00 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106de4:	c7 44 24 08 e4 6a 11 	movl   $0xc0116ae4,0x8(%esp)
c0106deb:	c0 
c0106dec:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106df3:	00 
c0106df4:	c7 04 24 d3 6a 11 c0 	movl   $0xc0116ad3,(%esp)
c0106dfb:	e8 c8 a0 ff ff       	call   c0100ec8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e00:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e08:	89 04 24             	mov    %eax,(%esp)
c0106e0b:	e8 7f ff ff ff       	call   c0106d8f <pa2page>
}
c0106e10:	c9                   	leave  
c0106e11:	c3                   	ret    

c0106e12 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e12:	55                   	push   %ebp
c0106e13:	89 e5                	mov    %esp,%ebp
c0106e15:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e18:	e8 cb 7f 00 00       	call   c010ede8 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e1d:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e22:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e27:	76 0c                	jbe    c0106e35 <swap_init+0x23>
c0106e29:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e2e:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e33:	76 25                	jbe    c0106e5a <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e35:	a1 dc 30 15 c0       	mov    0xc01530dc,%eax
c0106e3a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e3e:	c7 44 24 08 05 6b 11 	movl   $0xc0116b05,0x8(%esp)
c0106e45:	c0 
c0106e46:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e4d:	00 
c0106e4e:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0106e55:	e8 6e a0 ff ff       	call   c0100ec8 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e5a:	c7 05 14 ff 14 c0 60 	movl   $0xc014ea60,0xc014ff14
c0106e61:	ea 14 c0 
     int r = sm->init();
c0106e64:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e69:	8b 40 04             	mov    0x4(%eax),%eax
c0106e6c:	ff d0                	call   *%eax
c0106e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e75:	75 26                	jne    c0106e9d <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e77:	c7 05 0c ff 14 c0 01 	movl   $0x1,0xc014ff0c
c0106e7e:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106e81:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106e86:	8b 00                	mov    (%eax),%eax
c0106e88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106e8c:	c7 04 24 2f 6b 11 c0 	movl   $0xc0116b2f,(%esp)
c0106e93:	e8 cd 94 ff ff       	call   c0100365 <cprintf>
          check_swap();
c0106e98:	e8 a4 04 00 00       	call   c0107341 <check_swap>
     }

     return r;
c0106e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ea0:	c9                   	leave  
c0106ea1:	c3                   	ret    

c0106ea2 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106ea2:	55                   	push   %ebp
c0106ea3:	89 e5                	mov    %esp,%ebp
c0106ea5:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106ea8:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ead:	8b 40 08             	mov    0x8(%eax),%eax
c0106eb0:	8b 55 08             	mov    0x8(%ebp),%edx
c0106eb3:	89 14 24             	mov    %edx,(%esp)
c0106eb6:	ff d0                	call   *%eax
}
c0106eb8:	c9                   	leave  
c0106eb9:	c3                   	ret    

c0106eba <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106eba:	55                   	push   %ebp
c0106ebb:	89 e5                	mov    %esp,%ebp
c0106ebd:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106ec0:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ec5:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ec8:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ecb:	89 14 24             	mov    %edx,(%esp)
c0106ece:	ff d0                	call   *%eax
}
c0106ed0:	c9                   	leave  
c0106ed1:	c3                   	ret    

c0106ed2 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106ed2:	55                   	push   %ebp
c0106ed3:	89 e5                	mov    %esp,%ebp
c0106ed5:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106ed8:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106edd:	8b 40 10             	mov    0x10(%eax),%eax
c0106ee0:	8b 55 14             	mov    0x14(%ebp),%edx
c0106ee3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106ee7:	8b 55 10             	mov    0x10(%ebp),%edx
c0106eea:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106eee:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106ef1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ef5:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ef8:	89 14 24             	mov    %edx,(%esp)
c0106efb:	ff d0                	call   *%eax
}
c0106efd:	c9                   	leave  
c0106efe:	c3                   	ret    

c0106eff <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106eff:	55                   	push   %ebp
c0106f00:	89 e5                	mov    %esp,%ebp
c0106f02:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f05:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f0a:	8b 40 14             	mov    0x14(%eax),%eax
c0106f0d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106f10:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f14:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f17:	89 14 24             	mov    %edx,(%esp)
c0106f1a:	ff d0                	call   *%eax
}
c0106f1c:	c9                   	leave  
c0106f1d:	c3                   	ret    

c0106f1e <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f1e:	55                   	push   %ebp
c0106f1f:	89 e5                	mov    %esp,%ebp
c0106f21:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f2b:	e9 5a 01 00 00       	jmp    c010708a <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f30:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106f35:	8b 40 18             	mov    0x18(%eax),%eax
c0106f38:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f3b:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f3f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106f42:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f46:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f49:	89 14 24             	mov    %edx,(%esp)
c0106f4c:	ff d0                	call   *%eax
c0106f4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f55:	74 18                	je     c0106f6f <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f5a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f5e:	c7 04 24 44 6b 11 c0 	movl   $0xc0116b44,(%esp)
c0106f65:	e8 fb 93 ff ff       	call   c0100365 <cprintf>
c0106f6a:	e9 27 01 00 00       	jmp    c0107096 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f72:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f75:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f78:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f7b:	8b 40 0c             	mov    0xc(%eax),%eax
c0106f7e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106f85:	00 
c0106f86:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f89:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f8d:	89 04 24             	mov    %eax,(%esp)
c0106f90:	e8 08 e9 ff ff       	call   c010589d <get_pte>
c0106f95:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106f98:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106f9b:	8b 00                	mov    (%eax),%eax
c0106f9d:	83 e0 01             	and    $0x1,%eax
c0106fa0:	85 c0                	test   %eax,%eax
c0106fa2:	75 24                	jne    c0106fc8 <swap_out+0xaa>
c0106fa4:	c7 44 24 0c 71 6b 11 	movl   $0xc0116b71,0xc(%esp)
c0106fab:	c0 
c0106fac:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0106fb3:	c0 
c0106fb4:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106fbb:	00 
c0106fbc:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0106fc3:	e8 00 9f ff ff       	call   c0100ec8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106fc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fcb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106fce:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106fd1:	c1 ea 0c             	shr    $0xc,%edx
c0106fd4:	83 c2 01             	add    $0x1,%edx
c0106fd7:	c1 e2 08             	shl    $0x8,%edx
c0106fda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106fde:	89 14 24             	mov    %edx,(%esp)
c0106fe1:	e8 bc 7e 00 00       	call   c010eea2 <swapfs_write>
c0106fe6:	85 c0                	test   %eax,%eax
c0106fe8:	74 34                	je     c010701e <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106fea:	c7 04 24 9b 6b 11 c0 	movl   $0xc0116b9b,(%esp)
c0106ff1:	e8 6f 93 ff ff       	call   c0100365 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106ff6:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0106ffb:	8b 40 10             	mov    0x10(%eax),%eax
c0106ffe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107001:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107008:	00 
c0107009:	89 54 24 08          	mov    %edx,0x8(%esp)
c010700d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107010:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107014:	8b 55 08             	mov    0x8(%ebp),%edx
c0107017:	89 14 24             	mov    %edx,(%esp)
c010701a:	ff d0                	call   *%eax
c010701c:	eb 68                	jmp    c0107086 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010701e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107021:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107024:	c1 e8 0c             	shr    $0xc,%eax
c0107027:	83 c0 01             	add    $0x1,%eax
c010702a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010702e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107031:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107035:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107038:	89 44 24 04          	mov    %eax,0x4(%esp)
c010703c:	c7 04 24 b4 6b 11 c0 	movl   $0xc0116bb4,(%esp)
c0107043:	e8 1d 93 ff ff       	call   c0100365 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107048:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010704b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010704e:	c1 e8 0c             	shr    $0xc,%eax
c0107051:	83 c0 01             	add    $0x1,%eax
c0107054:	c1 e0 08             	shl    $0x8,%eax
c0107057:	89 c2                	mov    %eax,%edx
c0107059:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010705c:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010705e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107061:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107068:	00 
c0107069:	89 04 24             	mov    %eax,(%esp)
c010706c:	e8 30 e1 ff ff       	call   c01051a1 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107071:	8b 45 08             	mov    0x8(%ebp),%eax
c0107074:	8b 40 0c             	mov    0xc(%eax),%eax
c0107077:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010707a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010707e:	89 04 24             	mov    %eax,(%esp)
c0107081:	e8 1f ef ff ff       	call   c0105fa5 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107086:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010708a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010708d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107090:	0f 85 9a fe ff ff    	jne    c0106f30 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0107096:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107099:	c9                   	leave  
c010709a:	c3                   	ret    

c010709b <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010709b:	55                   	push   %ebp
c010709c:	89 e5                	mov    %esp,%ebp
c010709e:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01070a1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01070a8:	e8 89 e0 ff ff       	call   c0105136 <alloc_pages>
c01070ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01070b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070b4:	75 24                	jne    c01070da <swap_in+0x3f>
c01070b6:	c7 44 24 0c f4 6b 11 	movl   $0xc0116bf4,0xc(%esp)
c01070bd:	c0 
c01070be:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01070c5:	c0 
c01070c6:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01070cd:	00 
c01070ce:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01070d5:	e8 ee 9d ff ff       	call   c0100ec8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01070da:	8b 45 08             	mov    0x8(%ebp),%eax
c01070dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01070e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01070e7:	00 
c01070e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01070eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070ef:	89 04 24             	mov    %eax,(%esp)
c01070f2:	e8 a6 e7 ff ff       	call   c010589d <get_pte>
c01070f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01070fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01070fd:	8b 00                	mov    (%eax),%eax
c01070ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107102:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107106:	89 04 24             	mov    %eax,(%esp)
c0107109:	e8 22 7d 00 00       	call   c010ee30 <swapfs_read>
c010710e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107111:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107115:	74 2a                	je     c0107141 <swap_in+0xa6>
     {
        assert(r!=0);
c0107117:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010711b:	75 24                	jne    c0107141 <swap_in+0xa6>
c010711d:	c7 44 24 0c 01 6c 11 	movl   $0xc0116c01,0xc(%esp)
c0107124:	c0 
c0107125:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010712c:	c0 
c010712d:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107134:	00 
c0107135:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010713c:	e8 87 9d ff ff       	call   c0100ec8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107141:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107144:	8b 00                	mov    (%eax),%eax
c0107146:	c1 e8 08             	shr    $0x8,%eax
c0107149:	89 c2                	mov    %eax,%edx
c010714b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010714e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107152:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107156:	c7 04 24 08 6c 11 c0 	movl   $0xc0116c08,(%esp)
c010715d:	e8 03 92 ff ff       	call   c0100365 <cprintf>
     *ptr_result=result;
c0107162:	8b 45 10             	mov    0x10(%ebp),%eax
c0107165:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107168:	89 10                	mov    %edx,(%eax)
     return 0;
c010716a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010716f:	c9                   	leave  
c0107170:	c3                   	ret    

c0107171 <check_content_set>:



static inline void
check_content_set(void)
{
c0107171:	55                   	push   %ebp
c0107172:	89 e5                	mov    %esp,%ebp
c0107174:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0107177:	b8 00 10 00 00       	mov    $0x1000,%eax
c010717c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010717f:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107184:	83 f8 01             	cmp    $0x1,%eax
c0107187:	74 24                	je     c01071ad <check_content_set+0x3c>
c0107189:	c7 44 24 0c 46 6c 11 	movl   $0xc0116c46,0xc(%esp)
c0107190:	c0 
c0107191:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107198:	c0 
c0107199:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01071a0:	00 
c01071a1:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01071a8:	e8 1b 9d ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01071ad:	b8 10 10 00 00       	mov    $0x1010,%eax
c01071b2:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071b5:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071ba:	83 f8 01             	cmp    $0x1,%eax
c01071bd:	74 24                	je     c01071e3 <check_content_set+0x72>
c01071bf:	c7 44 24 0c 46 6c 11 	movl   $0xc0116c46,0xc(%esp)
c01071c6:	c0 
c01071c7:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01071ce:	c0 
c01071cf:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01071d6:	00 
c01071d7:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01071de:	e8 e5 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01071e3:	b8 00 20 00 00       	mov    $0x2000,%eax
c01071e8:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01071eb:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01071f0:	83 f8 02             	cmp    $0x2,%eax
c01071f3:	74 24                	je     c0107219 <check_content_set+0xa8>
c01071f5:	c7 44 24 0c 55 6c 11 	movl   $0xc0116c55,0xc(%esp)
c01071fc:	c0 
c01071fd:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107204:	c0 
c0107205:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010720c:	00 
c010720d:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107214:	e8 af 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107219:	b8 10 20 00 00       	mov    $0x2010,%eax
c010721e:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107221:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107226:	83 f8 02             	cmp    $0x2,%eax
c0107229:	74 24                	je     c010724f <check_content_set+0xde>
c010722b:	c7 44 24 0c 55 6c 11 	movl   $0xc0116c55,0xc(%esp)
c0107232:	c0 
c0107233:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010723a:	c0 
c010723b:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107242:	00 
c0107243:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010724a:	e8 79 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010724f:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107254:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107257:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c010725c:	83 f8 03             	cmp    $0x3,%eax
c010725f:	74 24                	je     c0107285 <check_content_set+0x114>
c0107261:	c7 44 24 0c 64 6c 11 	movl   $0xc0116c64,0xc(%esp)
c0107268:	c0 
c0107269:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107270:	c0 
c0107271:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c0107278:	00 
c0107279:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107280:	e8 43 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107285:	b8 10 30 00 00       	mov    $0x3010,%eax
c010728a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010728d:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107292:	83 f8 03             	cmp    $0x3,%eax
c0107295:	74 24                	je     c01072bb <check_content_set+0x14a>
c0107297:	c7 44 24 0c 64 6c 11 	movl   $0xc0116c64,0xc(%esp)
c010729e:	c0 
c010729f:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01072a6:	c0 
c01072a7:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01072ae:	00 
c01072af:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01072b6:	e8 0d 9c ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01072bb:	b8 00 40 00 00       	mov    $0x4000,%eax
c01072c0:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072c3:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072c8:	83 f8 04             	cmp    $0x4,%eax
c01072cb:	74 24                	je     c01072f1 <check_content_set+0x180>
c01072cd:	c7 44 24 0c 73 6c 11 	movl   $0xc0116c73,0xc(%esp)
c01072d4:	c0 
c01072d5:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01072dc:	c0 
c01072dd:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01072e4:	00 
c01072e5:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01072ec:	e8 d7 9b ff ff       	call   c0100ec8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01072f1:	b8 10 40 00 00       	mov    $0x4010,%eax
c01072f6:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072f9:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c01072fe:	83 f8 04             	cmp    $0x4,%eax
c0107301:	74 24                	je     c0107327 <check_content_set+0x1b6>
c0107303:	c7 44 24 0c 73 6c 11 	movl   $0xc0116c73,0xc(%esp)
c010730a:	c0 
c010730b:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107312:	c0 
c0107313:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010731a:	00 
c010731b:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107322:	e8 a1 9b ff ff       	call   c0100ec8 <__panic>
}
c0107327:	c9                   	leave  
c0107328:	c3                   	ret    

c0107329 <check_content_access>:

static inline int
check_content_access(void)
{
c0107329:	55                   	push   %ebp
c010732a:	89 e5                	mov    %esp,%ebp
c010732c:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010732f:	a1 14 ff 14 c0       	mov    0xc014ff14,%eax
c0107334:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107337:	ff d0                	call   *%eax
c0107339:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010733c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010733f:	c9                   	leave  
c0107340:	c3                   	ret    

c0107341 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107341:	55                   	push   %ebp
c0107342:	89 e5                	mov    %esp,%ebp
c0107344:	53                   	push   %ebx
c0107345:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107348:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010734f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107356:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010735d:	eb 6b                	jmp    c01073ca <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010735f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107362:	83 e8 0c             	sub    $0xc,%eax
c0107365:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107368:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010736b:	83 c0 04             	add    $0x4,%eax
c010736e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107375:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107378:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010737b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010737e:	0f a3 10             	bt     %edx,(%eax)
c0107381:	19 c0                	sbb    %eax,%eax
c0107383:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107386:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010738a:	0f 95 c0             	setne  %al
c010738d:	0f b6 c0             	movzbl %al,%eax
c0107390:	85 c0                	test   %eax,%eax
c0107392:	75 24                	jne    c01073b8 <check_swap+0x77>
c0107394:	c7 44 24 0c 82 6c 11 	movl   $0xc0116c82,0xc(%esp)
c010739b:	c0 
c010739c:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01073a3:	c0 
c01073a4:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01073ab:	00 
c01073ac:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01073b3:	e8 10 9b ff ff       	call   c0100ec8 <__panic>
        count ++, total += p->property;
c01073b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01073bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073bf:	8b 50 08             	mov    0x8(%eax),%edx
c01073c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073c5:	01 d0                	add    %edx,%eax
c01073c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01073d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01073d3:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01073d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01073d9:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01073e0:	0f 85 79 ff ff ff    	jne    c010735f <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01073e6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01073e9:	e8 e5 dd ff ff       	call   c01051d3 <nr_free_pages>
c01073ee:	39 c3                	cmp    %eax,%ebx
c01073f0:	74 24                	je     c0107416 <check_swap+0xd5>
c01073f2:	c7 44 24 0c 92 6c 11 	movl   $0xc0116c92,0xc(%esp)
c01073f9:	c0 
c01073fa:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107401:	c0 
c0107402:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107409:	00 
c010740a:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107411:	e8 b2 9a ff ff       	call   c0100ec8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107419:	89 44 24 08          	mov    %eax,0x8(%esp)
c010741d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107420:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107424:	c7 04 24 ac 6c 11 c0 	movl   $0xc0116cac,(%esp)
c010742b:	e8 35 8f ff ff       	call   c0100365 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107430:	e8 9a 0a 00 00       	call   c0107ecf <mm_create>
c0107435:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107438:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010743c:	75 24                	jne    c0107462 <check_swap+0x121>
c010743e:	c7 44 24 0c d2 6c 11 	movl   $0xc0116cd2,0xc(%esp)
c0107445:	c0 
c0107446:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010744d:	c0 
c010744e:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107455:	00 
c0107456:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010745d:	e8 66 9a ff ff       	call   c0100ec8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107462:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0107467:	85 c0                	test   %eax,%eax
c0107469:	74 24                	je     c010748f <check_swap+0x14e>
c010746b:	c7 44 24 0c dd 6c 11 	movl   $0xc0116cdd,0xc(%esp)
c0107472:	c0 
c0107473:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010747a:	c0 
c010747b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107482:	00 
c0107483:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010748a:	e8 39 9a ff ff       	call   c0100ec8 <__panic>

     check_mm_struct = mm;
c010748f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107492:	a3 0c 31 15 c0       	mov    %eax,0xc015310c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107497:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c010749d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074a0:	89 50 0c             	mov    %edx,0xc(%eax)
c01074a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074a6:	8b 40 0c             	mov    0xc(%eax),%eax
c01074a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01074ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074af:	8b 00                	mov    (%eax),%eax
c01074b1:	85 c0                	test   %eax,%eax
c01074b3:	74 24                	je     c01074d9 <check_swap+0x198>
c01074b5:	c7 44 24 0c f5 6c 11 	movl   $0xc0116cf5,0xc(%esp)
c01074bc:	c0 
c01074bd:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01074c4:	c0 
c01074c5:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01074cc:	00 
c01074cd:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01074d4:	e8 ef 99 ff ff       	call   c0100ec8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01074d9:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01074e0:	00 
c01074e1:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01074e8:	00 
c01074e9:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c01074f0:	e8 7f 0a 00 00       	call   c0107f74 <vma_create>
c01074f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c01074f8:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01074fc:	75 24                	jne    c0107522 <check_swap+0x1e1>
c01074fe:	c7 44 24 0c 03 6d 11 	movl   $0xc0116d03,0xc(%esp)
c0107505:	c0 
c0107506:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010750d:	c0 
c010750e:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107515:	00 
c0107516:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010751d:	e8 a6 99 ff ff       	call   c0100ec8 <__panic>

     insert_vma_struct(mm, vma);
c0107522:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107525:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107529:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010752c:	89 04 24             	mov    %eax,(%esp)
c010752f:	e8 d0 0b 00 00       	call   c0108104 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107534:	c7 04 24 10 6d 11 c0 	movl   $0xc0116d10,(%esp)
c010753b:	e8 25 8e ff ff       	call   c0100365 <cprintf>
     pte_t *temp_ptep=NULL;
c0107540:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107547:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010754a:	8b 40 0c             	mov    0xc(%eax),%eax
c010754d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107554:	00 
c0107555:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010755c:	00 
c010755d:	89 04 24             	mov    %eax,(%esp)
c0107560:	e8 38 e3 ff ff       	call   c010589d <get_pte>
c0107565:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107568:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010756c:	75 24                	jne    c0107592 <check_swap+0x251>
c010756e:	c7 44 24 0c 44 6d 11 	movl   $0xc0116d44,0xc(%esp)
c0107575:	c0 
c0107576:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010757d:	c0 
c010757e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107585:	00 
c0107586:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010758d:	e8 36 99 ff ff       	call   c0100ec8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0107592:	c7 04 24 58 6d 11 c0 	movl   $0xc0116d58,(%esp)
c0107599:	e8 c7 8d ff ff       	call   c0100365 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010759e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075a5:	e9 a3 00 00 00       	jmp    c010764d <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01075aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075b1:	e8 80 db ff ff       	call   c0105136 <alloc_pages>
c01075b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075b9:	89 04 95 40 30 15 c0 	mov    %eax,-0x3feacfc0(,%edx,4)
          assert(check_rp[i] != NULL );
c01075c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075c3:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01075ca:	85 c0                	test   %eax,%eax
c01075cc:	75 24                	jne    c01075f2 <check_swap+0x2b1>
c01075ce:	c7 44 24 0c 7c 6d 11 	movl   $0xc0116d7c,0xc(%esp)
c01075d5:	c0 
c01075d6:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01075dd:	c0 
c01075de:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01075e5:	00 
c01075e6:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01075ed:	e8 d6 98 ff ff       	call   c0100ec8 <__panic>
          assert(!PageProperty(check_rp[i]));
c01075f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075f5:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01075fc:	83 c0 04             	add    $0x4,%eax
c01075ff:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107606:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107609:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010760c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010760f:	0f a3 10             	bt     %edx,(%eax)
c0107612:	19 c0                	sbb    %eax,%eax
c0107614:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c0107617:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010761b:	0f 95 c0             	setne  %al
c010761e:	0f b6 c0             	movzbl %al,%eax
c0107621:	85 c0                	test   %eax,%eax
c0107623:	74 24                	je     c0107649 <check_swap+0x308>
c0107625:	c7 44 24 0c 90 6d 11 	movl   $0xc0116d90,0xc(%esp)
c010762c:	c0 
c010762d:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107634:	c0 
c0107635:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010763c:	00 
c010763d:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107644:	e8 7f 98 ff ff       	call   c0100ec8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107649:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010764d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107651:	0f 8e 53 ff ff ff    	jle    c01075aa <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107657:	a1 14 30 15 c0       	mov    0xc0153014,%eax
c010765c:	8b 15 18 30 15 c0    	mov    0xc0153018,%edx
c0107662:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107665:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107668:	c7 45 a8 14 30 15 c0 	movl   $0xc0153014,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010766f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107672:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107675:	89 50 04             	mov    %edx,0x4(%eax)
c0107678:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010767b:	8b 50 04             	mov    0x4(%eax),%edx
c010767e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107681:	89 10                	mov    %edx,(%eax)
c0107683:	c7 45 a4 14 30 15 c0 	movl   $0xc0153014,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010768a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010768d:	8b 40 04             	mov    0x4(%eax),%eax
c0107690:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c0107693:	0f 94 c0             	sete   %al
c0107696:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107699:	85 c0                	test   %eax,%eax
c010769b:	75 24                	jne    c01076c1 <check_swap+0x380>
c010769d:	c7 44 24 0c ab 6d 11 	movl   $0xc0116dab,0xc(%esp)
c01076a4:	c0 
c01076a5:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01076ac:	c0 
c01076ad:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01076b4:	00 
c01076b5:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01076bc:	e8 07 98 ff ff       	call   c0100ec8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01076c1:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c01076c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01076c9:	c7 05 1c 30 15 c0 00 	movl   $0x0,0xc015301c
c01076d0:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076d3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076da:	eb 1e                	jmp    c01076fa <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01076dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076df:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01076e6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01076ed:	00 
c01076ee:	89 04 24             	mov    %eax,(%esp)
c01076f1:	e8 ab da ff ff       	call   c01051a1 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076f6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076fa:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01076fe:	7e dc                	jle    c01076dc <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107700:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c0107705:	83 f8 04             	cmp    $0x4,%eax
c0107708:	74 24                	je     c010772e <check_swap+0x3ed>
c010770a:	c7 44 24 0c c4 6d 11 	movl   $0xc0116dc4,0xc(%esp)
c0107711:	c0 
c0107712:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107719:	c0 
c010771a:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107721:	00 
c0107722:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107729:	e8 9a 97 ff ff       	call   c0100ec8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010772e:	c7 04 24 e8 6d 11 c0 	movl   $0xc0116de8,(%esp)
c0107735:	e8 2b 8c ff ff       	call   c0100365 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010773a:	c7 05 18 ff 14 c0 00 	movl   $0x0,0xc014ff18
c0107741:	00 00 00 
     
     check_content_set();
c0107744:	e8 28 fa ff ff       	call   c0107171 <check_content_set>
     assert( nr_free == 0);         
c0107749:	a1 1c 30 15 c0       	mov    0xc015301c,%eax
c010774e:	85 c0                	test   %eax,%eax
c0107750:	74 24                	je     c0107776 <check_swap+0x435>
c0107752:	c7 44 24 0c 0f 6e 11 	movl   $0xc0116e0f,0xc(%esp)
c0107759:	c0 
c010775a:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107761:	c0 
c0107762:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107769:	00 
c010776a:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107771:	e8 52 97 ff ff       	call   c0100ec8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107776:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010777d:	eb 26                	jmp    c01077a5 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010777f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107782:	c7 04 85 60 30 15 c0 	movl   $0xffffffff,-0x3feacfa0(,%eax,4)
c0107789:	ff ff ff ff 
c010778d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107790:	8b 14 85 60 30 15 c0 	mov    -0x3feacfa0(,%eax,4),%edx
c0107797:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010779a:	89 14 85 a0 30 15 c0 	mov    %edx,-0x3feacf60(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077a1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077a5:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01077a9:	7e d4                	jle    c010777f <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077b2:	e9 eb 00 00 00       	jmp    c01078a2 <check_swap+0x561>
         check_ptep[i]=0;
c01077b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077ba:	c7 04 85 f4 30 15 c0 	movl   $0x0,-0x3feacf0c(,%eax,4)
c01077c1:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01077c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077c8:	83 c0 01             	add    $0x1,%eax
c01077cb:	c1 e0 0c             	shl    $0xc,%eax
c01077ce:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077d5:	00 
c01077d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077dd:	89 04 24             	mov    %eax,(%esp)
c01077e0:	e8 b8 e0 ff ff       	call   c010589d <get_pte>
c01077e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01077e8:	89 04 95 f4 30 15 c0 	mov    %eax,-0x3feacf0c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01077ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077f2:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c01077f9:	85 c0                	test   %eax,%eax
c01077fb:	75 24                	jne    c0107821 <check_swap+0x4e0>
c01077fd:	c7 44 24 0c 1c 6e 11 	movl   $0xc0116e1c,0xc(%esp)
c0107804:	c0 
c0107805:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c010780c:	c0 
c010780d:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107814:	00 
c0107815:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c010781c:	e8 a7 96 ff ff       	call   c0100ec8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107821:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107824:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c010782b:	8b 00                	mov    (%eax),%eax
c010782d:	89 04 24             	mov    %eax,(%esp)
c0107830:	e8 9f f5 ff ff       	call   c0106dd4 <pte2page>
c0107835:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107838:	8b 14 95 40 30 15 c0 	mov    -0x3feacfc0(,%edx,4),%edx
c010783f:	39 d0                	cmp    %edx,%eax
c0107841:	74 24                	je     c0107867 <check_swap+0x526>
c0107843:	c7 44 24 0c 34 6e 11 	movl   $0xc0116e34,0xc(%esp)
c010784a:	c0 
c010784b:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107852:	c0 
c0107853:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010785a:	00 
c010785b:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107862:	e8 61 96 ff ff       	call   c0100ec8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107867:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010786a:	8b 04 85 f4 30 15 c0 	mov    -0x3feacf0c(,%eax,4),%eax
c0107871:	8b 00                	mov    (%eax),%eax
c0107873:	83 e0 01             	and    $0x1,%eax
c0107876:	85 c0                	test   %eax,%eax
c0107878:	75 24                	jne    c010789e <check_swap+0x55d>
c010787a:	c7 44 24 0c 5c 6e 11 	movl   $0xc0116e5c,0xc(%esp)
c0107881:	c0 
c0107882:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c0107889:	c0 
c010788a:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107891:	00 
c0107892:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c0107899:	e8 2a 96 ff ff       	call   c0100ec8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010789e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078a2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078a6:	0f 8e 0b ff ff ff    	jle    c01077b7 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01078ac:	c7 04 24 78 6e 11 c0 	movl   $0xc0116e78,(%esp)
c01078b3:	e8 ad 8a ff ff       	call   c0100365 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01078b8:	e8 6c fa ff ff       	call   c0107329 <check_content_access>
c01078bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01078c0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01078c4:	74 24                	je     c01078ea <check_swap+0x5a9>
c01078c6:	c7 44 24 0c 9e 6e 11 	movl   $0xc0116e9e,0xc(%esp)
c01078cd:	c0 
c01078ce:	c7 44 24 08 86 6b 11 	movl   $0xc0116b86,0x8(%esp)
c01078d5:	c0 
c01078d6:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01078dd:	00 
c01078de:	c7 04 24 20 6b 11 c0 	movl   $0xc0116b20,(%esp)
c01078e5:	e8 de 95 ff ff       	call   c0100ec8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078ea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078f1:	eb 1e                	jmp    c0107911 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c01078f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078f6:	8b 04 85 40 30 15 c0 	mov    -0x3feacfc0(,%eax,4),%eax
c01078fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107904:	00 
c0107905:	89 04 24             	mov    %eax,(%esp)
c0107908:	e8 94 d8 ff ff       	call   c01051a1 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010790d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107911:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107915:	7e dc                	jle    c01078f3 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c0107917:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010791a:	8b 00                	mov    (%eax),%eax
c010791c:	89 04 24             	mov    %eax,(%esp)
c010791f:	e8 6b f4 ff ff       	call   c0106d8f <pa2page>
c0107924:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010792b:	00 
c010792c:	89 04 24             	mov    %eax,(%esp)
c010792f:	e8 6d d8 ff ff       	call   c01051a1 <free_pages>
     pgdir[0] = 0;
c0107934:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107937:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010793d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107940:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107947:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010794a:	89 04 24             	mov    %eax,(%esp)
c010794d:	e8 e2 08 00 00       	call   c0108234 <mm_destroy>
     check_mm_struct = NULL;
c0107952:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0107959:	00 00 00 
     
     nr_free = nr_free_store;
c010795c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010795f:	a3 1c 30 15 c0       	mov    %eax,0xc015301c
     free_list = free_list_store;
c0107964:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107967:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010796a:	a3 14 30 15 c0       	mov    %eax,0xc0153014
c010796f:	89 15 18 30 15 c0    	mov    %edx,0xc0153018

     
     le = &free_list;
c0107975:	c7 45 e8 14 30 15 c0 	movl   $0xc0153014,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010797c:	eb 1d                	jmp    c010799b <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c010797e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107981:	83 e8 0c             	sub    $0xc,%eax
c0107984:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107987:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010798b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010798e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107991:	8b 40 08             	mov    0x8(%eax),%eax
c0107994:	29 c2                	sub    %eax,%edx
c0107996:	89 d0                	mov    %edx,%eax
c0107998:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010799b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010799e:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01079a1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01079a4:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01079a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079aa:	81 7d e8 14 30 15 c0 	cmpl   $0xc0153014,-0x18(%ebp)
c01079b1:	75 cb                	jne    c010797e <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01079ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01079c1:	c7 04 24 a5 6e 11 c0 	movl   $0xc0116ea5,(%esp)
c01079c8:	e8 98 89 ff ff       	call   c0100365 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01079cd:	c7 04 24 bf 6e 11 c0 	movl   $0xc0116ebf,(%esp)
c01079d4:	e8 8c 89 ff ff       	call   c0100365 <cprintf>
}
c01079d9:	83 c4 74             	add    $0x74,%esp
c01079dc:	5b                   	pop    %ebx
c01079dd:	5d                   	pop    %ebp
c01079de:	c3                   	ret    

c01079df <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01079df:	55                   	push   %ebp
c01079e0:	89 e5                	mov    %esp,%ebp
c01079e2:	83 ec 10             	sub    $0x10,%esp
c01079e5:	c7 45 fc 04 31 15 c0 	movl   $0xc0153104,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01079ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01079f2:	89 50 04             	mov    %edx,0x4(%eax)
c01079f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079f8:	8b 50 04             	mov    0x4(%eax),%edx
c01079fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01079fe:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a03:	c7 40 14 04 31 15 c0 	movl   $0xc0153104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a0f:	c9                   	leave  
c0107a10:	c3                   	ret    

c0107a11 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a11:	55                   	push   %ebp
c0107a12:	89 e5                	mov    %esp,%ebp
c0107a14:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a1a:	8b 40 14             	mov    0x14(%eax),%eax
c0107a1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a20:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a23:	83 c0 14             	add    $0x14,%eax
c0107a26:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a2d:	74 06                	je     c0107a35 <_fifo_map_swappable+0x24>
c0107a2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a33:	75 24                	jne    c0107a59 <_fifo_map_swappable+0x48>
c0107a35:	c7 44 24 0c d8 6e 11 	movl   $0xc0116ed8,0xc(%esp)
c0107a3c:	c0 
c0107a3d:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107a44:	c0 
c0107a45:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a4c:	00 
c0107a4d:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107a54:	e8 6f 94 ff ff       	call   c0100ec8 <__panic>
c0107a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a62:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107a65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a6e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107a71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107a74:	8b 40 04             	mov    0x4(%eax),%eax
c0107a77:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107a7a:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107a7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a80:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107a83:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107a86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a89:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a8c:	89 10                	mov    %edx,(%eax)
c0107a8e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107a91:	8b 10                	mov    (%eax),%edx
c0107a93:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107a96:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107a99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107a9c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a9f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107aa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107aa5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107aa8:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107aaa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107aaf:	c9                   	leave  
c0107ab0:	c3                   	ret    

c0107ab1 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107ab1:	55                   	push   %ebp
c0107ab2:	89 e5                	mov    %esp,%ebp
c0107ab4:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107ab7:	8b 45 08             	mov    0x8(%ebp),%eax
c0107aba:	8b 40 14             	mov    0x14(%eax),%eax
c0107abd:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107ac0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ac4:	75 24                	jne    c0107aea <_fifo_swap_out_victim+0x39>
c0107ac6:	c7 44 24 0c 1f 6f 11 	movl   $0xc0116f1f,0xc(%esp)
c0107acd:	c0 
c0107ace:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107ad5:	c0 
c0107ad6:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107add:	00 
c0107ade:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107ae5:	e8 de 93 ff ff       	call   c0100ec8 <__panic>
     assert(in_tick==0);
c0107aea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107aee:	74 24                	je     c0107b14 <_fifo_swap_out_victim+0x63>
c0107af0:	c7 44 24 0c 2c 6f 11 	movl   $0xc0116f2c,0xc(%esp)
c0107af7:	c0 
c0107af8:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107aff:	c0 
c0107b00:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b07:	00 
c0107b08:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107b0f:	e8 b4 93 ff ff       	call   c0100ec8 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b17:	8b 00                	mov    (%eax),%eax
c0107b19:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b22:	75 24                	jne    c0107b48 <_fifo_swap_out_victim+0x97>
c0107b24:	c7 44 24 0c 37 6f 11 	movl   $0xc0116f37,0xc(%esp)
c0107b2b:	c0 
c0107b2c:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107b33:	c0 
c0107b34:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107b3b:	00 
c0107b3c:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107b43:	e8 80 93 ff ff       	call   c0100ec8 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107b48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b4b:	83 e8 14             	sub    $0x14,%eax
c0107b4e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b54:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b5a:	8b 40 04             	mov    0x4(%eax),%eax
c0107b5d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107b60:	8b 12                	mov    (%edx),%edx
c0107b62:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107b65:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b6e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b71:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b74:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b77:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107b79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b7d:	75 24                	jne    c0107ba3 <_fifo_swap_out_victim+0xf2>
c0107b7f:	c7 44 24 0c 40 6f 11 	movl   $0xc0116f40,0xc(%esp)
c0107b86:	c0 
c0107b87:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107b8e:	c0 
c0107b8f:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107b96:	00 
c0107b97:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107b9e:	e8 25 93 ff ff       	call   c0100ec8 <__panic>
     *ptr_page = p;
c0107ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ba6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107ba9:	89 10                	mov    %edx,(%eax)
     return 0;
c0107bab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bb0:	c9                   	leave  
c0107bb1:	c3                   	ret    

c0107bb2 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107bb2:	55                   	push   %ebp
c0107bb3:	89 e5                	mov    %esp,%ebp
c0107bb5:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107bb8:	c7 04 24 4c 6f 11 c0 	movl   $0xc0116f4c,(%esp)
c0107bbf:	e8 a1 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107bc4:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107bc9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107bcc:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107bd1:	83 f8 04             	cmp    $0x4,%eax
c0107bd4:	74 24                	je     c0107bfa <_fifo_check_swap+0x48>
c0107bd6:	c7 44 24 0c 72 6f 11 	movl   $0xc0116f72,0xc(%esp)
c0107bdd:	c0 
c0107bde:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107be5:	c0 
c0107be6:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107bed:	00 
c0107bee:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107bf5:	e8 ce 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107bfa:	c7 04 24 84 6f 11 c0 	movl   $0xc0116f84,(%esp)
c0107c01:	e8 5f 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c06:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c0b:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c0e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c13:	83 f8 04             	cmp    $0x4,%eax
c0107c16:	74 24                	je     c0107c3c <_fifo_check_swap+0x8a>
c0107c18:	c7 44 24 0c 72 6f 11 	movl   $0xc0116f72,0xc(%esp)
c0107c1f:	c0 
c0107c20:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107c27:	c0 
c0107c28:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107c2f:	00 
c0107c30:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107c37:	e8 8c 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c3c:	c7 04 24 ac 6f 11 c0 	movl   $0xc0116fac,(%esp)
c0107c43:	e8 1d 87 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107c48:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107c4d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107c50:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c55:	83 f8 04             	cmp    $0x4,%eax
c0107c58:	74 24                	je     c0107c7e <_fifo_check_swap+0xcc>
c0107c5a:	c7 44 24 0c 72 6f 11 	movl   $0xc0116f72,0xc(%esp)
c0107c61:	c0 
c0107c62:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107c69:	c0 
c0107c6a:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107c71:	00 
c0107c72:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107c79:	e8 4a 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c7e:	c7 04 24 d4 6f 11 c0 	movl   $0xc0116fd4,(%esp)
c0107c85:	e8 db 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c8a:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c8f:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107c92:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107c97:	83 f8 04             	cmp    $0x4,%eax
c0107c9a:	74 24                	je     c0107cc0 <_fifo_check_swap+0x10e>
c0107c9c:	c7 44 24 0c 72 6f 11 	movl   $0xc0116f72,0xc(%esp)
c0107ca3:	c0 
c0107ca4:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107cab:	c0 
c0107cac:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107cb3:	00 
c0107cb4:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107cbb:	e8 08 92 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107cc0:	c7 04 24 fc 6f 11 c0 	movl   $0xc0116ffc,(%esp)
c0107cc7:	e8 99 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107ccc:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107cd1:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107cd4:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107cd9:	83 f8 05             	cmp    $0x5,%eax
c0107cdc:	74 24                	je     c0107d02 <_fifo_check_swap+0x150>
c0107cde:	c7 44 24 0c 22 70 11 	movl   $0xc0117022,0xc(%esp)
c0107ce5:	c0 
c0107ce6:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107ced:	c0 
c0107cee:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107cf5:	00 
c0107cf6:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107cfd:	e8 c6 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d02:	c7 04 24 d4 6f 11 c0 	movl   $0xc0116fd4,(%esp)
c0107d09:	e8 57 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d0e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d13:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d16:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d1b:	83 f8 05             	cmp    $0x5,%eax
c0107d1e:	74 24                	je     c0107d44 <_fifo_check_swap+0x192>
c0107d20:	c7 44 24 0c 22 70 11 	movl   $0xc0117022,0xc(%esp)
c0107d27:	c0 
c0107d28:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107d2f:	c0 
c0107d30:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107d37:	00 
c0107d38:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107d3f:	e8 84 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d44:	c7 04 24 84 6f 11 c0 	movl   $0xc0116f84,(%esp)
c0107d4b:	e8 15 86 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d50:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d55:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107d58:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d5d:	83 f8 06             	cmp    $0x6,%eax
c0107d60:	74 24                	je     c0107d86 <_fifo_check_swap+0x1d4>
c0107d62:	c7 44 24 0c 31 70 11 	movl   $0xc0117031,0xc(%esp)
c0107d69:	c0 
c0107d6a:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107d71:	c0 
c0107d72:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107d79:	00 
c0107d7a:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107d81:	e8 42 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d86:	c7 04 24 d4 6f 11 c0 	movl   $0xc0116fd4,(%esp)
c0107d8d:	e8 d3 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d92:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d97:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107d9a:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107d9f:	83 f8 07             	cmp    $0x7,%eax
c0107da2:	74 24                	je     c0107dc8 <_fifo_check_swap+0x216>
c0107da4:	c7 44 24 0c 40 70 11 	movl   $0xc0117040,0xc(%esp)
c0107dab:	c0 
c0107dac:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107db3:	c0 
c0107db4:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107dbb:	00 
c0107dbc:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107dc3:	e8 00 91 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107dc8:	c7 04 24 4c 6f 11 c0 	movl   $0xc0116f4c,(%esp)
c0107dcf:	e8 91 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107dd4:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107dd9:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107ddc:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107de1:	83 f8 08             	cmp    $0x8,%eax
c0107de4:	74 24                	je     c0107e0a <_fifo_check_swap+0x258>
c0107de6:	c7 44 24 0c 4f 70 11 	movl   $0xc011704f,0xc(%esp)
c0107ded:	c0 
c0107dee:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107df5:	c0 
c0107df6:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107dfd:	00 
c0107dfe:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107e05:	e8 be 90 ff ff       	call   c0100ec8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e0a:	c7 04 24 ac 6f 11 c0 	movl   $0xc0116fac,(%esp)
c0107e11:	e8 4f 85 ff ff       	call   c0100365 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e16:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e1b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e1e:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0107e23:	83 f8 09             	cmp    $0x9,%eax
c0107e26:	74 24                	je     c0107e4c <_fifo_check_swap+0x29a>
c0107e28:	c7 44 24 0c 5e 70 11 	movl   $0xc011705e,0xc(%esp)
c0107e2f:	c0 
c0107e30:	c7 44 24 08 f6 6e 11 	movl   $0xc0116ef6,0x8(%esp)
c0107e37:	c0 
c0107e38:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107e3f:	00 
c0107e40:	c7 04 24 0b 6f 11 c0 	movl   $0xc0116f0b,(%esp)
c0107e47:	e8 7c 90 ff ff       	call   c0100ec8 <__panic>
    return 0;
c0107e4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e51:	c9                   	leave  
c0107e52:	c3                   	ret    

c0107e53 <_fifo_init>:


static int
_fifo_init(void)
{
c0107e53:	55                   	push   %ebp
c0107e54:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e56:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e5b:	5d                   	pop    %ebp
c0107e5c:	c3                   	ret    

c0107e5d <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107e5d:	55                   	push   %ebp
c0107e5e:	89 e5                	mov    %esp,%ebp
    return 0;
c0107e60:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e65:	5d                   	pop    %ebp
c0107e66:	c3                   	ret    

c0107e67 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107e67:	55                   	push   %ebp
c0107e68:	89 e5                	mov    %esp,%ebp
c0107e6a:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e6f:	5d                   	pop    %ebp
c0107e70:	c3                   	ret    

c0107e71 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0107e71:	55                   	push   %ebp
c0107e72:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107e74:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e77:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107e7a:	5d                   	pop    %ebp
c0107e7b:	c3                   	ret    

c0107e7c <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107e7c:	55                   	push   %ebp
c0107e7d:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107e7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e82:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e85:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107e88:	5d                   	pop    %ebp
c0107e89:	c3                   	ret    

c0107e8a <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107e8a:	55                   	push   %ebp
c0107e8b:	89 e5                	mov    %esp,%ebp
c0107e8d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107e90:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e93:	c1 e8 0c             	shr    $0xc,%eax
c0107e96:	89 c2                	mov    %eax,%edx
c0107e98:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c0107e9d:	39 c2                	cmp    %eax,%edx
c0107e9f:	72 1c                	jb     c0107ebd <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107ea1:	c7 44 24 08 80 70 11 	movl   $0xc0117080,0x8(%esp)
c0107ea8:	c0 
c0107ea9:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107eb0:	00 
c0107eb1:	c7 04 24 9f 70 11 c0 	movl   $0xc011709f,(%esp)
c0107eb8:	e8 0b 90 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c0107ebd:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c0107ec2:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ec5:	c1 ea 0c             	shr    $0xc,%edx
c0107ec8:	c1 e2 05             	shl    $0x5,%edx
c0107ecb:	01 d0                	add    %edx,%eax
}
c0107ecd:	c9                   	leave  
c0107ece:	c3                   	ret    

c0107ecf <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107ecf:	55                   	push   %ebp
c0107ed0:	89 e5                	mov    %esp,%ebp
c0107ed2:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107ed5:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107edc:	e8 e0 cd ff ff       	call   c0104cc1 <kmalloc>
c0107ee1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107ee4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ee8:	0f 84 81 00 00 00    	je     c0107f6f <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ef1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107ef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ef7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107efa:	89 50 04             	mov    %edx,0x4(%eax)
c0107efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f00:	8b 50 04             	mov    0x4(%eax),%edx
c0107f03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f06:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f0b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107f12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f15:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f1f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107f26:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0107f2b:	85 c0                	test   %eax,%eax
c0107f2d:	74 0d                	je     c0107f3c <mm_create+0x6d>
c0107f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f32:	89 04 24             	mov    %eax,(%esp)
c0107f35:	e8 68 ef ff ff       	call   c0106ea2 <swap_init_mm>
c0107f3a:	eb 0a                	jmp    c0107f46 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f3f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107f46:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107f4d:	00 
c0107f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f51:	89 04 24             	mov    %eax,(%esp)
c0107f54:	e8 23 ff ff ff       	call   c0107e7c <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f5c:	83 c0 1c             	add    $0x1c,%eax
c0107f5f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107f66:	00 
c0107f67:	89 04 24             	mov    %eax,(%esp)
c0107f6a:	e8 80 1b 00 00       	call   c0109aef <sem_init>
    }    
    return mm;
c0107f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107f72:	c9                   	leave  
c0107f73:	c3                   	ret    

c0107f74 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107f74:	55                   	push   %ebp
c0107f75:	89 e5                	mov    %esp,%ebp
c0107f77:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107f7a:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107f81:	e8 3b cd ff ff       	call   c0104cc1 <kmalloc>
c0107f86:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107f89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f8d:	74 1b                	je     c0107faa <vma_create+0x36>
        vma->vm_start = vm_start;
c0107f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f92:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f95:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107f98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f9b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f9e:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107fa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fa4:	8b 55 10             	mov    0x10(%ebp),%edx
c0107fa7:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107faa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107fad:	c9                   	leave  
c0107fae:	c3                   	ret    

c0107faf <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107faf:	55                   	push   %ebp
c0107fb0:	89 e5                	mov    %esp,%ebp
c0107fb2:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107fb5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107fbc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107fc0:	0f 84 95 00 00 00    	je     c010805b <find_vma+0xac>
        vma = mm->mmap_cache;
c0107fc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fc9:	8b 40 08             	mov    0x8(%eax),%eax
c0107fcc:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107fcf:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107fd3:	74 16                	je     c0107feb <find_vma+0x3c>
c0107fd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fd8:	8b 40 04             	mov    0x4(%eax),%eax
c0107fdb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fde:	77 0b                	ja     c0107feb <find_vma+0x3c>
c0107fe0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107fe3:	8b 40 08             	mov    0x8(%eax),%eax
c0107fe6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107fe9:	77 61                	ja     c010804c <find_vma+0x9d>
                bool found = 0;
c0107feb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ff5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107ffe:	eb 28                	jmp    c0108028 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108000:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108003:	83 e8 10             	sub    $0x10,%eax
c0108006:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108009:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010800c:	8b 40 04             	mov    0x4(%eax),%eax
c010800f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108012:	77 14                	ja     c0108028 <find_vma+0x79>
c0108014:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108017:	8b 40 08             	mov    0x8(%eax),%eax
c010801a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010801d:	76 09                	jbe    c0108028 <find_vma+0x79>
                        found = 1;
c010801f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108026:	eb 17                	jmp    c010803f <find_vma+0x90>
c0108028:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010802b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010802e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108031:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108034:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010803a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010803d:	75 c1                	jne    c0108000 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010803f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108043:	75 07                	jne    c010804c <find_vma+0x9d>
                    vma = NULL;
c0108045:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010804c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108050:	74 09                	je     c010805b <find_vma+0xac>
            mm->mmap_cache = vma;
c0108052:	8b 45 08             	mov    0x8(%ebp),%eax
c0108055:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108058:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010805b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010805e:	c9                   	leave  
c010805f:	c3                   	ret    

c0108060 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108060:	55                   	push   %ebp
c0108061:	89 e5                	mov    %esp,%ebp
c0108063:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108066:	8b 45 08             	mov    0x8(%ebp),%eax
c0108069:	8b 50 04             	mov    0x4(%eax),%edx
c010806c:	8b 45 08             	mov    0x8(%ebp),%eax
c010806f:	8b 40 08             	mov    0x8(%eax),%eax
c0108072:	39 c2                	cmp    %eax,%edx
c0108074:	72 24                	jb     c010809a <check_vma_overlap+0x3a>
c0108076:	c7 44 24 0c ad 70 11 	movl   $0xc01170ad,0xc(%esp)
c010807d:	c0 
c010807e:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108085:	c0 
c0108086:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010808d:	00 
c010808e:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108095:	e8 2e 8e ff ff       	call   c0100ec8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c010809a:	8b 45 08             	mov    0x8(%ebp),%eax
c010809d:	8b 50 08             	mov    0x8(%eax),%edx
c01080a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a3:	8b 40 04             	mov    0x4(%eax),%eax
c01080a6:	39 c2                	cmp    %eax,%edx
c01080a8:	76 24                	jbe    c01080ce <check_vma_overlap+0x6e>
c01080aa:	c7 44 24 0c f0 70 11 	movl   $0xc01170f0,0xc(%esp)
c01080b1:	c0 
c01080b2:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01080b9:	c0 
c01080ba:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01080c1:	00 
c01080c2:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01080c9:	e8 fa 8d ff ff       	call   c0100ec8 <__panic>
    assert(next->vm_start < next->vm_end);
c01080ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080d1:	8b 50 04             	mov    0x4(%eax),%edx
c01080d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080d7:	8b 40 08             	mov    0x8(%eax),%eax
c01080da:	39 c2                	cmp    %eax,%edx
c01080dc:	72 24                	jb     c0108102 <check_vma_overlap+0xa2>
c01080de:	c7 44 24 0c 0f 71 11 	movl   $0xc011710f,0xc(%esp)
c01080e5:	c0 
c01080e6:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01080ed:	c0 
c01080ee:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01080f5:	00 
c01080f6:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01080fd:	e8 c6 8d ff ff       	call   c0100ec8 <__panic>
}
c0108102:	c9                   	leave  
c0108103:	c3                   	ret    

c0108104 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108104:	55                   	push   %ebp
c0108105:	89 e5                	mov    %esp,%ebp
c0108107:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010810a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010810d:	8b 50 04             	mov    0x4(%eax),%edx
c0108110:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108113:	8b 40 08             	mov    0x8(%eax),%eax
c0108116:	39 c2                	cmp    %eax,%edx
c0108118:	72 24                	jb     c010813e <insert_vma_struct+0x3a>
c010811a:	c7 44 24 0c 2d 71 11 	movl   $0xc011712d,0xc(%esp)
c0108121:	c0 
c0108122:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108129:	c0 
c010812a:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108131:	00 
c0108132:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108139:	e8 8a 8d ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010813e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108141:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108144:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108147:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010814a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010814d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108150:	eb 21                	jmp    c0108173 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108152:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108155:	83 e8 10             	sub    $0x10,%eax
c0108158:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010815b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010815e:	8b 50 04             	mov    0x4(%eax),%edx
c0108161:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108164:	8b 40 04             	mov    0x4(%eax),%eax
c0108167:	39 c2                	cmp    %eax,%edx
c0108169:	76 02                	jbe    c010816d <insert_vma_struct+0x69>
                break;
c010816b:	eb 1d                	jmp    c010818a <insert_vma_struct+0x86>
            }
            le_prev = le;
c010816d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108170:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108173:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108176:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108179:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010817c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010817f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108182:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108185:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108188:	75 c8                	jne    c0108152 <insert_vma_struct+0x4e>
c010818a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010818d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108190:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108193:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108196:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108199:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010819c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010819f:	74 15                	je     c01081b6 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01081a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081a4:	8d 50 f0             	lea    -0x10(%eax),%edx
c01081a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081ae:	89 14 24             	mov    %edx,(%esp)
c01081b1:	e8 aa fe ff ff       	call   c0108060 <check_vma_overlap>
    }
    if (le_next != list) {
c01081b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01081bc:	74 15                	je     c01081d3 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01081be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081c1:	83 e8 10             	sub    $0x10,%eax
c01081c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01081c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081cb:	89 04 24             	mov    %eax,(%esp)
c01081ce:	e8 8d fe ff ff       	call   c0108060 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01081d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01081d9:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01081db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081de:	8d 50 10             	lea    0x10(%eax),%edx
c01081e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01081e7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01081ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01081ed:	8b 40 04             	mov    0x4(%eax),%eax
c01081f0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01081f3:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01081f6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01081f9:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01081fc:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01081ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108202:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108205:	89 10                	mov    %edx,(%eax)
c0108207:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010820a:	8b 10                	mov    (%eax),%edx
c010820c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010820f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108212:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108215:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108218:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010821b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010821e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108221:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108223:	8b 45 08             	mov    0x8(%ebp),%eax
c0108226:	8b 40 10             	mov    0x10(%eax),%eax
c0108229:	8d 50 01             	lea    0x1(%eax),%edx
c010822c:	8b 45 08             	mov    0x8(%ebp),%eax
c010822f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108232:	c9                   	leave  
c0108233:	c3                   	ret    

c0108234 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108234:	55                   	push   %ebp
c0108235:	89 e5                	mov    %esp,%ebp
c0108237:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010823a:	8b 45 08             	mov    0x8(%ebp),%eax
c010823d:	89 04 24             	mov    %eax,(%esp)
c0108240:	e8 2c fc ff ff       	call   c0107e71 <mm_count>
c0108245:	85 c0                	test   %eax,%eax
c0108247:	74 24                	je     c010826d <mm_destroy+0x39>
c0108249:	c7 44 24 0c 49 71 11 	movl   $0xc0117149,0xc(%esp)
c0108250:	c0 
c0108251:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108258:	c0 
c0108259:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108260:	00 
c0108261:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108268:	e8 5b 8c ff ff       	call   c0100ec8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010826d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108270:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108273:	eb 36                	jmp    c01082ab <mm_destroy+0x77>
c0108275:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108278:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010827b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010827e:	8b 40 04             	mov    0x4(%eax),%eax
c0108281:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108284:	8b 12                	mov    (%edx),%edx
c0108286:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108289:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010828c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010828f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108292:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108295:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108298:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010829b:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010829d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082a0:	83 e8 10             	sub    $0x10,%eax
c01082a3:	89 04 24             	mov    %eax,(%esp)
c01082a6:	e8 31 ca ff ff       	call   c0104cdc <kfree>
c01082ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082ae:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01082b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082b4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01082b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01082c0:	75 b3                	jne    c0108275 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01082c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c5:	89 04 24             	mov    %eax,(%esp)
c01082c8:	e8 0f ca ff ff       	call   c0104cdc <kfree>
    mm=NULL;
c01082cd:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01082d4:	c9                   	leave  
c01082d5:	c3                   	ret    

c01082d6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01082d6:	55                   	push   %ebp
c01082d7:	89 e5                	mov    %esp,%ebp
c01082d9:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01082dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082df:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01082ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01082ed:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01082f4:	8b 45 10             	mov    0x10(%ebp),%eax
c01082f7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01082fa:	01 c2                	add    %eax,%edx
c01082fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01082ff:	01 d0                	add    %edx,%eax
c0108301:	83 e8 01             	sub    $0x1,%eax
c0108304:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108307:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010830a:	ba 00 00 00 00       	mov    $0x0,%edx
c010830f:	f7 75 e8             	divl   -0x18(%ebp)
c0108312:	89 d0                	mov    %edx,%eax
c0108314:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108317:	29 c2                	sub    %eax,%edx
c0108319:	89 d0                	mov    %edx,%eax
c010831b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010831e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108325:	76 11                	jbe    c0108338 <mm_map+0x62>
c0108327:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010832a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010832d:	73 09                	jae    c0108338 <mm_map+0x62>
c010832f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108336:	76 0a                	jbe    c0108342 <mm_map+0x6c>
        return -E_INVAL;
c0108338:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010833d:	e9 ae 00 00 00       	jmp    c01083f0 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108342:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108346:	75 24                	jne    c010836c <mm_map+0x96>
c0108348:	c7 44 24 0c 5b 71 11 	movl   $0xc011715b,0xc(%esp)
c010834f:	c0 
c0108350:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108357:	c0 
c0108358:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010835f:	00 
c0108360:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108367:	e8 5c 8b ff ff       	call   c0100ec8 <__panic>

    int ret = -E_INVAL;
c010836c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108373:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108376:	89 44 24 04          	mov    %eax,0x4(%esp)
c010837a:	8b 45 08             	mov    0x8(%ebp),%eax
c010837d:	89 04 24             	mov    %eax,(%esp)
c0108380:	e8 2a fc ff ff       	call   c0107faf <find_vma>
c0108385:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108388:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010838c:	74 0d                	je     c010839b <mm_map+0xc5>
c010838e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108391:	8b 40 04             	mov    0x4(%eax),%eax
c0108394:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108397:	73 02                	jae    c010839b <mm_map+0xc5>
        goto out;
c0108399:	eb 52                	jmp    c01083ed <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c010839b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01083a2:	8b 45 14             	mov    0x14(%ebp),%eax
c01083a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01083a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01083ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083b3:	89 04 24             	mov    %eax,(%esp)
c01083b6:	e8 b9 fb ff ff       	call   c0107f74 <vma_create>
c01083bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01083be:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083c2:	75 02                	jne    c01083c6 <mm_map+0xf0>
        goto out;
c01083c4:	eb 27                	jmp    c01083ed <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c01083c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01083c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01083d0:	89 04 24             	mov    %eax,(%esp)
c01083d3:	e8 2c fd ff ff       	call   c0108104 <insert_vma_struct>
    if (vma_store != NULL) {
c01083d8:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01083dc:	74 08                	je     c01083e6 <mm_map+0x110>
        *vma_store = vma;
c01083de:	8b 45 18             	mov    0x18(%ebp),%eax
c01083e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01083e4:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01083e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01083ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01083f0:	c9                   	leave  
c01083f1:	c3                   	ret    

c01083f2 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01083f2:	55                   	push   %ebp
c01083f3:	89 e5                	mov    %esp,%ebp
c01083f5:	56                   	push   %esi
c01083f6:	53                   	push   %ebx
c01083f7:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01083fa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01083fe:	74 06                	je     c0108406 <dup_mmap+0x14>
c0108400:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108404:	75 24                	jne    c010842a <dup_mmap+0x38>
c0108406:	c7 44 24 0c 66 71 11 	movl   $0xc0117166,0xc(%esp)
c010840d:	c0 
c010840e:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108415:	c0 
c0108416:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010841d:	00 
c010841e:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108425:	e8 9e 8a ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010842a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010842d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108430:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108433:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108436:	e9 92 00 00 00       	jmp    c01084cd <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010843b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010843e:	83 e8 10             	sub    $0x10,%eax
c0108441:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108444:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108447:	8b 48 0c             	mov    0xc(%eax),%ecx
c010844a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010844d:	8b 50 08             	mov    0x8(%eax),%edx
c0108450:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108453:	8b 40 04             	mov    0x4(%eax),%eax
c0108456:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010845a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010845e:	89 04 24             	mov    %eax,(%esp)
c0108461:	e8 0e fb ff ff       	call   c0107f74 <vma_create>
c0108466:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108469:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010846d:	75 07                	jne    c0108476 <dup_mmap+0x84>
            return -E_NO_MEM;
c010846f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108474:	eb 76                	jmp    c01084ec <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108476:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108479:	89 44 24 04          	mov    %eax,0x4(%esp)
c010847d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108480:	89 04 24             	mov    %eax,(%esp)
c0108483:	e8 7c fc ff ff       	call   c0108104 <insert_vma_struct>

        bool share = 0;
c0108488:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010848f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108492:	8b 58 08             	mov    0x8(%eax),%ebx
c0108495:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108498:	8b 48 04             	mov    0x4(%eax),%ecx
c010849b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010849e:	8b 50 0c             	mov    0xc(%eax),%edx
c01084a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01084a4:	8b 40 0c             	mov    0xc(%eax),%eax
c01084a7:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01084aa:	89 74 24 10          	mov    %esi,0x10(%esp)
c01084ae:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01084b2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01084b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01084ba:	89 04 24             	mov    %eax,(%esp)
c01084bd:	e8 c8 d7 ff ff       	call   c0105c8a <copy_range>
c01084c2:	85 c0                	test   %eax,%eax
c01084c4:	74 07                	je     c01084cd <dup_mmap+0xdb>
            return -E_NO_MEM;
c01084c6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01084cb:	eb 1f                	jmp    c01084ec <dup_mmap+0xfa>
c01084cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01084d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084d6:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01084d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01084db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01084e1:	0f 85 54 ff ff ff    	jne    c010843b <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01084e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01084ec:	83 c4 40             	add    $0x40,%esp
c01084ef:	5b                   	pop    %ebx
c01084f0:	5e                   	pop    %esi
c01084f1:	5d                   	pop    %ebp
c01084f2:	c3                   	ret    

c01084f3 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01084f3:	55                   	push   %ebp
c01084f4:	89 e5                	mov    %esp,%ebp
c01084f6:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01084f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084fd:	74 0f                	je     c010850e <exit_mmap+0x1b>
c01084ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0108502:	89 04 24             	mov    %eax,(%esp)
c0108505:	e8 67 f9 ff ff       	call   c0107e71 <mm_count>
c010850a:	85 c0                	test   %eax,%eax
c010850c:	74 24                	je     c0108532 <exit_mmap+0x3f>
c010850e:	c7 44 24 0c 84 71 11 	movl   $0xc0117184,0xc(%esp)
c0108515:	c0 
c0108516:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c010851d:	c0 
c010851e:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108525:	00 
c0108526:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c010852d:	e8 96 89 ff ff       	call   c0100ec8 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108532:	8b 45 08             	mov    0x8(%ebp),%eax
c0108535:	8b 40 0c             	mov    0xc(%eax),%eax
c0108538:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010853b:	8b 45 08             	mov    0x8(%ebp),%eax
c010853e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108541:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108544:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108547:	eb 28                	jmp    c0108571 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108549:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010854c:	83 e8 10             	sub    $0x10,%eax
c010854f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108552:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108555:	8b 50 08             	mov    0x8(%eax),%edx
c0108558:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010855b:	8b 40 04             	mov    0x4(%eax),%eax
c010855e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108562:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108566:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108569:	89 04 24             	mov    %eax,(%esp)
c010856c:	e8 1e d5 ff ff       	call   c0105a8f <unmap_range>
c0108571:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108574:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108577:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010857a:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010857d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108583:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108586:	75 c1                	jne    c0108549 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108588:	eb 28                	jmp    c01085b2 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010858a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010858d:	83 e8 10             	sub    $0x10,%eax
c0108590:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108593:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108596:	8b 50 08             	mov    0x8(%eax),%edx
c0108599:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010859c:	8b 40 04             	mov    0x4(%eax),%eax
c010859f:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085aa:	89 04 24             	mov    %eax,(%esp)
c01085ad:	e8 d1 d5 ff ff       	call   c0105b83 <exit_range>
c01085b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01085b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01085bb:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01085be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01085c7:	75 c1                	jne    c010858a <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01085c9:	c9                   	leave  
c01085ca:	c3                   	ret    

c01085cb <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01085cb:	55                   	push   %ebp
c01085cc:	89 e5                	mov    %esp,%ebp
c01085ce:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01085d1:	8b 45 10             	mov    0x10(%ebp),%eax
c01085d4:	8b 55 18             	mov    0x18(%ebp),%edx
c01085d7:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01085db:	8b 55 14             	mov    0x14(%ebp),%edx
c01085de:	89 54 24 08          	mov    %edx,0x8(%esp)
c01085e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01085e9:	89 04 24             	mov    %eax,(%esp)
c01085ec:	e8 dc 09 00 00       	call   c0108fcd <user_mem_check>
c01085f1:	85 c0                	test   %eax,%eax
c01085f3:	75 07                	jne    c01085fc <copy_from_user+0x31>
        return 0;
c01085f5:	b8 00 00 00 00       	mov    $0x0,%eax
c01085fa:	eb 1e                	jmp    c010861a <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01085fc:	8b 45 14             	mov    0x14(%ebp),%eax
c01085ff:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108603:	8b 45 10             	mov    0x10(%ebp),%eax
c0108606:	89 44 24 04          	mov    %eax,0x4(%esp)
c010860a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010860d:	89 04 24             	mov    %eax,(%esp)
c0108610:	e8 46 cf 00 00       	call   c011555b <memcpy>
    return 1;
c0108615:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010861a:	c9                   	leave  
c010861b:	c3                   	ret    

c010861c <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010861c:	55                   	push   %ebp
c010861d:	89 e5                	mov    %esp,%ebp
c010861f:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108622:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108625:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010862c:	00 
c010862d:	8b 55 14             	mov    0x14(%ebp),%edx
c0108630:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108634:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108638:	8b 45 08             	mov    0x8(%ebp),%eax
c010863b:	89 04 24             	mov    %eax,(%esp)
c010863e:	e8 8a 09 00 00       	call   c0108fcd <user_mem_check>
c0108643:	85 c0                	test   %eax,%eax
c0108645:	75 07                	jne    c010864e <copy_to_user+0x32>
        return 0;
c0108647:	b8 00 00 00 00       	mov    $0x0,%eax
c010864c:	eb 1e                	jmp    c010866c <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c010864e:	8b 45 14             	mov    0x14(%ebp),%eax
c0108651:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108655:	8b 45 10             	mov    0x10(%ebp),%eax
c0108658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010865c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010865f:	89 04 24             	mov    %eax,(%esp)
c0108662:	e8 f4 ce 00 00       	call   c011555b <memcpy>
    return 1;
c0108667:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010866c:	c9                   	leave  
c010866d:	c3                   	ret    

c010866e <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010866e:	55                   	push   %ebp
c010866f:	89 e5                	mov    %esp,%ebp
c0108671:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108674:	e8 02 00 00 00       	call   c010867b <check_vmm>
}
c0108679:	c9                   	leave  
c010867a:	c3                   	ret    

c010867b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010867b:	55                   	push   %ebp
c010867c:	89 e5                	mov    %esp,%ebp
c010867e:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108681:	e8 4d cb ff ff       	call   c01051d3 <nr_free_pages>
c0108686:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108689:	e8 13 00 00 00       	call   c01086a1 <check_vma_struct>
    check_pgfault();
c010868e:	e8 a7 04 00 00       	call   c0108b3a <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108693:	c7 04 24 a4 71 11 c0 	movl   $0xc01171a4,(%esp)
c010869a:	e8 c6 7c ff ff       	call   c0100365 <cprintf>
}
c010869f:	c9                   	leave  
c01086a0:	c3                   	ret    

c01086a1 <check_vma_struct>:

static void
check_vma_struct(void) {
c01086a1:	55                   	push   %ebp
c01086a2:	89 e5                	mov    %esp,%ebp
c01086a4:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01086a7:	e8 27 cb ff ff       	call   c01051d3 <nr_free_pages>
c01086ac:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01086af:	e8 1b f8 ff ff       	call   c0107ecf <mm_create>
c01086b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01086b7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01086bb:	75 24                	jne    c01086e1 <check_vma_struct+0x40>
c01086bd:	c7 44 24 0c 5b 71 11 	movl   $0xc011715b,0xc(%esp)
c01086c4:	c0 
c01086c5:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01086cc:	c0 
c01086cd:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01086d4:	00 
c01086d5:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01086dc:	e8 e7 87 ff ff       	call   c0100ec8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01086e1:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01086e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01086eb:	89 d0                	mov    %edx,%eax
c01086ed:	c1 e0 02             	shl    $0x2,%eax
c01086f0:	01 d0                	add    %edx,%eax
c01086f2:	01 c0                	add    %eax,%eax
c01086f4:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01086f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086fd:	eb 70                	jmp    c010876f <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01086ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108702:	89 d0                	mov    %edx,%eax
c0108704:	c1 e0 02             	shl    $0x2,%eax
c0108707:	01 d0                	add    %edx,%eax
c0108709:	83 c0 02             	add    $0x2,%eax
c010870c:	89 c1                	mov    %eax,%ecx
c010870e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108711:	89 d0                	mov    %edx,%eax
c0108713:	c1 e0 02             	shl    $0x2,%eax
c0108716:	01 d0                	add    %edx,%eax
c0108718:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010871f:	00 
c0108720:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108724:	89 04 24             	mov    %eax,(%esp)
c0108727:	e8 48 f8 ff ff       	call   c0107f74 <vma_create>
c010872c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c010872f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108733:	75 24                	jne    c0108759 <check_vma_struct+0xb8>
c0108735:	c7 44 24 0c bc 71 11 	movl   $0xc01171bc,0xc(%esp)
c010873c:	c0 
c010873d:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108744:	c0 
c0108745:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010874c:	00 
c010874d:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108754:	e8 6f 87 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c0108759:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010875c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108760:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108763:	89 04 24             	mov    %eax,(%esp)
c0108766:	e8 99 f9 ff ff       	call   c0108104 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010876b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010876f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108773:	7f 8a                	jg     c01086ff <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108775:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108778:	83 c0 01             	add    $0x1,%eax
c010877b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010877e:	eb 70                	jmp    c01087f0 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108780:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108783:	89 d0                	mov    %edx,%eax
c0108785:	c1 e0 02             	shl    $0x2,%eax
c0108788:	01 d0                	add    %edx,%eax
c010878a:	83 c0 02             	add    $0x2,%eax
c010878d:	89 c1                	mov    %eax,%ecx
c010878f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108792:	89 d0                	mov    %edx,%eax
c0108794:	c1 e0 02             	shl    $0x2,%eax
c0108797:	01 d0                	add    %edx,%eax
c0108799:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01087a0:	00 
c01087a1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01087a5:	89 04 24             	mov    %eax,(%esp)
c01087a8:	e8 c7 f7 ff ff       	call   c0107f74 <vma_create>
c01087ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01087b0:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01087b4:	75 24                	jne    c01087da <check_vma_struct+0x139>
c01087b6:	c7 44 24 0c bc 71 11 	movl   $0xc01171bc,0xc(%esp)
c01087bd:	c0 
c01087be:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01087c5:	c0 
c01087c6:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01087cd:	00 
c01087ce:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01087d5:	e8 ee 86 ff ff       	call   c0100ec8 <__panic>
        insert_vma_struct(mm, vma);
c01087da:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01087dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087e4:	89 04 24             	mov    %eax,(%esp)
c01087e7:	e8 18 f9 ff ff       	call   c0108104 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01087ec:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087f3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01087f6:	7e 88                	jle    c0108780 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01087f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01087fb:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01087fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108801:	8b 40 04             	mov    0x4(%eax),%eax
c0108804:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108807:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010880e:	e9 97 00 00 00       	jmp    c01088aa <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108813:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108816:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108819:	75 24                	jne    c010883f <check_vma_struct+0x19e>
c010881b:	c7 44 24 0c c8 71 11 	movl   $0xc01171c8,0xc(%esp)
c0108822:	c0 
c0108823:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c010882a:	c0 
c010882b:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108832:	00 
c0108833:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c010883a:	e8 89 86 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c010883f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108842:	83 e8 10             	sub    $0x10,%eax
c0108845:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108848:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010884b:	8b 48 04             	mov    0x4(%eax),%ecx
c010884e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108851:	89 d0                	mov    %edx,%eax
c0108853:	c1 e0 02             	shl    $0x2,%eax
c0108856:	01 d0                	add    %edx,%eax
c0108858:	39 c1                	cmp    %eax,%ecx
c010885a:	75 17                	jne    c0108873 <check_vma_struct+0x1d2>
c010885c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010885f:	8b 48 08             	mov    0x8(%eax),%ecx
c0108862:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108865:	89 d0                	mov    %edx,%eax
c0108867:	c1 e0 02             	shl    $0x2,%eax
c010886a:	01 d0                	add    %edx,%eax
c010886c:	83 c0 02             	add    $0x2,%eax
c010886f:	39 c1                	cmp    %eax,%ecx
c0108871:	74 24                	je     c0108897 <check_vma_struct+0x1f6>
c0108873:	c7 44 24 0c e0 71 11 	movl   $0xc01171e0,0xc(%esp)
c010887a:	c0 
c010887b:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108882:	c0 
c0108883:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010888a:	00 
c010888b:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108892:	e8 31 86 ff ff       	call   c0100ec8 <__panic>
c0108897:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010889a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010889d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01088a0:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01088a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01088a6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088ad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088b0:	0f 8e 5d ff ff ff    	jle    c0108813 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01088b6:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01088bd:	e9 cd 01 00 00       	jmp    c0108a8f <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01088c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088cc:	89 04 24             	mov    %eax,(%esp)
c01088cf:	e8 db f6 ff ff       	call   c0107faf <find_vma>
c01088d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01088d7:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01088db:	75 24                	jne    c0108901 <check_vma_struct+0x260>
c01088dd:	c7 44 24 0c 15 72 11 	movl   $0xc0117215,0xc(%esp)
c01088e4:	c0 
c01088e5:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01088ec:	c0 
c01088ed:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01088f4:	00 
c01088f5:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01088fc:	e8 c7 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108901:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108904:	83 c0 01             	add    $0x1,%eax
c0108907:	89 44 24 04          	mov    %eax,0x4(%esp)
c010890b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010890e:	89 04 24             	mov    %eax,(%esp)
c0108911:	e8 99 f6 ff ff       	call   c0107faf <find_vma>
c0108916:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108919:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010891d:	75 24                	jne    c0108943 <check_vma_struct+0x2a2>
c010891f:	c7 44 24 0c 22 72 11 	movl   $0xc0117222,0xc(%esp)
c0108926:	c0 
c0108927:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c010892e:	c0 
c010892f:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108936:	00 
c0108937:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c010893e:	e8 85 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108946:	83 c0 02             	add    $0x2,%eax
c0108949:	89 44 24 04          	mov    %eax,0x4(%esp)
c010894d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108950:	89 04 24             	mov    %eax,(%esp)
c0108953:	e8 57 f6 ff ff       	call   c0107faf <find_vma>
c0108958:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c010895b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010895f:	74 24                	je     c0108985 <check_vma_struct+0x2e4>
c0108961:	c7 44 24 0c 2f 72 11 	movl   $0xc011722f,0xc(%esp)
c0108968:	c0 
c0108969:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108970:	c0 
c0108971:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108978:	00 
c0108979:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108980:	e8 43 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108985:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108988:	83 c0 03             	add    $0x3,%eax
c010898b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010898f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108992:	89 04 24             	mov    %eax,(%esp)
c0108995:	e8 15 f6 ff ff       	call   c0107faf <find_vma>
c010899a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c010899d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01089a1:	74 24                	je     c01089c7 <check_vma_struct+0x326>
c01089a3:	c7 44 24 0c 3c 72 11 	movl   $0xc011723c,0xc(%esp)
c01089aa:	c0 
c01089ab:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01089b2:	c0 
c01089b3:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c01089ba:	00 
c01089bb:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c01089c2:	e8 01 85 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c01089c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ca:	83 c0 04             	add    $0x4,%eax
c01089cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089d4:	89 04 24             	mov    %eax,(%esp)
c01089d7:	e8 d3 f5 ff ff       	call   c0107faf <find_vma>
c01089dc:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c01089df:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01089e3:	74 24                	je     c0108a09 <check_vma_struct+0x368>
c01089e5:	c7 44 24 0c 49 72 11 	movl   $0xc0117249,0xc(%esp)
c01089ec:	c0 
c01089ed:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c01089f4:	c0 
c01089f5:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c01089fc:	00 
c01089fd:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108a04:	e8 bf 84 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108a09:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a0c:	8b 50 04             	mov    0x4(%eax),%edx
c0108a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a12:	39 c2                	cmp    %eax,%edx
c0108a14:	75 10                	jne    c0108a26 <check_vma_struct+0x385>
c0108a16:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108a19:	8b 50 08             	mov    0x8(%eax),%edx
c0108a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a1f:	83 c0 02             	add    $0x2,%eax
c0108a22:	39 c2                	cmp    %eax,%edx
c0108a24:	74 24                	je     c0108a4a <check_vma_struct+0x3a9>
c0108a26:	c7 44 24 0c 58 72 11 	movl   $0xc0117258,0xc(%esp)
c0108a2d:	c0 
c0108a2e:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108a35:	c0 
c0108a36:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108a3d:	00 
c0108a3e:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108a45:	e8 7e 84 ff ff       	call   c0100ec8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108a4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a4d:	8b 50 04             	mov    0x4(%eax),%edx
c0108a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a53:	39 c2                	cmp    %eax,%edx
c0108a55:	75 10                	jne    c0108a67 <check_vma_struct+0x3c6>
c0108a57:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108a5a:	8b 50 08             	mov    0x8(%eax),%edx
c0108a5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a60:	83 c0 02             	add    $0x2,%eax
c0108a63:	39 c2                	cmp    %eax,%edx
c0108a65:	74 24                	je     c0108a8b <check_vma_struct+0x3ea>
c0108a67:	c7 44 24 0c 88 72 11 	movl   $0xc0117288,0xc(%esp)
c0108a6e:	c0 
c0108a6f:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108a76:	c0 
c0108a77:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108a7e:	00 
c0108a7f:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108a86:	e8 3d 84 ff ff       	call   c0100ec8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108a8b:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108a8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a92:	89 d0                	mov    %edx,%eax
c0108a94:	c1 e0 02             	shl    $0x2,%eax
c0108a97:	01 d0                	add    %edx,%eax
c0108a99:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108a9c:	0f 8d 20 fe ff ff    	jge    c01088c2 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108aa2:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108aa9:	eb 70                	jmp    c0108b1b <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ab5:	89 04 24             	mov    %eax,(%esp)
c0108ab8:	e8 f2 f4 ff ff       	call   c0107faf <find_vma>
c0108abd:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108ac0:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108ac4:	74 27                	je     c0108aed <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108ac6:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108ac9:	8b 50 08             	mov    0x8(%eax),%edx
c0108acc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108acf:	8b 40 04             	mov    0x4(%eax),%eax
c0108ad2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108ad6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108add:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ae1:	c7 04 24 b8 72 11 c0 	movl   $0xc01172b8,(%esp)
c0108ae8:	e8 78 78 ff ff       	call   c0100365 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108aed:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108af1:	74 24                	je     c0108b17 <check_vma_struct+0x476>
c0108af3:	c7 44 24 0c dd 72 11 	movl   $0xc01172dd,0xc(%esp)
c0108afa:	c0 
c0108afb:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108b02:	c0 
c0108b03:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108b0a:	00 
c0108b0b:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108b12:	e8 b1 83 ff ff       	call   c0100ec8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b17:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b1f:	79 8a                	jns    c0108aab <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108b21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b24:	89 04 24             	mov    %eax,(%esp)
c0108b27:	e8 08 f7 ff ff       	call   c0108234 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108b2c:	c7 04 24 f4 72 11 c0 	movl   $0xc01172f4,(%esp)
c0108b33:	e8 2d 78 ff ff       	call   c0100365 <cprintf>
}
c0108b38:	c9                   	leave  
c0108b39:	c3                   	ret    

c0108b3a <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108b3a:	55                   	push   %ebp
c0108b3b:	89 e5                	mov    %esp,%ebp
c0108b3d:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108b40:	e8 8e c6 ff ff       	call   c01051d3 <nr_free_pages>
c0108b45:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108b48:	e8 82 f3 ff ff       	call   c0107ecf <mm_create>
c0108b4d:	a3 0c 31 15 c0       	mov    %eax,0xc015310c
    assert(check_mm_struct != NULL);
c0108b52:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108b57:	85 c0                	test   %eax,%eax
c0108b59:	75 24                	jne    c0108b7f <check_pgfault+0x45>
c0108b5b:	c7 44 24 0c 13 73 11 	movl   $0xc0117313,0xc(%esp)
c0108b62:	c0 
c0108b63:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108b6a:	c0 
c0108b6b:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108b72:	00 
c0108b73:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108b7a:	e8 49 83 ff ff       	call   c0100ec8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108b7f:	a1 0c 31 15 c0       	mov    0xc015310c,%eax
c0108b84:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108b87:	8b 15 84 fe 14 c0    	mov    0xc014fe84,%edx
c0108b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b90:	89 50 0c             	mov    %edx,0xc(%eax)
c0108b93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b96:	8b 40 0c             	mov    0xc(%eax),%eax
c0108b99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108b9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b9f:	8b 00                	mov    (%eax),%eax
c0108ba1:	85 c0                	test   %eax,%eax
c0108ba3:	74 24                	je     c0108bc9 <check_pgfault+0x8f>
c0108ba5:	c7 44 24 0c 2b 73 11 	movl   $0xc011732b,0xc(%esp)
c0108bac:	c0 
c0108bad:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108bb4:	c0 
c0108bb5:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108bbc:	00 
c0108bbd:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108bc4:	e8 ff 82 ff ff       	call   c0100ec8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108bc9:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108bd0:	00 
c0108bd1:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108bd8:	00 
c0108bd9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108be0:	e8 8f f3 ff ff       	call   c0107f74 <vma_create>
c0108be5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108be8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108bec:	75 24                	jne    c0108c12 <check_pgfault+0xd8>
c0108bee:	c7 44 24 0c bc 71 11 	movl   $0xc01171bc,0xc(%esp)
c0108bf5:	c0 
c0108bf6:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108bfd:	c0 
c0108bfe:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108c05:	00 
c0108c06:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108c0d:	e8 b6 82 ff ff       	call   c0100ec8 <__panic>

    insert_vma_struct(mm, vma);
c0108c12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108c15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c19:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c1c:	89 04 24             	mov    %eax,(%esp)
c0108c1f:	e8 e0 f4 ff ff       	call   c0108104 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108c24:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108c2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c35:	89 04 24             	mov    %eax,(%esp)
c0108c38:	e8 72 f3 ff ff       	call   c0107faf <find_vma>
c0108c3d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108c40:	74 24                	je     c0108c66 <check_pgfault+0x12c>
c0108c42:	c7 44 24 0c 39 73 11 	movl   $0xc0117339,0xc(%esp)
c0108c49:	c0 
c0108c4a:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108c51:	c0 
c0108c52:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108c59:	00 
c0108c5a:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108c61:	e8 62 82 ff ff       	call   c0100ec8 <__panic>

    int i, sum = 0;
c0108c66:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c74:	eb 17                	jmp    c0108c8d <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108c76:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c79:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c7c:	01 d0                	add    %edx,%eax
c0108c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c81:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108c83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c86:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108c89:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c8d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108c91:	7e e3                	jle    c0108c76 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108c93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108c9a:	eb 15                	jmp    c0108cb1 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c9f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ca2:	01 d0                	add    %edx,%eax
c0108ca4:	0f b6 00             	movzbl (%eax),%eax
c0108ca7:	0f be c0             	movsbl %al,%eax
c0108caa:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108cad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108cb1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108cb5:	7e e5                	jle    c0108c9c <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108cbb:	74 24                	je     c0108ce1 <check_pgfault+0x1a7>
c0108cbd:	c7 44 24 0c 53 73 11 	movl   $0xc0117353,0xc(%esp)
c0108cc4:	c0 
c0108cc5:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108ccc:	c0 
c0108ccd:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108cd4:	00 
c0108cd5:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108cdc:	e8 e7 81 ff ff       	call   c0100ec8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108ce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ce4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108ce7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108cea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108cef:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108cf6:	89 04 24             	mov    %eax,(%esp)
c0108cf9:	e8 aa d1 ff ff       	call   c0105ea8 <page_remove>
    free_page(pa2page(pgdir[0]));
c0108cfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d01:	8b 00                	mov    (%eax),%eax
c0108d03:	89 04 24             	mov    %eax,(%esp)
c0108d06:	e8 7f f1 ff ff       	call   c0107e8a <pa2page>
c0108d0b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108d12:	00 
c0108d13:	89 04 24             	mov    %eax,(%esp)
c0108d16:	e8 86 c4 ff ff       	call   c01051a1 <free_pages>
    pgdir[0] = 0;
c0108d1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108d1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108d24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d27:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108d2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d31:	89 04 24             	mov    %eax,(%esp)
c0108d34:	e8 fb f4 ff ff       	call   c0108234 <mm_destroy>
    check_mm_struct = NULL;
c0108d39:	c7 05 0c 31 15 c0 00 	movl   $0x0,0xc015310c
c0108d40:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108d43:	e8 8b c4 ff ff       	call   c01051d3 <nr_free_pages>
c0108d48:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108d4b:	74 24                	je     c0108d71 <check_pgfault+0x237>
c0108d4d:	c7 44 24 0c 5c 73 11 	movl   $0xc011735c,0xc(%esp)
c0108d54:	c0 
c0108d55:	c7 44 24 08 cb 70 11 	movl   $0xc01170cb,0x8(%esp)
c0108d5c:	c0 
c0108d5d:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108d64:	00 
c0108d65:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108d6c:	e8 57 81 ff ff       	call   c0100ec8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108d71:	c7 04 24 83 73 11 c0 	movl   $0xc0117383,(%esp)
c0108d78:	e8 e8 75 ff ff       	call   c0100365 <cprintf>
}
c0108d7d:	c9                   	leave  
c0108d7e:	c3                   	ret    

c0108d7f <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108d7f:	55                   	push   %ebp
c0108d80:	89 e5                	mov    %esp,%ebp
c0108d82:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108d85:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108d8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d93:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d96:	89 04 24             	mov    %eax,(%esp)
c0108d99:	e8 11 f2 ff ff       	call   c0107faf <find_vma>
c0108d9e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108da1:	a1 18 ff 14 c0       	mov    0xc014ff18,%eax
c0108da6:	83 c0 01             	add    $0x1,%eax
c0108da9:	a3 18 ff 14 c0       	mov    %eax,0xc014ff18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108dae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108db2:	74 0b                	je     c0108dbf <do_pgfault+0x40>
c0108db4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108db7:	8b 40 04             	mov    0x4(%eax),%eax
c0108dba:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108dbd:	76 18                	jbe    c0108dd7 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108dbf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108dc2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dc6:	c7 04 24 a0 73 11 c0 	movl   $0xc01173a0,(%esp)
c0108dcd:	e8 93 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108dd2:	e9 f1 01 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c0108dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108dda:	83 e0 03             	and    $0x3,%eax
c0108ddd:	85 c0                	test   %eax,%eax
c0108ddf:	74 36                	je     c0108e17 <do_pgfault+0x98>
c0108de1:	83 f8 01             	cmp    $0x1,%eax
c0108de4:	74 20                	je     c0108e06 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108de6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108de9:	8b 40 0c             	mov    0xc(%eax),%eax
c0108dec:	83 e0 02             	and    $0x2,%eax
c0108def:	85 c0                	test   %eax,%eax
c0108df1:	75 11                	jne    c0108e04 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108df3:	c7 04 24 d0 73 11 c0 	movl   $0xc01173d0,(%esp)
c0108dfa:	e8 66 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108dff:	e9 c4 01 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
        }
        break;
c0108e04:	eb 2f                	jmp    c0108e35 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108e06:	c7 04 24 30 74 11 c0 	movl   $0xc0117430,(%esp)
c0108e0d:	e8 53 75 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e12:	e9 b1 01 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108e17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e1a:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e1d:	83 e0 05             	and    $0x5,%eax
c0108e20:	85 c0                	test   %eax,%eax
c0108e22:	75 11                	jne    c0108e35 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108e24:	c7 04 24 68 74 11 c0 	movl   $0xc0117468,(%esp)
c0108e2b:	e8 35 75 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108e30:	e9 93 01 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108e35:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e3f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e42:	83 e0 02             	and    $0x2,%eax
c0108e45:	85 c0                	test   %eax,%eax
c0108e47:	74 04                	je     c0108e4d <do_pgfault+0xce>
        perm |= PTE_W;
c0108e49:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108e4d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e50:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108e53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e56:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108e5b:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108e5e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108e65:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            goto failed;
        }
   }
#endif
    
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e6f:	8b 40 0c             	mov    0xc(%eax),%eax
c0108e72:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108e79:	00 
c0108e7a:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e7d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e81:	89 04 24             	mov    %eax,(%esp)
c0108e84:	e8 14 ca ff ff       	call   c010589d <get_pte>
c0108e89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108e8c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108e90:	75 11                	jne    c0108ea3 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108e92:	c7 04 24 cb 74 11 c0 	movl   $0xc01174cb,(%esp)
c0108e99:	e8 c7 74 ff ff       	call   c0100365 <cprintf>
        goto failed;
c0108e9e:	e9 25 01 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { 
c0108ea3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ea6:	8b 00                	mov    (%eax),%eax
c0108ea8:	85 c0                	test   %eax,%eax
c0108eaa:	75 35                	jne    c0108ee1 <do_pgfault+0x162>
       if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108eac:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eaf:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eb2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108eb5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108eb9:	8b 55 10             	mov    0x10(%ebp),%edx
c0108ebc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108ec0:	89 04 24             	mov    %eax,(%esp)
c0108ec3:	e8 3a d1 ff ff       	call   c0106002 <pgdir_alloc_page>
c0108ec8:	85 c0                	test   %eax,%eax
c0108eca:	0f 85 f1 00 00 00    	jne    c0108fc1 <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108ed0:	c7 04 24 ec 74 11 c0 	movl   $0xc01174ec,(%esp)
c0108ed7:	e8 89 74 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108edc:	e9 e7 00 00 00       	jmp    c0108fc8 <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c0108ee1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108ee8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eeb:	8b 00                	mov    (%eax),%eax
c0108eed:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ef1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ef4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ef8:	c7 04 24 13 75 11 c0 	movl   $0xc0117513,(%esp)
c0108eff:	e8 61 74 ff ff       	call   c0100365 <cprintf>
        if (*ptep & PTE_P) {
c0108f04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f07:	8b 00                	mov    (%eax),%eax
c0108f09:	83 e0 01             	and    $0x1,%eax
c0108f0c:	85 c0                	test   %eax,%eax
c0108f0e:	74 1c                	je     c0108f2c <do_pgfault+0x1ad>
            panic("error write a non-writable pte");           
c0108f10:	c7 44 24 08 30 75 11 	movl   $0xc0117530,0x8(%esp)
c0108f17:	c0 
c0108f18:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c0108f1f:	00 
c0108f20:	c7 04 24 e0 70 11 c0 	movl   $0xc01170e0,(%esp)
c0108f27:	e8 9c 7f ff ff       	call   c0100ec8 <__panic>
        } else{
           if(swap_init_ok) {               
c0108f2c:	a1 0c ff 14 c0       	mov    0xc014ff0c,%eax
c0108f31:	85 c0                	test   %eax,%eax
c0108f33:	74 30                	je     c0108f65 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108f35:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108f38:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108f3c:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f43:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f46:	89 04 24             	mov    %eax,(%esp)
c0108f49:	e8 4d e1 ff ff       	call   c010709b <swap_in>
c0108f4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f55:	74 26                	je     c0108f7d <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108f57:	c7 04 24 4f 75 11 c0 	movl   $0xc011754f,(%esp)
c0108f5e:	e8 02 74 ff ff       	call   c0100365 <cprintf>
                   goto failed;
c0108f63:	eb 63                	jmp    c0108fc8 <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108f65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f68:	8b 00                	mov    (%eax),%eax
c0108f6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f6e:	c7 04 24 70 75 11 c0 	movl   $0xc0117570,(%esp)
c0108f75:	e8 eb 73 ff ff       	call   c0100365 <cprintf>
            goto failed;
c0108f7a:	90                   	nop
c0108f7b:	eb 4b                	jmp    c0108fc8 <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0108f7d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f80:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f83:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f86:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108f89:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108f8d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108f90:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108f94:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f98:	89 04 24             	mov    %eax,(%esp)
c0108f9b:	e8 4c cf ff ff       	call   c0105eec <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0108fa0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fa3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108faa:	00 
c0108fab:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108faf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb9:	89 04 24             	mov    %eax,(%esp)
c0108fbc:	e8 11 df ff ff       	call   c0106ed2 <swap_map_swappable>
   }
   ret = 0;
c0108fc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108fcb:	c9                   	leave  
c0108fcc:	c3                   	ret    

c0108fcd <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108fcd:	55                   	push   %ebp
c0108fce:	89 e5                	mov    %esp,%ebp
c0108fd0:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108fd3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108fd7:	0f 84 e0 00 00 00    	je     c01090bd <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108fdd:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108fe4:	76 1c                	jbe    c0109002 <user_mem_check+0x35>
c0108fe6:	8b 45 10             	mov    0x10(%ebp),%eax
c0108fe9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108fec:	01 d0                	add    %edx,%eax
c0108fee:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ff1:	76 0f                	jbe    c0109002 <user_mem_check+0x35>
c0108ff3:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ff6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108ff9:	01 d0                	add    %edx,%eax
c0108ffb:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0109000:	76 0a                	jbe    c010900c <user_mem_check+0x3f>
            return 0;
c0109002:	b8 00 00 00 00       	mov    $0x0,%eax
c0109007:	e9 e2 00 00 00       	jmp    c01090ee <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010900c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010900f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109012:	8b 45 10             	mov    0x10(%ebp),%eax
c0109015:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109018:	01 d0                	add    %edx,%eax
c010901a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010901d:	e9 88 00 00 00       	jmp    c01090aa <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0109022:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109025:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109029:	8b 45 08             	mov    0x8(%ebp),%eax
c010902c:	89 04 24             	mov    %eax,(%esp)
c010902f:	e8 7b ef ff ff       	call   c0107faf <find_vma>
c0109034:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109037:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010903b:	74 0b                	je     c0109048 <user_mem_check+0x7b>
c010903d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109040:	8b 40 04             	mov    0x4(%eax),%eax
c0109043:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109046:	76 0a                	jbe    c0109052 <user_mem_check+0x85>
                return 0;
c0109048:	b8 00 00 00 00       	mov    $0x0,%eax
c010904d:	e9 9c 00 00 00       	jmp    c01090ee <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0109052:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109055:	8b 50 0c             	mov    0xc(%eax),%edx
c0109058:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010905c:	74 07                	je     c0109065 <user_mem_check+0x98>
c010905e:	b8 02 00 00 00       	mov    $0x2,%eax
c0109063:	eb 05                	jmp    c010906a <user_mem_check+0x9d>
c0109065:	b8 01 00 00 00       	mov    $0x1,%eax
c010906a:	21 d0                	and    %edx,%eax
c010906c:	85 c0                	test   %eax,%eax
c010906e:	75 07                	jne    c0109077 <user_mem_check+0xaa>
                return 0;
c0109070:	b8 00 00 00 00       	mov    $0x0,%eax
c0109075:	eb 77                	jmp    c01090ee <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109077:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010907b:	74 24                	je     c01090a1 <user_mem_check+0xd4>
c010907d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109080:	8b 40 0c             	mov    0xc(%eax),%eax
c0109083:	83 e0 08             	and    $0x8,%eax
c0109086:	85 c0                	test   %eax,%eax
c0109088:	74 17                	je     c01090a1 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010908a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010908d:	8b 40 04             	mov    0x4(%eax),%eax
c0109090:	05 00 10 00 00       	add    $0x1000,%eax
c0109095:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109098:	76 07                	jbe    c01090a1 <user_mem_check+0xd4>
                    return 0;
c010909a:	b8 00 00 00 00       	mov    $0x0,%eax
c010909f:	eb 4d                	jmp    c01090ee <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c01090a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090a4:	8b 40 08             	mov    0x8(%eax),%eax
c01090a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c01090aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090ad:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01090b0:	0f 82 6c ff ff ff    	jb     c0109022 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c01090b6:	b8 01 00 00 00       	mov    $0x1,%eax
c01090bb:	eb 31                	jmp    c01090ee <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c01090bd:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c01090c4:	76 23                	jbe    c01090e9 <user_mem_check+0x11c>
c01090c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01090c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090cc:	01 d0                	add    %edx,%eax
c01090ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01090d1:	76 16                	jbe    c01090e9 <user_mem_check+0x11c>
c01090d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01090d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090d9:	01 d0                	add    %edx,%eax
c01090db:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01090e0:	77 07                	ja     c01090e9 <user_mem_check+0x11c>
c01090e2:	b8 01 00 00 00       	mov    $0x1,%eax
c01090e7:	eb 05                	jmp    c01090ee <user_mem_check+0x121>
c01090e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01090ee:	c9                   	leave  
c01090ef:	c3                   	ret    

c01090f0 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c01090f0:	55                   	push   %ebp
c01090f1:	89 e5                	mov    %esp,%ebp
c01090f3:	83 ec 28             	sub    $0x28,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c01090f6:	8b 45 10             	mov    0x10(%ebp),%eax
c01090f9:	05 00 10 00 00       	add    $0x1000,%eax
c01090fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109101:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109104:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109109:	89 c2                	mov    %eax,%edx
c010910b:	8b 45 10             	mov    0x10(%ebp),%eax
c010910e:	29 c2                	sub    %eax,%edx
c0109110:	89 d0                	mov    %edx,%eax
c0109112:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0109115:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109118:	3b 45 14             	cmp    0x14(%ebp),%eax
c010911b:	76 06                	jbe    c0109123 <copy_string+0x33>
            part = maxn;
c010911d:	8b 45 14             	mov    0x14(%ebp),%eax
c0109120:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c0109123:	8b 45 10             	mov    0x10(%ebp),%eax
c0109126:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010912d:	00 
c010912e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109131:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109135:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109139:	8b 45 08             	mov    0x8(%ebp),%eax
c010913c:	89 04 24             	mov    %eax,(%esp)
c010913f:	e8 89 fe ff ff       	call   c0108fcd <user_mem_check>
c0109144:	85 c0                	test   %eax,%eax
c0109146:	75 0a                	jne    c0109152 <copy_string+0x62>
            return 0;
c0109148:	b8 00 00 00 00       	mov    $0x0,%eax
c010914d:	e9 86 00 00 00       	jmp    c01091d8 <copy_string+0xe8>
        }
        if ((alen = strnlen(src, part)) < part) {
c0109152:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109155:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109159:	8b 45 10             	mov    0x10(%ebp),%eax
c010915c:	89 04 24             	mov    %eax,(%esp)
c010915f:	e8 e7 bf 00 00       	call   c011514b <strnlen>
c0109164:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109167:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010916a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010916d:	73 23                	jae    c0109192 <copy_string+0xa2>
            memcpy(dst, src, alen + 1);
c010916f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109172:	83 c0 01             	add    $0x1,%eax
c0109175:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109179:	8b 45 10             	mov    0x10(%ebp),%eax
c010917c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109180:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109183:	89 04 24             	mov    %eax,(%esp)
c0109186:	e8 d0 c3 00 00       	call   c011555b <memcpy>
            return 1;
c010918b:	b8 01 00 00 00       	mov    $0x1,%eax
c0109190:	eb 46                	jmp    c01091d8 <copy_string+0xe8>
        }
        if (part == maxn) {
c0109192:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109195:	3b 45 14             	cmp    0x14(%ebp),%eax
c0109198:	75 07                	jne    c01091a1 <copy_string+0xb1>
            return 0;
c010919a:	b8 00 00 00 00       	mov    $0x0,%eax
c010919f:	eb 37                	jmp    c01091d8 <copy_string+0xe8>
        }
        memcpy(dst, src, part);
c01091a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091a4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01091ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091af:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091b2:	89 04 24             	mov    %eax,(%esp)
c01091b5:	e8 a1 c3 00 00       	call   c011555b <memcpy>
        dst += part, src += part, maxn -= part;
c01091ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091bd:	01 45 0c             	add    %eax,0xc(%ebp)
c01091c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091c3:	01 45 10             	add    %eax,0x10(%ebp)
c01091c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091c9:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c01091cc:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c01091d3:	e9 3d ff ff ff       	jmp    c0109115 <copy_string+0x25>
}
c01091d8:	c9                   	leave  
c01091d9:	c3                   	ret    

c01091da <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c01091da:	55                   	push   %ebp
c01091db:	89 e5                	mov    %esp,%ebp
c01091dd:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c01091e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e3:	8b 04 85 20 31 15 c0 	mov    -0x3feacee0(,%eax,4),%eax
c01091ea:	83 f8 01             	cmp    $0x1,%eax
c01091ed:	0f 85 85 00 00 00    	jne    c0109278 <phi_test_sema+0x9e>
c01091f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01091f6:	8d 48 04             	lea    0x4(%eax),%ecx
c01091f9:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091fe:	89 c8                	mov    %ecx,%eax
c0109200:	f7 ea                	imul   %edx
c0109202:	d1 fa                	sar    %edx
c0109204:	89 c8                	mov    %ecx,%eax
c0109206:	c1 f8 1f             	sar    $0x1f,%eax
c0109209:	29 c2                	sub    %eax,%edx
c010920b:	89 d0                	mov    %edx,%eax
c010920d:	c1 e0 02             	shl    $0x2,%eax
c0109210:	01 d0                	add    %edx,%eax
c0109212:	29 c1                	sub    %eax,%ecx
c0109214:	89 ca                	mov    %ecx,%edx
c0109216:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c010921d:	83 f8 02             	cmp    $0x2,%eax
c0109220:	74 56                	je     c0109278 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109222:	8b 45 08             	mov    0x8(%ebp),%eax
c0109225:	8d 48 01             	lea    0x1(%eax),%ecx
c0109228:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010922d:	89 c8                	mov    %ecx,%eax
c010922f:	f7 ea                	imul   %edx
c0109231:	d1 fa                	sar    %edx
c0109233:	89 c8                	mov    %ecx,%eax
c0109235:	c1 f8 1f             	sar    $0x1f,%eax
c0109238:	29 c2                	sub    %eax,%edx
c010923a:	89 d0                	mov    %edx,%eax
c010923c:	c1 e0 02             	shl    $0x2,%eax
c010923f:	01 d0                	add    %edx,%eax
c0109241:	29 c1                	sub    %eax,%ecx
c0109243:	89 ca                	mov    %ecx,%edx
c0109245:	8b 04 95 20 31 15 c0 	mov    -0x3feacee0(,%edx,4),%eax
c010924c:	83 f8 02             	cmp    $0x2,%eax
c010924f:	74 27                	je     c0109278 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c0109251:	8b 45 08             	mov    0x8(%ebp),%eax
c0109254:	c7 04 85 20 31 15 c0 	movl   $0x2,-0x3feacee0(,%eax,4)
c010925b:	02 00 00 00 
        up(&s[i]);
c010925f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109262:	89 d0                	mov    %edx,%eax
c0109264:	01 c0                	add    %eax,%eax
c0109266:	01 d0                	add    %edx,%eax
c0109268:	c1 e0 02             	shl    $0x2,%eax
c010926b:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c0109270:	89 04 24             	mov    %eax,(%esp)
c0109273:	e8 ea 09 00 00       	call   c0109c62 <up>
    }
}
c0109278:	c9                   	leave  
c0109279:	c3                   	ret    

c010927a <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010927a:	55                   	push   %ebp
c010927b:	89 e5                	mov    %esp,%ebp
c010927d:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109280:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109287:	e8 f1 09 00 00       	call   c0109c7d <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010928c:	8b 45 08             	mov    0x8(%ebp),%eax
c010928f:	c7 04 85 20 31 15 c0 	movl   $0x1,-0x3feacee0(,%eax,4)
c0109296:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010929a:	8b 45 08             	mov    0x8(%ebp),%eax
c010929d:	89 04 24             	mov    %eax,(%esp)
c01092a0:	e8 35 ff ff ff       	call   c01091da <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01092a5:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01092ac:	e8 b1 09 00 00       	call   c0109c62 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c01092b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01092b4:	89 d0                	mov    %edx,%eax
c01092b6:	01 c0                	add    %eax,%eax
c01092b8:	01 d0                	add    %edx,%eax
c01092ba:	c1 e0 02             	shl    $0x2,%eax
c01092bd:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c01092c2:	89 04 24             	mov    %eax,(%esp)
c01092c5:	e8 b3 09 00 00       	call   c0109c7d <down>
}
c01092ca:	c9                   	leave  
c01092cb:	c3                   	ret    

c01092cc <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01092cc:	55                   	push   %ebp
c01092cd:	89 e5                	mov    %esp,%ebp
c01092cf:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01092d2:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01092d9:	e8 9f 09 00 00       	call   c0109c7d <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c01092de:	8b 45 08             	mov    0x8(%ebp),%eax
c01092e1:	c7 04 85 20 31 15 c0 	movl   $0x0,-0x3feacee0(,%eax,4)
c01092e8:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01092ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ef:	8d 48 04             	lea    0x4(%eax),%ecx
c01092f2:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092f7:	89 c8                	mov    %ecx,%eax
c01092f9:	f7 ea                	imul   %edx
c01092fb:	d1 fa                	sar    %edx
c01092fd:	89 c8                	mov    %ecx,%eax
c01092ff:	c1 f8 1f             	sar    $0x1f,%eax
c0109302:	29 c2                	sub    %eax,%edx
c0109304:	89 d0                	mov    %edx,%eax
c0109306:	c1 e0 02             	shl    $0x2,%eax
c0109309:	01 d0                	add    %edx,%eax
c010930b:	29 c1                	sub    %eax,%ecx
c010930d:	89 ca                	mov    %ecx,%edx
c010930f:	89 14 24             	mov    %edx,(%esp)
c0109312:	e8 c3 fe ff ff       	call   c01091da <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109317:	8b 45 08             	mov    0x8(%ebp),%eax
c010931a:	8d 48 01             	lea    0x1(%eax),%ecx
c010931d:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109322:	89 c8                	mov    %ecx,%eax
c0109324:	f7 ea                	imul   %edx
c0109326:	d1 fa                	sar    %edx
c0109328:	89 c8                	mov    %ecx,%eax
c010932a:	c1 f8 1f             	sar    $0x1f,%eax
c010932d:	29 c2                	sub    %eax,%edx
c010932f:	89 d0                	mov    %edx,%eax
c0109331:	c1 e0 02             	shl    $0x2,%eax
c0109334:	01 d0                	add    %edx,%eax
c0109336:	29 c1                	sub    %eax,%ecx
c0109338:	89 ca                	mov    %ecx,%edx
c010933a:	89 14 24             	mov    %edx,(%esp)
c010933d:	e8 98 fe ff ff       	call   c01091da <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109342:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c0109349:	e8 14 09 00 00       	call   c0109c62 <up>
}
c010934e:	c9                   	leave  
c010934f:	c3                   	ret    

c0109350 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0109350:	55                   	push   %ebp
c0109351:	89 e5                	mov    %esp,%ebp
c0109353:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010935d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109360:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109363:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109366:	89 44 24 04          	mov    %eax,0x4(%esp)
c010936a:	c7 04 24 98 75 11 c0 	movl   $0xc0117598,(%esp)
c0109371:	e8 ef 6f ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109376:	eb 62                	jmp    c01093da <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109378:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010937b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010937f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109382:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109386:	c7 04 24 b8 75 11 c0 	movl   $0xc01175b8,(%esp)
c010938d:	e8 d3 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109392:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109399:	e8 f2 4b 00 00       	call   c010df90 <do_sleep>
        phi_take_forks_sema(i); 
c010939e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093a1:	89 04 24             	mov    %eax,(%esp)
c01093a4:	e8 d1 fe ff ff       	call   c010927a <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c01093a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093ac:	89 44 24 08          	mov    %eax,0x8(%esp)
c01093b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093b3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093b7:	c7 04 24 e8 75 11 c0 	movl   $0xc01175e8,(%esp)
c01093be:	e8 a2 6f ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c01093c3:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01093ca:	e8 c1 4b 00 00       	call   c010df90 <do_sleep>
        phi_put_forks_sema(i); 
c01093cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093d2:	89 04 24             	mov    %eax,(%esp)
c01093d5:	e8 f2 fe ff ff       	call   c01092cc <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c01093da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093dd:	8d 50 01             	lea    0x1(%eax),%edx
c01093e0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01093e3:	83 f8 03             	cmp    $0x3,%eax
c01093e6:	7e 90                	jle    c0109378 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01093e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093ef:	c7 04 24 13 76 11 c0 	movl   $0xc0117613,(%esp)
c01093f6:	e8 6a 6f ff ff       	call   c0100365 <cprintf>
    return 0;    
c01093fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109400:	c9                   	leave  
c0109401:	c3                   	ret    

c0109402 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0109402:	55                   	push   %ebp
c0109403:	89 e5                	mov    %esp,%ebp
c0109405:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0109408:	8b 45 08             	mov    0x8(%ebp),%eax
c010940b:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c0109412:	83 f8 01             	cmp    $0x1,%eax
c0109415:	0f 85 b5 00 00 00    	jne    c01094d0 <phi_test_condvar+0xce>
c010941b:	8b 45 08             	mov    0x8(%ebp),%eax
c010941e:	8d 48 04             	lea    0x4(%eax),%ecx
c0109421:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109426:	89 c8                	mov    %ecx,%eax
c0109428:	f7 ea                	imul   %edx
c010942a:	d1 fa                	sar    %edx
c010942c:	89 c8                	mov    %ecx,%eax
c010942e:	c1 f8 1f             	sar    $0x1f,%eax
c0109431:	29 c2                	sub    %eax,%edx
c0109433:	89 d0                	mov    %edx,%eax
c0109435:	c1 e0 02             	shl    $0x2,%eax
c0109438:	01 d0                	add    %edx,%eax
c010943a:	29 c1                	sub    %eax,%ecx
c010943c:	89 ca                	mov    %ecx,%edx
c010943e:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c0109445:	83 f8 02             	cmp    $0x2,%eax
c0109448:	0f 84 82 00 00 00    	je     c01094d0 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c010944e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109451:	8d 48 01             	lea    0x1(%eax),%ecx
c0109454:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109459:	89 c8                	mov    %ecx,%eax
c010945b:	f7 ea                	imul   %edx
c010945d:	d1 fa                	sar    %edx
c010945f:	89 c8                	mov    %ecx,%eax
c0109461:	c1 f8 1f             	sar    $0x1f,%eax
c0109464:	29 c2                	sub    %eax,%edx
c0109466:	89 d0                	mov    %edx,%eax
c0109468:	c1 e0 02             	shl    $0x2,%eax
c010946b:	01 d0                	add    %edx,%eax
c010946d:	29 c1                	sub    %eax,%ecx
c010946f:	89 ca                	mov    %ecx,%edx
c0109471:	8b 04 95 80 31 15 c0 	mov    -0x3feace80(,%edx,4),%eax
c0109478:	83 f8 02             	cmp    $0x2,%eax
c010947b:	74 53                	je     c01094d0 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010947d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109480:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109484:	c7 04 24 30 76 11 c0 	movl   $0xc0117630,(%esp)
c010948b:	e8 d5 6e ff ff       	call   c0100365 <cprintf>
        state_condvar[i] = EATING ;
c0109490:	8b 45 08             	mov    0x8(%ebp),%eax
c0109493:	c7 04 85 80 31 15 c0 	movl   $0x2,-0x3feace80(,%eax,4)
c010949a:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010949e:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094a5:	c7 04 24 64 76 11 c0 	movl   $0xc0117664,(%esp)
c01094ac:	e8 b4 6e ff ff       	call   c0100365 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c01094b1:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094b6:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01094b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01094bc:	89 d0                	mov    %edx,%eax
c01094be:	c1 e0 02             	shl    $0x2,%eax
c01094c1:	01 d0                	add    %edx,%eax
c01094c3:	c1 e0 02             	shl    $0x2,%eax
c01094c6:	01 c8                	add    %ecx,%eax
c01094c8:	89 04 24             	mov    %eax,(%esp)
c01094cb:	e8 8f 04 00 00       	call   c010995f <cond_signal>
    }
}
c01094d0:	c9                   	leave  
c01094d1:	c3                   	ret    

c01094d2 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c01094d2:	55                   	push   %ebp
c01094d3:	89 e5                	mov    %esp,%ebp
c01094d5:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01094d8:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01094dd:	89 04 24             	mov    %eax,(%esp)
c01094e0:	e8 98 07 00 00       	call   c0109c7d <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
	 state_condvar[i]=HUNGRY; 
c01094e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e8:	c7 04 85 80 31 15 c0 	movl   $0x1,-0x3feace80(,%eax,4)
c01094ef:	01 00 00 00 
     // try to get fork
	 phi_test_condvar(i); 
c01094f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f6:	89 04 24             	mov    %eax,(%esp)
c01094f9:	e8 04 ff ff ff       	call   c0109402 <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c01094fe:	eb 32                	jmp    c0109532 <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c0109500:	8b 45 08             	mov    0x8(%ebp),%eax
c0109503:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109507:	c7 04 24 8c 76 11 c0 	movl   $0xc011768c,(%esp)
c010950e:	e8 52 6e ff ff       	call   c0100365 <cprintf>
          cond_wait(&mtp->cv[i]);
c0109513:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109518:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010951b:	8b 55 08             	mov    0x8(%ebp),%edx
c010951e:	89 d0                	mov    %edx,%eax
c0109520:	c1 e0 02             	shl    $0x2,%eax
c0109523:	01 d0                	add    %edx,%eax
c0109525:	c1 e0 02             	shl    $0x2,%eax
c0109528:	01 c8                	add    %ecx,%eax
c010952a:	89 04 24             	mov    %eax,(%esp)
c010952d:	e8 cd 04 00 00       	call   c01099ff <cond_wait>
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
	 state_condvar[i]=HUNGRY; 
     // try to get fork
	 phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c0109532:	8b 45 08             	mov    0x8(%ebp),%eax
c0109535:	8b 04 85 80 31 15 c0 	mov    -0x3feace80(,%eax,4),%eax
c010953c:	83 f8 02             	cmp    $0x2,%eax
c010953f:	75 bf                	jne    c0109500 <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0109541:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109546:	8b 40 18             	mov    0x18(%eax),%eax
c0109549:	85 c0                	test   %eax,%eax
c010954b:	7e 12                	jle    c010955f <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c010954d:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109552:	83 c0 0c             	add    $0xc,%eax
c0109555:	89 04 24             	mov    %eax,(%esp)
c0109558:	e8 05 07 00 00       	call   c0109c62 <up>
c010955d:	eb 0d                	jmp    c010956c <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c010955f:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109564:	89 04 24             	mov    %eax,(%esp)
c0109567:	e8 f6 06 00 00       	call   c0109c62 <up>
}
c010956c:	c9                   	leave  
c010956d:	c3                   	ret    

c010956e <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c010956e:	55                   	push   %ebp
c010956f:	89 e5                	mov    %esp,%ebp
c0109571:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109574:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109579:	89 04 24             	mov    %eax,(%esp)
c010957c:	e8 fc 06 00 00       	call   c0109c7d <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
	 state_condvar[i]=THINKING;
c0109581:	8b 45 08             	mov    0x8(%ebp),%eax
c0109584:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c010958b:	00 00 00 00 
     // test left and right neighbors
	 phi_test_condvar(LEFT);
c010958f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109592:	8d 48 04             	lea    0x4(%eax),%ecx
c0109595:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010959a:	89 c8                	mov    %ecx,%eax
c010959c:	f7 ea                	imul   %edx
c010959e:	d1 fa                	sar    %edx
c01095a0:	89 c8                	mov    %ecx,%eax
c01095a2:	c1 f8 1f             	sar    $0x1f,%eax
c01095a5:	29 c2                	sub    %eax,%edx
c01095a7:	89 d0                	mov    %edx,%eax
c01095a9:	c1 e0 02             	shl    $0x2,%eax
c01095ac:	01 d0                	add    %edx,%eax
c01095ae:	29 c1                	sub    %eax,%ecx
c01095b0:	89 ca                	mov    %ecx,%edx
c01095b2:	89 14 24             	mov    %edx,(%esp)
c01095b5:	e8 48 fe ff ff       	call   c0109402 <phi_test_condvar>
      phi_test_condvar(RIGHT);
c01095ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01095bd:	8d 48 01             	lea    0x1(%eax),%ecx
c01095c0:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095c5:	89 c8                	mov    %ecx,%eax
c01095c7:	f7 ea                	imul   %edx
c01095c9:	d1 fa                	sar    %edx
c01095cb:	89 c8                	mov    %ecx,%eax
c01095cd:	c1 f8 1f             	sar    $0x1f,%eax
c01095d0:	29 c2                	sub    %eax,%edx
c01095d2:	89 d0                	mov    %edx,%eax
c01095d4:	c1 e0 02             	shl    $0x2,%eax
c01095d7:	01 d0                	add    %edx,%eax
c01095d9:	29 c1                	sub    %eax,%ecx
c01095db:	89 ca                	mov    %ecx,%edx
c01095dd:	89 14 24             	mov    %edx,(%esp)
c01095e0:	e8 1d fe ff ff       	call   c0109402 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01095e5:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095ea:	8b 40 18             	mov    0x18(%eax),%eax
c01095ed:	85 c0                	test   %eax,%eax
c01095ef:	7e 12                	jle    c0109603 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c01095f1:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c01095f6:	83 c0 0c             	add    $0xc,%eax
c01095f9:	89 04 24             	mov    %eax,(%esp)
c01095fc:	e8 61 06 00 00       	call   c0109c62 <up>
c0109601:	eb 0d                	jmp    c0109610 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0109603:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c0109608:	89 04 24             	mov    %eax,(%esp)
c010960b:	e8 52 06 00 00       	call   c0109c62 <up>
}
c0109610:	c9                   	leave  
c0109611:	c3                   	ret    

c0109612 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109612:	55                   	push   %ebp
c0109613:	89 e5                	mov    %esp,%ebp
c0109615:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109618:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010961f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109622:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109625:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109628:	89 44 24 04          	mov    %eax,0x4(%esp)
c010962c:	c7 04 24 c8 76 11 c0 	movl   $0xc01176c8,(%esp)
c0109633:	e8 2d 6d ff ff       	call   c0100365 <cprintf>
    while(iter++<TIMES)
c0109638:	eb 62                	jmp    c010969c <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c010963a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010963d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109644:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109648:	c7 04 24 e8 76 11 c0 	movl   $0xc01176e8,(%esp)
c010964f:	e8 11 6d ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109654:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010965b:	e8 30 49 00 00       	call   c010df90 <do_sleep>
        phi_take_forks_condvar(i); 
c0109660:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109663:	89 04 24             	mov    %eax,(%esp)
c0109666:	e8 67 fe ff ff       	call   c01094d2 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c010966b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010966e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109672:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109675:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109679:	c7 04 24 18 77 11 c0 	movl   $0xc0117718,(%esp)
c0109680:	e8 e0 6c ff ff       	call   c0100365 <cprintf>
        do_sleep(SLEEP_TIME);
c0109685:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010968c:	e8 ff 48 00 00       	call   c010df90 <do_sleep>
        phi_put_forks_condvar(i); 
c0109691:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109694:	89 04 24             	mov    %eax,(%esp)
c0109697:	e8 d2 fe ff ff       	call   c010956e <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010969c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010969f:	8d 50 01             	lea    0x1(%eax),%edx
c01096a2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01096a5:	83 f8 03             	cmp    $0x3,%eax
c01096a8:	7e 90                	jle    c010963a <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c01096aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b1:	c7 04 24 48 77 11 c0 	movl   $0xc0117748,(%esp)
c01096b8:	e8 a8 6c ff ff       	call   c0100365 <cprintf>
    return 0;    
c01096bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01096c2:	c9                   	leave  
c01096c3:	c3                   	ret    

c01096c4 <check_sync>:

void check_sync(void){
c01096c4:	55                   	push   %ebp
c01096c5:	89 e5                	mov    %esp,%ebp
c01096c7:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01096ca:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096d1:	00 
c01096d2:	c7 04 24 48 31 15 c0 	movl   $0xc0153148,(%esp)
c01096d9:	e8 11 04 00 00       	call   c0109aef <sem_init>
    for(i=0;i<N;i++){
c01096de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01096e5:	e9 94 00 00 00       	jmp    c010977e <check_sync+0xba>
        sem_init(&s[i], 0);
c01096ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096ed:	89 d0                	mov    %edx,%eax
c01096ef:	01 c0                	add    %eax,%eax
c01096f1:	01 d0                	add    %edx,%eax
c01096f3:	c1 e0 02             	shl    $0x2,%eax
c01096f6:	05 c0 31 15 c0       	add    $0xc01531c0,%eax
c01096fb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109702:	00 
c0109703:	89 04 24             	mov    %eax,(%esp)
c0109706:	e8 e4 03 00 00       	call   c0109aef <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c010970b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010970e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109715:	00 
c0109716:	89 44 24 04          	mov    %eax,0x4(%esp)
c010971a:	c7 04 24 50 93 10 c0 	movl   $0xc0109350,(%esp)
c0109721:	e8 f3 2d 00 00       	call   c010c519 <kernel_thread>
c0109726:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109729:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010972d:	7f 1c                	jg     c010974b <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c010972f:	c7 44 24 08 68 77 11 	movl   $0xc0117768,0x8(%esp)
c0109736:	c0 
c0109737:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c010973e:	00 
c010973f:	c7 04 24 9a 77 11 c0 	movl   $0xc011779a,(%esp)
c0109746:	e8 7d 77 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c010974b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010974e:	89 04 24             	mov    %eax,(%esp)
c0109751:	e8 4f 2d 00 00       	call   c010c4a5 <find_proc>
c0109756:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109759:	89 04 95 94 31 15 c0 	mov    %eax,-0x3feace6c(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109763:	8b 04 85 94 31 15 c0 	mov    -0x3feace6c(,%eax,4),%eax
c010976a:	c7 44 24 04 b1 77 11 	movl   $0xc01177b1,0x4(%esp)
c0109771:	c0 
c0109772:	89 04 24             	mov    %eax,(%esp)
c0109775:	e8 12 29 00 00       	call   c010c08c <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c010977a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010977e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109782:	0f 8e 62 ff ff ff    	jle    c01096ea <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109788:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010978f:	00 
c0109790:	c7 04 24 60 31 15 c0 	movl   $0xc0153160,(%esp)
c0109797:	e8 99 00 00 00       	call   c0109835 <monitor_init>
    for(i=0;i<N;i++){
c010979c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097a3:	e9 81 00 00 00       	jmp    c0109829 <check_sync+0x165>
        state_condvar[i]=THINKING;
c01097a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097ab:	c7 04 85 80 31 15 c0 	movl   $0x0,-0x3feace80(,%eax,4)
c01097b2:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c01097b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097b9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01097c0:	00 
c01097c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097c5:	c7 04 24 12 96 10 c0 	movl   $0xc0109612,(%esp)
c01097cc:	e8 48 2d 00 00       	call   c010c519 <kernel_thread>
c01097d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01097d4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01097d8:	7f 1c                	jg     c01097f6 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01097da:	c7 44 24 08 c8 77 11 	movl   $0xc01177c8,0x8(%esp)
c01097e1:	c0 
c01097e2:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01097e9:	00 
c01097ea:	c7 04 24 9a 77 11 c0 	movl   $0xc011779a,(%esp)
c01097f1:	e8 d2 76 ff ff       	call   c0100ec8 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c01097f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097f9:	89 04 24             	mov    %eax,(%esp)
c01097fc:	e8 a4 2c 00 00       	call   c010c4a5 <find_proc>
c0109801:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109804:	89 04 95 34 31 15 c0 	mov    %eax,-0x3feacecc(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c010980b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010980e:	8b 04 85 34 31 15 c0 	mov    -0x3feacecc(,%eax,4),%eax
c0109815:	c7 44 24 04 f8 77 11 	movl   $0xc01177f8,0x4(%esp)
c010981c:	c0 
c010981d:	89 04 24             	mov    %eax,(%esp)
c0109820:	e8 67 28 00 00       	call   c010c08c <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109825:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109829:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010982d:	0f 8e 75 ff ff ff    	jle    c01097a8 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109833:	c9                   	leave  
c0109834:	c3                   	ret    

c0109835 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109835:	55                   	push   %ebp
c0109836:	89 e5                	mov    %esp,%ebp
c0109838:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010983b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010983f:	75 24                	jne    c0109865 <monitor_init+0x30>
c0109841:	c7 44 24 0c 14 78 11 	movl   $0xc0117814,0xc(%esp)
c0109848:	c0 
c0109849:	c7 44 24 08 1d 78 11 	movl   $0xc011781d,0x8(%esp)
c0109850:	c0 
c0109851:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109858:	00 
c0109859:	c7 04 24 32 78 11 c0 	movl   $0xc0117832,(%esp)
c0109860:	e8 63 76 ff ff       	call   c0100ec8 <__panic>
    mtp->next_count = 0;
c0109865:	8b 45 08             	mov    0x8(%ebp),%eax
c0109868:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010986f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109872:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109879:	8b 45 08             	mov    0x8(%ebp),%eax
c010987c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109883:	00 
c0109884:	89 04 24             	mov    %eax,(%esp)
c0109887:	e8 63 02 00 00       	call   c0109aef <sem_init>
    sem_init(&(mtp->next), 0);
c010988c:	8b 45 08             	mov    0x8(%ebp),%eax
c010988f:	83 c0 0c             	add    $0xc,%eax
c0109892:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109899:	00 
c010989a:	89 04 24             	mov    %eax,(%esp)
c010989d:	e8 4d 02 00 00       	call   c0109aef <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01098a2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01098a5:	89 d0                	mov    %edx,%eax
c01098a7:	c1 e0 02             	shl    $0x2,%eax
c01098aa:	01 d0                	add    %edx,%eax
c01098ac:	c1 e0 02             	shl    $0x2,%eax
c01098af:	89 04 24             	mov    %eax,(%esp)
c01098b2:	e8 0a b4 ff ff       	call   c0104cc1 <kmalloc>
c01098b7:	8b 55 08             	mov    0x8(%ebp),%edx
c01098ba:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c01098bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01098c3:	85 c0                	test   %eax,%eax
c01098c5:	75 24                	jne    c01098eb <monitor_init+0xb6>
c01098c7:	c7 44 24 0c 46 78 11 	movl   $0xc0117846,0xc(%esp)
c01098ce:	c0 
c01098cf:	c7 44 24 08 1d 78 11 	movl   $0xc011781d,0x8(%esp)
c01098d6:	c0 
c01098d7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01098de:	00 
c01098df:	c7 04 24 32 78 11 c0 	movl   $0xc0117832,(%esp)
c01098e6:	e8 dd 75 ff ff       	call   c0100ec8 <__panic>
    for(i=0; i<num_cv; i++){
c01098eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01098f2:	eb 61                	jmp    c0109955 <monitor_init+0x120>
        mtp->cv[i].count=0;
c01098f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f7:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01098fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098fd:	89 d0                	mov    %edx,%eax
c01098ff:	c1 e0 02             	shl    $0x2,%eax
c0109902:	01 d0                	add    %edx,%eax
c0109904:	c1 e0 02             	shl    $0x2,%eax
c0109907:	01 c8                	add    %ecx,%eax
c0109909:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109910:	8b 45 08             	mov    0x8(%ebp),%eax
c0109913:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109916:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109919:	89 d0                	mov    %edx,%eax
c010991b:	c1 e0 02             	shl    $0x2,%eax
c010991e:	01 d0                	add    %edx,%eax
c0109920:	c1 e0 02             	shl    $0x2,%eax
c0109923:	01 c8                	add    %ecx,%eax
c0109925:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010992c:	00 
c010992d:	89 04 24             	mov    %eax,(%esp)
c0109930:	e8 ba 01 00 00       	call   c0109aef <sem_init>
        mtp->cv[i].owner=mtp;
c0109935:	8b 45 08             	mov    0x8(%ebp),%eax
c0109938:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010993b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010993e:	89 d0                	mov    %edx,%eax
c0109940:	c1 e0 02             	shl    $0x2,%eax
c0109943:	01 d0                	add    %edx,%eax
c0109945:	c1 e0 02             	shl    $0x2,%eax
c0109948:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010994b:	8b 45 08             	mov    0x8(%ebp),%eax
c010994e:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109951:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109958:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010995b:	72 97                	jb     c01098f4 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c010995d:	c9                   	leave  
c010995e:	c3                   	ret    

c010995f <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010995f:	55                   	push   %ebp
c0109960:	89 e5                	mov    %esp,%ebp
c0109962:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109965:	8b 45 08             	mov    0x8(%ebp),%eax
c0109968:	8b 40 10             	mov    0x10(%eax),%eax
c010996b:	8b 50 18             	mov    0x18(%eax),%edx
c010996e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109971:	8b 40 0c             	mov    0xc(%eax),%eax
c0109974:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109978:	89 44 24 08          	mov    %eax,0x8(%esp)
c010997c:	8b 45 08             	mov    0x8(%ebp),%eax
c010997f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109983:	c7 04 24 54 78 11 c0 	movl   $0xc0117854,(%esp)
c010998a:	e8 d6 69 ff ff       	call   c0100365 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c010998f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109992:	8b 40 0c             	mov    0xc(%eax),%eax
c0109995:	85 c0                	test   %eax,%eax
c0109997:	7e 3a                	jle    c01099d3 <cond_signal+0x74>
        cvp->owner->next_count ++;
c0109999:	8b 45 08             	mov    0x8(%ebp),%eax
c010999c:	8b 40 10             	mov    0x10(%eax),%eax
c010999f:	8b 50 18             	mov    0x18(%eax),%edx
c01099a2:	83 c2 01             	add    $0x1,%edx
c01099a5:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c01099a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ab:	89 04 24             	mov    %eax,(%esp)
c01099ae:	e8 af 02 00 00       	call   c0109c62 <up>
        down(&(cvp->owner->next));
c01099b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b6:	8b 40 10             	mov    0x10(%eax),%eax
c01099b9:	83 c0 0c             	add    $0xc,%eax
c01099bc:	89 04 24             	mov    %eax,(%esp)
c01099bf:	e8 b9 02 00 00       	call   c0109c7d <down>
        cvp->owner->next_count --;
c01099c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c7:	8b 40 10             	mov    0x10(%eax),%eax
c01099ca:	8b 50 18             	mov    0x18(%eax),%edx
c01099cd:	83 ea 01             	sub    $0x1,%edx
c01099d0:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d6:	8b 40 10             	mov    0x10(%eax),%eax
c01099d9:	8b 50 18             	mov    0x18(%eax),%edx
c01099dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01099df:	8b 40 0c             	mov    0xc(%eax),%eax
c01099e2:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099e6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099f1:	c7 04 24 9c 78 11 c0 	movl   $0xc011789c,(%esp)
c01099f8:	e8 68 69 ff ff       	call   c0100365 <cprintf>
}
c01099fd:	c9                   	leave  
c01099fe:	c3                   	ret    

c01099ff <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c01099ff:	55                   	push   %ebp
c0109a00:	89 e5                	mov    %esp,%ebp
c0109a02:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a08:	8b 40 10             	mov    0x10(%eax),%eax
c0109a0b:	8b 50 18             	mov    0x18(%eax),%edx
c0109a0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a11:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a14:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a23:	c7 04 24 e0 78 11 c0 	movl   $0xc01178e0,(%esp)
c0109a2a:	e8 36 69 ff ff       	call   c0100365 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109a2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a32:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a35:	8d 50 01             	lea    0x1(%eax),%edx
c0109a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3b:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a41:	8b 40 10             	mov    0x10(%eax),%eax
c0109a44:	8b 40 18             	mov    0x18(%eax),%eax
c0109a47:	85 c0                	test   %eax,%eax
c0109a49:	7e 13                	jle    c0109a5e <cond_wait+0x5f>
         up(&(cvp->owner->next));
c0109a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a4e:	8b 40 10             	mov    0x10(%eax),%eax
c0109a51:	83 c0 0c             	add    $0xc,%eax
c0109a54:	89 04 24             	mov    %eax,(%esp)
c0109a57:	e8 06 02 00 00       	call   c0109c62 <up>
c0109a5c:	eb 0e                	jmp    c0109a6c <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c0109a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a61:	8b 40 10             	mov    0x10(%eax),%eax
c0109a64:	89 04 24             	mov    %eax,(%esp)
c0109a67:	e8 f6 01 00 00       	call   c0109c62 <up>
      down(&(cvp->sem));
c0109a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a6f:	89 04 24             	mov    %eax,(%esp)
c0109a72:	e8 06 02 00 00       	call   c0109c7d <down>
      cvp->count --;
c0109a77:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a7d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a83:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a89:	8b 40 10             	mov    0x10(%eax),%eax
c0109a8c:	8b 50 18             	mov    0x18(%eax),%edx
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a95:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a99:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109aa4:	c7 04 24 24 79 11 c0 	movl   $0xc0117924,(%esp)
c0109aab:	e8 b5 68 ff ff       	call   c0100365 <cprintf>
}
c0109ab0:	c9                   	leave  
c0109ab1:	c3                   	ret    

c0109ab2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109ab2:	55                   	push   %ebp
c0109ab3:	89 e5                	mov    %esp,%ebp
c0109ab5:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109ab8:	9c                   	pushf  
c0109ab9:	58                   	pop    %eax
c0109aba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109abd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109ac0:	25 00 02 00 00       	and    $0x200,%eax
c0109ac5:	85 c0                	test   %eax,%eax
c0109ac7:	74 0c                	je     c0109ad5 <__intr_save+0x23>
        intr_disable();
c0109ac9:	e8 5c 86 ff ff       	call   c010212a <intr_disable>
        return 1;
c0109ace:	b8 01 00 00 00       	mov    $0x1,%eax
c0109ad3:	eb 05                	jmp    c0109ada <__intr_save+0x28>
    }
    return 0;
c0109ad5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ada:	c9                   	leave  
c0109adb:	c3                   	ret    

c0109adc <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109adc:	55                   	push   %ebp
c0109add:	89 e5                	mov    %esp,%ebp
c0109adf:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109ae2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ae6:	74 05                	je     c0109aed <__intr_restore+0x11>
        intr_enable();
c0109ae8:	e8 37 86 ff ff       	call   c0102124 <intr_enable>
    }
}
c0109aed:	c9                   	leave  
c0109aee:	c3                   	ret    

c0109aef <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109aef:	55                   	push   %ebp
c0109af0:	89 e5                	mov    %esp,%ebp
c0109af2:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109af5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109afb:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b00:	83 c0 04             	add    $0x4,%eax
c0109b03:	89 04 24             	mov    %eax,(%esp)
c0109b06:	e8 33 02 00 00       	call   c0109d3e <wait_queue_init>
}
c0109b0b:	c9                   	leave  
c0109b0c:	c3                   	ret    

c0109b0d <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109b0d:	55                   	push   %ebp
c0109b0e:	89 e5                	mov    %esp,%ebp
c0109b10:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109b13:	e8 9a ff ff ff       	call   c0109ab2 <__intr_save>
c0109b18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109b1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1e:	83 c0 04             	add    $0x4,%eax
c0109b21:	89 04 24             	mov    %eax,(%esp)
c0109b24:	e8 69 04 00 00       	call   c0109f92 <wait_queue_first>
c0109b29:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b30:	75 0f                	jne    c0109b41 <__up+0x34>
            sem->value ++;
c0109b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b35:	8b 00                	mov    (%eax),%eax
c0109b37:	8d 50 01             	lea    0x1(%eax),%edx
c0109b3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b3d:	89 10                	mov    %edx,(%eax)
c0109b3f:	eb 58                	jmp    c0109b99 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b44:	8b 00                	mov    (%eax),%eax
c0109b46:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109b4c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b4f:	74 24                	je     c0109b75 <__up+0x68>
c0109b51:	c7 44 24 0c 68 79 11 	movl   $0xc0117968,0xc(%esp)
c0109b58:	c0 
c0109b59:	c7 44 24 08 8d 79 11 	movl   $0xc011798d,0x8(%esp)
c0109b60:	c0 
c0109b61:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109b68:	00 
c0109b69:	c7 04 24 a2 79 11 c0 	movl   $0xc01179a2,(%esp)
c0109b70:	e8 53 73 ff ff       	call   c0100ec8 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109b75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b78:	8d 50 04             	lea    0x4(%eax),%edx
c0109b7b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109b82:	00 
c0109b83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b86:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109b8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b8d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109b91:	89 14 24             	mov    %edx,(%esp)
c0109b94:	e8 95 04 00 00       	call   c010a02e <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b9c:	89 04 24             	mov    %eax,(%esp)
c0109b9f:	e8 38 ff ff ff       	call   c0109adc <__intr_restore>
}
c0109ba4:	c9                   	leave  
c0109ba5:	c3                   	ret    

c0109ba6 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109ba6:	55                   	push   %ebp
c0109ba7:	89 e5                	mov    %esp,%ebp
c0109ba9:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109bac:	e8 01 ff ff ff       	call   c0109ab2 <__intr_save>
c0109bb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb7:	8b 00                	mov    (%eax),%eax
c0109bb9:	85 c0                	test   %eax,%eax
c0109bbb:	7e 22                	jle    c0109bdf <__down+0x39>
        sem->value --;
c0109bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc0:	8b 00                	mov    (%eax),%eax
c0109bc2:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109bc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc8:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bcd:	89 04 24             	mov    %eax,(%esp)
c0109bd0:	e8 07 ff ff ff       	call   c0109adc <__intr_restore>
        return 0;
c0109bd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0109bda:	e9 81 00 00 00       	jmp    c0109c60 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109bdf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109be2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be8:	8d 50 04             	lea    0x4(%eax),%edx
c0109beb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bee:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bf5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bf9:	89 14 24             	mov    %edx,(%esp)
c0109bfc:	e8 34 05 00 00       	call   c010a135 <wait_current_set>
    local_intr_restore(intr_flag);
c0109c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c04:	89 04 24             	mov    %eax,(%esp)
c0109c07:	e8 d0 fe ff ff       	call   c0109adc <__intr_restore>

    schedule();
c0109c0c:	e8 8f 49 00 00       	call   c010e5a0 <schedule>

    local_intr_save(intr_flag);
c0109c11:	e8 9c fe ff ff       	call   c0109ab2 <__intr_save>
c0109c16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c1c:	89 04 24             	mov    %eax,(%esp)
c0109c1f:	e8 e2 03 00 00       	call   c010a006 <wait_in_queue>
c0109c24:	85 c0                	test   %eax,%eax
c0109c26:	74 15                	je     c0109c3d <__down+0x97>
c0109c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c2b:	8d 50 04             	lea    0x4(%eax),%edx
c0109c2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c31:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c35:	89 14 24             	mov    %edx,(%esp)
c0109c38:	e8 c4 01 00 00       	call   c0109e01 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c40:	89 04 24             	mov    %eax,(%esp)
c0109c43:	e8 94 fe ff ff       	call   c0109adc <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109c48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c4b:	8b 40 04             	mov    0x4(%eax),%eax
c0109c4e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109c51:	74 08                	je     c0109c5b <__down+0xb5>
        return wait->wakeup_flags;
c0109c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c56:	8b 40 04             	mov    0x4(%eax),%eax
c0109c59:	eb 05                	jmp    c0109c60 <__down+0xba>
    }
    return 0;
c0109c5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c60:	c9                   	leave  
c0109c61:	c3                   	ret    

c0109c62 <up>:

void
up(semaphore_t *sem) {
c0109c62:	55                   	push   %ebp
c0109c63:	89 e5                	mov    %esp,%ebp
c0109c65:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109c68:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c6f:	00 
c0109c70:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c73:	89 04 24             	mov    %eax,(%esp)
c0109c76:	e8 92 fe ff ff       	call   c0109b0d <__up>
}
c0109c7b:	c9                   	leave  
c0109c7c:	c3                   	ret    

c0109c7d <down>:

void
down(semaphore_t *sem) {
c0109c7d:	55                   	push   %ebp
c0109c7e:	89 e5                	mov    %esp,%ebp
c0109c80:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109c83:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c8a:	00 
c0109c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c8e:	89 04 24             	mov    %eax,(%esp)
c0109c91:	e8 10 ff ff ff       	call   c0109ba6 <__down>
c0109c96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109c99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c9d:	74 24                	je     c0109cc3 <down+0x46>
c0109c9f:	c7 44 24 0c b2 79 11 	movl   $0xc01179b2,0xc(%esp)
c0109ca6:	c0 
c0109ca7:	c7 44 24 08 8d 79 11 	movl   $0xc011798d,0x8(%esp)
c0109cae:	c0 
c0109caf:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109cb6:	00 
c0109cb7:	c7 04 24 a2 79 11 c0 	movl   $0xc01179a2,(%esp)
c0109cbe:	e8 05 72 ff ff       	call   c0100ec8 <__panic>
}
c0109cc3:	c9                   	leave  
c0109cc4:	c3                   	ret    

c0109cc5 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109cc5:	55                   	push   %ebp
c0109cc6:	89 e5                	mov    %esp,%ebp
c0109cc8:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109ccb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109cd2:	e8 db fd ff ff       	call   c0109ab2 <__intr_save>
c0109cd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cdd:	8b 00                	mov    (%eax),%eax
c0109cdf:	85 c0                	test   %eax,%eax
c0109ce1:	7e 14                	jle    c0109cf7 <try_down+0x32>
        sem->value --, ret = 1;
c0109ce3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce6:	8b 00                	mov    (%eax),%eax
c0109ce8:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109ceb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cee:	89 10                	mov    %edx,(%eax)
c0109cf0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109cf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cfa:	89 04 24             	mov    %eax,(%esp)
c0109cfd:	e8 da fd ff ff       	call   c0109adc <__intr_restore>
    return ret;
c0109d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d05:	c9                   	leave  
c0109d06:	c3                   	ret    

c0109d07 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109d07:	55                   	push   %ebp
c0109d08:	89 e5                	mov    %esp,%ebp
c0109d0a:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109d0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d10:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d13:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109d15:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d18:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109d1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d22:	83 c0 0c             	add    $0xc,%eax
c0109d25:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109d28:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d2b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d2e:	89 50 04             	mov    %edx,0x4(%eax)
c0109d31:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d34:	8b 50 04             	mov    0x4(%eax),%edx
c0109d37:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d3a:	89 10                	mov    %edx,(%eax)
}
c0109d3c:	c9                   	leave  
c0109d3d:	c3                   	ret    

c0109d3e <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109d3e:	55                   	push   %ebp
c0109d3f:	89 e5                	mov    %esp,%ebp
c0109d41:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d47:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d4d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d50:	89 50 04             	mov    %edx,0x4(%eax)
c0109d53:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d56:	8b 50 04             	mov    0x4(%eax),%edx
c0109d59:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d5c:	89 10                	mov    %edx,(%eax)
}
c0109d5e:	c9                   	leave  
c0109d5f:	c3                   	ret    

c0109d60 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109d60:	55                   	push   %ebp
c0109d61:	89 e5                	mov    %esp,%ebp
c0109d63:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109d66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d69:	83 c0 0c             	add    $0xc,%eax
c0109d6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d72:	8b 40 04             	mov    0x4(%eax),%eax
c0109d75:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d78:	0f 94 c0             	sete   %al
c0109d7b:	0f b6 c0             	movzbl %al,%eax
c0109d7e:	85 c0                	test   %eax,%eax
c0109d80:	74 09                	je     c0109d8b <wait_queue_add+0x2b>
c0109d82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d85:	8b 00                	mov    (%eax),%eax
c0109d87:	85 c0                	test   %eax,%eax
c0109d89:	75 24                	jne    c0109daf <wait_queue_add+0x4f>
c0109d8b:	c7 44 24 0c c0 79 11 	movl   $0xc01179c0,0xc(%esp)
c0109d92:	c0 
c0109d93:	c7 44 24 08 f5 79 11 	movl   $0xc01179f5,0x8(%esp)
c0109d9a:	c0 
c0109d9b:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109da2:	00 
c0109da3:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c0109daa:	e8 19 71 ff ff       	call   c0100ec8 <__panic>
    wait->wait_queue = queue;
c0109daf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109db2:	8b 55 08             	mov    0x8(%ebp),%edx
c0109db5:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109db8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dbb:	8d 50 0c             	lea    0xc(%eax),%edx
c0109dbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109dc4:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109dc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dca:	8b 00                	mov    (%eax),%eax
c0109dcc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109dcf:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109dd2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dd8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109ddb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109dde:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109de1:	89 10                	mov    %edx,(%eax)
c0109de3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109de6:	8b 10                	mov    (%eax),%edx
c0109de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109deb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109dee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109df1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109df4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109df7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109dfa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109dfd:	89 10                	mov    %edx,(%eax)
}
c0109dff:	c9                   	leave  
c0109e00:	c3                   	ret    

c0109e01 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109e01:	55                   	push   %ebp
c0109e02:	89 e5                	mov    %esp,%ebp
c0109e04:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e07:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e0a:	83 c0 0c             	add    $0xc,%eax
c0109e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e13:	8b 40 04             	mov    0x4(%eax),%eax
c0109e16:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109e19:	0f 94 c0             	sete   %al
c0109e1c:	0f b6 c0             	movzbl %al,%eax
c0109e1f:	85 c0                	test   %eax,%eax
c0109e21:	75 0b                	jne    c0109e2e <wait_queue_del+0x2d>
c0109e23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e26:	8b 40 08             	mov    0x8(%eax),%eax
c0109e29:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e2c:	74 24                	je     c0109e52 <wait_queue_del+0x51>
c0109e2e:	c7 44 24 0c 1c 7a 11 	movl   $0xc0117a1c,0xc(%esp)
c0109e35:	c0 
c0109e36:	c7 44 24 08 f5 79 11 	movl   $0xc01179f5,0x8(%esp)
c0109e3d:	c0 
c0109e3e:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109e45:	00 
c0109e46:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c0109e4d:	e8 76 70 ff ff       	call   c0100ec8 <__panic>
    list_del_init(&(wait->wait_link));
c0109e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e55:	83 c0 0c             	add    $0xc,%eax
c0109e58:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109e61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e64:	8b 40 04             	mov    0x4(%eax),%eax
c0109e67:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e6a:	8b 12                	mov    (%edx),%edx
c0109e6c:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109e72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e78:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109e7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e81:	89 10                	mov    %edx,(%eax)
c0109e83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e86:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109e89:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e8f:	89 50 04             	mov    %edx,0x4(%eax)
c0109e92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e95:	8b 50 04             	mov    0x4(%eax),%edx
c0109e98:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e9b:	89 10                	mov    %edx,(%eax)
}
c0109e9d:	c9                   	leave  
c0109e9e:	c3                   	ret    

c0109e9f <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109e9f:	55                   	push   %ebp
c0109ea0:	89 e5                	mov    %esp,%ebp
c0109ea2:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109ea5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ea8:	83 c0 0c             	add    $0xc,%eax
c0109eab:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109eae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eb1:	8b 40 04             	mov    0x4(%eax),%eax
c0109eb4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109eb7:	0f 94 c0             	sete   %al
c0109eba:	0f b6 c0             	movzbl %al,%eax
c0109ebd:	85 c0                	test   %eax,%eax
c0109ebf:	75 0b                	jne    c0109ecc <wait_queue_next+0x2d>
c0109ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ec4:	8b 40 08             	mov    0x8(%eax),%eax
c0109ec7:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109eca:	74 24                	je     c0109ef0 <wait_queue_next+0x51>
c0109ecc:	c7 44 24 0c 1c 7a 11 	movl   $0xc0117a1c,0xc(%esp)
c0109ed3:	c0 
c0109ed4:	c7 44 24 08 f5 79 11 	movl   $0xc01179f5,0x8(%esp)
c0109edb:	c0 
c0109edc:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109ee3:	00 
c0109ee4:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c0109eeb:	e8 d8 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ef3:	83 c0 0c             	add    $0xc,%eax
c0109ef6:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109ef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109efc:	8b 40 04             	mov    0x4(%eax),%eax
c0109eff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f02:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f08:	74 08                	je     c0109f12 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f0d:	83 e8 0c             	sub    $0xc,%eax
c0109f10:	eb 05                	jmp    c0109f17 <wait_queue_next+0x78>
    }
    return NULL;
c0109f12:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f17:	c9                   	leave  
c0109f18:	c3                   	ret    

c0109f19 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109f19:	55                   	push   %ebp
c0109f1a:	89 e5                	mov    %esp,%ebp
c0109f1c:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f22:	83 c0 0c             	add    $0xc,%eax
c0109f25:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f2b:	8b 40 04             	mov    0x4(%eax),%eax
c0109f2e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f31:	0f 94 c0             	sete   %al
c0109f34:	0f b6 c0             	movzbl %al,%eax
c0109f37:	85 c0                	test   %eax,%eax
c0109f39:	75 0b                	jne    c0109f46 <wait_queue_prev+0x2d>
c0109f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f3e:	8b 40 08             	mov    0x8(%eax),%eax
c0109f41:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f44:	74 24                	je     c0109f6a <wait_queue_prev+0x51>
c0109f46:	c7 44 24 0c 1c 7a 11 	movl   $0xc0117a1c,0xc(%esp)
c0109f4d:	c0 
c0109f4e:	c7 44 24 08 f5 79 11 	movl   $0xc01179f5,0x8(%esp)
c0109f55:	c0 
c0109f56:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109f5d:	00 
c0109f5e:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c0109f65:	e8 5e 6f ff ff       	call   c0100ec8 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f6d:	83 c0 0c             	add    $0xc,%eax
c0109f70:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f76:	8b 00                	mov    (%eax),%eax
c0109f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f81:	74 08                	je     c0109f8b <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f86:	83 e8 0c             	sub    $0xc,%eax
c0109f89:	eb 05                	jmp    c0109f90 <wait_queue_prev+0x77>
    }
    return NULL;
c0109f8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f90:	c9                   	leave  
c0109f91:	c3                   	ret    

c0109f92 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109f92:	55                   	push   %ebp
c0109f93:	89 e5                	mov    %esp,%ebp
c0109f95:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109f98:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f9b:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f9e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109fa1:	8b 40 04             	mov    0x4(%eax),%eax
c0109fa4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109fa7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109faa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109fad:	74 08                	je     c0109fb7 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109faf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fb2:	83 e8 0c             	sub    $0xc,%eax
c0109fb5:	eb 05                	jmp    c0109fbc <wait_queue_first+0x2a>
    }
    return NULL;
c0109fb7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fbc:	c9                   	leave  
c0109fbd:	c3                   	ret    

c0109fbe <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109fbe:	55                   	push   %ebp
c0109fbf:	89 e5                	mov    %esp,%ebp
c0109fc1:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109fc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fc7:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109fca:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109fcd:	8b 00                	mov    (%eax),%eax
c0109fcf:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109fd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fd5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109fd8:	74 08                	je     c0109fe2 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109fda:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fdd:	83 e8 0c             	sub    $0xc,%eax
c0109fe0:	eb 05                	jmp    c0109fe7 <wait_queue_last+0x29>
    }
    return NULL;
c0109fe2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fe7:	c9                   	leave  
c0109fe8:	c3                   	ret    

c0109fe9 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109fe9:	55                   	push   %ebp
c0109fea:	89 e5                	mov    %esp,%ebp
c0109fec:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109fef:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff2:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109ff5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ff8:	8b 40 04             	mov    0x4(%eax),%eax
c0109ffb:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109ffe:	0f 94 c0             	sete   %al
c010a001:	0f b6 c0             	movzbl %al,%eax
}
c010a004:	c9                   	leave  
c010a005:	c3                   	ret    

c010a006 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a006:	55                   	push   %ebp
c010a007:	89 e5                	mov    %esp,%ebp
c010a009:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a00c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a00f:	83 c0 0c             	add    $0xc,%eax
c010a012:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a015:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a018:	8b 40 04             	mov    0x4(%eax),%eax
c010a01b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a01e:	0f 94 c0             	sete   %al
c010a021:	0f b6 c0             	movzbl %al,%eax
c010a024:	85 c0                	test   %eax,%eax
c010a026:	0f 94 c0             	sete   %al
c010a029:	0f b6 c0             	movzbl %al,%eax
}
c010a02c:	c9                   	leave  
c010a02d:	c3                   	ret    

c010a02e <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a02e:	55                   	push   %ebp
c010a02f:	89 e5                	mov    %esp,%ebp
c010a031:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a034:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a038:	74 12                	je     c010a04c <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a03a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a03d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a041:	8b 45 08             	mov    0x8(%ebp),%eax
c010a044:	89 04 24             	mov    %eax,(%esp)
c010a047:	e8 b5 fd ff ff       	call   c0109e01 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a04c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a04f:	8b 55 10             	mov    0x10(%ebp),%edx
c010a052:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a055:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a058:	8b 00                	mov    (%eax),%eax
c010a05a:	89 04 24             	mov    %eax,(%esp)
c010a05d:	e8 a2 44 00 00       	call   c010e504 <wakeup_proc>
}
c010a062:	c9                   	leave  
c010a063:	c3                   	ret    

c010a064 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a064:	55                   	push   %ebp
c010a065:	89 e5                	mov    %esp,%ebp
c010a067:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a06a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a06d:	89 04 24             	mov    %eax,(%esp)
c010a070:	e8 1d ff ff ff       	call   c0109f92 <wait_queue_first>
c010a075:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a078:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a07c:	74 20                	je     c010a09e <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a07e:	8b 45 10             	mov    0x10(%ebp),%eax
c010a081:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a085:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a088:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a08c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a08f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a093:	8b 45 08             	mov    0x8(%ebp),%eax
c010a096:	89 04 24             	mov    %eax,(%esp)
c010a099:	e8 90 ff ff ff       	call   c010a02e <wakeup_wait>
    }
}
c010a09e:	c9                   	leave  
c010a09f:	c3                   	ret    

c010a0a0 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a0a0:	55                   	push   %ebp
c010a0a1:	89 e5                	mov    %esp,%ebp
c010a0a3:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a0a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0a9:	89 04 24             	mov    %eax,(%esp)
c010a0ac:	e8 e1 fe ff ff       	call   c0109f92 <wait_queue_first>
c010a0b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0b8:	74 79                	je     c010a133 <wakeup_queue+0x93>
        if (del) {
c010a0ba:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a0be:	74 37                	je     c010a0f7 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a0c0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a0c7:	00 
c010a0c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0cb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0d9:	89 04 24             	mov    %eax,(%esp)
c010a0dc:	e8 4d ff ff ff       	call   c010a02e <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a0e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0e4:	89 04 24             	mov    %eax,(%esp)
c010a0e7:	e8 a6 fe ff ff       	call   c0109f92 <wait_queue_first>
c010a0ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0f3:	75 cb                	jne    c010a0c0 <wakeup_queue+0x20>
c010a0f5:	eb 3c                	jmp    c010a133 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a0f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a0fe:	00 
c010a0ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a102:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a109:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a10d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a110:	89 04 24             	mov    %eax,(%esp)
c010a113:	e8 16 ff ff ff       	call   c010a02e <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a11b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a11f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a122:	89 04 24             	mov    %eax,(%esp)
c010a125:	e8 75 fd ff ff       	call   c0109e9f <wait_queue_next>
c010a12a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a12d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a131:	75 c4                	jne    c010a0f7 <wakeup_queue+0x57>
        }
    }
}
c010a133:	c9                   	leave  
c010a134:	c3                   	ret    

c010a135 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a135:	55                   	push   %ebp
c010a136:	89 e5                	mov    %esp,%ebp
c010a138:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a13b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a140:	85 c0                	test   %eax,%eax
c010a142:	75 24                	jne    c010a168 <wait_current_set+0x33>
c010a144:	c7 44 24 0c 59 7a 11 	movl   $0xc0117a59,0xc(%esp)
c010a14b:	c0 
c010a14c:	c7 44 24 08 f5 79 11 	movl   $0xc01179f5,0x8(%esp)
c010a153:	c0 
c010a154:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a15b:	00 
c010a15c:	c7 04 24 0a 7a 11 c0 	movl   $0xc0117a0a,(%esp)
c010a163:	e8 60 6d ff ff       	call   c0100ec8 <__panic>
    wait_init(wait, current);
c010a168:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a16d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a171:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a174:	89 04 24             	mov    %eax,(%esp)
c010a177:	e8 8b fb ff ff       	call   c0109d07 <wait_init>
    current->state = PROC_SLEEPING;
c010a17c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a181:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a187:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a18c:	8b 55 10             	mov    0x10(%ebp),%edx
c010a18f:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a195:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a198:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a19c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19f:	89 04 24             	mov    %eax,(%esp)
c010a1a2:	e8 b9 fb ff ff       	call   c0109d60 <wait_queue_add>
}
c010a1a7:	c9                   	leave  
c010a1a8:	c3                   	ret    

c010a1a9 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a1a9:	55                   	push   %ebp
c010a1aa:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a1ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1af:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a1b2:	5d                   	pop    %ebp
c010a1b3:	c3                   	ret    

c010a1b4 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a1b4:	55                   	push   %ebp
c010a1b5:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a1b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ba:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1bd:	5d                   	pop    %ebp
c010a1be:	c3                   	ret    

c010a1bf <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a1bf:	55                   	push   %ebp
c010a1c0:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a1c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c5:	8b 40 18             	mov    0x18(%eax),%eax
c010a1c8:	8d 50 01             	lea    0x1(%eax),%edx
c010a1cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ce:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d4:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1d7:	5d                   	pop    %ebp
c010a1d8:	c3                   	ret    

c010a1d9 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a1d9:	55                   	push   %ebp
c010a1da:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a1dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1df:	8b 40 18             	mov    0x18(%eax),%eax
c010a1e2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a1e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e8:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a1eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ee:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a1f1:	5d                   	pop    %ebp
c010a1f2:	c3                   	ret    

c010a1f3 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a1f3:	55                   	push   %ebp
c010a1f4:	89 e5                	mov    %esp,%ebp
c010a1f6:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = current->filesp;
c010a1f9:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010a1fe:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a204:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a207:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a20b:	74 0f                	je     c010a21c <get_fd_array+0x29>
c010a20d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a210:	89 04 24             	mov    %eax,(%esp)
c010a213:	e8 91 ff ff ff       	call   c010a1a9 <files_count>
c010a218:	85 c0                	test   %eax,%eax
c010a21a:	7f 24                	jg     c010a240 <get_fd_array+0x4d>
c010a21c:	c7 44 24 0c 6c 7a 11 	movl   $0xc0117a6c,0xc(%esp)
c010a223:	c0 
c010a224:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a22b:	c0 
c010a22c:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a233:	00 
c010a234:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a23b:	e8 88 6c ff ff       	call   c0100ec8 <__panic>
    return filesp->fd_array;
c010a240:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a243:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a246:	c9                   	leave  
c010a247:	c3                   	ret    

c010a248 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a248:	55                   	push   %ebp
c010a249:	89 e5                	mov    %esp,%ebp
c010a24b:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a24e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a251:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a254:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a25b:	eb 24                	jmp    c010a281 <fd_array_init+0x39>
        file->open_count = 0;
c010a25d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a260:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a267:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a26a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a270:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a273:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a276:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a279:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a27d:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a281:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a284:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a289:	76 d2                	jbe    c010a25d <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a28b:	c9                   	leave  
c010a28c:	c3                   	ret    

c010a28d <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a28d:	55                   	push   %ebp
c010a28e:	89 e5                	mov    %esp,%ebp
c010a290:	83 ec 28             	sub    $0x28,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a293:	e8 5b ff ff ff       	call   c010a1f3 <get_fd_array>
c010a298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a29b:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a2a2:	75 30                	jne    c010a2d4 <fd_array_alloc+0x47>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2a4:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a2ab:	eb 13                	jmp    c010a2c0 <fd_array_alloc+0x33>
            if (file->status == FD_NONE) {
c010a2ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2b0:	8b 00                	mov    (%eax),%eax
c010a2b2:	85 c0                	test   %eax,%eax
c010a2b4:	75 02                	jne    c010a2b8 <fd_array_alloc+0x2b>
                goto found;
c010a2b6:	eb 59                	jmp    c010a311 <fd_array_alloc+0x84>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a2b8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a2bc:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a2c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c3:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a2c8:	76 e3                	jbe    c010a2ad <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a2ca:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a2cf:	e9 90 00 00 00       	jmp    c010a364 <fd_array_alloc+0xd7>
    }
    else {
        if (testfd(fd)) {
c010a2d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a2d8:	78 30                	js     c010a30a <fd_array_alloc+0x7d>
c010a2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2dd:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a2e2:	77 26                	ja     c010a30a <fd_array_alloc+0x7d>
            file += fd;
c010a2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2e7:	c1 e0 02             	shl    $0x2,%eax
c010a2ea:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a2f1:	29 c2                	sub    %eax,%edx
c010a2f3:	89 d0                	mov    %edx,%eax
c010a2f5:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a2f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2fb:	8b 00                	mov    (%eax),%eax
c010a2fd:	85 c0                	test   %eax,%eax
c010a2ff:	75 02                	jne    c010a303 <fd_array_alloc+0x76>
                goto found;
c010a301:	eb 0e                	jmp    c010a311 <fd_array_alloc+0x84>
            }
            return -E_BUSY;
c010a303:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a308:	eb 5a                	jmp    c010a364 <fd_array_alloc+0xd7>
        }
        return -E_INVAL;
c010a30a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a30f:	eb 53                	jmp    c010a364 <fd_array_alloc+0xd7>
    }
found:
    assert(fopen_count(file) == 0);
c010a311:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a314:	89 04 24             	mov    %eax,(%esp)
c010a317:	e8 98 fe ff ff       	call   c010a1b4 <fopen_count>
c010a31c:	85 c0                	test   %eax,%eax
c010a31e:	74 24                	je     c010a344 <fd_array_alloc+0xb7>
c010a320:	c7 44 24 0c ba 7a 11 	movl   $0xc0117aba,0xc(%esp)
c010a327:	c0 
c010a328:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a32f:	c0 
c010a330:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
c010a337:	00 
c010a338:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a33f:	e8 84 6b ff ff       	call   c0100ec8 <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a347:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a34d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a350:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a357:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a35a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a35d:	89 10                	mov    %edx,(%eax)
    return 0;
c010a35f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a364:	c9                   	leave  
c010a365:	c3                   	ret    

c010a366 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a366:	55                   	push   %ebp
c010a367:	89 e5                	mov    %esp,%ebp
c010a369:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a36c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a36f:	8b 00                	mov    (%eax),%eax
c010a371:	83 f8 01             	cmp    $0x1,%eax
c010a374:	74 2e                	je     c010a3a4 <fd_array_free+0x3e>
c010a376:	8b 45 08             	mov    0x8(%ebp),%eax
c010a379:	8b 00                	mov    (%eax),%eax
c010a37b:	83 f8 03             	cmp    $0x3,%eax
c010a37e:	74 24                	je     c010a3a4 <fd_array_free+0x3e>
c010a380:	c7 44 24 0c d4 7a 11 	movl   $0xc0117ad4,0xc(%esp)
c010a387:	c0 
c010a388:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a38f:	c0 
c010a390:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010a397:	00 
c010a398:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a39f:	e8 24 6b ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) == 0);
c010a3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3a7:	89 04 24             	mov    %eax,(%esp)
c010a3aa:	e8 05 fe ff ff       	call   c010a1b4 <fopen_count>
c010a3af:	85 c0                	test   %eax,%eax
c010a3b1:	74 24                	je     c010a3d7 <fd_array_free+0x71>
c010a3b3:	c7 44 24 0c ba 7a 11 	movl   $0xc0117aba,0xc(%esp)
c010a3ba:	c0 
c010a3bb:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a3c2:	c0 
c010a3c3:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010a3ca:	00 
c010a3cb:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a3d2:	e8 f1 6a ff ff       	call   c0100ec8 <__panic>
    if (file->status == FD_CLOSED) {
c010a3d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3da:	8b 00                	mov    (%eax),%eax
c010a3dc:	83 f8 03             	cmp    $0x3,%eax
c010a3df:	75 0e                	jne    c010a3ef <fd_array_free+0x89>
        vfs_close(file->node);
c010a3e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e4:	8b 40 14             	mov    0x14(%eax),%eax
c010a3e7:	89 04 24             	mov    %eax,(%esp)
c010a3ea:	e8 e7 5b 00 00       	call   c010ffd6 <vfs_close>
    }
    file->status = FD_NONE;
c010a3ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a3f8:	c9                   	leave  
c010a3f9:	c3                   	ret    

c010a3fa <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a3fa:	55                   	push   %ebp
c010a3fb:	89 e5                	mov    %esp,%ebp
c010a3fd:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a400:	8b 45 08             	mov    0x8(%ebp),%eax
c010a403:	8b 00                	mov    (%eax),%eax
c010a405:	83 f8 02             	cmp    $0x2,%eax
c010a408:	74 24                	je     c010a42e <fd_array_acquire+0x34>
c010a40a:	c7 44 24 0c 09 7b 11 	movl   $0xc0117b09,0xc(%esp)
c010a411:	c0 
c010a412:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a419:	c0 
c010a41a:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
c010a421:	00 
c010a422:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a429:	e8 9a 6a ff ff       	call   c0100ec8 <__panic>
    fopen_count_inc(file);
c010a42e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a431:	89 04 24             	mov    %eax,(%esp)
c010a434:	e8 86 fd ff ff       	call   c010a1bf <fopen_count_inc>
}
c010a439:	c9                   	leave  
c010a43a:	c3                   	ret    

c010a43b <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a43b:	55                   	push   %ebp
c010a43c:	89 e5                	mov    %esp,%ebp
c010a43e:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a441:	8b 45 08             	mov    0x8(%ebp),%eax
c010a444:	8b 00                	mov    (%eax),%eax
c010a446:	83 f8 02             	cmp    $0x2,%eax
c010a449:	74 2e                	je     c010a479 <fd_array_release+0x3e>
c010a44b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a44e:	8b 00                	mov    (%eax),%eax
c010a450:	83 f8 03             	cmp    $0x3,%eax
c010a453:	74 24                	je     c010a479 <fd_array_release+0x3e>
c010a455:	c7 44 24 0c 24 7b 11 	movl   $0xc0117b24,0xc(%esp)
c010a45c:	c0 
c010a45d:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a464:	c0 
c010a465:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010a46c:	00 
c010a46d:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a474:	e8 4f 6a ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a479:	8b 45 08             	mov    0x8(%ebp),%eax
c010a47c:	89 04 24             	mov    %eax,(%esp)
c010a47f:	e8 30 fd ff ff       	call   c010a1b4 <fopen_count>
c010a484:	85 c0                	test   %eax,%eax
c010a486:	7f 24                	jg     c010a4ac <fd_array_release+0x71>
c010a488:	c7 44 24 0c 5b 7b 11 	movl   $0xc0117b5b,0xc(%esp)
c010a48f:	c0 
c010a490:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a497:	c0 
c010a498:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c010a49f:	00 
c010a4a0:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a4a7:	e8 1c 6a ff ff       	call   c0100ec8 <__panic>
    if (fopen_count_dec(file) == 0) {
c010a4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4af:	89 04 24             	mov    %eax,(%esp)
c010a4b2:	e8 22 fd ff ff       	call   c010a1d9 <fopen_count_dec>
c010a4b7:	85 c0                	test   %eax,%eax
c010a4b9:	75 0b                	jne    c010a4c6 <fd_array_release+0x8b>
        fd_array_free(file);
c010a4bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4be:	89 04 24             	mov    %eax,(%esp)
c010a4c1:	e8 a0 fe ff ff       	call   c010a366 <fd_array_free>
    }
}
c010a4c6:	c9                   	leave  
c010a4c7:	c3                   	ret    

c010a4c8 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a4c8:	55                   	push   %ebp
c010a4c9:	89 e5                	mov    %esp,%ebp
c010a4cb:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a4ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4d1:	8b 00                	mov    (%eax),%eax
c010a4d3:	83 f8 01             	cmp    $0x1,%eax
c010a4d6:	75 0a                	jne    c010a4e2 <fd_array_open+0x1a>
c010a4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4db:	8b 40 14             	mov    0x14(%eax),%eax
c010a4de:	85 c0                	test   %eax,%eax
c010a4e0:	75 24                	jne    c010a506 <fd_array_open+0x3e>
c010a4e2:	c7 44 24 0c 74 7b 11 	movl   $0xc0117b74,0xc(%esp)
c010a4e9:	c0 
c010a4ea:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a4f1:	c0 
c010a4f2:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c010a4f9:	00 
c010a4fa:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a501:	e8 c2 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_OPENED;
c010a506:	8b 45 08             	mov    0x8(%ebp),%eax
c010a509:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a50f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a512:	89 04 24             	mov    %eax,(%esp)
c010a515:	e8 a5 fc ff ff       	call   c010a1bf <fopen_count_inc>
}
c010a51a:	c9                   	leave  
c010a51b:	c3                   	ret    

c010a51c <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a51c:	55                   	push   %ebp
c010a51d:	89 e5                	mov    %esp,%ebp
c010a51f:	83 ec 18             	sub    $0x18,%esp
    assert(file->status == FD_OPENED);
c010a522:	8b 45 08             	mov    0x8(%ebp),%eax
c010a525:	8b 00                	mov    (%eax),%eax
c010a527:	83 f8 02             	cmp    $0x2,%eax
c010a52a:	74 24                	je     c010a550 <fd_array_close+0x34>
c010a52c:	c7 44 24 0c 09 7b 11 	movl   $0xc0117b09,0xc(%esp)
c010a533:	c0 
c010a534:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a53b:	c0 
c010a53c:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c010a543:	00 
c010a544:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a54b:	e8 78 69 ff ff       	call   c0100ec8 <__panic>
    assert(fopen_count(file) > 0);
c010a550:	8b 45 08             	mov    0x8(%ebp),%eax
c010a553:	89 04 24             	mov    %eax,(%esp)
c010a556:	e8 59 fc ff ff       	call   c010a1b4 <fopen_count>
c010a55b:	85 c0                	test   %eax,%eax
c010a55d:	7f 24                	jg     c010a583 <fd_array_close+0x67>
c010a55f:	c7 44 24 0c 5b 7b 11 	movl   $0xc0117b5b,0xc(%esp)
c010a566:	c0 
c010a567:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a56e:	c0 
c010a56f:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010a576:	00 
c010a577:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a57e:	e8 45 69 ff ff       	call   c0100ec8 <__panic>
    file->status = FD_CLOSED;
c010a583:	8b 45 08             	mov    0x8(%ebp),%eax
c010a586:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a58c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a58f:	89 04 24             	mov    %eax,(%esp)
c010a592:	e8 42 fc ff ff       	call   c010a1d9 <fopen_count_dec>
c010a597:	85 c0                	test   %eax,%eax
c010a599:	75 0b                	jne    c010a5a6 <fd_array_close+0x8a>
        fd_array_free(file);
c010a59b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a59e:	89 04 24             	mov    %eax,(%esp)
c010a5a1:	e8 c0 fd ff ff       	call   c010a366 <fd_array_free>
    }
}
c010a5a6:	c9                   	leave  
c010a5a7:	c3                   	ret    

c010a5a8 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a5a8:	55                   	push   %ebp
c010a5a9:	89 e5                	mov    %esp,%ebp
c010a5ab:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a5ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b1:	8b 00                	mov    (%eax),%eax
c010a5b3:	83 f8 01             	cmp    $0x1,%eax
c010a5b6:	75 0a                	jne    c010a5c2 <fd_array_dup+0x1a>
c010a5b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5bb:	8b 00                	mov    (%eax),%eax
c010a5bd:	83 f8 02             	cmp    $0x2,%eax
c010a5c0:	74 24                	je     c010a5e6 <fd_array_dup+0x3e>
c010a5c2:	c7 44 24 0c a4 7b 11 	movl   $0xc0117ba4,0xc(%esp)
c010a5c9:	c0 
c010a5ca:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a5d1:	c0 
c010a5d2:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c010a5d9:	00 
c010a5da:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a5e1:	e8 e2 68 ff ff       	call   c0100ec8 <__panic>
    to->pos = from->pos;
c010a5e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5e9:	8b 50 10             	mov    0x10(%eax),%edx
c010a5ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ef:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a5f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5f5:	8b 50 04             	mov    0x4(%eax),%edx
c010a5f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5fb:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a5fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a601:	8b 50 08             	mov    0x8(%eax),%edx
c010a604:	8b 45 08             	mov    0x8(%ebp),%eax
c010a607:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a60a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a60d:	8b 40 14             	mov    0x14(%eax),%eax
c010a610:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a616:	89 04 24             	mov    %eax,(%esp)
c010a619:	e8 e7 49 00 00       	call   c010f005 <inode_ref_inc>
c010a61e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a621:	89 04 24             	mov    %eax,(%esp)
c010a624:	e8 e3 4a 00 00       	call   c010f10c <inode_open_inc>
    to->node = node;
c010a629:	8b 45 08             	mov    0x8(%ebp),%eax
c010a62c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a62f:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a632:	8b 45 08             	mov    0x8(%ebp),%eax
c010a635:	89 04 24             	mov    %eax,(%esp)
c010a638:	e8 8b fe ff ff       	call   c010a4c8 <fd_array_open>
}
c010a63d:	c9                   	leave  
c010a63e:	c3                   	ret    

c010a63f <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a63f:	55                   	push   %ebp
c010a640:	89 e5                	mov    %esp,%ebp
c010a642:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a645:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a649:	78 4b                	js     c010a696 <fd2file+0x57>
c010a64b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a64e:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a653:	77 41                	ja     c010a696 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a655:	e8 99 fb ff ff       	call   c010a1f3 <get_fd_array>
c010a65a:	89 c2                	mov    %eax,%edx
c010a65c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a65f:	c1 e0 02             	shl    $0x2,%eax
c010a662:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
c010a669:	29 c1                	sub    %eax,%ecx
c010a66b:	89 c8                	mov    %ecx,%eax
c010a66d:	01 d0                	add    %edx,%eax
c010a66f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a672:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a675:	8b 00                	mov    (%eax),%eax
c010a677:	83 f8 02             	cmp    $0x2,%eax
c010a67a:	75 1a                	jne    c010a696 <fd2file+0x57>
c010a67c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a67f:	8b 40 0c             	mov    0xc(%eax),%eax
c010a682:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a685:	75 0f                	jne    c010a696 <fd2file+0x57>
            *file_store = file;
c010a687:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a68a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a68d:	89 10                	mov    %edx,(%eax)
            return 0;
c010a68f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a694:	eb 05                	jmp    c010a69b <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a696:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a69b:	c9                   	leave  
c010a69c:	c3                   	ret    

c010a69d <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a69d:	55                   	push   %ebp
c010a69e:	89 e5                	mov    %esp,%ebp
c010a6a0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a6a3:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a6a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ad:	89 04 24             	mov    %eax,(%esp)
c010a6b0:	e8 8a ff ff ff       	call   c010a63f <fd2file>
c010a6b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6bc:	74 07                	je     c010a6c5 <file_testfd+0x28>
        return 0;
c010a6be:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6c3:	eb 33                	jmp    c010a6f8 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a6c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a6c9:	74 11                	je     c010a6dc <file_testfd+0x3f>
c010a6cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6ce:	8b 40 04             	mov    0x4(%eax),%eax
c010a6d1:	85 c0                	test   %eax,%eax
c010a6d3:	75 07                	jne    c010a6dc <file_testfd+0x3f>
        return 0;
c010a6d5:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6da:	eb 1c                	jmp    c010a6f8 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a6dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a6e0:	74 11                	je     c010a6f3 <file_testfd+0x56>
c010a6e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6e5:	8b 40 08             	mov    0x8(%eax),%eax
c010a6e8:	85 c0                	test   %eax,%eax
c010a6ea:	75 07                	jne    c010a6f3 <file_testfd+0x56>
        return 0;
c010a6ec:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6f1:	eb 05                	jmp    c010a6f8 <file_testfd+0x5b>
    }
    return 1;
c010a6f3:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a6f8:	c9                   	leave  
c010a6f9:	c3                   	ret    

c010a6fa <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a6fa:	55                   	push   %ebp
c010a6fb:	89 e5                	mov    %esp,%ebp
c010a6fd:	83 ec 48             	sub    $0x48,%esp
    bool readable = 0, writable = 0;
c010a700:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a707:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a70e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a711:	83 e0 03             	and    $0x3,%eax
c010a714:	83 f8 01             	cmp    $0x1,%eax
c010a717:	74 15                	je     c010a72e <file_open+0x34>
c010a719:	83 f8 01             	cmp    $0x1,%eax
c010a71c:	72 07                	jb     c010a725 <file_open+0x2b>
c010a71e:	83 f8 02             	cmp    $0x2,%eax
c010a721:	74 14                	je     c010a737 <file_open+0x3d>
c010a723:	eb 21                	jmp    c010a746 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a725:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a72c:	eb 22                	jmp    c010a750 <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a72e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a735:	eb 19                	jmp    c010a750 <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a737:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a73e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a741:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a744:	eb 0a                	jmp    c010a750 <file_open+0x56>
    default:
        return -E_INVAL;
c010a746:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a74b:	e9 45 01 00 00       	jmp    c010a895 <file_open+0x19b>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a750:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a753:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a757:	c7 04 24 d9 6a ff ff 	movl   $0xffff6ad9,(%esp)
c010a75e:	e8 2a fb ff ff       	call   c010a28d <fd_array_alloc>
c010a763:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a766:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a76a:	74 08                	je     c010a774 <file_open+0x7a>
        return ret;
c010a76c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a76f:	e9 21 01 00 00       	jmp    c010a895 <file_open+0x19b>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a774:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a777:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a77b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a77e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a782:	8b 45 08             	mov    0x8(%ebp),%eax
c010a785:	89 04 24             	mov    %eax,(%esp)
c010a788:	e8 59 55 00 00       	call   c010fce6 <vfs_open>
c010a78d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a790:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a794:	74 13                	je     c010a7a9 <file_open+0xaf>
        fd_array_free(file);
c010a796:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a799:	89 04 24             	mov    %eax,(%esp)
c010a79c:	e8 c5 fb ff ff       	call   c010a366 <fd_array_free>
        return ret;
c010a7a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7a4:	e9 ec 00 00 00       	jmp    c010a895 <file_open+0x19b>
    }

    file->pos = 0;
c010a7a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a7ac:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a7b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7b6:	83 e0 20             	and    $0x20,%eax
c010a7b9:	85 c0                	test   %eax,%eax
c010a7bb:	0f 84 a8 00 00 00    	je     c010a869 <file_open+0x16f>
        struct stat __stat, *stat = &__stat;
c010a7c1:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a7c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a7c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a7ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a7cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a7d1:	74 17                	je     c010a7ea <file_open+0xf0>
c010a7d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7d6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7d9:	85 c0                	test   %eax,%eax
c010a7db:	74 0d                	je     c010a7ea <file_open+0xf0>
c010a7dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7e0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a7e3:	8b 40 14             	mov    0x14(%eax),%eax
c010a7e6:	85 c0                	test   %eax,%eax
c010a7e8:	75 24                	jne    c010a80e <file_open+0x114>
c010a7ea:	c7 44 24 0c d8 7b 11 	movl   $0xc0117bd8,0xc(%esp)
c010a7f1:	c0 
c010a7f2:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a7f9:	c0 
c010a7fa:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c010a801:	00 
c010a802:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a809:	e8 ba 66 ff ff       	call   c0100ec8 <__panic>
c010a80e:	c7 44 24 04 26 7c 11 	movl   $0xc0117c26,0x4(%esp)
c010a815:	c0 
c010a816:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a819:	89 04 24             	mov    %eax,(%esp)
c010a81c:	e8 ec 49 00 00       	call   c010f20d <inode_check>
c010a821:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a824:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a827:	8b 40 14             	mov    0x14(%eax),%eax
c010a82a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a82d:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a830:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a834:	89 14 24             	mov    %edx,(%esp)
c010a837:	ff d0                	call   *%eax
c010a839:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a83c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a840:	74 1b                	je     c010a85d <file_open+0x163>
            vfs_close(node);
c010a842:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a845:	89 04 24             	mov    %eax,(%esp)
c010a848:	e8 89 57 00 00       	call   c010ffd6 <vfs_close>
            fd_array_free(file);
c010a84d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a850:	89 04 24             	mov    %eax,(%esp)
c010a853:	e8 0e fb ff ff       	call   c010a366 <fd_array_free>
            return ret;
c010a858:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a85b:	eb 38                	jmp    c010a895 <file_open+0x19b>
        }
        file->pos = stat->st_size;
c010a85d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a860:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a863:	8b 52 0c             	mov    0xc(%edx),%edx
c010a866:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a869:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a86c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a86f:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a872:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a875:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a878:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a87b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a87e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a881:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a884:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a887:	89 04 24             	mov    %eax,(%esp)
c010a88a:	e8 39 fc ff ff       	call   c010a4c8 <fd_array_open>
    return file->fd;
c010a88f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a892:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a895:	c9                   	leave  
c010a896:	c3                   	ret    

c010a897 <file_close>:

// close file
int
file_close(int fd) {
c010a897:	55                   	push   %ebp
c010a898:	89 e5                	mov    %esp,%ebp
c010a89a:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a89d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a8a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8a7:	89 04 24             	mov    %eax,(%esp)
c010a8aa:	e8 90 fd ff ff       	call   c010a63f <fd2file>
c010a8af:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8b6:	74 05                	je     c010a8bd <file_close+0x26>
        return ret;
c010a8b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8bb:	eb 10                	jmp    c010a8cd <file_close+0x36>
    }
    fd_array_close(file);
c010a8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8c0:	89 04 24             	mov    %eax,(%esp)
c010a8c3:	e8 54 fc ff ff       	call   c010a51c <fd_array_close>
    return 0;
c010a8c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a8cd:	c9                   	leave  
c010a8ce:	c3                   	ret    

c010a8cf <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a8cf:	55                   	push   %ebp
c010a8d0:	89 e5                	mov    %esp,%ebp
c010a8d2:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a8d5:	8b 45 14             	mov    0x14(%ebp),%eax
c010a8d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a8de:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a8e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8e8:	89 04 24             	mov    %eax,(%esp)
c010a8eb:	e8 4f fd ff ff       	call   c010a63f <fd2file>
c010a8f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8f7:	74 08                	je     c010a901 <file_read+0x32>
        return ret;
c010a8f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8fc:	e9 06 01 00 00       	jmp    c010aa07 <file_read+0x138>
    }
    if (!file->readable) {
c010a901:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a904:	8b 40 04             	mov    0x4(%eax),%eax
c010a907:	85 c0                	test   %eax,%eax
c010a909:	75 0a                	jne    c010a915 <file_read+0x46>
        return -E_INVAL;
c010a90b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a910:	e9 f2 00 00 00       	jmp    c010aa07 <file_read+0x138>
    }
    fd_array_acquire(file);
c010a915:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a918:	89 04 24             	mov    %eax,(%esp)
c010a91b:	e8 da fa ff ff       	call   c010a3fa <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a920:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a923:	8b 40 10             	mov    0x10(%eax),%eax
c010a926:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a92a:	8b 45 10             	mov    0x10(%ebp),%eax
c010a92d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a931:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a934:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a938:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a93b:	89 04 24             	mov    %eax,(%esp)
c010a93e:	e8 81 09 00 00       	call   c010b2c4 <iobuf_init>
c010a943:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a946:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a949:	8b 40 14             	mov    0x14(%eax),%eax
c010a94c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a94f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a953:	74 17                	je     c010a96c <file_read+0x9d>
c010a955:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a958:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a95b:	85 c0                	test   %eax,%eax
c010a95d:	74 0d                	je     c010a96c <file_read+0x9d>
c010a95f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a962:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a965:	8b 40 0c             	mov    0xc(%eax),%eax
c010a968:	85 c0                	test   %eax,%eax
c010a96a:	75 24                	jne    c010a990 <file_read+0xc1>
c010a96c:	c7 44 24 0c 2c 7c 11 	movl   $0xc0117c2c,0xc(%esp)
c010a973:	c0 
c010a974:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010a97b:	c0 
c010a97c:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c010a983:	00 
c010a984:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010a98b:	e8 38 65 ff ff       	call   c0100ec8 <__panic>
c010a990:	c7 44 24 04 79 7c 11 	movl   $0xc0117c79,0x4(%esp)
c010a997:	c0 
c010a998:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a99b:	89 04 24             	mov    %eax,(%esp)
c010a99e:	e8 6a 48 00 00       	call   c010f20d <inode_check>
c010a9a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9a9:	8b 40 0c             	mov    0xc(%eax),%eax
c010a9ac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a9af:	8b 52 14             	mov    0x14(%edx),%edx
c010a9b2:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010a9b5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010a9b9:	89 14 24             	mov    %edx,(%esp)
c010a9bc:	ff d0                	call   *%eax
c010a9be:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a9c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9c4:	8b 50 08             	mov    0x8(%eax),%edx
c010a9c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9ca:	8b 40 0c             	mov    0xc(%eax),%eax
c010a9cd:	29 c2                	sub    %eax,%edx
c010a9cf:	89 d0                	mov    %edx,%eax
c010a9d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a9d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9d7:	8b 00                	mov    (%eax),%eax
c010a9d9:	83 f8 02             	cmp    $0x2,%eax
c010a9dc:	75 13                	jne    c010a9f1 <file_read+0x122>
        file->pos += copied;
c010a9de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a9e4:	8b 52 10             	mov    0x10(%edx),%edx
c010a9e7:	89 d1                	mov    %edx,%ecx
c010a9e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9ec:	01 ca                	add    %ecx,%edx
c010a9ee:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a9f1:	8b 45 14             	mov    0x14(%ebp),%eax
c010a9f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9f7:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a9f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9fc:	89 04 24             	mov    %eax,(%esp)
c010a9ff:	e8 37 fa ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010aa04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa07:	c9                   	leave  
c010aa08:	c3                   	ret    

c010aa09 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010aa09:	55                   	push   %ebp
c010aa0a:	89 e5                	mov    %esp,%ebp
c010aa0c:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aa0f:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa18:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aa1b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa22:	89 04 24             	mov    %eax,(%esp)
c010aa25:	e8 15 fc ff ff       	call   c010a63f <fd2file>
c010aa2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa31:	74 08                	je     c010aa3b <file_write+0x32>
        return ret;
c010aa33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa36:	e9 06 01 00 00       	jmp    c010ab41 <file_write+0x138>
    }
    if (!file->writable) {
c010aa3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa3e:	8b 40 08             	mov    0x8(%eax),%eax
c010aa41:	85 c0                	test   %eax,%eax
c010aa43:	75 0a                	jne    c010aa4f <file_write+0x46>
        return -E_INVAL;
c010aa45:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aa4a:	e9 f2 00 00 00       	jmp    c010ab41 <file_write+0x138>
    }
    fd_array_acquire(file);
c010aa4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa52:	89 04 24             	mov    %eax,(%esp)
c010aa55:	e8 a0 f9 ff ff       	call   c010a3fa <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010aa5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa5d:	8b 40 10             	mov    0x10(%eax),%eax
c010aa60:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aa64:	8b 45 10             	mov    0x10(%ebp),%eax
c010aa67:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aa6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa72:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aa75:	89 04 24             	mov    %eax,(%esp)
c010aa78:	e8 47 08 00 00       	call   c010b2c4 <iobuf_init>
c010aa7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010aa80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa83:	8b 40 14             	mov    0x14(%eax),%eax
c010aa86:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aa89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aa8d:	74 17                	je     c010aaa6 <file_write+0x9d>
c010aa8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa92:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa95:	85 c0                	test   %eax,%eax
c010aa97:	74 0d                	je     c010aaa6 <file_write+0x9d>
c010aa99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa9c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa9f:	8b 40 10             	mov    0x10(%eax),%eax
c010aaa2:	85 c0                	test   %eax,%eax
c010aaa4:	75 24                	jne    c010aaca <file_write+0xc1>
c010aaa6:	c7 44 24 0c 80 7c 11 	movl   $0xc0117c80,0xc(%esp)
c010aaad:	c0 
c010aaae:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010aab5:	c0 
c010aab6:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010aabd:	00 
c010aabe:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010aac5:	e8 fe 63 ff ff       	call   c0100ec8 <__panic>
c010aaca:	c7 44 24 04 ce 7c 11 	movl   $0xc0117cce,0x4(%esp)
c010aad1:	c0 
c010aad2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aad5:	89 04 24             	mov    %eax,(%esp)
c010aad8:	e8 30 47 00 00       	call   c010f20d <inode_check>
c010aadd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aae0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aae3:	8b 40 10             	mov    0x10(%eax),%eax
c010aae6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aae9:	8b 52 14             	mov    0x14(%edx),%edx
c010aaec:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010aaef:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010aaf3:	89 14 24             	mov    %edx,(%esp)
c010aaf6:	ff d0                	call   *%eax
c010aaf8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aafb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aafe:	8b 50 08             	mov    0x8(%eax),%edx
c010ab01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab04:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab07:	29 c2                	sub    %eax,%edx
c010ab09:	89 d0                	mov    %edx,%eax
c010ab0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010ab0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab11:	8b 00                	mov    (%eax),%eax
c010ab13:	83 f8 02             	cmp    $0x2,%eax
c010ab16:	75 13                	jne    c010ab2b <file_write+0x122>
        file->pos += copied;
c010ab18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab1e:	8b 52 10             	mov    0x10(%edx),%edx
c010ab21:	89 d1                	mov    %edx,%ecx
c010ab23:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab26:	01 ca                	add    %ecx,%edx
c010ab28:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010ab2b:	8b 45 14             	mov    0x14(%ebp),%eax
c010ab2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab31:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010ab33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab36:	89 04 24             	mov    %eax,(%esp)
c010ab39:	e8 fd f8 ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010ab3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ab41:	c9                   	leave  
c010ab42:	c3                   	ret    

c010ab43 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010ab43:	55                   	push   %ebp
c010ab44:	89 e5                	mov    %esp,%ebp
c010ab46:	83 ec 48             	sub    $0x48,%esp
    struct stat __stat, *stat = &__stat;
c010ab49:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010ab4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ab4f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010ab52:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ab56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab59:	89 04 24             	mov    %eax,(%esp)
c010ab5c:	e8 de fa ff ff       	call   c010a63f <fd2file>
c010ab61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab68:	74 08                	je     c010ab72 <file_seek+0x2f>
        return ret;
c010ab6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab6d:	e9 72 01 00 00       	jmp    c010ace4 <file_seek+0x1a1>
    }
    fd_array_acquire(file);
c010ab72:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab75:	89 04 24             	mov    %eax,(%esp)
c010ab78:	e8 7d f8 ff ff       	call   c010a3fa <fd_array_acquire>

    switch (whence) {
c010ab7d:	8b 45 10             	mov    0x10(%ebp),%eax
c010ab80:	83 f8 01             	cmp    $0x1,%eax
c010ab83:	74 12                	je     c010ab97 <file_seek+0x54>
c010ab85:	83 f8 02             	cmp    $0x2,%eax
c010ab88:	74 1b                	je     c010aba5 <file_seek+0x62>
c010ab8a:	85 c0                	test   %eax,%eax
c010ab8c:	0f 84 af 00 00 00    	je     c010ac41 <file_seek+0xfe>
c010ab92:	e9 a1 00 00 00       	jmp    c010ac38 <file_seek+0xf5>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ab97:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ab9a:	8b 40 10             	mov    0x10(%eax),%eax
c010ab9d:	01 45 0c             	add    %eax,0xc(%ebp)
c010aba0:	e9 9d 00 00 00       	jmp    c010ac42 <file_seek+0xff>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010aba5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010aba8:	8b 40 14             	mov    0x14(%eax),%eax
c010abab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010abae:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010abb2:	74 17                	je     c010abcb <file_seek+0x88>
c010abb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abb7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abba:	85 c0                	test   %eax,%eax
c010abbc:	74 0d                	je     c010abcb <file_seek+0x88>
c010abbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abc1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abc4:	8b 40 14             	mov    0x14(%eax),%eax
c010abc7:	85 c0                	test   %eax,%eax
c010abc9:	75 24                	jne    c010abef <file_seek+0xac>
c010abcb:	c7 44 24 0c d8 7b 11 	movl   $0xc0117bd8,0xc(%esp)
c010abd2:	c0 
c010abd3:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010abda:	c0 
c010abdb:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c010abe2:	00 
c010abe3:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010abea:	e8 d9 62 ff ff       	call   c0100ec8 <__panic>
c010abef:	c7 44 24 04 26 7c 11 	movl   $0xc0117c26,0x4(%esp)
c010abf6:	c0 
c010abf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abfa:	89 04 24             	mov    %eax,(%esp)
c010abfd:	e8 0b 46 00 00       	call   c010f20d <inode_check>
c010ac02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac05:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac08:	8b 40 14             	mov    0x14(%eax),%eax
c010ac0b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ac0e:	8b 52 14             	mov    0x14(%edx),%edx
c010ac11:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010ac14:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ac18:	89 14 24             	mov    %edx,(%esp)
c010ac1b:	ff d0                	call   *%eax
c010ac1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac24:	75 10                	jne    c010ac36 <file_seek+0xf3>
            pos += stat->st_size;
c010ac26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac29:	8b 50 0c             	mov    0xc(%eax),%edx
c010ac2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac2f:	01 d0                	add    %edx,%eax
c010ac31:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010ac34:	eb 0c                	jmp    c010ac42 <file_seek+0xff>
c010ac36:	eb 0a                	jmp    c010ac42 <file_seek+0xff>
    default: ret = -E_INVAL;
c010ac38:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010ac3f:	eb 01                	jmp    c010ac42 <file_seek+0xff>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010ac41:	90                   	nop
        }
        break;
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010ac42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac46:	0f 85 8a 00 00 00    	jne    c010acd6 <file_seek+0x193>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010ac4c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac4f:	8b 40 14             	mov    0x14(%eax),%eax
c010ac52:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ac55:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ac59:	74 17                	je     c010ac72 <file_seek+0x12f>
c010ac5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac5e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac61:	85 c0                	test   %eax,%eax
c010ac63:	74 0d                	je     c010ac72 <file_seek+0x12f>
c010ac65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac68:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac6b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ac6e:	85 c0                	test   %eax,%eax
c010ac70:	75 24                	jne    c010ac96 <file_seek+0x153>
c010ac72:	c7 44 24 0c d4 7c 11 	movl   $0xc0117cd4,0xc(%esp)
c010ac79:	c0 
c010ac7a:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010ac81:	c0 
c010ac82:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c010ac89:	00 
c010ac8a:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010ac91:	e8 32 62 ff ff       	call   c0100ec8 <__panic>
c010ac96:	c7 44 24 04 24 7d 11 	movl   $0xc0117d24,0x4(%esp)
c010ac9d:	c0 
c010ac9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aca1:	89 04 24             	mov    %eax,(%esp)
c010aca4:	e8 64 45 00 00       	call   c010f20d <inode_check>
c010aca9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acac:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acaf:	8b 40 2c             	mov    0x2c(%eax),%eax
c010acb2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010acb5:	8b 52 14             	mov    0x14(%edx),%edx
c010acb8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010acbb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010acbf:	89 14 24             	mov    %edx,(%esp)
c010acc2:	ff d0                	call   *%eax
c010acc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010accb:	75 09                	jne    c010acd6 <file_seek+0x193>
            file->pos = pos;
c010accd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010acd0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010acd3:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010acd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010acd9:	89 04 24             	mov    %eax,(%esp)
c010acdc:	e8 5a f7 ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010ace1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ace4:	c9                   	leave  
c010ace5:	c3                   	ret    

c010ace6 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ace6:	55                   	push   %ebp
c010ace7:	89 e5                	mov    %esp,%ebp
c010ace9:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010acec:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010acef:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf6:	89 04 24             	mov    %eax,(%esp)
c010acf9:	e8 41 f9 ff ff       	call   c010a63f <fd2file>
c010acfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad05:	74 08                	je     c010ad0f <file_fstat+0x29>
        return ret;
c010ad07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad0a:	e9 94 00 00 00       	jmp    c010ada3 <file_fstat+0xbd>
    }
    fd_array_acquire(file);
c010ad0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad12:	89 04 24             	mov    %eax,(%esp)
c010ad15:	e8 e0 f6 ff ff       	call   c010a3fa <fd_array_acquire>
    ret = vop_fstat(file->node, stat);
c010ad1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad1d:	8b 40 14             	mov    0x14(%eax),%eax
c010ad20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad27:	74 17                	je     c010ad40 <file_fstat+0x5a>
c010ad29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad2c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad2f:	85 c0                	test   %eax,%eax
c010ad31:	74 0d                	je     c010ad40 <file_fstat+0x5a>
c010ad33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad36:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad39:	8b 40 14             	mov    0x14(%eax),%eax
c010ad3c:	85 c0                	test   %eax,%eax
c010ad3e:	75 24                	jne    c010ad64 <file_fstat+0x7e>
c010ad40:	c7 44 24 0c d8 7b 11 	movl   $0xc0117bd8,0xc(%esp)
c010ad47:	c0 
c010ad48:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010ad4f:	c0 
c010ad50:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c010ad57:	00 
c010ad58:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010ad5f:	e8 64 61 ff ff       	call   c0100ec8 <__panic>
c010ad64:	c7 44 24 04 26 7c 11 	movl   $0xc0117c26,0x4(%esp)
c010ad6b:	c0 
c010ad6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad6f:	89 04 24             	mov    %eax,(%esp)
c010ad72:	e8 96 44 00 00       	call   c010f20d <inode_check>
c010ad77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad7a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad7d:	8b 40 14             	mov    0x14(%eax),%eax
c010ad80:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad83:	8b 52 14             	mov    0x14(%edx),%edx
c010ad86:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010ad89:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ad8d:	89 14 24             	mov    %edx,(%esp)
c010ad90:	ff d0                	call   *%eax
c010ad92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ad95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad98:	89 04 24             	mov    %eax,(%esp)
c010ad9b:	e8 9b f6 ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010ada0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ada3:	c9                   	leave  
c010ada4:	c3                   	ret    

c010ada5 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010ada5:	55                   	push   %ebp
c010ada6:	89 e5                	mov    %esp,%ebp
c010ada8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010adab:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010adae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adb2:	8b 45 08             	mov    0x8(%ebp),%eax
c010adb5:	89 04 24             	mov    %eax,(%esp)
c010adb8:	e8 82 f8 ff ff       	call   c010a63f <fd2file>
c010adbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010adc4:	74 08                	je     c010adce <file_fsync+0x29>
        return ret;
c010adc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adc9:	e9 8d 00 00 00       	jmp    c010ae5b <file_fsync+0xb6>
    }
    fd_array_acquire(file);
c010adce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010add1:	89 04 24             	mov    %eax,(%esp)
c010add4:	e8 21 f6 ff ff       	call   c010a3fa <fd_array_acquire>
    ret = vop_fsync(file->node);
c010add9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010addc:	8b 40 14             	mov    0x14(%eax),%eax
c010addf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ade2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ade6:	74 17                	je     c010adff <file_fsync+0x5a>
c010ade8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adeb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adee:	85 c0                	test   %eax,%eax
c010adf0:	74 0d                	je     c010adff <file_fsync+0x5a>
c010adf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adf5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010adf8:	8b 40 18             	mov    0x18(%eax),%eax
c010adfb:	85 c0                	test   %eax,%eax
c010adfd:	75 24                	jne    c010ae23 <file_fsync+0x7e>
c010adff:	c7 44 24 0c 2c 7d 11 	movl   $0xc0117d2c,0xc(%esp)
c010ae06:	c0 
c010ae07:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010ae0e:	c0 
c010ae0f:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ae16:	00 
c010ae17:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010ae1e:	e8 a5 60 ff ff       	call   c0100ec8 <__panic>
c010ae23:	c7 44 24 04 7a 7d 11 	movl   $0xc0117d7a,0x4(%esp)
c010ae2a:	c0 
c010ae2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae2e:	89 04 24             	mov    %eax,(%esp)
c010ae31:	e8 d7 43 00 00       	call   c010f20d <inode_check>
c010ae36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae39:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae3c:	8b 40 18             	mov    0x18(%eax),%eax
c010ae3f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae42:	8b 52 14             	mov    0x14(%edx),%edx
c010ae45:	89 14 24             	mov    %edx,(%esp)
c010ae48:	ff d0                	call   *%eax
c010ae4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010ae4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae50:	89 04 24             	mov    %eax,(%esp)
c010ae53:	e8 e3 f5 ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010ae58:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ae5b:	c9                   	leave  
c010ae5c:	c3                   	ret    

c010ae5d <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010ae5d:	55                   	push   %ebp
c010ae5e:	89 e5                	mov    %esp,%ebp
c010ae60:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae63:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010ae66:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae6d:	89 04 24             	mov    %eax,(%esp)
c010ae70:	e8 ca f7 ff ff       	call   c010a63f <fd2file>
c010ae75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae7c:	74 08                	je     c010ae86 <file_getdirentry+0x29>
        return ret;
c010ae7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae81:	e9 e3 00 00 00       	jmp    c010af69 <file_getdirentry+0x10c>
    }
    fd_array_acquire(file);
c010ae86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae89:	89 04 24             	mov    %eax,(%esp)
c010ae8c:	e8 69 f5 ff ff       	call   c010a3fa <fd_array_acquire>

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010ae91:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae94:	8b 00                	mov    (%eax),%eax
c010ae96:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ae99:	83 c2 04             	add    $0x4,%edx
c010ae9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010aea0:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c010aea7:	00 
c010aea8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aeac:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010aeaf:	89 04 24             	mov    %eax,(%esp)
c010aeb2:	e8 0d 04 00 00       	call   c010b2c4 <iobuf_init>
c010aeb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010aeba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aebd:	8b 40 14             	mov    0x14(%eax),%eax
c010aec0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aec3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aec7:	74 17                	je     c010aee0 <file_getdirentry+0x83>
c010aec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aecc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aecf:	85 c0                	test   %eax,%eax
c010aed1:	74 0d                	je     c010aee0 <file_getdirentry+0x83>
c010aed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aed6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aed9:	8b 40 20             	mov    0x20(%eax),%eax
c010aedc:	85 c0                	test   %eax,%eax
c010aede:	75 24                	jne    c010af04 <file_getdirentry+0xa7>
c010aee0:	c7 44 24 0c 80 7d 11 	movl   $0xc0117d80,0xc(%esp)
c010aee7:	c0 
c010aee8:	c7 44 24 08 96 7a 11 	movl   $0xc0117a96,0x8(%esp)
c010aeef:	c0 
c010aef0:	c7 44 24 04 4e 01 00 	movl   $0x14e,0x4(%esp)
c010aef7:	00 
c010aef8:	c7 04 24 ab 7a 11 c0 	movl   $0xc0117aab,(%esp)
c010aeff:	e8 c4 5f ff ff       	call   c0100ec8 <__panic>
c010af04:	c7 44 24 04 d4 7d 11 	movl   $0xc0117dd4,0x4(%esp)
c010af0b:	c0 
c010af0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af0f:	89 04 24             	mov    %eax,(%esp)
c010af12:	e8 f6 42 00 00       	call   c010f20d <inode_check>
c010af17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af1a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af1d:	8b 40 20             	mov    0x20(%eax),%eax
c010af20:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010af23:	8b 52 14             	mov    0x14(%edx),%edx
c010af26:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010af29:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010af2d:	89 14 24             	mov    %edx,(%esp)
c010af30:	ff d0                	call   *%eax
c010af32:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af35:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af39:	75 20                	jne    c010af5b <file_getdirentry+0xfe>
        direntp->offset += iobuf_used(iob);
c010af3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af3e:	8b 00                	mov    (%eax),%eax
c010af40:	89 c2                	mov    %eax,%edx
c010af42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af45:	8b 48 08             	mov    0x8(%eax),%ecx
c010af48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af4b:	8b 40 0c             	mov    0xc(%eax),%eax
c010af4e:	29 c1                	sub    %eax,%ecx
c010af50:	89 c8                	mov    %ecx,%eax
c010af52:	01 d0                	add    %edx,%eax
c010af54:	89 c2                	mov    %eax,%edx
c010af56:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af59:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010af5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af5e:	89 04 24             	mov    %eax,(%esp)
c010af61:	e8 d5 f4 ff ff       	call   c010a43b <fd_array_release>
    return ret;
c010af66:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010af69:	c9                   	leave  
c010af6a:	c3                   	ret    

c010af6b <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010af6b:	55                   	push   %ebp
c010af6c:	89 e5                	mov    %esp,%ebp
c010af6e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010af71:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010af74:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af78:	8b 45 08             	mov    0x8(%ebp),%eax
c010af7b:	89 04 24             	mov    %eax,(%esp)
c010af7e:	e8 bc f6 ff ff       	call   c010a63f <fd2file>
c010af83:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af8a:	74 05                	je     c010af91 <file_dup+0x26>
        return ret;
c010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af8f:	eb 38                	jmp    c010afc9 <file_dup+0x5e>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010af91:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010af94:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af9b:	89 04 24             	mov    %eax,(%esp)
c010af9e:	e8 ea f2 ff ff       	call   c010a28d <fd_array_alloc>
c010afa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afaa:	74 05                	je     c010afb1 <file_dup+0x46>
        return ret;
c010afac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afaf:	eb 18                	jmp    c010afc9 <file_dup+0x5e>
    }
    fd_array_dup(file2, file1);
c010afb1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010afb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afb7:	89 54 24 04          	mov    %edx,0x4(%esp)
c010afbb:	89 04 24             	mov    %eax,(%esp)
c010afbe:	e8 e5 f5 ff ff       	call   c010a5a8 <fd_array_dup>
    return file2->fd;
c010afc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afc6:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010afc9:	c9                   	leave  
c010afca:	c3                   	ret    

c010afcb <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010afcb:	55                   	push   %ebp
c010afcc:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010afce:	8b 45 08             	mov    0x8(%ebp),%eax
c010afd1:	8b 40 08             	mov    0x8(%eax),%eax
}
c010afd4:	5d                   	pop    %ebp
c010afd5:	c3                   	ret    

c010afd6 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010afd6:	55                   	push   %ebp
c010afd7:	89 e5                	mov    %esp,%ebp
c010afd9:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010afdc:	e8 48 43 00 00       	call   c010f329 <vfs_init>
    dev_init();
c010afe1:	e8 85 5a 00 00       	call   c0110a6b <dev_init>
    sfs_init();
c010afe6:	e8 42 68 00 00       	call   c011182d <sfs_init>
}
c010afeb:	c9                   	leave  
c010afec:	c3                   	ret    

c010afed <fs_cleanup>:

void
fs_cleanup(void) {
c010afed:	55                   	push   %ebp
c010afee:	89 e5                	mov    %esp,%ebp
c010aff0:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010aff3:	e8 ea 44 00 00       	call   c010f4e2 <vfs_cleanup>
}
c010aff8:	c9                   	leave  
c010aff9:	c3                   	ret    

c010affa <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010affa:	55                   	push   %ebp
c010affb:	89 e5                	mov    %esp,%ebp
c010affd:	83 ec 18             	sub    $0x18,%esp
    down(&(filesp->files_sem));
c010b000:	8b 45 08             	mov    0x8(%ebp),%eax
c010b003:	83 c0 0c             	add    $0xc,%eax
c010b006:	89 04 24             	mov    %eax,(%esp)
c010b009:	e8 6f ec ff ff       	call   c0109c7d <down>
}
c010b00e:	c9                   	leave  
c010b00f:	c3                   	ret    

c010b010 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b010:	55                   	push   %ebp
c010b011:	89 e5                	mov    %esp,%ebp
c010b013:	83 ec 18             	sub    $0x18,%esp
    up(&(filesp->files_sem));
c010b016:	8b 45 08             	mov    0x8(%ebp),%eax
c010b019:	83 c0 0c             	add    $0xc,%eax
c010b01c:	89 04 24             	mov    %eax,(%esp)
c010b01f:	e8 3e ec ff ff       	call   c0109c62 <up>
}
c010b024:	c9                   	leave  
c010b025:	c3                   	ret    

c010b026 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b026:	55                   	push   %ebp
c010b027:	89 e5                	mov    %esp,%ebp
c010b029:	83 ec 28             	sub    $0x28,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b02c:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b033:	e8 89 9c ff ff       	call   c0104cc1 <kmalloc>
c010b038:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b03b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b03f:	74 43                	je     c010b084 <files_create+0x5e>
        filesp->pwd = NULL;
c010b041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b044:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b04a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b04d:	8d 50 18             	lea    0x18(%eax),%edx
c010b050:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b053:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b059:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b060:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b063:	83 c0 0c             	add    $0xc,%eax
c010b066:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b06d:	00 
c010b06e:	89 04 24             	mov    %eax,(%esp)
c010b071:	e8 79 ea ff ff       	call   c0109aef <sem_init>
        fd_array_init(filesp->fd_array);
c010b076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b079:	8b 40 04             	mov    0x4(%eax),%eax
c010b07c:	89 04 24             	mov    %eax,(%esp)
c010b07f:	e8 c4 f1 ff ff       	call   c010a248 <fd_array_init>
    }
    return filesp;
c010b084:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b087:	c9                   	leave  
c010b088:	c3                   	ret    

c010b089 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b089:	55                   	push   %ebp
c010b08a:	89 e5                	mov    %esp,%ebp
c010b08c:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b08f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b093:	74 0f                	je     c010b0a4 <files_destroy+0x1b>
c010b095:	8b 45 08             	mov    0x8(%ebp),%eax
c010b098:	89 04 24             	mov    %eax,(%esp)
c010b09b:	e8 2b ff ff ff       	call   c010afcb <files_count>
c010b0a0:	85 c0                	test   %eax,%eax
c010b0a2:	74 24                	je     c010b0c8 <files_destroy+0x3f>
c010b0a4:	c7 44 24 0c e0 7d 11 	movl   $0xc0117de0,0xc(%esp)
c010b0ab:	c0 
c010b0ac:	c7 44 24 08 0b 7e 11 	movl   $0xc0117e0b,0x8(%esp)
c010b0b3:	c0 
c010b0b4:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010b0bb:	00 
c010b0bc:	c7 04 24 20 7e 11 c0 	movl   $0xc0117e20,(%esp)
c010b0c3:	e8 00 5e ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
c010b0c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cb:	8b 00                	mov    (%eax),%eax
c010b0cd:	85 c0                	test   %eax,%eax
c010b0cf:	74 0d                	je     c010b0de <files_destroy+0x55>
        vop_ref_dec(filesp->pwd);
c010b0d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0d4:	8b 00                	mov    (%eax),%eax
c010b0d6:	89 04 24             	mov    %eax,(%esp)
c010b0d9:	e8 41 3f 00 00       	call   c010f01f <inode_ref_dec>
    }
    int i;
    struct file *file = filesp->fd_array;
c010b0de:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e1:	8b 40 04             	mov    0x4(%eax),%eax
c010b0e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b0e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b0ee:	eb 4a                	jmp    c010b13a <files_destroy+0xb1>
        if (file->status == FD_OPENED) {
c010b0f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0f3:	8b 00                	mov    (%eax),%eax
c010b0f5:	83 f8 02             	cmp    $0x2,%eax
c010b0f8:	75 0b                	jne    c010b105 <files_destroy+0x7c>
            fd_array_close(file);
c010b0fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0fd:	89 04 24             	mov    %eax,(%esp)
c010b100:	e8 17 f4 ff ff       	call   c010a51c <fd_array_close>
        }
        assert(file->status == FD_NONE);
c010b105:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b108:	8b 00                	mov    (%eax),%eax
c010b10a:	85 c0                	test   %eax,%eax
c010b10c:	74 24                	je     c010b132 <files_destroy+0xa9>
c010b10e:	c7 44 24 0c 2d 7e 11 	movl   $0xc0117e2d,0xc(%esp)
c010b115:	c0 
c010b116:	c7 44 24 08 0b 7e 11 	movl   $0xc0117e0b,0x8(%esp)
c010b11d:	c0 
c010b11e:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c010b125:	00 
c010b126:	c7 04 24 20 7e 11 c0 	movl   $0xc0117e20,(%esp)
c010b12d:	e8 96 5d ff ff       	call   c0100ec8 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b132:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b136:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b13a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b13d:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b142:	76 ac                	jbe    c010b0f0 <files_destroy+0x67>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b144:	8b 45 08             	mov    0x8(%ebp),%eax
c010b147:	89 04 24             	mov    %eax,(%esp)
c010b14a:	e8 8d 9b ff ff       	call   c0104cdc <kfree>
}
c010b14f:	c9                   	leave  
c010b150:	c3                   	ret    

c010b151 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b151:	55                   	push   %ebp
c010b152:	89 e5                	mov    %esp,%ebp
c010b154:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b157:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b15b:	74 0f                	je     c010b16c <files_closeall+0x1b>
c010b15d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b160:	89 04 24             	mov    %eax,(%esp)
c010b163:	e8 63 fe ff ff       	call   c010afcb <files_count>
c010b168:	85 c0                	test   %eax,%eax
c010b16a:	7f 24                	jg     c010b190 <files_closeall+0x3f>
c010b16c:	c7 44 24 0c 48 7e 11 	movl   $0xc0117e48,0xc(%esp)
c010b173:	c0 
c010b174:	c7 44 24 08 0b 7e 11 	movl   $0xc0117e0b,0x8(%esp)
c010b17b:	c0 
c010b17c:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010b183:	00 
c010b184:	c7 04 24 20 7e 11 c0 	movl   $0xc0117e20,(%esp)
c010b18b:	e8 38 5d ff ff       	call   c0100ec8 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b190:	8b 45 08             	mov    0x8(%ebp),%eax
c010b193:	8b 40 04             	mov    0x4(%eax),%eax
c010b196:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b199:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b1a0:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b1a4:	eb 1d                	jmp    c010b1c3 <files_closeall+0x72>
        if (file->status == FD_OPENED) {
c010b1a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1a9:	8b 00                	mov    (%eax),%eax
c010b1ab:	83 f8 02             	cmp    $0x2,%eax
c010b1ae:	75 0b                	jne    c010b1bb <files_closeall+0x6a>
            fd_array_close(file);
c010b1b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1b3:	89 04 24             	mov    %eax,(%esp)
c010b1b6:	e8 61 f3 ff ff       	call   c010a51c <fd_array_close>
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b1bb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b1bf:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b1c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c6:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b1cb:	76 d9                	jbe    c010b1a6 <files_closeall+0x55>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b1cd:	c9                   	leave  
c010b1ce:	c3                   	ret    

c010b1cf <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b1cf:	55                   	push   %ebp
c010b1d0:	89 e5                	mov    %esp,%ebp
c010b1d2:	83 ec 28             	sub    $0x28,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b1d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b1d9:	74 06                	je     c010b1e1 <dup_files+0x12>
c010b1db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b1df:	75 24                	jne    c010b205 <dup_files+0x36>
c010b1e1:	c7 44 24 0c 72 7e 11 	movl   $0xc0117e72,0xc(%esp)
c010b1e8:	c0 
c010b1e9:	c7 44 24 08 0b 7e 11 	movl   $0xc0117e0b,0x8(%esp)
c010b1f0:	c0 
c010b1f1:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c010b1f8:	00 
c010b1f9:	c7 04 24 20 7e 11 c0 	movl   $0xc0117e20,(%esp)
c010b200:	e8 c3 5c ff ff       	call   c0100ec8 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b205:	8b 45 08             	mov    0x8(%ebp),%eax
c010b208:	89 04 24             	mov    %eax,(%esp)
c010b20b:	e8 bb fd ff ff       	call   c010afcb <files_count>
c010b210:	85 c0                	test   %eax,%eax
c010b212:	75 0f                	jne    c010b223 <dup_files+0x54>
c010b214:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b217:	89 04 24             	mov    %eax,(%esp)
c010b21a:	e8 ac fd ff ff       	call   c010afcb <files_count>
c010b21f:	85 c0                	test   %eax,%eax
c010b221:	7f 24                	jg     c010b247 <dup_files+0x78>
c010b223:	c7 44 24 0c 90 7e 11 	movl   $0xc0117e90,0xc(%esp)
c010b22a:	c0 
c010b22b:	c7 44 24 08 0b 7e 11 	movl   $0xc0117e0b,0x8(%esp)
c010b232:	c0 
c010b233:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c010b23a:	00 
c010b23b:	c7 04 24 20 7e 11 c0 	movl   $0xc0117e20,(%esp)
c010b242:	e8 81 5c ff ff       	call   c0100ec8 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b247:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b24a:	8b 10                	mov    (%eax),%edx
c010b24c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24f:	89 10                	mov    %edx,(%eax)
c010b251:	8b 45 08             	mov    0x8(%ebp),%eax
c010b254:	8b 00                	mov    (%eax),%eax
c010b256:	85 c0                	test   %eax,%eax
c010b258:	74 0d                	je     c010b267 <dup_files+0x98>
        vop_ref_inc(to->pwd);
c010b25a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b25d:	8b 00                	mov    (%eax),%eax
c010b25f:	89 04 24             	mov    %eax,(%esp)
c010b262:	e8 9e 3d 00 00       	call   c010f005 <inode_ref_inc>
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b267:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26a:	8b 40 04             	mov    0x4(%eax),%eax
c010b26d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b270:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b273:	8b 40 04             	mov    0x4(%eax),%eax
c010b276:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b279:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b280:	eb 31                	jmp    c010b2b3 <dup_files+0xe4>
        if (from_file->status == FD_OPENED) {
c010b282:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b285:	8b 00                	mov    (%eax),%eax
c010b287:	83 f8 02             	cmp    $0x2,%eax
c010b28a:	75 1b                	jne    c010b2a7 <dup_files+0xd8>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b28c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b28f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b295:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b298:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b29c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b29f:	89 04 24             	mov    %eax,(%esp)
c010b2a2:	e8 01 f3 ff ff       	call   c010a5a8 <fd_array_dup>
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b2a7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b2ab:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b2af:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b2b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2b6:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b2bb:	76 c5                	jbe    c010b282 <dup_files+0xb3>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b2bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2c2:	c9                   	leave  
c010b2c3:	c3                   	ret    

c010b2c4 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b2c4:	55                   	push   %ebp
c010b2c5:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b2c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2ca:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b2cd:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b2cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2d2:	8b 55 14             	mov    0x14(%ebp),%edx
c010b2d5:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b2d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2db:	8b 55 10             	mov    0x10(%ebp),%edx
c010b2de:	89 50 0c             	mov    %edx,0xc(%eax)
c010b2e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e4:	8b 50 0c             	mov    0xc(%eax),%edx
c010b2e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2ea:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b2ed:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b2f0:	5d                   	pop    %ebp
c010b2f1:	c3                   	ret    

c010b2f2 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b2f2:	55                   	push   %ebp
c010b2f3:	89 e5                	mov    %esp,%ebp
c010b2f5:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b2f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2fb:	8b 40 0c             	mov    0xc(%eax),%eax
c010b2fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b301:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b304:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b307:	76 06                	jbe    c010b30f <iobuf_move+0x1d>
        alen = len;
c010b309:	8b 45 10             	mov    0x10(%ebp),%eax
c010b30c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b30f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b313:	74 57                	je     c010b36c <iobuf_move+0x7a>
        void *src = iob->io_base, *dst = data;
c010b315:	8b 45 08             	mov    0x8(%ebp),%eax
c010b318:	8b 00                	mov    (%eax),%eax
c010b31a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b31d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b320:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b323:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b327:	74 12                	je     c010b33b <iobuf_move+0x49>
            void *tmp = src;
c010b329:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b32c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b32f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b332:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b335:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b338:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b33e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b342:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b345:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b349:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b34c:	89 04 24             	mov    %eax,(%esp)
c010b34f:	e8 64 a1 00 00       	call   c01154b8 <memmove>
        iobuf_skip(iob, alen), len -= alen;
c010b354:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b357:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b35b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b35e:	89 04 24             	mov    %eax,(%esp)
c010b361:	e8 a1 00 00 00       	call   c010b407 <iobuf_skip>
c010b366:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b369:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b36c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b370:	74 08                	je     c010b37a <iobuf_move+0x88>
        *copiedp = alen;
c010b372:	8b 45 18             	mov    0x18(%ebp),%eax
c010b375:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b378:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b37a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b37e:	75 07                	jne    c010b387 <iobuf_move+0x95>
c010b380:	b8 00 00 00 00       	mov    $0x0,%eax
c010b385:	eb 05                	jmp    c010b38c <iobuf_move+0x9a>
c010b387:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b38c:	c9                   	leave  
c010b38d:	c3                   	ret    

c010b38e <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b38e:	55                   	push   %ebp
c010b38f:	89 e5                	mov    %esp,%ebp
c010b391:	83 ec 28             	sub    $0x28,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b394:	8b 45 08             	mov    0x8(%ebp),%eax
c010b397:	8b 40 0c             	mov    0xc(%eax),%eax
c010b39a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b39d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b3a3:	76 06                	jbe    c010b3ab <iobuf_move_zeros+0x1d>
        alen = len;
c010b3a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b3ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3af:	74 34                	je     c010b3e5 <iobuf_move_zeros+0x57>
        memset(iob->io_base, 0, alen);
c010b3b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b4:	8b 00                	mov    (%eax),%eax
c010b3b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b3b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b3bd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b3c4:	00 
c010b3c5:	89 04 24             	mov    %eax,(%esp)
c010b3c8:	e8 ac a0 00 00       	call   c0115479 <memset>
        iobuf_skip(iob, alen), len -= alen;
c010b3cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d7:	89 04 24             	mov    %eax,(%esp)
c010b3da:	e8 28 00 00 00       	call   c010b407 <iobuf_skip>
c010b3df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3e2:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b3e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b3e9:	74 08                	je     c010b3f3 <iobuf_move_zeros+0x65>
        *copiedp = alen;
c010b3eb:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b3f1:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b3f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3f7:	75 07                	jne    c010b400 <iobuf_move_zeros+0x72>
c010b3f9:	b8 00 00 00 00       	mov    $0x0,%eax
c010b3fe:	eb 05                	jmp    c010b405 <iobuf_move_zeros+0x77>
c010b400:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b405:	c9                   	leave  
c010b406:	c3                   	ret    

c010b407 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b407:	55                   	push   %ebp
c010b408:	89 e5                	mov    %esp,%ebp
c010b40a:	83 ec 18             	sub    $0x18,%esp
    assert(iob->io_resid >= n);
c010b40d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b410:	8b 40 0c             	mov    0xc(%eax),%eax
c010b413:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b416:	73 24                	jae    c010b43c <iobuf_skip+0x35>
c010b418:	c7 44 24 0c be 7e 11 	movl   $0xc0117ebe,0xc(%esp)
c010b41f:	c0 
c010b420:	c7 44 24 08 d1 7e 11 	movl   $0xc0117ed1,0x8(%esp)
c010b427:	c0 
c010b428:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
c010b42f:	00 
c010b430:	c7 04 24 e6 7e 11 c0 	movl   $0xc0117ee6,(%esp)
c010b437:	e8 8c 5a ff ff       	call   c0100ec8 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b43c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b43f:	8b 10                	mov    (%eax),%edx
c010b441:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b444:	01 c2                	add    %eax,%edx
c010b446:	8b 45 08             	mov    0x8(%ebp),%eax
c010b449:	89 10                	mov    %edx,(%eax)
c010b44b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44e:	8b 40 04             	mov    0x4(%eax),%eax
c010b451:	89 c2                	mov    %eax,%edx
c010b453:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b456:	01 d0                	add    %edx,%eax
c010b458:	89 c2                	mov    %eax,%edx
c010b45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b45d:	89 50 04             	mov    %edx,0x4(%eax)
c010b460:	8b 45 08             	mov    0x8(%ebp),%eax
c010b463:	8b 40 0c             	mov    0xc(%eax),%eax
c010b466:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b469:	89 c2                	mov    %eax,%edx
c010b46b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b46e:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b471:	c9                   	leave  
c010b472:	c3                   	ret    

c010b473 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c010b473:	55                   	push   %ebp
c010b474:	89 e5                	mov    %esp,%ebp
c010b476:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b479:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b47d:	74 25                	je     c010b4a4 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010b47f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b482:	83 c0 1c             	add    $0x1c,%eax
c010b485:	89 04 24             	mov    %eax,(%esp)
c010b488:	e8 f0 e7 ff ff       	call   c0109c7d <down>
        if (current != NULL) {
c010b48d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b492:	85 c0                	test   %eax,%eax
c010b494:	74 0e                	je     c010b4a4 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010b496:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b49b:	8b 50 04             	mov    0x4(%eax),%edx
c010b49e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4a1:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b4a4:	c9                   	leave  
c010b4a5:	c3                   	ret    

c010b4a6 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b4a6:	55                   	push   %ebp
c010b4a7:	89 e5                	mov    %esp,%ebp
c010b4a9:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010b4ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b4b0:	74 18                	je     c010b4ca <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010b4b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b5:	83 c0 1c             	add    $0x1c,%eax
c010b4b8:	89 04 24             	mov    %eax,(%esp)
c010b4bb:	e8 a2 e7 ff ff       	call   c0109c62 <up>
        mm->locked_by = 0;
c010b4c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4c3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b4ca:	c9                   	leave  
c010b4cb:	c3                   	ret    

c010b4cc <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c010b4cc:	55                   	push   %ebp
c010b4cd:	89 e5                	mov    %esp,%ebp
c010b4cf:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b4d2:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b4d7:	8b 40 18             	mov    0x18(%eax),%eax
c010b4da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c010b4dd:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b4e4:	e8 d8 97 ff ff       	call   c0104cc1 <kmalloc>
c010b4e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b4ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b4f0:	75 07                	jne    c010b4f9 <copy_path+0x2d>
        return -E_NO_MEM;
c010b4f2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b4f7:	eb 66                	jmp    c010b55f <copy_path+0x93>
    }
    lock_mm(mm);
c010b4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4fc:	89 04 24             	mov    %eax,(%esp)
c010b4ff:	e8 6f ff ff ff       	call   c010b473 <lock_mm>
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c010b504:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010b50b:	00 
c010b50c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b50f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b516:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b51a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b51d:	89 04 24             	mov    %eax,(%esp)
c010b520:	e8 cb db ff ff       	call   c01090f0 <copy_string>
c010b525:	85 c0                	test   %eax,%eax
c010b527:	75 1e                	jne    c010b547 <copy_path+0x7b>
        unlock_mm(mm);
c010b529:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b52c:	89 04 24             	mov    %eax,(%esp)
c010b52f:	e8 72 ff ff ff       	call   c010b4a6 <unlock_mm>
        goto failed_cleanup;
c010b534:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010b535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b538:	89 04 24             	mov    %eax,(%esp)
c010b53b:	e8 9c 97 ff ff       	call   c0104cdc <kfree>
    return -E_INVAL;
c010b540:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b545:	eb 18                	jmp    c010b55f <copy_path+0x93>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c010b547:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b54a:	89 04 24             	mov    %eax,(%esp)
c010b54d:	e8 54 ff ff ff       	call   c010b4a6 <unlock_mm>
    *to = buffer;
c010b552:	8b 45 08             	mov    0x8(%ebp),%eax
c010b555:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b558:	89 10                	mov    %edx,(%eax)
    return 0;
c010b55a:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c010b55f:	c9                   	leave  
c010b560:	c3                   	ret    

c010b561 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c010b561:	55                   	push   %ebp
c010b562:	89 e5                	mov    %esp,%ebp
c010b564:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b567:	8b 45 08             	mov    0x8(%ebp),%eax
c010b56a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b56e:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b571:	89 04 24             	mov    %eax,(%esp)
c010b574:	e8 53 ff ff ff       	call   c010b4cc <copy_path>
c010b579:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b57c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b580:	74 05                	je     c010b587 <sysfile_open+0x26>
        return ret;
c010b582:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b585:	eb 23                	jmp    c010b5aa <sysfile_open+0x49>
    }
    ret = file_open(path, open_flags);
c010b587:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b58a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b58d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b591:	89 04 24             	mov    %eax,(%esp)
c010b594:	e8 61 f1 ff ff       	call   c010a6fa <file_open>
c010b599:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b59c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b59f:	89 04 24             	mov    %eax,(%esp)
c010b5a2:	e8 35 97 ff ff       	call   c0104cdc <kfree>
    return ret;
c010b5a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b5aa:	c9                   	leave  
c010b5ab:	c3                   	ret    

c010b5ac <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010b5ac:	55                   	push   %ebp
c010b5ad:	89 e5                	mov    %esp,%ebp
c010b5af:	83 ec 18             	sub    $0x18,%esp
    return file_close(fd);
c010b5b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5b5:	89 04 24             	mov    %eax,(%esp)
c010b5b8:	e8 da f2 ff ff       	call   c010a897 <file_close>
}
c010b5bd:	c9                   	leave  
c010b5be:	c3                   	ret    

c010b5bf <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c010b5bf:	55                   	push   %ebp
c010b5c0:	89 e5                	mov    %esp,%ebp
c010b5c2:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b5c5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b5ca:	8b 40 18             	mov    0x18(%eax),%eax
c010b5cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b5d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b5d4:	75 0a                	jne    c010b5e0 <sysfile_read+0x21>
        return 0;
c010b5d6:	b8 00 00 00 00       	mov    $0x0,%eax
c010b5db:	e9 55 01 00 00       	jmp    c010b735 <sysfile_read+0x176>
    }
    if (!file_testfd(fd, 1, 0)) {
c010b5e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010b5e7:	00 
c010b5e8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010b5ef:	00 
c010b5f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f3:	89 04 24             	mov    %eax,(%esp)
c010b5f6:	e8 a2 f0 ff ff       	call   c010a69d <file_testfd>
c010b5fb:	85 c0                	test   %eax,%eax
c010b5fd:	75 0a                	jne    c010b609 <sysfile_read+0x4a>
        return -E_INVAL;
c010b5ff:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b604:	e9 2c 01 00 00       	jmp    c010b735 <sysfile_read+0x176>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b609:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b610:	e8 ac 96 ff ff       	call   c0104cc1 <kmalloc>
c010b615:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b618:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b61c:	75 0a                	jne    c010b628 <sysfile_read+0x69>
        return -E_NO_MEM;
c010b61e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b623:	e9 0d 01 00 00       	jmp    c010b735 <sysfile_read+0x176>
    }

    int ret = 0;
c010b628:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b62f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b636:	e9 d7 00 00 00       	jmp    c010b712 <sysfile_read+0x153>
        if ((alen = IOBUF_SIZE) > len) {
c010b63b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b642:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b645:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b648:	76 06                	jbe    c010b650 <sysfile_read+0x91>
            alen = len;
c010b64a:	8b 45 10             	mov    0x10(%ebp),%eax
c010b64d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c010b650:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b653:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b656:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b65a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b65e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b661:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b665:	8b 45 08             	mov    0x8(%ebp),%eax
c010b668:	89 04 24             	mov    %eax,(%esp)
c010b66b:	e8 5f f2 ff ff       	call   c010a8cf <file_read>
c010b670:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c010b673:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b676:	85 c0                	test   %eax,%eax
c010b678:	0f 84 87 00 00 00    	je     c010b705 <sysfile_read+0x146>
            lock_mm(mm);
c010b67e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b681:	89 04 24             	mov    %eax,(%esp)
c010b684:	e8 ea fd ff ff       	call   c010b473 <lock_mm>
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c010b689:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b68c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b690:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b693:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b697:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b69a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b69e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6a1:	89 04 24             	mov    %eax,(%esp)
c010b6a4:	e8 73 cf ff ff       	call   c010861c <copy_to_user>
c010b6a9:	85 c0                	test   %eax,%eax
c010b6ab:	74 40                	je     c010b6ed <sysfile_read+0x12e>
                    assert(len >= alen);
c010b6ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6b0:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b6b3:	73 24                	jae    c010b6d9 <sysfile_read+0x11a>
c010b6b5:	c7 44 24 0c f6 7e 11 	movl   $0xc0117ef6,0xc(%esp)
c010b6bc:	c0 
c010b6bd:	c7 44 24 08 02 7f 11 	movl   $0xc0117f02,0x8(%esp)
c010b6c4:	c0 
c010b6c5:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c010b6cc:	00 
c010b6cd:	c7 04 24 17 7f 11 c0 	movl   $0xc0117f17,(%esp)
c010b6d4:	e8 ef 57 ff ff       	call   c0100ec8 <__panic>
                    base += alen, len -= alen, copied += alen;
c010b6d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6dc:	01 45 0c             	add    %eax,0xc(%ebp)
c010b6df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6e2:	29 45 10             	sub    %eax,0x10(%ebp)
c010b6e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6e8:	01 45 f0             	add    %eax,-0x10(%ebp)
c010b6eb:	eb 0d                	jmp    c010b6fa <sysfile_read+0x13b>
                }
                else if (ret == 0) {
c010b6ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b6f1:	75 07                	jne    c010b6fa <sysfile_read+0x13b>
                    ret = -E_INVAL;
c010b6f3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c010b6fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6fd:	89 04 24             	mov    %eax,(%esp)
c010b700:	e8 a1 fd ff ff       	call   c010b4a6 <unlock_mm>
        }
        if (ret != 0 || alen == 0) {
c010b705:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b709:	75 11                	jne    c010b71c <sysfile_read+0x15d>
c010b70b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b70e:	85 c0                	test   %eax,%eax
c010b710:	74 0a                	je     c010b71c <sysfile_read+0x15d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b712:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b716:	0f 85 1f ff ff ff    	jne    c010b63b <sysfile_read+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b71c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b71f:	89 04 24             	mov    %eax,(%esp)
c010b722:	e8 b5 95 ff ff       	call   c0104cdc <kfree>
    if (copied != 0) {
c010b727:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b72b:	74 05                	je     c010b732 <sysfile_read+0x173>
        return copied;
c010b72d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b730:	eb 03                	jmp    c010b735 <sysfile_read+0x176>
    }
    return ret;
c010b732:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b735:	c9                   	leave  
c010b736:	c3                   	ret    

c010b737 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c010b737:	55                   	push   %ebp
c010b738:	89 e5                	mov    %esp,%ebp
c010b73a:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010b73d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b742:	8b 40 18             	mov    0x18(%eax),%eax
c010b745:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c010b748:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b74c:	75 0a                	jne    c010b758 <sysfile_write+0x21>
        return 0;
c010b74e:	b8 00 00 00 00       	mov    $0x0,%eax
c010b753:	e9 57 01 00 00       	jmp    c010b8af <sysfile_write+0x178>
    }
    if (!file_testfd(fd, 0, 1)) {
c010b758:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010b75f:	00 
c010b760:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b767:	00 
c010b768:	8b 45 08             	mov    0x8(%ebp),%eax
c010b76b:	89 04 24             	mov    %eax,(%esp)
c010b76e:	e8 2a ef ff ff       	call   c010a69d <file_testfd>
c010b773:	85 c0                	test   %eax,%eax
c010b775:	75 0a                	jne    c010b781 <sysfile_write+0x4a>
        return -E_INVAL;
c010b777:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b77c:	e9 2e 01 00 00       	jmp    c010b8af <sysfile_write+0x178>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c010b781:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010b788:	e8 34 95 ff ff       	call   c0104cc1 <kmalloc>
c010b78d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b790:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b794:	75 0a                	jne    c010b7a0 <sysfile_write+0x69>
        return -E_NO_MEM;
c010b796:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b79b:	e9 0f 01 00 00       	jmp    c010b8af <sysfile_write+0x178>
    }

    int ret = 0;
c010b7a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010b7a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c010b7ae:	e9 d9 00 00 00       	jmp    c010b88c <sysfile_write+0x155>
        if ((alen = IOBUF_SIZE) > len) {
c010b7b3:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c010b7ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7bd:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b7c0:	76 06                	jbe    c010b7c8 <sysfile_write+0x91>
            alen = len;
c010b7c2:	8b 45 10             	mov    0x10(%ebp),%eax
c010b7c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c010b7c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7cb:	89 04 24             	mov    %eax,(%esp)
c010b7ce:	e8 a0 fc ff ff       	call   c010b473 <lock_mm>
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c010b7d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b7d6:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b7dd:	00 
c010b7de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7e5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b7ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7f3:	89 04 24             	mov    %eax,(%esp)
c010b7f6:	e8 d0 cd ff ff       	call   c01085cb <copy_from_user>
c010b7fb:	85 c0                	test   %eax,%eax
c010b7fd:	75 07                	jne    c010b806 <sysfile_write+0xcf>
                ret = -E_INVAL;
c010b7ff:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c010b806:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b809:	89 04 24             	mov    %eax,(%esp)
c010b80c:	e8 95 fc ff ff       	call   c010b4a6 <unlock_mm>
        if (ret == 0) {
c010b811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b815:	75 68                	jne    c010b87f <sysfile_write+0x148>
            ret = file_write(fd, buffer, alen, &alen);
c010b817:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b81a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010b81d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b821:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b825:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b828:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b82c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b82f:	89 04 24             	mov    %eax,(%esp)
c010b832:	e8 d2 f1 ff ff       	call   c010aa09 <file_write>
c010b837:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c010b83a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b83d:	85 c0                	test   %eax,%eax
c010b83f:	74 3e                	je     c010b87f <sysfile_write+0x148>
                assert(len >= alen);
c010b841:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b844:	39 45 10             	cmp    %eax,0x10(%ebp)
c010b847:	73 24                	jae    c010b86d <sysfile_write+0x136>
c010b849:	c7 44 24 0c f6 7e 11 	movl   $0xc0117ef6,0xc(%esp)
c010b850:	c0 
c010b851:	c7 44 24 08 02 7f 11 	movl   $0xc0117f02,0x8(%esp)
c010b858:	c0 
c010b859:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
c010b860:	00 
c010b861:	c7 04 24 17 7f 11 c0 	movl   $0xc0117f17,(%esp)
c010b868:	e8 5b 56 ff ff       	call   c0100ec8 <__panic>
                base += alen, len -= alen, copied += alen;
c010b86d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b870:	01 45 0c             	add    %eax,0xc(%ebp)
c010b873:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b876:	29 45 10             	sub    %eax,0x10(%ebp)
c010b879:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b87c:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010b87f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b883:	75 11                	jne    c010b896 <sysfile_write+0x15f>
c010b885:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b888:	85 c0                	test   %eax,%eax
c010b88a:	74 0a                	je     c010b896 <sysfile_write+0x15f>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010b88c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b890:	0f 85 1d ff ff ff    	jne    c010b7b3 <sysfile_write+0x7c>
            goto out;
        }
    }

out:
    kfree(buffer);
c010b896:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b899:	89 04 24             	mov    %eax,(%esp)
c010b89c:	e8 3b 94 ff ff       	call   c0104cdc <kfree>
    if (copied != 0) {
c010b8a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8a5:	74 05                	je     c010b8ac <sysfile_write+0x175>
        return copied;
c010b8a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8aa:	eb 03                	jmp    c010b8af <sysfile_write+0x178>
    }
    return ret;
c010b8ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b8af:	c9                   	leave  
c010b8b0:	c3                   	ret    

c010b8b1 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c010b8b1:	55                   	push   %ebp
c010b8b2:	89 e5                	mov    %esp,%ebp
c010b8b4:	83 ec 18             	sub    $0x18,%esp
    return file_seek(fd, pos, whence);
c010b8b7:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8ba:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b8be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8c8:	89 04 24             	mov    %eax,(%esp)
c010b8cb:	e8 73 f2 ff ff       	call   c010ab43 <file_seek>
}
c010b8d0:	c9                   	leave  
c010b8d1:	c3                   	ret    

c010b8d2 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c010b8d2:	55                   	push   %ebp
c010b8d3:	89 e5                	mov    %esp,%ebp
c010b8d5:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010b8d8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010b8dd:	8b 40 18             	mov    0x18(%eax),%eax
c010b8e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c010b8e3:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b8e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c010b8e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b8f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f3:	89 04 24             	mov    %eax,(%esp)
c010b8f6:	e8 eb f3 ff ff       	call   c010ace6 <file_fstat>
c010b8fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b902:	74 05                	je     c010b909 <sysfile_fstat+0x37>
        return ret;
c010b904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b907:	eb 45                	jmp    c010b94e <sysfile_fstat+0x7c>
    }

    lock_mm(mm);
c010b909:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b90c:	89 04 24             	mov    %eax,(%esp)
c010b90f:	e8 5f fb ff ff       	call   c010b473 <lock_mm>
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c010b914:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%esp)
c010b91b:	00 
c010b91c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b91f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b923:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b926:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b92a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b92d:	89 04 24             	mov    %eax,(%esp)
c010b930:	e8 e7 cc ff ff       	call   c010861c <copy_to_user>
c010b935:	85 c0                	test   %eax,%eax
c010b937:	75 07                	jne    c010b940 <sysfile_fstat+0x6e>
            ret = -E_INVAL;
c010b939:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010b940:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b943:	89 04 24             	mov    %eax,(%esp)
c010b946:	e8 5b fb ff ff       	call   c010b4a6 <unlock_mm>
    return ret;
c010b94b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b94e:	c9                   	leave  
c010b94f:	c3                   	ret    

c010b950 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c010b950:	55                   	push   %ebp
c010b951:	89 e5                	mov    %esp,%ebp
c010b953:	83 ec 18             	sub    $0x18,%esp
    return file_fsync(fd);
c010b956:	8b 45 08             	mov    0x8(%ebp),%eax
c010b959:	89 04 24             	mov    %eax,(%esp)
c010b95c:	e8 44 f4 ff ff       	call   c010ada5 <file_fsync>
}
c010b961:	c9                   	leave  
c010b962:	c3                   	ret    

c010b963 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c010b963:	55                   	push   %ebp
c010b964:	89 e5                	mov    %esp,%ebp
c010b966:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010b969:	8b 45 08             	mov    0x8(%ebp),%eax
c010b96c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b970:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b973:	89 04 24             	mov    %eax,(%esp)
c010b976:	e8 51 fb ff ff       	call   c010b4cc <copy_path>
c010b97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b97e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b982:	74 05                	je     c010b989 <sysfile_chdir+0x26>
        return ret;
c010b984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b987:	eb 1c                	jmp    c010b9a5 <sysfile_chdir+0x42>
    }
    ret = vfs_chdir(path);
c010b989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b98c:	89 04 24             	mov    %eax,(%esp)
c010b98f:	e8 f8 4a 00 00       	call   c011048c <vfs_chdir>
c010b994:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010b997:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b99a:	89 04 24             	mov    %eax,(%esp)
c010b99d:	e8 3a 93 ff ff       	call   c0104cdc <kfree>
    return ret;
c010b9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9a5:	c9                   	leave  
c010b9a6:	c3                   	ret    

c010b9a7 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c010b9a7:	55                   	push   %ebp
c010b9a8:	89 e5                	mov    %esp,%ebp
c010b9aa:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010b9ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9b4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010b9b7:	89 04 24             	mov    %eax,(%esp)
c010b9ba:	e8 0d fb ff ff       	call   c010b4cc <copy_path>
c010b9bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9c6:	74 05                	je     c010b9cd <sysfile_link+0x26>
        return ret;
c010b9c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9cb:	eb 59                	jmp    c010ba26 <sysfile_link+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010b9cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b9d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9d4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b9d7:	89 04 24             	mov    %eax,(%esp)
c010b9da:	e8 ed fa ff ff       	call   c010b4cc <copy_path>
c010b9df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9e6:	74 10                	je     c010b9f8 <sysfile_link+0x51>
        kfree(old_path);
c010b9e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9eb:	89 04 24             	mov    %eax,(%esp)
c010b9ee:	e8 e9 92 ff ff       	call   c0104cdc <kfree>
        return ret;
c010b9f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9f6:	eb 2e                	jmp    c010ba26 <sysfile_link+0x7f>
    }
    ret = vfs_link(old_path, new_path);
c010b9f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b9fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ba02:	89 04 24             	mov    %eax,(%esp)
c010ba05:	e8 03 46 00 00       	call   c011000d <vfs_link>
c010ba0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010ba0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba10:	89 04 24             	mov    %eax,(%esp)
c010ba13:	e8 c4 92 ff ff       	call   c0104cdc <kfree>
c010ba18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba1b:	89 04 24             	mov    %eax,(%esp)
c010ba1e:	e8 b9 92 ff ff       	call   c0104cdc <kfree>
    return ret;
c010ba23:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba26:	c9                   	leave  
c010ba27:	c3                   	ret    

c010ba28 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010ba28:	55                   	push   %ebp
c010ba29:	89 e5                	mov    %esp,%ebp
c010ba2b:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010ba2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba31:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba35:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ba38:	89 04 24             	mov    %eax,(%esp)
c010ba3b:	e8 8c fa ff ff       	call   c010b4cc <copy_path>
c010ba40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba47:	74 05                	je     c010ba4e <sysfile_rename+0x26>
        return ret;
c010ba49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba4c:	eb 59                	jmp    c010baa7 <sysfile_rename+0x7f>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010ba4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba51:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba55:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ba58:	89 04 24             	mov    %eax,(%esp)
c010ba5b:	e8 6c fa ff ff       	call   c010b4cc <copy_path>
c010ba60:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba67:	74 10                	je     c010ba79 <sysfile_rename+0x51>
        kfree(old_path);
c010ba69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba6c:	89 04 24             	mov    %eax,(%esp)
c010ba6f:	e8 68 92 ff ff       	call   c0104cdc <kfree>
        return ret;
c010ba74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba77:	eb 2e                	jmp    c010baa7 <sysfile_rename+0x7f>
    }
    ret = vfs_rename(old_path, new_path);
c010ba79:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ba7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba7f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ba83:	89 04 24             	mov    %eax,(%esp)
c010ba86:	e8 78 45 00 00       	call   c0110003 <vfs_rename>
c010ba8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010ba8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba91:	89 04 24             	mov    %eax,(%esp)
c010ba94:	e8 43 92 ff ff       	call   c0104cdc <kfree>
c010ba99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba9c:	89 04 24             	mov    %eax,(%esp)
c010ba9f:	e8 38 92 ff ff       	call   c0104cdc <kfree>
    return ret;
c010baa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010baa7:	c9                   	leave  
c010baa8:	c3                   	ret    

c010baa9 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010baa9:	55                   	push   %ebp
c010baaa:	89 e5                	mov    %esp,%ebp
c010baac:	83 ec 28             	sub    $0x28,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010baaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010bab2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bab6:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bab9:	89 04 24             	mov    %eax,(%esp)
c010babc:	e8 0b fa ff ff       	call   c010b4cc <copy_path>
c010bac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bac4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bac8:	74 05                	je     c010bacf <sysfile_unlink+0x26>
        return ret;
c010baca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bacd:	eb 1c                	jmp    c010baeb <sysfile_unlink+0x42>
    }
    ret = vfs_unlink(path);
c010bacf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bad2:	89 04 24             	mov    %eax,(%esp)
c010bad5:	e8 1f 45 00 00       	call   c010fff9 <vfs_unlink>
c010bada:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010badd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bae0:	89 04 24             	mov    %eax,(%esp)
c010bae3:	e8 f4 91 ff ff       	call   c0104cdc <kfree>
    return ret;
c010bae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010baeb:	c9                   	leave  
c010baec:	c3                   	ret    

c010baed <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010baed:	55                   	push   %ebp
c010baee:	89 e5                	mov    %esp,%ebp
c010baf0:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010baf3:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010baf8:	8b 40 18             	mov    0x18(%eax),%eax
c010bafb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010bafe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb02:	75 07                	jne    c010bb0b <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010bb04:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bb09:	eb 77                	jmp    c010bb82 <sysfile_getcwd+0x95>
    }

    int ret = -E_INVAL;
c010bb0b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010bb12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb15:	89 04 24             	mov    %eax,(%esp)
c010bb18:	e8 56 f9 ff ff       	call   c010b473 <lock_mm>
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010bb1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb20:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bb27:	00 
c010bb28:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb2b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb36:	89 04 24             	mov    %eax,(%esp)
c010bb39:	e8 8f d4 ff ff       	call   c0108fcd <user_mem_check>
c010bb3e:	85 c0                	test   %eax,%eax
c010bb40:	74 32                	je     c010bb74 <sysfile_getcwd+0x87>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010bb42:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bb49:	00 
c010bb4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb4d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb51:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb54:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb58:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010bb5b:	89 04 24             	mov    %eax,(%esp)
c010bb5e:	e8 61 f7 ff ff       	call   c010b2c4 <iobuf_init>
c010bb63:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010bb66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bb69:	89 04 24             	mov    %eax,(%esp)
c010bb6c:	e8 5a 49 00 00       	call   c01104cb <vfs_getcwd>
c010bb71:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bb74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb77:	89 04 24             	mov    %eax,(%esp)
c010bb7a:	e8 27 f9 ff ff       	call   c010b4a6 <unlock_mm>
    return ret;
c010bb7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bb82:	c9                   	leave  
c010bb83:	c3                   	ret    

c010bb84 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010bb84:	55                   	push   %ebp
c010bb85:	89 e5                	mov    %esp,%ebp
c010bb87:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010bb8a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010bb8f:	8b 40 18             	mov    0x18(%eax),%eax
c010bb92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010bb95:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c010bb9c:	e8 20 91 ff ff       	call   c0104cc1 <kmalloc>
c010bba1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bba4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bba8:	75 0a                	jne    c010bbb4 <sysfile_getdirentry+0x30>
        return -E_NO_MEM;
c010bbaa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bbaf:	e9 c2 00 00 00       	jmp    c010bc76 <sysfile_getdirentry+0xf2>
    }

    int ret = 0;
c010bbb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010bbbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbbe:	89 04 24             	mov    %eax,(%esp)
c010bbc1:	e8 ad f8 ff ff       	call   c010b473 <lock_mm>
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010bbc6:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bbc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bbcc:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c010bbd3:	00 
c010bbd4:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
c010bbdb:	00 
c010bbdc:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bbe0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbe7:	89 04 24             	mov    %eax,(%esp)
c010bbea:	e8 dc c9 ff ff       	call   c01085cb <copy_from_user>
c010bbef:	85 c0                	test   %eax,%eax
c010bbf1:	75 07                	jne    c010bbfa <sysfile_getdirentry+0x76>
            ret = -E_INVAL;
c010bbf3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bbfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbfd:	89 04 24             	mov    %eax,(%esp)
c010bc00:	e8 a1 f8 ff ff       	call   c010b4a6 <unlock_mm>

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010bc05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc09:	75 5d                	jne    c010bc68 <sysfile_getdirentry+0xe4>
c010bc0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc12:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc15:	89 04 24             	mov    %eax,(%esp)
c010bc18:	e8 40 f2 ff ff       	call   c010ae5d <file_getdirentry>
c010bc1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc24:	75 42                	jne    c010bc68 <sysfile_getdirentry+0xe4>
        goto out;
    }

    lock_mm(mm);
c010bc26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc29:	89 04 24             	mov    %eax,(%esp)
c010bc2c:	e8 42 f8 ff ff       	call   c010b473 <lock_mm>
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010bc31:	c7 44 24 0c 04 01 00 	movl   $0x104,0xc(%esp)
c010bc38:	00 
c010bc39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc3c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc40:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc43:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc4a:	89 04 24             	mov    %eax,(%esp)
c010bc4d:	e8 ca c9 ff ff       	call   c010861c <copy_to_user>
c010bc52:	85 c0                	test   %eax,%eax
c010bc54:	75 07                	jne    c010bc5d <sysfile_getdirentry+0xd9>
            ret = -E_INVAL;
c010bc56:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010bc5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc60:	89 04 24             	mov    %eax,(%esp)
c010bc63:	e8 3e f8 ff ff       	call   c010b4a6 <unlock_mm>

out:
    kfree(direntp);
c010bc68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc6b:	89 04 24             	mov    %eax,(%esp)
c010bc6e:	e8 69 90 ff ff       	call   c0104cdc <kfree>
    return ret;
c010bc73:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bc76:	c9                   	leave  
c010bc77:	c3                   	ret    

c010bc78 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010bc78:	55                   	push   %ebp
c010bc79:	89 e5                	mov    %esp,%ebp
c010bc7b:	83 ec 18             	sub    $0x18,%esp
    return file_dup(fd1, fd2);
c010bc7e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc81:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc85:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc88:	89 04 24             	mov    %eax,(%esp)
c010bc8b:	e8 db f2 ff ff       	call   c010af6b <file_dup>
}
c010bc90:	c9                   	leave  
c010bc91:	c3                   	ret    

c010bc92 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010bc92:	55                   	push   %ebp
c010bc93:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bc95:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bc9a:	5d                   	pop    %ebp
c010bc9b:	c3                   	ret    

c010bc9c <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010bc9c:	55                   	push   %ebp
c010bc9d:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010bc9f:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010bca4:	5d                   	pop    %ebp
c010bca5:	c3                   	ret    

c010bca6 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010bca6:	52                   	push   %edx
    call *%ebx              # call fn
c010bca7:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010bca9:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010bcaa:	e8 32 0e 00 00       	call   c010cae1 <do_exit>

c010bcaf <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010bcaf:	55                   	push   %ebp
c010bcb0:	89 e5                	mov    %esp,%ebp
c010bcb2:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010bcb5:	8b 55 10             	mov    0x10(%ebp),%edx
c010bcb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcbb:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010bcbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc0:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcc3:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010bcc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc9:	83 c0 08             	add    $0x8,%eax
c010bccc:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bccf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bcd2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bcd5:	89 50 04             	mov    %edx,0x4(%eax)
c010bcd8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bcdb:	8b 50 04             	mov    0x4(%eax),%edx
c010bcde:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bce1:	89 10                	mov    %edx,(%eax)
    return timer;
c010bce3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010bce6:	c9                   	leave  
c010bce7:	c3                   	ret    

c010bce8 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010bce8:	55                   	push   %ebp
c010bce9:	89 e5                	mov    %esp,%ebp
c010bceb:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010bcee:	9c                   	pushf  
c010bcef:	58                   	pop    %eax
c010bcf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010bcf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010bcf6:	25 00 02 00 00       	and    $0x200,%eax
c010bcfb:	85 c0                	test   %eax,%eax
c010bcfd:	74 0c                	je     c010bd0b <__intr_save+0x23>
        intr_disable();
c010bcff:	e8 26 64 ff ff       	call   c010212a <intr_disable>
        return 1;
c010bd04:	b8 01 00 00 00       	mov    $0x1,%eax
c010bd09:	eb 05                	jmp    c010bd10 <__intr_save+0x28>
    }
    return 0;
c010bd0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd10:	c9                   	leave  
c010bd11:	c3                   	ret    

c010bd12 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010bd12:	55                   	push   %ebp
c010bd13:	89 e5                	mov    %esp,%ebp
c010bd15:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010bd18:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bd1c:	74 05                	je     c010bd23 <__intr_restore+0x11>
        intr_enable();
c010bd1e:	e8 01 64 ff ff       	call   c0102124 <intr_enable>
    }
}
c010bd23:	c9                   	leave  
c010bd24:	c3                   	ret    

c010bd25 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010bd25:	55                   	push   %ebp
c010bd26:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010bd28:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd2b:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bd30:	29 c2                	sub    %eax,%edx
c010bd32:	89 d0                	mov    %edx,%eax
c010bd34:	c1 f8 05             	sar    $0x5,%eax
}
c010bd37:	5d                   	pop    %ebp
c010bd38:	c3                   	ret    

c010bd39 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010bd39:	55                   	push   %ebp
c010bd3a:	89 e5                	mov    %esp,%ebp
c010bd3c:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010bd3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd42:	89 04 24             	mov    %eax,(%esp)
c010bd45:	e8 db ff ff ff       	call   c010bd25 <page2ppn>
c010bd4a:	c1 e0 0c             	shl    $0xc,%eax
}
c010bd4d:	c9                   	leave  
c010bd4e:	c3                   	ret    

c010bd4f <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010bd4f:	55                   	push   %ebp
c010bd50:	89 e5                	mov    %esp,%ebp
c010bd52:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010bd55:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd58:	c1 e8 0c             	shr    $0xc,%eax
c010bd5b:	89 c2                	mov    %eax,%edx
c010bd5d:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bd62:	39 c2                	cmp    %eax,%edx
c010bd64:	72 1c                	jb     c010bd82 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010bd66:	c7 44 24 08 2c 7f 11 	movl   $0xc0117f2c,0x8(%esp)
c010bd6d:	c0 
c010bd6e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010bd75:	00 
c010bd76:	c7 04 24 4b 7f 11 c0 	movl   $0xc0117f4b,(%esp)
c010bd7d:	e8 46 51 ff ff       	call   c0100ec8 <__panic>
    }
    return &pages[PPN(pa)];
c010bd82:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010bd87:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd8a:	c1 ea 0c             	shr    $0xc,%edx
c010bd8d:	c1 e2 05             	shl    $0x5,%edx
c010bd90:	01 d0                	add    %edx,%eax
}
c010bd92:	c9                   	leave  
c010bd93:	c3                   	ret    

c010bd94 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010bd94:	55                   	push   %ebp
c010bd95:	89 e5                	mov    %esp,%ebp
c010bd97:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010bd9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9d:	89 04 24             	mov    %eax,(%esp)
c010bda0:	e8 94 ff ff ff       	call   c010bd39 <page2pa>
c010bda5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdab:	c1 e8 0c             	shr    $0xc,%eax
c010bdae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bdb1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010bdb6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bdb9:	72 23                	jb     c010bdde <page2kva+0x4a>
c010bdbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdbe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bdc2:	c7 44 24 08 5c 7f 11 	movl   $0xc0117f5c,0x8(%esp)
c010bdc9:	c0 
c010bdca:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010bdd1:	00 
c010bdd2:	c7 04 24 4b 7f 11 c0 	movl   $0xc0117f4b,(%esp)
c010bdd9:	e8 ea 50 ff ff       	call   c0100ec8 <__panic>
c010bdde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bde1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010bde6:	c9                   	leave  
c010bde7:	c3                   	ret    

c010bde8 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010bde8:	55                   	push   %ebp
c010bde9:	89 e5                	mov    %esp,%ebp
c010bdeb:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010bdee:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bdf4:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010bdfb:	77 23                	ja     c010be20 <kva2page+0x38>
c010bdfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be00:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010be04:	c7 44 24 08 80 7f 11 	movl   $0xc0117f80,0x8(%esp)
c010be0b:	c0 
c010be0c:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010be13:	00 
c010be14:	c7 04 24 4b 7f 11 c0 	movl   $0xc0117f4b,(%esp)
c010be1b:	e8 a8 50 ff ff       	call   c0100ec8 <__panic>
c010be20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be23:	05 00 00 00 40       	add    $0x40000000,%eax
c010be28:	89 04 24             	mov    %eax,(%esp)
c010be2b:	e8 1f ff ff ff       	call   c010bd4f <pa2page>
}
c010be30:	c9                   	leave  
c010be31:	c3                   	ret    

c010be32 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010be32:	55                   	push   %ebp
c010be33:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010be35:	8b 45 08             	mov    0x8(%ebp),%eax
c010be38:	8b 40 18             	mov    0x18(%eax),%eax
c010be3b:	8d 50 01             	lea    0x1(%eax),%edx
c010be3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010be41:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010be44:	8b 45 08             	mov    0x8(%ebp),%eax
c010be47:	8b 40 18             	mov    0x18(%eax),%eax
}
c010be4a:	5d                   	pop    %ebp
c010be4b:	c3                   	ret    

c010be4c <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010be4c:	55                   	push   %ebp
c010be4d:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010be4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010be52:	8b 40 18             	mov    0x18(%eax),%eax
c010be55:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be58:	8b 45 08             	mov    0x8(%ebp),%eax
c010be5b:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010be5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010be61:	8b 40 18             	mov    0x18(%eax),%eax
}
c010be64:	5d                   	pop    %ebp
c010be65:	c3                   	ret    

c010be66 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010be66:	55                   	push   %ebp
c010be67:	89 e5                	mov    %esp,%ebp
c010be69:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010be6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be70:	74 25                	je     c010be97 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010be72:	8b 45 08             	mov    0x8(%ebp),%eax
c010be75:	83 c0 1c             	add    $0x1c,%eax
c010be78:	89 04 24             	mov    %eax,(%esp)
c010be7b:	e8 fd dd ff ff       	call   c0109c7d <down>
        if (current != NULL) {
c010be80:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010be85:	85 c0                	test   %eax,%eax
c010be87:	74 0e                	je     c010be97 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010be89:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010be8e:	8b 50 04             	mov    0x4(%eax),%edx
c010be91:	8b 45 08             	mov    0x8(%ebp),%eax
c010be94:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010be97:	c9                   	leave  
c010be98:	c3                   	ret    

c010be99 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010be99:	55                   	push   %ebp
c010be9a:	89 e5                	mov    %esp,%ebp
c010be9c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010be9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bea3:	74 18                	je     c010bebd <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010bea5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea8:	83 c0 1c             	add    $0x1c,%eax
c010beab:	89 04 24             	mov    %eax,(%esp)
c010beae:	e8 af dd ff ff       	call   c0109c62 <up>
        mm->locked_by = 0;
c010beb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010beb6:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010bebd:	c9                   	leave  
c010bebe:	c3                   	ret    

c010bebf <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010bebf:	55                   	push   %ebp
c010bec0:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010bec2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec5:	8b 40 08             	mov    0x8(%eax),%eax
c010bec8:	8d 50 01             	lea    0x1(%eax),%edx
c010becb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bece:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010bed1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bed4:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bed7:	5d                   	pop    %ebp
c010bed8:	c3                   	ret    

c010bed9 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010bed9:	55                   	push   %ebp
c010beda:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010bedc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bedf:	8b 40 08             	mov    0x8(%eax),%eax
c010bee2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bee5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee8:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010beeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010beee:	8b 40 08             	mov    0x8(%eax),%eax
}
c010bef1:	5d                   	pop    %ebp
c010bef2:	c3                   	ret    

c010bef3 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010bef3:	55                   	push   %ebp
c010bef4:	89 e5                	mov    %esp,%ebp
c010bef6:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010bef9:	c7 04 24 c8 00 00 00 	movl   $0xc8,(%esp)
c010bf00:	e8 bc 8d ff ff       	call   c0104cc1 <kmalloc>
c010bf05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010bf08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bf0c:	0f 84 75 01 00 00    	je     c010c087 <alloc_proc+0x194>
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
    		proc->state = PROC_UNINIT;
c010bf12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf15:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010bf1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf1e:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010bf25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf28:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010bf2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf32:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010bf39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf3c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010bf43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf46:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010bf4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf50:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010bf57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf5a:	83 c0 1c             	add    $0x1c,%eax
c010bf5d:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010bf64:	00 
c010bf65:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf6c:	00 
c010bf6d:	89 04 24             	mov    %eax,(%esp)
c010bf70:	e8 04 95 00 00       	call   c0115479 <memset>
        proc->tf = NULL;
c010bf75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf78:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010bf7f:	8b 15 24 30 15 c0    	mov    0xc0153024,%edx
c010bf85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf88:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010bf8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf8e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010bf95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf98:	83 c0 48             	add    $0x48,%eax
c010bf9b:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010bfa2:	00 
c010bfa3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bfaa:	00 
c010bfab:	89 04 24             	mov    %eax,(%esp)
c010bfae:	e8 c6 94 00 00       	call   c0115479 <memset>
        proc->wait_state = 0;
c010bfb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb6:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010bfbd:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010bfc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfc3:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010bfca:	00 00 00 
c010bfcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfd0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010bfd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfd9:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010bfdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfe2:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010bfe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfeb:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
		proc->rq = NULL;
c010bff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bff4:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010bffb:	00 00 00 
		list_init(&(proc->run_link));
c010bffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c001:	05 a4 00 00 00       	add    $0xa4,%eax
c010c006:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c009:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c00c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c00f:	89 50 04             	mov    %edx,0x4(%eax)
c010c012:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c015:	8b 50 04             	mov    0x4(%eax),%edx
c010c018:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c01b:	89 10                	mov    %edx,(%eax)
		proc->time_slice = 0;
c010c01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c020:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010c027:	00 00 00 
		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010c02a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c02d:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010c034:	00 00 00 
c010c037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c03a:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010c040:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c043:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010c049:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c04c:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010c052:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c055:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		//skew_heap_init(&(proc->lab6_run_pool));
		proc->lab6_stride = proc->lab6_priority = 0;
c010c05b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c05e:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010c065:	00 00 00 
c010c068:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c06b:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
c010c071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c074:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
		proc->filesp = NULL;
c010c07a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c07d:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010c084:	00 00 00 
}
    return proc;
c010c087:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010c08a:	c9                   	leave  
c010c08b:	c3                   	ret    

c010c08c <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010c08c:	55                   	push   %ebp
c010c08d:	89 e5                	mov    %esp,%ebp
c010c08f:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010c092:	8b 45 08             	mov    0x8(%ebp),%eax
c010c095:	83 c0 48             	add    $0x48,%eax
c010c098:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c09f:	00 
c010c0a0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0a7:	00 
c010c0a8:	89 04 24             	mov    %eax,(%esp)
c010c0ab:	e8 c9 93 00 00       	call   c0115479 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010c0b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0b3:	8d 50 48             	lea    0x48(%eax),%edx
c010c0b6:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c0bd:	00 
c010c0be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0c5:	89 14 24             	mov    %edx,(%esp)
c010c0c8:	e8 8e 94 00 00       	call   c011555b <memcpy>
}
c010c0cd:	c9                   	leave  
c010c0ce:	c3                   	ret    

c010c0cf <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010c0cf:	55                   	push   %ebp
c010c0d0:	89 e5                	mov    %esp,%ebp
c010c0d2:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010c0d5:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010c0dc:	00 
c010c0dd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c0e4:	00 
c010c0e5:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c0ec:	e8 88 93 00 00       	call   c0115479 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010c0f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f4:	83 c0 48             	add    $0x48,%eax
c010c0f7:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010c0fe:	00 
c010c0ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c103:	c7 04 24 60 1f 15 c0 	movl   $0xc0151f60,(%esp)
c010c10a:	e8 4c 94 00 00       	call   c011555b <memcpy>
}
c010c10f:	c9                   	leave  
c010c110:	c3                   	ret    

c010c111 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010c111:	55                   	push   %ebp
c010c112:	89 e5                	mov    %esp,%ebp
c010c114:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010c117:	8b 45 08             	mov    0x8(%ebp),%eax
c010c11a:	83 c0 7c             	add    $0x7c,%eax
c010c11d:	c7 45 fc fc 31 15 c0 	movl   $0xc01531fc,-0x4(%ebp)
c010c124:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010c127:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c12a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c12d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c130:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c133:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c136:	8b 40 04             	mov    0x4(%eax),%eax
c010c139:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c13c:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c13f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c142:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c145:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c148:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c14b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c14e:	89 10                	mov    %edx,(%eax)
c010c150:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c153:	8b 10                	mov    (%eax),%edx
c010c155:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c158:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c15b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c15e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c161:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c164:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c167:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c16a:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010c16c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c16f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c176:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010c179:	8b 45 08             	mov    0x8(%ebp),%eax
c010c17c:	8b 40 14             	mov    0x14(%eax),%eax
c010c17f:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c185:	8b 45 08             	mov    0x8(%ebp),%eax
c010c188:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c18e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c191:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c197:	85 c0                	test   %eax,%eax
c010c199:	74 12                	je     c010c1ad <set_links+0x9c>
        proc->optr->yptr = proc;
c010c19b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c19e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c1a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1a7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010c1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b0:	8b 40 14             	mov    0x14(%eax),%eax
c010c1b3:	8b 55 08             	mov    0x8(%ebp),%edx
c010c1b6:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010c1bc:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c1c1:	83 c0 01             	add    $0x1,%eax
c010c1c4:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c1c9:	c9                   	leave  
c010c1ca:	c3                   	ret    

c010c1cb <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010c1cb:	55                   	push   %ebp
c010c1cc:	89 e5                	mov    %esp,%ebp
c010c1ce:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010c1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d4:	83 c0 7c             	add    $0x7c,%eax
c010c1d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c1da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c1dd:	8b 40 04             	mov    0x4(%eax),%eax
c010c1e0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c1e3:	8b 12                	mov    (%edx),%edx
c010c1e5:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c1e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c1eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c1ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1f1:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c1f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1f7:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c1fa:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010c1fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ff:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c205:	85 c0                	test   %eax,%eax
c010c207:	74 18                	je     c010c221 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010c209:	8b 45 08             	mov    0x8(%ebp),%eax
c010c20c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c212:	8b 55 08             	mov    0x8(%ebp),%edx
c010c215:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010c21b:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010c221:	8b 45 08             	mov    0x8(%ebp),%eax
c010c224:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c22a:	85 c0                	test   %eax,%eax
c010c22c:	74 1a                	je     c010c248 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010c22e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c231:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c237:	8b 55 08             	mov    0x8(%ebp),%edx
c010c23a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c240:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c246:	eb 15                	jmp    c010c25d <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010c248:	8b 45 08             	mov    0x8(%ebp),%eax
c010c24b:	8b 40 14             	mov    0x14(%eax),%eax
c010c24e:	8b 55 08             	mov    0x8(%ebp),%edx
c010c251:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c257:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010c25d:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c262:	83 e8 01             	sub    $0x1,%eax
c010c265:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40
}
c010c26a:	c9                   	leave  
c010c26b:	c3                   	ret    

c010c26c <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010c26c:	55                   	push   %ebp
c010c26d:	89 e5                	mov    %esp,%ebp
c010c26f:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010c272:	c7 45 f8 fc 31 15 c0 	movl   $0xc01531fc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010c279:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c27e:	83 c0 01             	add    $0x1,%eax
c010c281:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c286:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c28b:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c290:	7e 0c                	jle    c010c29e <get_pid+0x32>
        last_pid = 1;
c010c292:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c299:	00 00 00 
        goto inside;
c010c29c:	eb 13                	jmp    c010c2b1 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010c29e:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c2a4:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c2a9:	39 c2                	cmp    %eax,%edx
c010c2ab:	0f 8c ac 00 00 00    	jl     c010c35d <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010c2b1:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c2b8:	20 00 00 
    repeat:
        le = list;
c010c2bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c2be:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010c2c1:	eb 7f                	jmp    c010c342 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010c2c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c2c6:	83 e8 7c             	sub    $0x7c,%eax
c010c2c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010c2cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2cf:	8b 50 04             	mov    0x4(%eax),%edx
c010c2d2:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2d7:	39 c2                	cmp    %eax,%edx
c010c2d9:	75 3e                	jne    c010c319 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010c2db:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2e0:	83 c0 01             	add    $0x1,%eax
c010c2e3:	a3 84 ea 14 c0       	mov    %eax,0xc014ea84
c010c2e8:	8b 15 84 ea 14 c0    	mov    0xc014ea84,%edx
c010c2ee:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c2f3:	39 c2                	cmp    %eax,%edx
c010c2f5:	7c 4b                	jl     c010c342 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010c2f7:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c2fc:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010c301:	7e 0a                	jle    c010c30d <get_pid+0xa1>
                        last_pid = 1;
c010c303:	c7 05 84 ea 14 c0 01 	movl   $0x1,0xc014ea84
c010c30a:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010c30d:	c7 05 88 ea 14 c0 00 	movl   $0x2000,0xc014ea88
c010c314:	20 00 00 
                    goto repeat;
c010c317:	eb a2                	jmp    c010c2bb <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010c319:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c31c:	8b 50 04             	mov    0x4(%eax),%edx
c010c31f:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
c010c324:	39 c2                	cmp    %eax,%edx
c010c326:	7e 1a                	jle    c010c342 <get_pid+0xd6>
c010c328:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c32b:	8b 50 04             	mov    0x4(%eax),%edx
c010c32e:	a1 88 ea 14 c0       	mov    0xc014ea88,%eax
c010c333:	39 c2                	cmp    %eax,%edx
c010c335:	7d 0b                	jge    c010c342 <get_pid+0xd6>
                next_safe = proc->pid;
c010c337:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c33a:	8b 40 04             	mov    0x4(%eax),%eax
c010c33d:	a3 88 ea 14 c0       	mov    %eax,0xc014ea88
c010c342:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c345:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c348:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c34b:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010c34e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c351:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c354:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010c357:	0f 85 66 ff ff ff    	jne    c010c2c3 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010c35d:	a1 84 ea 14 c0       	mov    0xc014ea84,%eax
}
c010c362:	c9                   	leave  
c010c363:	c3                   	ret    

c010c364 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010c364:	55                   	push   %ebp
c010c365:	89 e5                	mov    %esp,%ebp
c010c367:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010c36a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c36f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c372:	74 63                	je     c010c3d7 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010c374:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c379:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c37c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c37f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010c382:	e8 61 f9 ff ff       	call   c010bce8 <__intr_save>
c010c387:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010c38a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c38d:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28
            load_esp0(next->kstack + KSTACKSIZE);
c010c392:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c395:	8b 40 0c             	mov    0xc(%eax),%eax
c010c398:	05 00 20 00 00       	add    $0x2000,%eax
c010c39d:	89 04 24             	mov    %eax,(%esp)
c010c3a0:	e8 43 8c ff ff       	call   c0104fe8 <load_esp0>
            lcr3(next->cr3);
c010c3a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3a8:	8b 40 40             	mov    0x40(%eax),%eax
c010c3ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010c3ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c3b1:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010c3b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3b7:	8d 50 1c             	lea    0x1c(%eax),%edx
c010c3ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3bd:	83 c0 1c             	add    $0x1c,%eax
c010c3c0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c3c4:	89 04 24             	mov    %eax,(%esp)
c010c3c7:	e8 44 1c 00 00       	call   c010e010 <switch_to>
        }
        local_intr_restore(intr_flag);
c010c3cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3cf:	89 04 24             	mov    %eax,(%esp)
c010c3d2:	e8 3b f9 ff ff       	call   c010bd12 <__intr_restore>
    }
}
c010c3d7:	c9                   	leave  
c010c3d8:	c3                   	ret    

c010c3d9 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010c3d9:	55                   	push   %ebp
c010c3da:	89 e5                	mov    %esp,%ebp
c010c3dc:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010c3df:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c3e4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c3e7:	89 04 24             	mov    %eax,(%esp)
c010c3ea:	e8 59 67 ff ff       	call   c0102b48 <forkrets>
}
c010c3ef:	c9                   	leave  
c010c3f0:	c3                   	ret    

c010c3f1 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010c3f1:	55                   	push   %ebp
c010c3f2:	89 e5                	mov    %esp,%ebp
c010c3f4:	53                   	push   %ebx
c010c3f5:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010c3f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fb:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010c401:	8b 45 08             	mov    0x8(%ebp),%eax
c010c404:	8b 40 04             	mov    0x4(%eax),%eax
c010c407:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c40e:	00 
c010c40f:	89 04 24             	mov    %eax,(%esp)
c010c412:	e8 08 85 00 00       	call   c011491f <hash32>
c010c417:	c1 e0 03             	shl    $0x3,%eax
c010c41a:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c41f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c422:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010c425:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c428:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c42b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c42e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010c431:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c434:	8b 40 04             	mov    0x4(%eax),%eax
c010c437:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c43a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c43d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c440:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010c443:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c446:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c449:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c44c:	89 10                	mov    %edx,(%eax)
c010c44e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c451:	8b 10                	mov    (%eax),%edx
c010c453:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c456:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c459:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c45c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c45f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c465:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c468:	89 10                	mov    %edx,(%eax)
}
c010c46a:	83 c4 34             	add    $0x34,%esp
c010c46d:	5b                   	pop    %ebx
c010c46e:	5d                   	pop    %ebp
c010c46f:	c3                   	ret    

c010c470 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010c470:	55                   	push   %ebp
c010c471:	89 e5                	mov    %esp,%ebp
c010c473:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010c476:	8b 45 08             	mov    0x8(%ebp),%eax
c010c479:	05 84 00 00 00       	add    $0x84,%eax
c010c47e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c481:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c484:	8b 40 04             	mov    0x4(%eax),%eax
c010c487:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c48a:	8b 12                	mov    (%edx),%edx
c010c48c:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c48f:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c492:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c495:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c498:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c49b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c49e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c4a1:	89 10                	mov    %edx,(%eax)
}
c010c4a3:	c9                   	leave  
c010c4a4:	c3                   	ret    

c010c4a5 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010c4a5:	55                   	push   %ebp
c010c4a6:	89 e5                	mov    %esp,%ebp
c010c4a8:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010c4ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c4af:	7e 61                	jle    c010c512 <find_proc+0x6d>
c010c4b1:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010c4b8:	7f 58                	jg     c010c512 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010c4ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4bd:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010c4c4:	00 
c010c4c5:	89 04 24             	mov    %eax,(%esp)
c010c4c8:	e8 52 84 00 00       	call   c011491f <hash32>
c010c4cd:	c1 e0 03             	shl    $0x3,%eax
c010c4d0:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010c4d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c4d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4db:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010c4de:	eb 1b                	jmp    c010c4fb <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010c4e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4e3:	2d 84 00 00 00       	sub    $0x84,%eax
c010c4e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010c4eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4ee:	8b 40 04             	mov    0x4(%eax),%eax
c010c4f1:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c4f4:	75 05                	jne    c010c4fb <find_proc+0x56>
                return proc;
c010c4f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f9:	eb 1c                	jmp    c010c517 <find_proc+0x72>
c010c4fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c501:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c504:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010c507:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c50a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c50d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010c510:	75 ce                	jne    c010c4e0 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010c512:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c517:	c9                   	leave  
c010c518:	c3                   	ret    

c010c519 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010c519:	55                   	push   %ebp
c010c51a:	89 e5                	mov    %esp,%ebp
c010c51c:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010c51f:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010c526:	00 
c010c527:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c52e:	00 
c010c52f:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c532:	89 04 24             	mov    %eax,(%esp)
c010c535:	e8 3f 8f 00 00       	call   c0115479 <memset>
    tf.tf_cs = KERNEL_CS;
c010c53a:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010c540:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010c546:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010c54a:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010c54e:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010c552:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010c556:	8b 45 08             	mov    0x8(%ebp),%eax
c010c559:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010c55c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c55f:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010c562:	b8 a6 bc 10 c0       	mov    $0xc010bca6,%eax
c010c567:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010c56a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c56d:	80 cc 01             	or     $0x1,%ah
c010c570:	89 c2                	mov    %eax,%edx
c010c572:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010c575:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c579:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c580:	00 
c010c581:	89 14 24             	mov    %edx,(%esp)
c010c584:	e8 0e 04 00 00       	call   c010c997 <do_fork>
}
c010c589:	c9                   	leave  
c010c58a:	c3                   	ret    

c010c58b <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010c58b:	55                   	push   %ebp
c010c58c:	89 e5                	mov    %esp,%ebp
c010c58e:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010c591:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010c598:	e8 99 8b ff ff       	call   c0105136 <alloc_pages>
c010c59d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010c5a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c5a4:	74 1a                	je     c010c5c0 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010c5a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5a9:	89 04 24             	mov    %eax,(%esp)
c010c5ac:	e8 e3 f7 ff ff       	call   c010bd94 <page2kva>
c010c5b1:	89 c2                	mov    %eax,%edx
c010c5b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5b6:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010c5b9:	b8 00 00 00 00       	mov    $0x0,%eax
c010c5be:	eb 05                	jmp    c010c5c5 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010c5c0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010c5c5:	c9                   	leave  
c010c5c6:	c3                   	ret    

c010c5c7 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010c5c7:	55                   	push   %ebp
c010c5c8:	89 e5                	mov    %esp,%ebp
c010c5ca:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010c5cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d0:	8b 40 0c             	mov    0xc(%eax),%eax
c010c5d3:	89 04 24             	mov    %eax,(%esp)
c010c5d6:	e8 0d f8 ff ff       	call   c010bde8 <kva2page>
c010c5db:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010c5e2:	00 
c010c5e3:	89 04 24             	mov    %eax,(%esp)
c010c5e6:	e8 b6 8b ff ff       	call   c01051a1 <free_pages>
}
c010c5eb:	c9                   	leave  
c010c5ec:	c3                   	ret    

c010c5ed <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010c5ed:	55                   	push   %ebp
c010c5ee:	89 e5                	mov    %esp,%ebp
c010c5f0:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010c5f3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010c5fa:	e8 37 8b ff ff       	call   c0105136 <alloc_pages>
c010c5ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c602:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c606:	75 0a                	jne    c010c612 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010c608:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010c60d:	e9 80 00 00 00       	jmp    c010c692 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010c612:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c615:	89 04 24             	mov    %eax,(%esp)
c010c618:	e8 77 f7 ff ff       	call   c010bd94 <page2kva>
c010c61d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010c620:	a1 84 fe 14 c0       	mov    0xc014fe84,%eax
c010c625:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010c62c:	00 
c010c62d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c631:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c634:	89 04 24             	mov    %eax,(%esp)
c010c637:	e8 1f 8f 00 00       	call   c011555b <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010c63c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c63f:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010c645:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c648:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c64b:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010c652:	77 23                	ja     c010c677 <setup_pgdir+0x8a>
c010c654:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c657:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c65b:	c7 44 24 08 80 7f 11 	movl   $0xc0117f80,0x8(%esp)
c010c662:	c0 
c010c663:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
c010c66a:	00 
c010c66b:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010c672:	e8 51 48 ff ff       	call   c0100ec8 <__panic>
c010c677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c67a:	05 00 00 00 40       	add    $0x40000000,%eax
c010c67f:	83 c8 03             	or     $0x3,%eax
c010c682:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010c684:	8b 45 08             	mov    0x8(%ebp),%eax
c010c687:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c68a:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010c68d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c692:	c9                   	leave  
c010c693:	c3                   	ret    

c010c694 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010c694:	55                   	push   %ebp
c010c695:	89 e5                	mov    %esp,%ebp
c010c697:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010c69a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c69d:	8b 40 0c             	mov    0xc(%eax),%eax
c010c6a0:	89 04 24             	mov    %eax,(%esp)
c010c6a3:	e8 40 f7 ff ff       	call   c010bde8 <kva2page>
c010c6a8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010c6af:	00 
c010c6b0:	89 04 24             	mov    %eax,(%esp)
c010c6b3:	e8 e9 8a ff ff       	call   c01051a1 <free_pages>
}
c010c6b8:	c9                   	leave  
c010c6b9:	c3                   	ret    

c010c6ba <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010c6ba:	55                   	push   %ebp
c010c6bb:	89 e5                	mov    %esp,%ebp
c010c6bd:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010c6c0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c6c5:	8b 40 18             	mov    0x18(%eax),%eax
c010c6c8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010c6cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c6cf:	75 0a                	jne    c010c6db <copy_mm+0x21>
        return 0;
c010c6d1:	b8 00 00 00 00       	mov    $0x0,%eax
c010c6d6:	e9 f9 00 00 00       	jmp    c010c7d4 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010c6db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6de:	25 00 01 00 00       	and    $0x100,%eax
c010c6e3:	85 c0                	test   %eax,%eax
c010c6e5:	74 08                	je     c010c6ef <copy_mm+0x35>
        mm = oldmm;
c010c6e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010c6ed:	eb 78                	jmp    c010c767 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010c6ef:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010c6f6:	e8 d4 b7 ff ff       	call   c0107ecf <mm_create>
c010c6fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c6fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c702:	75 05                	jne    c010c709 <copy_mm+0x4f>
        goto bad_mm;
c010c704:	e9 c8 00 00 00       	jmp    c010c7d1 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010c709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c70c:	89 04 24             	mov    %eax,(%esp)
c010c70f:	e8 d9 fe ff ff       	call   c010c5ed <setup_pgdir>
c010c714:	85 c0                	test   %eax,%eax
c010c716:	74 05                	je     c010c71d <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010c718:	e9 a9 00 00 00       	jmp    c010c7c6 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010c71d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c720:	89 04 24             	mov    %eax,(%esp)
c010c723:	e8 3e f7 ff ff       	call   c010be66 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010c728:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c72b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c72f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c732:	89 04 24             	mov    %eax,(%esp)
c010c735:	e8 b8 bc ff ff       	call   c01083f2 <dup_mmap>
c010c73a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010c73d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c740:	89 04 24             	mov    %eax,(%esp)
c010c743:	e8 51 f7 ff ff       	call   c010be99 <unlock_mm>

    if (ret != 0) {
c010c748:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c74c:	74 19                	je     c010c767 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010c74e:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010c74f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c752:	89 04 24             	mov    %eax,(%esp)
c010c755:	e8 99 bd ff ff       	call   c01084f3 <exit_mmap>
    put_pgdir(mm);
c010c75a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c75d:	89 04 24             	mov    %eax,(%esp)
c010c760:	e8 2f ff ff ff       	call   c010c694 <put_pgdir>
c010c765:	eb 5f                	jmp    c010c7c6 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010c767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c76a:	89 04 24             	mov    %eax,(%esp)
c010c76d:	e8 c0 f6 ff ff       	call   c010be32 <mm_count_inc>
    proc->mm = mm;
c010c772:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c775:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c778:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010c77b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c77e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c781:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c784:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010c78b:	77 23                	ja     c010c7b0 <copy_mm+0xf6>
c010c78d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c790:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c794:	c7 44 24 08 80 7f 11 	movl   $0xc0117f80,0x8(%esp)
c010c79b:	c0 
c010c79c:	c7 44 24 04 72 01 00 	movl   $0x172,0x4(%esp)
c010c7a3:	00 
c010c7a4:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010c7ab:	e8 18 47 ff ff       	call   c0100ec8 <__panic>
c010c7b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7b3:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010c7b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7bc:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010c7bf:	b8 00 00 00 00       	mov    $0x0,%eax
c010c7c4:	eb 0e                	jmp    c010c7d4 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010c7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7c9:	89 04 24             	mov    %eax,(%esp)
c010c7cc:	e8 63 ba ff ff       	call   c0108234 <mm_destroy>
bad_mm:
    return ret;
c010c7d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c7d4:	c9                   	leave  
c010c7d5:	c3                   	ret    

c010c7d6 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010c7d6:	55                   	push   %ebp
c010c7d7:	89 e5                	mov    %esp,%ebp
c010c7d9:	57                   	push   %edi
c010c7da:	56                   	push   %esi
c010c7db:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010c7dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7df:	8b 40 0c             	mov    0xc(%eax),%eax
c010c7e2:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010c7e7:	89 c2                	mov    %eax,%edx
c010c7e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ec:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010c7ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7f2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c7f5:	8b 55 10             	mov    0x10(%ebp),%edx
c010c7f8:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010c7fd:	89 c1                	mov    %eax,%ecx
c010c7ff:	83 e1 01             	and    $0x1,%ecx
c010c802:	85 c9                	test   %ecx,%ecx
c010c804:	74 0e                	je     c010c814 <copy_thread+0x3e>
c010c806:	0f b6 0a             	movzbl (%edx),%ecx
c010c809:	88 08                	mov    %cl,(%eax)
c010c80b:	83 c0 01             	add    $0x1,%eax
c010c80e:	83 c2 01             	add    $0x1,%edx
c010c811:	83 eb 01             	sub    $0x1,%ebx
c010c814:	89 c1                	mov    %eax,%ecx
c010c816:	83 e1 02             	and    $0x2,%ecx
c010c819:	85 c9                	test   %ecx,%ecx
c010c81b:	74 0f                	je     c010c82c <copy_thread+0x56>
c010c81d:	0f b7 0a             	movzwl (%edx),%ecx
c010c820:	66 89 08             	mov    %cx,(%eax)
c010c823:	83 c0 02             	add    $0x2,%eax
c010c826:	83 c2 02             	add    $0x2,%edx
c010c829:	83 eb 02             	sub    $0x2,%ebx
c010c82c:	89 d9                	mov    %ebx,%ecx
c010c82e:	c1 e9 02             	shr    $0x2,%ecx
c010c831:	89 c7                	mov    %eax,%edi
c010c833:	89 d6                	mov    %edx,%esi
c010c835:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c837:	89 f2                	mov    %esi,%edx
c010c839:	89 f8                	mov    %edi,%eax
c010c83b:	b9 00 00 00 00       	mov    $0x0,%ecx
c010c840:	89 de                	mov    %ebx,%esi
c010c842:	83 e6 02             	and    $0x2,%esi
c010c845:	85 f6                	test   %esi,%esi
c010c847:	74 0b                	je     c010c854 <copy_thread+0x7e>
c010c849:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010c84d:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010c851:	83 c1 02             	add    $0x2,%ecx
c010c854:	83 e3 01             	and    $0x1,%ebx
c010c857:	85 db                	test   %ebx,%ebx
c010c859:	74 07                	je     c010c862 <copy_thread+0x8c>
c010c85b:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010c85f:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010c862:	8b 45 08             	mov    0x8(%ebp),%eax
c010c865:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c868:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c86f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c872:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c875:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c878:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c87b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c87e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c881:	8b 55 08             	mov    0x8(%ebp),%edx
c010c884:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c887:	8b 52 40             	mov    0x40(%edx),%edx
c010c88a:	80 ce 02             	or     $0x2,%dh
c010c88d:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c890:	ba d9 c3 10 c0       	mov    $0xc010c3d9,%edx
c010c895:	8b 45 08             	mov    0x8(%ebp),%eax
c010c898:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c89b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c89e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c8a1:	89 c2                	mov    %eax,%edx
c010c8a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8a6:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c8a9:	5b                   	pop    %ebx
c010c8aa:	5e                   	pop    %esi
c010c8ab:	5f                   	pop    %edi
c010c8ac:	5d                   	pop    %ebp
c010c8ad:	c3                   	ret    

c010c8ae <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c8ae:	55                   	push   %ebp
c010c8af:	89 e5                	mov    %esp,%ebp
c010c8b1:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c8b4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c8b9:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c8bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c8c2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c8c6:	75 24                	jne    c010c8ec <copy_files+0x3e>
c010c8c8:	c7 44 24 0c b8 7f 11 	movl   $0xc0117fb8,0xc(%esp)
c010c8cf:	c0 
c010c8d0:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010c8d7:	c0 
c010c8d8:	c7 44 24 04 90 01 00 	movl   $0x190,0x4(%esp)
c010c8df:	00 
c010c8e0:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010c8e7:	e8 dc 45 ff ff       	call   c0100ec8 <__panic>

    if (clone_flags & CLONE_FS) {
c010c8ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ef:	25 00 08 00 00       	and    $0x800,%eax
c010c8f4:	85 c0                	test   %eax,%eax
c010c8f6:	74 08                	je     c010c900 <copy_files+0x52>
        filesp = old_filesp;
c010c8f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c8fe:	eb 40                	jmp    c010c940 <copy_files+0x92>
    }

    int ret = -E_NO_MEM;
c010c900:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c907:	e8 1a e7 ff ff       	call   c010b026 <files_create>
c010c90c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c90f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c913:	75 02                	jne    c010c917 <copy_files+0x69>
        goto bad_files_struct;
c010c915:	eb 47                	jmp    c010c95e <copy_files+0xb0>
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c917:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c91a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c91e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c921:	89 04 24             	mov    %eax,(%esp)
c010c924:	e8 a6 e8 ff ff       	call   c010b1cf <dup_files>
c010c929:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c92c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c930:	74 0e                	je     c010c940 <copy_files+0x92>
        goto bad_dup_cleanup_fs;
c010c932:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c933:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c936:	89 04 24             	mov    %eax,(%esp)
c010c939:	e8 4b e7 ff ff       	call   c010b089 <files_destroy>
c010c93e:	eb 1e                	jmp    c010c95e <copy_files+0xb0>
    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c943:	89 04 24             	mov    %eax,(%esp)
c010c946:	e8 74 f5 ff ff       	call   c010bebf <files_count_inc>
    proc->filesp = filesp;
c010c94b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c94e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c951:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c957:	b8 00 00 00 00       	mov    $0x0,%eax
c010c95c:	eb 03                	jmp    c010c961 <copy_files+0xb3>

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c95e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c961:	c9                   	leave  
c010c962:	c3                   	ret    

c010c963 <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010c963:	55                   	push   %ebp
c010c964:	89 e5                	mov    %esp,%ebp
c010c966:	83 ec 28             	sub    $0x28,%esp
    struct files_struct *filesp = proc->filesp;
c010c969:	8b 45 08             	mov    0x8(%ebp),%eax
c010c96c:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c972:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c975:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c979:	74 1a                	je     c010c995 <put_files+0x32>
        if (files_count_dec(filesp) == 0) {
c010c97b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c97e:	89 04 24             	mov    %eax,(%esp)
c010c981:	e8 53 f5 ff ff       	call   c010bed9 <files_count_dec>
c010c986:	85 c0                	test   %eax,%eax
c010c988:	75 0b                	jne    c010c995 <put_files+0x32>
            files_destroy(filesp);
c010c98a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c98d:	89 04 24             	mov    %eax,(%esp)
c010c990:	e8 f4 e6 ff ff       	call   c010b089 <files_destroy>
        }
    }
}
c010c995:	c9                   	leave  
c010c996:	c3                   	ret    

c010c997 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c997:	55                   	push   %ebp
c010c998:	89 e5                	mov    %esp,%ebp
c010c99a:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010c99d:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c9a4:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010c9a9:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c9ae:	7e 05                	jle    c010c9b5 <do_fork+0x1e>
        goto fork_out;
c010c9b0:	e9 0d 01 00 00       	jmp    c010cac2 <do_fork+0x12b>
    }
    ret = -E_NO_MEM;
c010c9b5:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c010c9bc:	e8 32 f5 ff ff       	call   c010bef3 <alloc_proc>
c010c9c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c9c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c9c8:	75 05                	jne    c010c9cf <do_fork+0x38>
        goto fork_out;
c010c9ca:	e9 f3 00 00 00       	jmp    c010cac2 <do_fork+0x12b>
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	proc->parent = current;
c010c9cf:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010c9d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9d8:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010c9db:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010c9e0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c9e6:	85 c0                	test   %eax,%eax
c010c9e8:	74 24                	je     c010ca0e <do_fork+0x77>
c010c9ea:	c7 44 24 0c e0 7f 11 	movl   $0xc0117fe0,0xc(%esp)
c010c9f1:	c0 
c010c9f2:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010c9f9:	c0 
c010c9fa:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c010ca01:	00 
c010ca02:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010ca09:	e8 ba 44 ff ff       	call   c0100ec8 <__panic>

    if (setup_kstack(proc) != 0) {
c010ca0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca11:	89 04 24             	mov    %eax,(%esp)
c010ca14:	e8 72 fb ff ff       	call   c010c58b <setup_kstack>
c010ca19:	85 c0                	test   %eax,%eax
c010ca1b:	74 05                	je     c010ca22 <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010ca1d:	e9 b0 00 00 00       	jmp    c010cad2 <do_fork+0x13b>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010ca22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca25:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca29:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca2c:	89 04 24             	mov    %eax,(%esp)
c010ca2f:	e8 86 fc ff ff       	call   c010c6ba <copy_mm>
c010ca34:	85 c0                	test   %eax,%eax
c010ca36:	74 05                	je     c010ca3d <do_fork+0xa6>
        goto bad_fork_cleanup_kstack;
c010ca38:	e9 8a 00 00 00       	jmp    c010cac7 <do_fork+0x130>
    }
	if (copy_files(clone_flags, proc) != 0)
c010ca3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca40:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca44:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca47:	89 04 24             	mov    %eax,(%esp)
c010ca4a:	e8 5f fe ff ff       	call   c010c8ae <copy_files>
c010ca4f:	85 c0                	test   %eax,%eax
c010ca51:	74 0e                	je     c010ca61 <do_fork+0xca>
    	goto bad_fork_cleanup_fs;
c010ca53:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
c010ca54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca57:	89 04 24             	mov    %eax,(%esp)
c010ca5a:	e8 04 ff ff ff       	call   c010c963 <put_files>
c010ca5f:	eb 66                	jmp    c010cac7 <do_fork+0x130>
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
	if (copy_files(clone_flags, proc) != 0)
    	goto bad_fork_cleanup_fs;
    copy_thread(proc, stack, tf);
c010ca61:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca64:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ca68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca72:	89 04 24             	mov    %eax,(%esp)
c010ca75:	e8 5c fd ff ff       	call   c010c7d6 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010ca7a:	e8 69 f2 ff ff       	call   c010bce8 <__intr_save>
c010ca7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010ca82:	e8 e5 f7 ff ff       	call   c010c26c <get_pid>
c010ca87:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ca8a:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010ca8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca90:	89 04 24             	mov    %eax,(%esp)
c010ca93:	e8 59 f9 ff ff       	call   c010c3f1 <hash_proc>
        set_links(proc);
c010ca98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca9b:	89 04 24             	mov    %eax,(%esp)
c010ca9e:	e8 6e f6 ff ff       	call   c010c111 <set_links>

    }
    local_intr_restore(intr_flag);
c010caa3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010caa6:	89 04 24             	mov    %eax,(%esp)
c010caa9:	e8 64 f2 ff ff       	call   c010bd12 <__intr_restore>

    wakeup_proc(proc);
c010caae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cab1:	89 04 24             	mov    %eax,(%esp)
c010cab4:	e8 4b 1a 00 00       	call   c010e504 <wakeup_proc>

    ret = proc->pid;
c010cab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cabc:	8b 40 04             	mov    0x4(%eax),%eax
c010cabf:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010cac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cac5:	eb 18                	jmp    c010cadf <do_fork+0x148>

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010cac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caca:	89 04 24             	mov    %eax,(%esp)
c010cacd:	e8 f5 fa ff ff       	call   c010c5c7 <put_kstack>
bad_fork_cleanup_proc:
    kfree(proc);
c010cad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cad5:	89 04 24             	mov    %eax,(%esp)
c010cad8:	e8 ff 81 ff ff       	call   c0104cdc <kfree>
    goto fork_out;
c010cadd:	eb e3                	jmp    c010cac2 <do_fork+0x12b>
}
c010cadf:	c9                   	leave  
c010cae0:	c3                   	ret    

c010cae1 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010cae1:	55                   	push   %ebp
c010cae2:	89 e5                	mov    %esp,%ebp
c010cae4:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010cae7:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010caed:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010caf2:	39 c2                	cmp    %eax,%edx
c010caf4:	75 1c                	jne    c010cb12 <do_exit+0x31>
        panic("idleproc exit.\n");
c010caf6:	c7 44 24 08 f9 7f 11 	movl   $0xc0117ff9,0x8(%esp)
c010cafd:	c0 
c010cafe:	c7 44 24 04 15 02 00 	movl   $0x215,0x4(%esp)
c010cb05:	00 
c010cb06:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010cb0d:	e8 b6 43 ff ff       	call   c0100ec8 <__panic>
    }
    if (current == initproc) {
c010cb12:	8b 15 28 ff 14 c0    	mov    0xc014ff28,%edx
c010cb18:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cb1d:	39 c2                	cmp    %eax,%edx
c010cb1f:	75 1c                	jne    c010cb3d <do_exit+0x5c>
        panic("initproc exit.\n");
c010cb21:	c7 44 24 08 09 80 11 	movl   $0xc0118009,0x8(%esp)
c010cb28:	c0 
c010cb29:	c7 44 24 04 18 02 00 	movl   $0x218,0x4(%esp)
c010cb30:	00 
c010cb31:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010cb38:	e8 8b 43 ff ff       	call   c0100ec8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010cb3d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb42:	8b 40 18             	mov    0x18(%eax),%eax
c010cb45:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010cb48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb4c:	74 4a                	je     c010cb98 <do_exit+0xb7>
        lcr3(boot_cr3);
c010cb4e:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010cb53:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cb56:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cb59:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010cb5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb5f:	89 04 24             	mov    %eax,(%esp)
c010cb62:	e8 e5 f2 ff ff       	call   c010be4c <mm_count_dec>
c010cb67:	85 c0                	test   %eax,%eax
c010cb69:	75 21                	jne    c010cb8c <do_exit+0xab>
            exit_mmap(mm);
c010cb6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb6e:	89 04 24             	mov    %eax,(%esp)
c010cb71:	e8 7d b9 ff ff       	call   c01084f3 <exit_mmap>
            put_pgdir(mm);
c010cb76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb79:	89 04 24             	mov    %eax,(%esp)
c010cb7c:	e8 13 fb ff ff       	call   c010c694 <put_pgdir>
            mm_destroy(mm);
c010cb81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb84:	89 04 24             	mov    %eax,(%esp)
c010cb87:	e8 a8 b6 ff ff       	call   c0108234 <mm_destroy>
        }
        current->mm = NULL;
c010cb8c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb91:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010cb98:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cb9d:	89 04 24             	mov    %eax,(%esp)
c010cba0:	e8 be fd ff ff       	call   c010c963 <put_files>
    current->state = PROC_ZOMBIE;
c010cba5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbaa:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010cbb0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbb5:	8b 55 08             	mov    0x8(%ebp),%edx
c010cbb8:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010cbbe:	e8 25 f1 ff ff       	call   c010bce8 <__intr_save>
c010cbc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010cbc6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbcb:	8b 40 14             	mov    0x14(%eax),%eax
c010cbce:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010cbd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbd4:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cbda:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cbdf:	75 10                	jne    c010cbf1 <do_exit+0x110>
            wakeup_proc(proc);
c010cbe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cbe4:	89 04 24             	mov    %eax,(%esp)
c010cbe7:	e8 18 19 00 00       	call   c010e504 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010cbec:	e9 ac 00 00 00       	jmp    c010cc9d <do_exit+0x1bc>
c010cbf1:	e9 a7 00 00 00       	jmp    c010cc9d <do_exit+0x1bc>
            proc = current->cptr;
c010cbf6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cbfb:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cc01:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010cc04:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cc09:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc0c:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010cc12:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010cc18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc1b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010cc22:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010cc25:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc2a:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010cc30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc33:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010cc39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc3c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010cc42:	85 c0                	test   %eax,%eax
c010cc44:	74 14                	je     c010cc5a <do_exit+0x179>
                initproc->cptr->yptr = proc;
c010cc46:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc4b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cc51:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc54:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010cc5a:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010cc60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc63:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010cc66:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc6b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cc6e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010cc74:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc77:	8b 00                	mov    (%eax),%eax
c010cc79:	83 f8 03             	cmp    $0x3,%eax
c010cc7c:	75 1f                	jne    c010cc9d <do_exit+0x1bc>
                if (initproc->wait_state == WT_CHILD) {
c010cc7e:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc83:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cc89:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010cc8e:	75 0d                	jne    c010cc9d <do_exit+0x1bc>
                    wakeup_proc(initproc);
c010cc90:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010cc95:	89 04 24             	mov    %eax,(%esp)
c010cc98:	e8 67 18 00 00       	call   c010e504 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010cc9d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cca2:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010cca8:	85 c0                	test   %eax,%eax
c010ccaa:	0f 85 46 ff ff ff    	jne    c010cbf6 <do_exit+0x115>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010ccb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccb3:	89 04 24             	mov    %eax,(%esp)
c010ccb6:	e8 57 f0 ff ff       	call   c010bd12 <__intr_restore>
    
    schedule();
c010ccbb:	e8 e0 18 00 00       	call   c010e5a0 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010ccc0:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ccc5:	8b 40 04             	mov    0x4(%eax),%eax
c010ccc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cccc:	c7 44 24 08 1c 80 11 	movl   $0xc011801c,0x8(%esp)
c010ccd3:	c0 
c010ccd4:	c7 44 24 04 45 02 00 	movl   $0x245,0x4(%esp)
c010ccdb:	00 
c010ccdc:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010cce3:	e8 e0 41 ff ff       	call   c0100ec8 <__panic>

c010cce8 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010cce8:	55                   	push   %ebp
c010cce9:	89 e5                	mov    %esp,%ebp
c010cceb:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010ccee:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010ccf5:	00 
c010ccf6:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccf9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccfd:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd00:	89 04 24             	mov    %eax,(%esp)
c010cd03:	e8 a9 eb ff ff       	call   c010b8b1 <sysfile_seek>
c010cd08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd0f:	74 05                	je     c010cd16 <load_icode_read+0x2e>
        return ret;
c010cd11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd14:	eb 38                	jmp    c010cd4e <load_icode_read+0x66>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010cd16:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd19:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd20:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd24:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd27:	89 04 24             	mov    %eax,(%esp)
c010cd2a:	e8 90 e8 ff ff       	call   c010b5bf <sysfile_read>
c010cd2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cd32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd35:	3b 45 10             	cmp    0x10(%ebp),%eax
c010cd38:	74 0f                	je     c010cd49 <load_icode_read+0x61>
        return (ret < 0) ? ret : -1;
c010cd3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010cd3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cd43:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010cd47:	eb 05                	jmp    c010cd4e <load_icode_read+0x66>
    }
    return 0;
c010cd49:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cd4e:	c9                   	leave  
c010cd4f:	c3                   	ret    

c010cd50 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010cd50:	55                   	push   %ebp
c010cd51:	89 e5                	mov    %esp,%ebp
c010cd53:	53                   	push   %ebx
c010cd54:	81 ec e4 00 00 00    	sub    $0xe4,%esp
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
	//cprintf("icode!!!%d %s %s\n", argc, kargv[0], kargv[1]);
    if (current->mm != NULL) {
c010cd5a:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010cd5f:	8b 40 18             	mov    0x18(%eax),%eax
c010cd62:	85 c0                	test   %eax,%eax
c010cd64:	74 1c                	je     c010cd82 <load_icode+0x32>
        panic("load_icode: current->mm must be empty.\n");
c010cd66:	c7 44 24 08 3c 80 11 	movl   $0xc011803c,0x8(%esp)
c010cd6d:	c0 
c010cd6e:	c7 44 24 04 73 02 00 	movl   $0x273,0x4(%esp)
c010cd75:	00 
c010cd76:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010cd7d:	e8 46 41 ff ff       	call   c0100ec8 <__panic>
    }

    int ret = -E_NO_MEM;
c010cd82:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010cd89:	e8 41 b1 ff ff       	call   c0107ecf <mm_create>
c010cd8e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010cd91:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010cd95:	75 06                	jne    c010cd9d <load_icode+0x4d>
        goto bad_mm;
c010cd97:	90                   	nop
    bad_elf_cleanup_pgdir:
        put_pgdir(mm);
    bad_pgdir_cleanup_mm:
        mm_destroy(mm);
    bad_mm:
        goto out;
c010cd98:	e9 8a 07 00 00       	jmp    c010d527 <load_icode+0x7d7>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010cd9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cda0:	89 04 24             	mov    %eax,(%esp)
c010cda3:	e8 45 f8 ff ff       	call   c010c5ed <setup_pgdir>
c010cda8:	85 c0                	test   %eax,%eax
c010cdaa:	74 05                	je     c010cdb1 <load_icode+0x61>
        goto bad_pgdir_cleanup_mm;
c010cdac:	e9 91 07 00 00       	jmp    c010d542 <load_icode+0x7f2>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr __elf, *elf = &__elf;
c010cdb1:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010cdb7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010cdba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010cdc1:	00 
c010cdc2:	c7 44 24 08 34 00 00 	movl   $0x34,0x8(%esp)
c010cdc9:	00 
c010cdca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cdcd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdd4:	89 04 24             	mov    %eax,(%esp)
c010cdd7:	e8 0c ff ff ff       	call   c010cce8 <load_icode_read>
c010cddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cde3:	74 05                	je     c010cdea <load_icode+0x9a>
        goto bad_elf_cleanup_pgdir;
c010cde5:	e9 4d 07 00 00       	jmp    c010d537 <load_icode+0x7e7>
    }
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    //struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010cdea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cded:	8b 00                	mov    (%eax),%eax
c010cdef:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010cdf4:	74 0c                	je     c010ce02 <load_icode+0xb2>
        ret = -E_INVAL_ELF;
c010cdf6:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010cdfd:	e9 35 07 00 00       	jmp    c010d537 <load_icode+0x7e7>
    }

    uint32_t vm_flags, perm;
    int i;
    for (i=0; i<elf->e_phnum; i++) {
c010ce02:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010ce09:	e9 80 03 00 00       	jmp    c010d18e <load_icode+0x43e>
    //(3.4) find every program section headers
        struct proghdr __ph, *ph = &__ph;
c010ce0e:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010ce14:	89 45 c0             	mov    %eax,-0x40(%ebp)
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * i;
c010ce17:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ce1a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ce1d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ce20:	c1 e2 05             	shl    $0x5,%edx
c010ce23:	01 d0                	add    %edx,%eax
c010ce25:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010ce28:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ce2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ce2f:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010ce36:	00 
c010ce37:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce41:	89 04 24             	mov    %eax,(%esp)
c010ce44:	e8 9f fe ff ff       	call   c010cce8 <load_icode_read>
c010ce49:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce50:	74 05                	je     c010ce57 <load_icode+0x107>
            goto bad_cleanup_mmap;
c010ce52:	e9 d5 06 00 00       	jmp    c010d52c <load_icode+0x7dc>
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010ce57:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce5a:	8b 00                	mov    (%eax),%eax
c010ce5c:	83 f8 01             	cmp    $0x1,%eax
c010ce5f:	74 05                	je     c010ce66 <load_icode+0x116>
            continue ;
c010ce61:	e9 24 03 00 00       	jmp    c010d18a <load_icode+0x43a>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010ce66:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce69:	8b 50 10             	mov    0x10(%eax),%edx
c010ce6c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce6f:	8b 40 14             	mov    0x14(%eax),%eax
c010ce72:	39 c2                	cmp    %eax,%edx
c010ce74:	76 0c                	jbe    c010ce82 <load_icode+0x132>
            ret = -E_INVAL_ELF;
c010ce76:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010ce7d:	e9 aa 06 00 00       	jmp    c010d52c <load_icode+0x7dc>
        }
        if (ph->p_filesz == 0) {
c010ce82:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ce85:	8b 40 10             	mov    0x10(%eax),%eax
c010ce88:	85 c0                	test   %eax,%eax
c010ce8a:	75 05                	jne    c010ce91 <load_icode+0x141>
            continue ;
c010ce8c:	e9 f9 02 00 00       	jmp    c010d18a <load_icode+0x43a>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010ce91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010ce98:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010ce9f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cea2:	8b 40 18             	mov    0x18(%eax),%eax
c010cea5:	83 e0 01             	and    $0x1,%eax
c010cea8:	85 c0                	test   %eax,%eax
c010ceaa:	74 04                	je     c010ceb0 <load_icode+0x160>
c010ceac:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010ceb0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ceb3:	8b 40 18             	mov    0x18(%eax),%eax
c010ceb6:	83 e0 02             	and    $0x2,%eax
c010ceb9:	85 c0                	test   %eax,%eax
c010cebb:	74 04                	je     c010cec1 <load_icode+0x171>
c010cebd:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010cec1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cec4:	8b 40 18             	mov    0x18(%eax),%eax
c010cec7:	83 e0 04             	and    $0x4,%eax
c010ceca:	85 c0                	test   %eax,%eax
c010cecc:	74 04                	je     c010ced2 <load_icode+0x182>
c010cece:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010ced2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ced5:	83 e0 02             	and    $0x2,%eax
c010ced8:	85 c0                	test   %eax,%eax
c010ceda:	74 04                	je     c010cee0 <load_icode+0x190>
c010cedc:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010cee0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cee3:	8b 50 14             	mov    0x14(%eax),%edx
c010cee6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cee9:	8b 40 08             	mov    0x8(%eax),%eax
c010ceec:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010cef3:	00 
c010cef4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010cef7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010cefb:	89 54 24 08          	mov    %edx,0x8(%esp)
c010ceff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf03:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cf06:	89 04 24             	mov    %eax,(%esp)
c010cf09:	e8 c8 b3 ff ff       	call   c01082d6 <mm_map>
c010cf0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf11:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf15:	74 05                	je     c010cf1c <load_icode+0x1cc>
            goto bad_cleanup_mmap;
c010cf17:	e9 10 06 00 00       	jmp    c010d52c <load_icode+0x7dc>
        }
        //unsigned char *from = binary + ph->p_offset;
        size_t off, size;
        off_t foff = ph->p_offset;
c010cf1c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf1f:	8b 40 04             	mov    0x4(%eax),%eax
c010cf22:	89 45 dc             	mov    %eax,-0x24(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010cf25:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf28:	8b 40 08             	mov    0x8(%eax),%eax
c010cf2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cf2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cf31:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010cf34:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010cf37:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010cf3c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010cf3f:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010cf46:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf49:	8b 50 08             	mov    0x8(%eax),%edx
c010cf4c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010cf4f:	8b 40 10             	mov    0x10(%eax),%eax
c010cf52:	01 d0                	add    %edx,%eax
c010cf54:	89 45 b4             	mov    %eax,-0x4c(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010cf57:	e9 b1 00 00 00       	jmp    c010d00d <load_icode+0x2bd>
        	//cprintf("start=%d end=%d\n",start,end);
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010cf5c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cf5f:	8b 40 0c             	mov    0xc(%eax),%eax
c010cf62:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cf65:	89 54 24 08          	mov    %edx,0x8(%esp)
c010cf69:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cf6c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cf70:	89 04 24             	mov    %eax,(%esp)
c010cf73:	e8 8a 90 ff ff       	call   c0106002 <pgdir_alloc_page>
c010cf78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf7f:	75 0c                	jne    c010cf8d <load_icode+0x23d>
                ret = -E_NO_MEM;
c010cf81:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010cf88:	e9 9f 05 00 00       	jmp    c010d52c <load_icode+0x7dc>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010cf8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cf90:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cf93:	29 c2                	sub    %eax,%edx
c010cf95:	89 d0                	mov    %edx,%eax
c010cf97:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010cf9a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010cf9f:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010cfa2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cfa5:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010cfac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010cfaf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010cfb2:	73 0d                	jae    c010cfc1 <load_icode+0x271>
                size -= la - end;
c010cfb4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cfb7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010cfba:	29 c2                	sub    %eax,%edx
c010cfbc:	89 d0                	mov    %edx,%eax
c010cfbe:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, foff)) != 0) {
c010cfc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cfc4:	89 04 24             	mov    %eax,(%esp)
c010cfc7:	e8 c8 ed ff ff       	call   c010bd94 <page2kva>
c010cfcc:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010cfcf:	01 c2                	add    %eax,%edx
c010cfd1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cfd4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cfd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cfdb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cfdf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cfe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfe6:	89 04 24             	mov    %eax,(%esp)
c010cfe9:	e8 fa fc ff ff       	call   c010cce8 <load_icode_read>
c010cfee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cff1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cff5:	74 05                	je     c010cffc <load_icode+0x2ac>
                goto bad_cleanup_mmap;
c010cff7:	e9 30 05 00 00       	jmp    c010d52c <load_icode+0x7dc>
            }
            start += size;
c010cffc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cfff:	01 45 d8             	add    %eax,-0x28(%ebp)
            foff += size;
c010d002:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d005:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d008:	01 d0                	add    %edx,%eax
c010d00a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010d00d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d010:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d013:	0f 82 43 ff ff ff    	jb     c010cf5c <load_icode+0x20c>
            start += size;
            foff += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010d019:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d01c:	8b 50 08             	mov    0x8(%eax),%edx
c010d01f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010d022:	8b 40 14             	mov    0x14(%eax),%eax
c010d025:	01 d0                	add    %edx,%eax
c010d027:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010d02a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d02d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d030:	0f 83 b0 00 00 00    	jae    c010d0e6 <load_icode+0x396>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010d036:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d039:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d03c:	75 05                	jne    c010d043 <load_icode+0x2f3>
                continue ;
c010d03e:	e9 47 01 00 00       	jmp    c010d18a <load_icode+0x43a>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010d043:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d046:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d049:	29 c2                	sub    %eax,%edx
c010d04b:	89 d0                	mov    %edx,%eax
c010d04d:	05 00 10 00 00       	add    $0x1000,%eax
c010d052:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d055:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d05a:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d05d:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (end < la) {
c010d060:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d063:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d066:	73 0d                	jae    c010d075 <load_icode+0x325>
                size -= la - end;
c010d068:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d06b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d06e:	29 c2                	sub    %eax,%edx
c010d070:	89 d0                	mov    %edx,%eax
c010d072:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d075:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d078:	89 04 24             	mov    %eax,(%esp)
c010d07b:	e8 14 ed ff ff       	call   c010bd94 <page2kva>
c010d080:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d083:	01 c2                	add    %eax,%edx
c010d085:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d088:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d08c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d093:	00 
c010d094:	89 14 24             	mov    %edx,(%esp)
c010d097:	e8 dd 83 00 00       	call   c0115479 <memset>
            start += size;
c010d09c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d09f:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010d0a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d0a5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0a8:	73 08                	jae    c010d0b2 <load_icode+0x362>
c010d0aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0ad:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d0b0:	74 34                	je     c010d0e6 <load_icode+0x396>
c010d0b2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d0b5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0b8:	72 08                	jb     c010d0c2 <load_icode+0x372>
c010d0ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d0bd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d0c0:	74 24                	je     c010d0e6 <load_icode+0x396>
c010d0c2:	c7 44 24 0c 64 80 11 	movl   $0xc0118064,0xc(%esp)
c010d0c9:	c0 
c010d0ca:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010d0d1:	c0 
c010d0d2:	c7 44 24 04 d3 02 00 	movl   $0x2d3,0x4(%esp)
c010d0d9:	00 
c010d0da:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d0e1:	e8 e2 3d ff ff       	call   c0100ec8 <__panic>
        }
        while (start < end) {
c010d0e6:	e9 93 00 00 00       	jmp    c010d17e <load_icode+0x42e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010d0eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d0ee:	8b 40 0c             	mov    0xc(%eax),%eax
c010d0f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d0f4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d0f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d0fb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d0ff:	89 04 24             	mov    %eax,(%esp)
c010d102:	e8 fb 8e ff ff       	call   c0106002 <pgdir_alloc_page>
c010d107:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d10a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d10e:	75 0d                	jne    c010d11d <load_icode+0x3cd>
                ret = -E_NO_MEM;
c010d110:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010d117:	90                   	nop
c010d118:	e9 0f 04 00 00       	jmp    c010d52c <load_icode+0x7dc>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010d11d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d120:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d123:	29 c2                	sub    %eax,%edx
c010d125:	89 d0                	mov    %edx,%eax
c010d127:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010d12a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010d12f:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010d132:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d135:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010d13c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010d13f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010d142:	73 0d                	jae    c010d151 <load_icode+0x401>
                size -= la - end;
c010d144:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d147:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010d14a:	29 c2                	sub    %eax,%edx
c010d14c:	89 d0                	mov    %edx,%eax
c010d14e:	01 45 e0             	add    %eax,-0x20(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010d151:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d154:	89 04 24             	mov    %eax,(%esp)
c010d157:	e8 38 ec ff ff       	call   c010bd94 <page2kva>
c010d15c:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010d15f:	01 c2                	add    %eax,%edx
c010d161:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d164:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d168:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d16f:	00 
c010d170:	89 14 24             	mov    %edx,(%esp)
c010d173:	e8 01 83 00 00       	call   c0115479 <memset>
            start += size;
c010d178:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d17b:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010d17e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d181:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010d184:	0f 82 61 ff ff ff    	jb     c010d0eb <load_icode+0x39b>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    int i;
    for (i=0; i<elf->e_phnum; i++) {
c010d18a:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010d18e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d191:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010d195:	0f b7 c0             	movzwl %ax,%eax
c010d198:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d19b:	0f 8f 6d fc ff ff    	jg     c010ce0e <load_icode+0xbe>
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    sysfile_close(fd);
c010d1a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1a4:	89 04 24             	mov    %eax,(%esp)
c010d1a7:	e8 00 e4 ff ff       	call   c010b5ac <sysfile_close>
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010d1ac:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010d1b3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010d1ba:	00 
c010d1bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d1be:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d1c2:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010d1c9:	00 
c010d1ca:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010d1d1:	af 
c010d1d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d1d5:	89 04 24             	mov    %eax,(%esp)
c010d1d8:	e8 f9 b0 ff ff       	call   c01082d6 <mm_map>
c010d1dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d1e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d1e4:	74 05                	je     c010d1eb <load_icode+0x49b>
        goto bad_cleanup_mmap;
c010d1e6:	e9 41 03 00 00       	jmp    c010d52c <load_icode+0x7dc>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010d1eb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d1ee:	8b 40 0c             	mov    0xc(%eax),%eax
c010d1f1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d1f8:	00 
c010d1f9:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010d200:	af 
c010d201:	89 04 24             	mov    %eax,(%esp)
c010d204:	e8 f9 8d ff ff       	call   c0106002 <pgdir_alloc_page>
c010d209:	85 c0                	test   %eax,%eax
c010d20b:	75 24                	jne    c010d231 <load_icode+0x4e1>
c010d20d:	c7 44 24 0c a0 80 11 	movl   $0xc01180a0,0xc(%esp)
c010d214:	c0 
c010d215:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010d21c:	c0 
c010d21d:	c7 44 24 04 e8 02 00 	movl   $0x2e8,0x4(%esp)
c010d224:	00 
c010d225:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d22c:	e8 97 3c ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010d231:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d234:	8b 40 0c             	mov    0xc(%eax),%eax
c010d237:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d23e:	00 
c010d23f:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010d246:	af 
c010d247:	89 04 24             	mov    %eax,(%esp)
c010d24a:	e8 b3 8d ff ff       	call   c0106002 <pgdir_alloc_page>
c010d24f:	85 c0                	test   %eax,%eax
c010d251:	75 24                	jne    c010d277 <load_icode+0x527>
c010d253:	c7 44 24 0c e4 80 11 	movl   $0xc01180e4,0xc(%esp)
c010d25a:	c0 
c010d25b:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010d262:	c0 
c010d263:	c7 44 24 04 e9 02 00 	movl   $0x2e9,0x4(%esp)
c010d26a:	00 
c010d26b:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d272:	e8 51 3c ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010d277:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d27a:	8b 40 0c             	mov    0xc(%eax),%eax
c010d27d:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d284:	00 
c010d285:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010d28c:	af 
c010d28d:	89 04 24             	mov    %eax,(%esp)
c010d290:	e8 6d 8d ff ff       	call   c0106002 <pgdir_alloc_page>
c010d295:	85 c0                	test   %eax,%eax
c010d297:	75 24                	jne    c010d2bd <load_icode+0x56d>
c010d299:	c7 44 24 0c 28 81 11 	movl   $0xc0118128,0xc(%esp)
c010d2a0:	c0 
c010d2a1:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010d2a8:	c0 
c010d2a9:	c7 44 24 04 ea 02 00 	movl   $0x2ea,0x4(%esp)
c010d2b0:	00 
c010d2b1:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d2b8:	e8 0b 3c ff ff       	call   c0100ec8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010d2bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d2c0:	8b 40 0c             	mov    0xc(%eax),%eax
c010d2c3:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010d2ca:	00 
c010d2cb:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010d2d2:	af 
c010d2d3:	89 04 24             	mov    %eax,(%esp)
c010d2d6:	e8 27 8d ff ff       	call   c0106002 <pgdir_alloc_page>
c010d2db:	85 c0                	test   %eax,%eax
c010d2dd:	75 24                	jne    c010d303 <load_icode+0x5b3>
c010d2df:	c7 44 24 0c 6c 81 11 	movl   $0xc011816c,0xc(%esp)
c010d2e6:	c0 
c010d2e7:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010d2ee:	c0 
c010d2ef:	c7 44 24 04 eb 02 00 	movl   $0x2eb,0x4(%esp)
c010d2f6:	00 
c010d2f7:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d2fe:	e8 c5 3b ff ff       	call   c0100ec8 <__panic>

    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010d303:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d306:	89 04 24             	mov    %eax,(%esp)
c010d309:	e8 24 eb ff ff       	call   c010be32 <mm_count_inc>
    current->mm = mm;
c010d30e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d313:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d316:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010d319:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d31e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010d321:	8b 52 0c             	mov    0xc(%edx),%edx
c010d324:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010d327:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010d32e:	77 23                	ja     c010d353 <load_icode+0x603>
c010d330:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010d333:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d337:	c7 44 24 08 80 7f 11 	movl   $0xc0117f80,0x8(%esp)
c010d33e:	c0 
c010d33f:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
c010d346:	00 
c010d347:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d34e:	e8 75 3b ff ff       	call   c0100ec8 <__panic>
c010d353:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010d356:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010d35c:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010d35f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d362:	8b 40 0c             	mov    0xc(%eax),%eax
c010d365:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010d368:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010d36f:	77 23                	ja     c010d394 <load_icode+0x644>
c010d371:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d374:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d378:	c7 44 24 08 80 7f 11 	movl   $0xc0117f80,0x8(%esp)
c010d37f:	c0 
c010d380:	c7 44 24 04 f1 02 00 	movl   $0x2f1,0x4(%esp)
c010d387:	00 
c010d388:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d38f:	e8 34 3b ff ff       	call   c0100ec8 <__panic>
c010d394:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010d397:	05 00 00 00 40       	add    $0x40000000,%eax
c010d39c:	89 45 98             	mov    %eax,-0x68(%ebp)
c010d39f:	8b 45 98             	mov    -0x68(%ebp),%eax
c010d3a2:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup uargc and uargv in user stacks
    uint32_t cursize = 0, k;
c010d3a5:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    uintptr_t newstacktop;
    for (k = 0; k < argc; ++k)
c010d3ac:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d3b3:	eb 30                	jmp    c010d3e5 <load_icode+0x695>
    	cursize += strnlen(kargv[k], EXEC_MAX_ARG_LEN + 1)+1;
c010d3b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d3b8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d3bf:	8b 45 10             	mov    0x10(%ebp),%eax
c010d3c2:	01 d0                	add    %edx,%eax
c010d3c4:	8b 00                	mov    (%eax),%eax
c010d3c6:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d3cd:	00 
c010d3ce:	89 04 24             	mov    %eax,(%esp)
c010d3d1:	e8 75 7d 00 00       	call   c011514b <strnlen>
c010d3d6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d3d9:	01 d0                	add    %edx,%eax
c010d3db:	83 c0 01             	add    $0x1,%eax
c010d3de:	89 45 d0             	mov    %eax,-0x30(%ebp)
    lcr3(PADDR(mm->pgdir));

    //(6) setup uargc and uargv in user stacks
    uint32_t cursize = 0, k;
    uintptr_t newstacktop;
    for (k = 0; k < argc; ++k)
c010d3e1:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d3e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d3eb:	77 c8                	ja     c010d3b5 <load_icode+0x665>
    	cursize += strnlen(kargv[k], EXEC_MAX_ARG_LEN + 1)+1;
    newstacktop = USTACKTOP - (cursize/sizeof(long)+1)*sizeof(long);
c010d3ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d3f0:	c1 e8 02             	shr    $0x2,%eax
c010d3f3:	89 c2                	mov    %eax,%edx
c010d3f5:	b8 00 00 00 00       	mov    $0x0,%eax
c010d3fa:	29 d0                	sub    %edx,%eax
c010d3fc:	c1 e0 02             	shl    $0x2,%eax
c010d3ff:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010d404:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    }

    newstacktop = (uintptr_t)uargv - sizeof(int);
    *(int *)newstacktop = argc;
    /*/
    cursize = 0;
c010d407:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    char** uargv=(char **)(newstacktop  - argc * sizeof(char *));
c010d40e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d411:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d418:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d41b:	29 d0                	sub    %edx,%eax
c010d41d:	89 45 a0             	mov    %eax,-0x60(%ebp)
    for (k = 0; k < argc; ++k)
c010d420:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010d427:	eb 67                	jmp    c010d490 <load_icode+0x740>
    {
    	uargv[k]=strcpy((char*)(newstacktop+cursize), kargv[k]);
c010d429:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d42c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d433:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010d436:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010d439:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d43c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d443:	8b 45 10             	mov    0x10(%ebp),%eax
c010d446:	01 d0                	add    %edx,%eax
c010d448:	8b 10                	mov    (%eax),%edx
c010d44a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d44d:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010d450:	01 c8                	add    %ecx,%eax
c010d452:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d456:	89 04 24             	mov    %eax,(%esp)
c010d459:	e8 44 7d 00 00       	call   c01151a2 <strcpy>
c010d45e:	89 03                	mov    %eax,(%ebx)
    	cursize += strnlen(kargv[k], EXEC_MAX_ARG_LEN + 1)+1;
c010d460:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d463:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d46a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d46d:	01 d0                	add    %edx,%eax
c010d46f:	8b 00                	mov    (%eax),%eax
c010d471:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010d478:	00 
c010d479:	89 04 24             	mov    %eax,(%esp)
c010d47c:	e8 ca 7c 00 00       	call   c011514b <strnlen>
c010d481:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d484:	01 d0                	add    %edx,%eax
c010d486:	83 c0 01             	add    $0x1,%eax
c010d489:	89 45 d0             	mov    %eax,-0x30(%ebp)
    newstacktop = (uintptr_t)uargv - sizeof(int);
    *(int *)newstacktop = argc;
    /*/
    cursize = 0;
    char** uargv=(char **)(newstacktop  - argc * sizeof(char *));
    for (k = 0; k < argc; ++k)
c010d48c:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010d490:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d493:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010d496:	77 91                	ja     c010d429 <load_icode+0x6d9>
    {
    	uargv[k]=strcpy((char*)(newstacktop+cursize), kargv[k]);
    	cursize += strnlen(kargv[k], EXEC_MAX_ARG_LEN + 1)+1;
    }
    newstacktop -= argc*sizeof(char*);
c010d498:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d49b:	c1 e0 02             	shl    $0x2,%eax
c010d49e:	29 45 a4             	sub    %eax,-0x5c(%ebp)
    newstacktop -= sizeof(int);
c010d4a1:	83 6d a4 04          	subl   $0x4,-0x5c(%ebp)
    *(int*)newstacktop = argc;
c010d4a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010d4a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d4ab:	89 10                	mov    %edx,(%eax)

    //(7) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010d4ad:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d4b2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d4b5:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010d4b8:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010d4bf:	00 
c010d4c0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d4c7:	00 
c010d4c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4cb:	89 04 24             	mov    %eax,(%esp)
c010d4ce:	e8 a6 7f 00 00       	call   c0115479 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010d4d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4d6:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010d4dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4df:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010d4e5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4e8:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010d4ec:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4ef:	66 89 50 28          	mov    %dx,0x28(%eax)
c010d4f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4f6:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010d4fa:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d4fd:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = newstacktop;
c010d501:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d504:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010d507:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010d50a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010d50d:	8b 50 18             	mov    0x18(%eax),%edx
c010d510:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d513:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010d516:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010d519:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010d520:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    out:
        return ret;
c010d527:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d52a:	eb 23                	jmp    c010d54f <load_icode+0x7ff>
    bad_cleanup_mmap:
        exit_mmap(mm);
c010d52c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d52f:	89 04 24             	mov    %eax,(%esp)
c010d532:	e8 bc af ff ff       	call   c01084f3 <exit_mmap>
    bad_elf_cleanup_pgdir:
        put_pgdir(mm);
c010d537:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d53a:	89 04 24             	mov    %eax,(%esp)
c010d53d:	e8 52 f1 ff ff       	call   c010c694 <put_pgdir>
    bad_pgdir_cleanup_mm:
        mm_destroy(mm);
c010d542:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d545:	89 04 24             	mov    %eax,(%esp)
c010d548:	e8 e7 ac ff ff       	call   c0108234 <mm_destroy>
    bad_mm:
        goto out;
c010d54d:	eb d8                	jmp    c010d527 <load_icode+0x7d7>
}
c010d54f:	81 c4 e4 00 00 00    	add    $0xe4,%esp
c010d555:	5b                   	pop    %ebx
c010d556:	5d                   	pop    %ebp
c010d557:	c3                   	ret    

c010d558 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010d558:	55                   	push   %ebp
c010d559:	89 e5                	mov    %esp,%ebp
c010d55b:	83 ec 18             	sub    $0x18,%esp
    while (argc > 0) {
c010d55e:	eb 1d                	jmp    c010d57d <put_kargv+0x25>
        kfree(kargv[-- argc]);
c010d560:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010d564:	8b 45 08             	mov    0x8(%ebp),%eax
c010d567:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d56e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d571:	01 d0                	add    %edx,%eax
c010d573:	8b 00                	mov    (%eax),%eax
c010d575:	89 04 24             	mov    %eax,(%esp)
c010d578:	e8 5f 77 ff ff       	call   c0104cdc <kfree>
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010d57d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d581:	7f dd                	jg     c010d560 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010d583:	c9                   	leave  
c010d584:	c3                   	ret    

c010d585 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010d585:	55                   	push   %ebp
c010d586:	89 e5                	mov    %esp,%ebp
c010d588:	83 ec 28             	sub    $0x28,%esp
    int i, ret = -E_INVAL;
c010d58b:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010d592:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d595:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d59c:	8b 45 14             	mov    0x14(%ebp),%eax
c010d59f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010d5a6:	00 
c010d5a7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010d5ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5af:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5b2:	89 04 24             	mov    %eax,(%esp)
c010d5b5:	e8 13 ba ff ff       	call   c0108fcd <user_mem_check>
c010d5ba:	85 c0                	test   %eax,%eax
c010d5bc:	75 08                	jne    c010d5c6 <copy_kargv+0x41>
        return ret;
c010d5be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d5c1:	e9 a4 00 00 00       	jmp    c010d66a <copy_kargv+0xe5>
    }
    for (i = 0; i < argc; i ++) {
c010d5c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d5cd:	eb 77                	jmp    c010d646 <copy_kargv+0xc1>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010d5cf:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010d5d6:	e8 e6 76 ff ff       	call   c0104cc1 <kmalloc>
c010d5db:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d5de:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d5e2:	75 0a                	jne    c010d5ee <copy_kargv+0x69>
            goto failed_nomem;
c010d5e4:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010d5e5:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c010d5ec:	eb 67                	jmp    c010d655 <copy_kargv+0xd0>
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010d5ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d5f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d5f8:	8b 45 14             	mov    0x14(%ebp),%eax
c010d5fb:	01 d0                	add    %edx,%eax
c010d5fd:	8b 00                	mov    (%eax),%eax
c010d5ff:	c7 44 24 0c 00 10 00 	movl   $0x1000,0xc(%esp)
c010d606:	00 
c010d607:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d60b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d60e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d612:	8b 45 08             	mov    0x8(%ebp),%eax
c010d615:	89 04 24             	mov    %eax,(%esp)
c010d618:	e8 d3 ba ff ff       	call   c01090f0 <copy_string>
c010d61d:	85 c0                	test   %eax,%eax
c010d61f:	75 0d                	jne    c010d62e <copy_kargv+0xa9>
            kfree(buffer);
c010d621:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d624:	89 04 24             	mov    %eax,(%esp)
c010d627:	e8 b0 76 ff ff       	call   c0104cdc <kfree>
            goto failed_cleanup;
c010d62c:	eb 27                	jmp    c010d655 <copy_kargv+0xd0>
        }
        kargv[i] = buffer;
c010d62e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d631:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d638:	8b 45 10             	mov    0x10(%ebp),%eax
c010d63b:	01 c2                	add    %eax,%edx
c010d63d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d640:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010d642:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d646:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d649:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d64c:	7c 81                	jl     c010d5cf <copy_kargv+0x4a>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010d64e:	b8 00 00 00 00       	mov    $0x0,%eax
c010d653:	eb 15                	jmp    c010d66a <copy_kargv+0xe5>

failed_nomem:
    ret = -E_NO_MEM;
failed_cleanup:
    put_kargv(i, kargv);
c010d655:	8b 45 10             	mov    0x10(%ebp),%eax
c010d658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d65c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d65f:	89 04 24             	mov    %eax,(%esp)
c010d662:	e8 f1 fe ff ff       	call   c010d558 <put_kargv>
    return ret;
c010d667:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010d66a:	c9                   	leave  
c010d66b:	c3                   	ret    

c010d66c <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010d66c:	55                   	push   %ebp
c010d66d:	89 e5                	mov    %esp,%ebp
c010d66f:	81 ec e8 00 00 00    	sub    $0xe8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010d675:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d67a:	8b 40 18             	mov    0x18(%eax),%eax
c010d67d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010d680:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d684:	7e 06                	jle    c010d68c <do_execve+0x20>
c010d686:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010d68a:	7e 0a                	jle    c010d696 <do_execve+0x2a>
        return -E_INVAL;
c010d68c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d691:	e9 11 02 00 00       	jmp    c010d8a7 <do_execve+0x23b>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010d696:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010d69d:	00 
c010d69e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d6a5:	00 
c010d6a6:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d6a9:	89 04 24             	mov    %eax,(%esp)
c010d6ac:	e8 c8 7d 00 00       	call   c0115479 <memset>
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010d6b1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010d6b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6bb:	89 04 24             	mov    %eax,(%esp)
c010d6be:	e8 a3 e7 ff ff       	call   c010be66 <lock_mm>
    if (name == NULL) {
c010d6c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d6c7:	75 29                	jne    c010d6f2 <do_execve+0x86>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010d6c9:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d6ce:	8b 40 04             	mov    0x4(%eax),%eax
c010d6d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d6d5:	c7 44 24 08 af 81 11 	movl   $0xc01181af,0x8(%esp)
c010d6dc:	c0 
c010d6dd:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010d6e4:	00 
c010d6e5:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d6e8:	89 04 24             	mov    %eax,(%esp)
c010d6eb:	e8 bb 78 00 00       	call   c0114fab <snprintf>
c010d6f0:	eb 38                	jmp    c010d72a <do_execve+0xbe>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010d6f2:	c7 44 24 0c 33 00 00 	movl   $0x33,0xc(%esp)
c010d6f9:	00 
c010d6fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d701:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010d704:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d708:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d70b:	89 04 24             	mov    %eax,(%esp)
c010d70e:	e8 dd b9 ff ff       	call   c01090f0 <copy_string>
c010d713:	85 c0                	test   %eax,%eax
c010d715:	75 13                	jne    c010d72a <do_execve+0xbe>
            unlock_mm(mm);
c010d717:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d71a:	89 04 24             	mov    %eax,(%esp)
c010d71d:	e8 77 e7 ff ff       	call   c010be99 <unlock_mm>
            return ret;
c010d722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d725:	e9 7d 01 00 00       	jmp    c010d8a7 <do_execve+0x23b>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010d72a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d72d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d731:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d737:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d73b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d73e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d745:	89 04 24             	mov    %eax,(%esp)
c010d748:	e8 38 fe ff ff       	call   c010d585 <copy_kargv>
c010d74d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d750:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d754:	74 13                	je     c010d769 <do_execve+0xfd>
        unlock_mm(mm);
c010d756:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d759:	89 04 24             	mov    %eax,(%esp)
c010d75c:	e8 38 e7 ff ff       	call   c010be99 <unlock_mm>
        return ret;
c010d761:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d764:	e9 3e 01 00 00       	jmp    c010d8a7 <do_execve+0x23b>
    }
    path = argv[0];
c010d769:	8b 45 10             	mov    0x10(%ebp),%eax
c010d76c:	8b 00                	mov    (%eax),%eax
c010d76e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010d771:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d774:	89 04 24             	mov    %eax,(%esp)
c010d777:	e8 1d e7 ff ff       	call   c010be99 <unlock_mm>
    files_closeall(current->filesp);
c010d77c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d781:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d787:	89 04 24             	mov    %eax,(%esp)
c010d78a:	e8 c2 d9 ff ff       	call   c010b151 <files_closeall>

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010d78f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010d796:	00 
c010d797:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d79a:	89 04 24             	mov    %eax,(%esp)
c010d79d:	e8 bf dd ff ff       	call   c010b561 <sysfile_open>
c010d7a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d7a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d7a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d7af:	79 05                	jns    c010d7b6 <do_execve+0x14a>
        goto execve_exit;
c010d7b1:	e9 ae 00 00 00       	jmp    c010d864 <do_execve+0x1f8>
    }
    if (mm != NULL) {
c010d7b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d7ba:	74 4a                	je     c010d806 <do_execve+0x19a>
        lcr3(boot_cr3);
c010d7bc:	a1 24 30 15 c0       	mov    0xc0153024,%eax
c010d7c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d7c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d7c7:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010d7ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7cd:	89 04 24             	mov    %eax,(%esp)
c010d7d0:	e8 77 e6 ff ff       	call   c010be4c <mm_count_dec>
c010d7d5:	85 c0                	test   %eax,%eax
c010d7d7:	75 21                	jne    c010d7fa <do_execve+0x18e>
            exit_mmap(mm);
c010d7d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7dc:	89 04 24             	mov    %eax,(%esp)
c010d7df:	e8 0f ad ff ff       	call   c01084f3 <exit_mmap>
            put_pgdir(mm);
c010d7e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7e7:	89 04 24             	mov    %eax,(%esp)
c010d7ea:	e8 a5 ee ff ff       	call   c010c694 <put_pgdir>
            mm_destroy(mm);
c010d7ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7f2:	89 04 24             	mov    %eax,(%esp)
c010d7f5:	e8 3a aa ff ff       	call   c0108234 <mm_destroy>
        }
        current->mm = NULL;
c010d7fa:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d7ff:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010d806:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010d80d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d813:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d817:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d81a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d81e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d821:	89 04 24             	mov    %eax,(%esp)
c010d824:	e8 27 f5 ff ff       	call   c010cd50 <load_icode>
c010d829:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d82c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d830:	74 02                	je     c010d834 <do_execve+0x1c8>
        goto execve_exit;
c010d832:	eb 30                	jmp    c010d864 <do_execve+0x1f8>
    }
    put_kargv(argc, kargv);
c010d834:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d83a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d83e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d841:	89 04 24             	mov    %eax,(%esp)
c010d844:	e8 0f fd ff ff       	call   c010d558 <put_kargv>
    set_proc_name(current, local_name);
c010d849:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d84e:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010d851:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d855:	89 04 24             	mov    %eax,(%esp)
c010d858:	e8 2f e8 ff ff       	call   c010c08c <set_proc_name>
    return 0;
c010d85d:	b8 00 00 00 00       	mov    $0x0,%eax
c010d862:	eb 43                	jmp    c010d8a7 <do_execve+0x23b>

execve_exit:
    put_kargv(argc, kargv);
c010d864:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010d86a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d86e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d871:	89 04 24             	mov    %eax,(%esp)
c010d874:	e8 df fc ff ff       	call   c010d558 <put_kargv>
    do_exit(ret);
c010d879:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d87c:	89 04 24             	mov    %eax,(%esp)
c010d87f:	e8 5d f2 ff ff       	call   c010cae1 <do_exit>
    panic("already exit: %e.\n", ret);
c010d884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d887:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d88b:	c7 44 24 08 b9 81 11 	movl   $0xc01181b9,0x8(%esp)
c010d892:	c0 
c010d893:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
c010d89a:	00 
c010d89b:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010d8a2:	e8 21 36 ff ff       	call   c0100ec8 <__panic>
}
c010d8a7:	c9                   	leave  
c010d8a8:	c3                   	ret    

c010d8a9 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010d8a9:	55                   	push   %ebp
c010d8aa:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010d8ac:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8b1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010d8b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d8bd:	5d                   	pop    %ebp
c010d8be:	c3                   	ret    

c010d8bf <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010d8bf:	55                   	push   %ebp
c010d8c0:	89 e5                	mov    %esp,%ebp
c010d8c2:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010d8c5:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d8ca:	8b 40 18             	mov    0x18(%eax),%eax
c010d8cd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010d8d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d8d4:	74 30                	je     c010d906 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010d8d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8d9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010d8e0:	00 
c010d8e1:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010d8e8:	00 
c010d8e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d8ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8f0:	89 04 24             	mov    %eax,(%esp)
c010d8f3:	e8 d5 b6 ff ff       	call   c0108fcd <user_mem_check>
c010d8f8:	85 c0                	test   %eax,%eax
c010d8fa:	75 0a                	jne    c010d906 <do_wait+0x47>
            return -E_INVAL;
c010d8fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d901:	e9 57 01 00 00       	jmp    c010da5d <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010d906:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010d90d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d911:	74 39                	je     c010d94c <do_wait+0x8d>
        proc = find_proc(pid);
c010d913:	8b 45 08             	mov    0x8(%ebp),%eax
c010d916:	89 04 24             	mov    %eax,(%esp)
c010d919:	e8 87 eb ff ff       	call   c010c4a5 <find_proc>
c010d91e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010d921:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d925:	74 5a                	je     c010d981 <do_wait+0xc2>
c010d927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d92a:	8b 50 14             	mov    0x14(%eax),%edx
c010d92d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d932:	39 c2                	cmp    %eax,%edx
c010d934:	75 4b                	jne    c010d981 <do_wait+0xc2>
            haskid = 1;
c010d936:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d93d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d940:	8b 00                	mov    (%eax),%eax
c010d942:	83 f8 03             	cmp    $0x3,%eax
c010d945:	75 3a                	jne    c010d981 <do_wait+0xc2>
                goto found;
c010d947:	e9 89 00 00 00       	jmp    c010d9d5 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010d94c:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d951:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d957:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d95a:	eb 1f                	jmp    c010d97b <do_wait+0xbc>
            haskid = 1;
c010d95c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d963:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d966:	8b 00                	mov    (%eax),%eax
c010d968:	83 f8 03             	cmp    $0x3,%eax
c010d96b:	75 02                	jne    c010d96f <do_wait+0xb0>
                goto found;
c010d96d:	eb 66                	jmp    c010d9d5 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d972:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d978:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d97b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d97f:	75 db                	jne    c010d95c <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d981:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d985:	74 44                	je     c010d9cb <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010d987:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d98c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d992:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d997:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010d99e:	00 00 80 
        schedule();
c010d9a1:	e8 fa 0b 00 00       	call   c010e5a0 <schedule>
        if (current->flags & PF_EXITING) {
c010d9a6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010d9ab:	8b 40 44             	mov    0x44(%eax),%eax
c010d9ae:	83 e0 01             	and    $0x1,%eax
c010d9b1:	85 c0                	test   %eax,%eax
c010d9b3:	74 11                	je     c010d9c6 <do_wait+0x107>
            do_exit(-E_KILLED);
c010d9b5:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010d9bc:	e8 20 f1 ff ff       	call   c010cae1 <do_exit>
        }
        goto repeat;
c010d9c1:	e9 40 ff ff ff       	jmp    c010d906 <do_wait+0x47>
c010d9c6:	e9 3b ff ff ff       	jmp    c010d906 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010d9cb:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010d9d0:	e9 88 00 00 00       	jmp    c010da5d <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010d9d5:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010d9da:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d9dd:	74 0a                	je     c010d9e9 <do_wait+0x12a>
c010d9df:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010d9e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d9e7:	75 1c                	jne    c010da05 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010d9e9:	c7 44 24 08 cc 81 11 	movl   $0xc01181cc,0x8(%esp)
c010d9f0:	c0 
c010d9f1:	c7 44 24 04 c6 03 00 	movl   $0x3c6,0x4(%esp)
c010d9f8:	00 
c010d9f9:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010da00:	e8 c3 34 ff ff       	call   c0100ec8 <__panic>
    }
    if (code_store != NULL) {
c010da05:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010da09:	74 0e                	je     c010da19 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010da0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da0e:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010da14:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da17:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010da19:	e8 ca e2 ff ff       	call   c010bce8 <__intr_save>
c010da1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010da21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da24:	89 04 24             	mov    %eax,(%esp)
c010da27:	e8 44 ea ff ff       	call   c010c470 <unhash_proc>
        remove_links(proc);
c010da2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da2f:	89 04 24             	mov    %eax,(%esp)
c010da32:	e8 94 e7 ff ff       	call   c010c1cb <remove_links>
    }
    local_intr_restore(intr_flag);
c010da37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da3a:	89 04 24             	mov    %eax,(%esp)
c010da3d:	e8 d0 e2 ff ff       	call   c010bd12 <__intr_restore>
    put_kstack(proc);
c010da42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da45:	89 04 24             	mov    %eax,(%esp)
c010da48:	e8 7a eb ff ff       	call   c010c5c7 <put_kstack>
    kfree(proc);
c010da4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da50:	89 04 24             	mov    %eax,(%esp)
c010da53:	e8 84 72 ff ff       	call   c0104cdc <kfree>
    return 0;
c010da58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010da5d:	c9                   	leave  
c010da5e:	c3                   	ret    

c010da5f <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010da5f:	55                   	push   %ebp
c010da60:	89 e5                	mov    %esp,%ebp
c010da62:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010da65:	8b 45 08             	mov    0x8(%ebp),%eax
c010da68:	89 04 24             	mov    %eax,(%esp)
c010da6b:	e8 35 ea ff ff       	call   c010c4a5 <find_proc>
c010da70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da77:	74 44                	je     c010dabd <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010da79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da7c:	8b 40 44             	mov    0x44(%eax),%eax
c010da7f:	83 e0 01             	and    $0x1,%eax
c010da82:	85 c0                	test   %eax,%eax
c010da84:	75 30                	jne    c010dab6 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010da86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da89:	8b 40 44             	mov    0x44(%eax),%eax
c010da8c:	83 c8 01             	or     $0x1,%eax
c010da8f:	89 c2                	mov    %eax,%edx
c010da91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da94:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010da97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010da9a:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010daa0:	85 c0                	test   %eax,%eax
c010daa2:	79 0b                	jns    c010daaf <do_kill+0x50>
                wakeup_proc(proc);
c010daa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010daa7:	89 04 24             	mov    %eax,(%esp)
c010daaa:	e8 55 0a 00 00       	call   c010e504 <wakeup_proc>
            }
            return 0;
c010daaf:	b8 00 00 00 00       	mov    $0x0,%eax
c010dab4:	eb 0c                	jmp    c010dac2 <do_kill+0x63>
        }
        return -E_KILLED;
c010dab6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010dabb:	eb 05                	jmp    c010dac2 <do_kill+0x63>
    }
    return -E_INVAL;
c010dabd:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010dac2:	c9                   	leave  
c010dac3:	c3                   	ret    

c010dac4 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010dac4:	55                   	push   %ebp
c010dac5:	89 e5                	mov    %esp,%ebp
c010dac7:	53                   	push   %ebx
c010dac8:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010dacb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010dad2:	eb 04                	jmp    c010dad8 <kernel_execve+0x14>
        argc ++;
c010dad4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010dad8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dadb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010dae2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dae5:	01 d0                	add    %edx,%eax
c010dae7:	8b 00                	mov    (%eax),%eax
c010dae9:	85 c0                	test   %eax,%eax
c010daeb:	75 e7                	jne    c010dad4 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010daed:	b8 04 00 00 00       	mov    $0x4,%eax
c010daf2:	8b 55 08             	mov    0x8(%ebp),%edx
c010daf5:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010daf8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010dafb:	cd 80                	int    $0x80
c010dafd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010db00:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010db03:	83 c4 10             	add    $0x10,%esp
c010db06:	5b                   	pop    %ebx
c010db07:	5d                   	pop    %ebp
c010db08:	c3                   	ret    

c010db09 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010db09:	55                   	push   %ebp
c010db0a:	89 e5                	mov    %esp,%ebp
c010db0c:	83 ec 28             	sub    $0x28,%esp
#ifdef TEST
#ifdef TESTSCRIPT
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
c010db0f:	c7 45 f0 e8 81 11 c0 	movl   $0xc01181e8,-0x10(%ebp)
c010db16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db1d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010db22:	8b 40 04             	mov    0x4(%eax),%eax
c010db25:	c7 44 24 08 e8 81 11 	movl   $0xc01181e8,0x8(%esp)
c010db2c:	c0 
c010db2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db31:	c7 04 24 f0 81 11 c0 	movl   $0xc01181f0,(%esp)
c010db38:	e8 28 28 ff ff       	call   c0100365 <cprintf>
c010db3d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010db40:	89 44 24 04          	mov    %eax,0x4(%esp)
c010db44:	c7 04 24 e8 81 11 c0 	movl   $0xc01181e8,(%esp)
c010db4b:	e8 74 ff ff ff       	call   c010dac4 <kernel_execve>
#endif
#else
    KERNEL_EXECVE(sh);
#endif
    panic("user_main execve failed.\n");
c010db50:	c7 44 24 08 17 82 11 	movl   $0xc0118217,0x8(%esp)
c010db57:	c0 
c010db58:	c7 44 24 04 11 04 00 	movl   $0x411,0x4(%esp)
c010db5f:	00 
c010db60:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010db67:	e8 5c 33 ff ff       	call   c0100ec8 <__panic>

c010db6c <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010db6c:	55                   	push   %ebp
c010db6d:	89 e5                	mov    %esp,%ebp
c010db6f:	83 ec 38             	sub    $0x38,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010db72:	c7 04 24 31 82 11 c0 	movl   $0xc0118231,(%esp)
c010db79:	e8 27 18 00 00       	call   c010f3a5 <vfs_set_bootfs>
c010db7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010db81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010db85:	74 23                	je     c010dbaa <init_main+0x3e>
        panic("set boot fs failed: %e.\n", ret);
c010db87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010db8e:	c7 44 24 08 38 82 11 	movl   $0xc0118238,0x8(%esp)
c010db95:	c0 
c010db96:	c7 44 24 04 19 04 00 	movl   $0x419,0x4(%esp)
c010db9d:	00 
c010db9e:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dba5:	e8 1e 33 ff ff       	call   c0100ec8 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010dbaa:	e8 24 76 ff ff       	call   c01051d3 <nr_free_pages>
c010dbaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010dbb2:	e8 ed 6f ff ff       	call   c0104ba4 <kallocated>
c010dbb7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010dbba:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010dbc1:	00 
c010dbc2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dbc9:	00 
c010dbca:	c7 04 24 09 db 10 c0 	movl   $0xc010db09,(%esp)
c010dbd1:	e8 43 e9 ff ff       	call   c010c519 <kernel_thread>
c010dbd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010dbd9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dbdd:	7f 1c                	jg     c010dbfb <init_main+0x8f>
        panic("create user_main failed.\n");
c010dbdf:	c7 44 24 08 51 82 11 	movl   $0xc0118251,0x8(%esp)
c010dbe6:	c0 
c010dbe7:	c7 44 24 04 21 04 00 	movl   $0x421,0x4(%esp)
c010dbee:	00 
c010dbef:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dbf6:	e8 cd 32 ff ff       	call   c0100ec8 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010dbfb:	e8 c4 ba ff ff       	call   c01096c4 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010dc00:	eb 05                	jmp    c010dc07 <init_main+0x9b>
        schedule();
c010dc02:	e8 99 09 00 00       	call   c010e5a0 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010dc07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010dc0e:	00 
c010dc0f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010dc16:	e8 a4 fc ff ff       	call   c010d8bf <do_wait>
c010dc1b:	85 c0                	test   %eax,%eax
c010dc1d:	74 e3                	je     c010dc02 <init_main+0x96>
        schedule();
    }

    fs_cleanup();
c010dc1f:	e8 c9 d3 ff ff       	call   c010afed <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010dc24:	c7 04 24 6c 82 11 c0 	movl   $0xc011826c,(%esp)
c010dc2b:	e8 35 27 ff ff       	call   c0100365 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010dc30:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dc35:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010dc3b:	85 c0                	test   %eax,%eax
c010dc3d:	75 1e                	jne    c010dc5d <init_main+0xf1>
c010dc3f:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dc44:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010dc4a:	85 c0                	test   %eax,%eax
c010dc4c:	75 0f                	jne    c010dc5d <init_main+0xf1>
c010dc4e:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dc53:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010dc59:	85 c0                	test   %eax,%eax
c010dc5b:	74 24                	je     c010dc81 <init_main+0x115>
c010dc5d:	c7 44 24 0c 90 82 11 	movl   $0xc0118290,0xc(%esp)
c010dc64:	c0 
c010dc65:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010dc6c:	c0 
c010dc6d:	c7 44 24 04 2d 04 00 	movl   $0x42d,0x4(%esp)
c010dc74:	00 
c010dc75:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dc7c:	e8 47 32 ff ff       	call   c0100ec8 <__panic>
    assert(nr_process == 2);
c010dc81:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010dc86:	83 f8 02             	cmp    $0x2,%eax
c010dc89:	74 24                	je     c010dcaf <init_main+0x143>
c010dc8b:	c7 44 24 0c db 82 11 	movl   $0xc01182db,0xc(%esp)
c010dc92:	c0 
c010dc93:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010dc9a:	c0 
c010dc9b:	c7 44 24 04 2e 04 00 	movl   $0x42e,0x4(%esp)
c010dca2:	00 
c010dca3:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dcaa:	e8 19 32 ff ff       	call   c0100ec8 <__panic>
c010dcaf:	c7 45 e4 fc 31 15 c0 	movl   $0xc01531fc,-0x1c(%ebp)
c010dcb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dcb9:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010dcbc:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dcc2:	83 c2 7c             	add    $0x7c,%edx
c010dcc5:	39 d0                	cmp    %edx,%eax
c010dcc7:	74 24                	je     c010dced <init_main+0x181>
c010dcc9:	c7 44 24 0c ec 82 11 	movl   $0xc01182ec,0xc(%esp)
c010dcd0:	c0 
c010dcd1:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010dcd8:	c0 
c010dcd9:	c7 44 24 04 2f 04 00 	movl   $0x42f,0x4(%esp)
c010dce0:	00 
c010dce1:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dce8:	e8 db 31 ff ff       	call   c0100ec8 <__panic>
c010dced:	c7 45 e0 fc 31 15 c0 	movl   $0xc01531fc,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010dcf4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dcf7:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010dcf9:	8b 15 24 ff 14 c0    	mov    0xc014ff24,%edx
c010dcff:	83 c2 7c             	add    $0x7c,%edx
c010dd02:	39 d0                	cmp    %edx,%eax
c010dd04:	74 24                	je     c010dd2a <init_main+0x1be>
c010dd06:	c7 44 24 0c 1c 83 11 	movl   $0xc011831c,0xc(%esp)
c010dd0d:	c0 
c010dd0e:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010dd15:	c0 
c010dd16:	c7 44 24 04 30 04 00 	movl   $0x430,0x4(%esp)
c010dd1d:	00 
c010dd1e:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dd25:	e8 9e 31 ff ff       	call   c0100ec8 <__panic>

    cprintf("init check memory pass.\n");
c010dd2a:	c7 04 24 4c 83 11 c0 	movl   $0xc011834c,(%esp)
c010dd31:	e8 2f 26 ff ff       	call   c0100365 <cprintf>
    return 0;
c010dd36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dd3b:	c9                   	leave  
c010dd3c:	c3                   	ret    

c010dd3d <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010dd3d:	55                   	push   %ebp
c010dd3e:	89 e5                	mov    %esp,%ebp
c010dd40:	53                   	push   %ebx
c010dd41:	83 ec 24             	sub    $0x24,%esp
c010dd44:	c7 45 ec fc 31 15 c0 	movl   $0xc01531fc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dd4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd4e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dd51:	89 50 04             	mov    %edx,0x4(%eax)
c010dd54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd57:	8b 50 04             	mov    0x4(%eax),%edx
c010dd5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd5d:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dd5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010dd66:	eb 26                	jmp    c010dd8e <proc_init+0x51>
        list_init(hash_list + i);
c010dd68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd6b:	c1 e0 03             	shl    $0x3,%eax
c010dd6e:	05 40 ff 14 c0       	add    $0xc014ff40,%eax
c010dd73:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dd76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd79:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dd7c:	89 50 04             	mov    %edx,0x4(%eax)
c010dd7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd82:	8b 50 04             	mov    0x4(%eax),%edx
c010dd85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dd88:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010dd8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010dd8e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010dd95:	7e d1                	jle    c010dd68 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010dd97:	e8 57 e1 ff ff       	call   c010bef3 <alloc_proc>
c010dd9c:	a3 20 ff 14 c0       	mov    %eax,0xc014ff20
c010dda1:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dda6:	85 c0                	test   %eax,%eax
c010dda8:	75 1c                	jne    c010ddc6 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010ddaa:	c7 44 24 08 65 83 11 	movl   $0xc0118365,0x8(%esp)
c010ddb1:	c0 
c010ddb2:	c7 44 24 04 42 04 00 	movl   $0x442,0x4(%esp)
c010ddb9:	00 
c010ddba:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010ddc1:	e8 02 31 ff ff       	call   c0100ec8 <__panic>
    }

    idleproc->pid = 0;
c010ddc6:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddcb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010ddd2:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddd7:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010dddd:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dde2:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010dde7:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010ddea:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ddef:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010ddf6:	8b 1d 20 ff 14 c0    	mov    0xc014ff20,%ebx
c010ddfc:	e8 25 d2 ff ff       	call   c010b026 <files_create>
c010de01:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010de07:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010de0d:	85 c0                	test   %eax,%eax
c010de0f:	75 1c                	jne    c010de2d <proc_init+0xf0>
        panic("create filesp (idleproc) failed.\n");
c010de11:	c7 44 24 08 80 83 11 	movl   $0xc0118380,0x8(%esp)
c010de18:	c0 
c010de19:	c7 44 24 04 4b 04 00 	movl   $0x44b,0x4(%esp)
c010de20:	00 
c010de21:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010de28:	e8 9b 30 ff ff       	call   c0100ec8 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010de2d:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de32:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010de38:	89 04 24             	mov    %eax,(%esp)
c010de3b:	e8 7f e0 ff ff       	call   c010bebf <files_count_inc>
    
    set_proc_name(idleproc, "idle");
c010de40:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de45:	c7 44 24 04 a2 83 11 	movl   $0xc01183a2,0x4(%esp)
c010de4c:	c0 
c010de4d:	89 04 24             	mov    %eax,(%esp)
c010de50:	e8 37 e2 ff ff       	call   c010c08c <set_proc_name>
    nr_process ++;
c010de55:	a1 40 1f 15 c0       	mov    0xc0151f40,%eax
c010de5a:	83 c0 01             	add    $0x1,%eax
c010de5d:	a3 40 1f 15 c0       	mov    %eax,0xc0151f40

    current = idleproc;
c010de62:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010de67:	a3 28 ff 14 c0       	mov    %eax,0xc014ff28

    int pid = kernel_thread(init_main, NULL, 0);
c010de6c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010de73:	00 
c010de74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010de7b:	00 
c010de7c:	c7 04 24 6c db 10 c0 	movl   $0xc010db6c,(%esp)
c010de83:	e8 91 e6 ff ff       	call   c010c519 <kernel_thread>
c010de88:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010de8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010de8f:	7f 1c                	jg     c010dead <proc_init+0x170>
        panic("create init_main failed.\n");
c010de91:	c7 44 24 08 a7 83 11 	movl   $0xc01183a7,0x8(%esp)
c010de98:	c0 
c010de99:	c7 44 24 04 56 04 00 	movl   $0x456,0x4(%esp)
c010dea0:	00 
c010dea1:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010dea8:	e8 1b 30 ff ff       	call   c0100ec8 <__panic>
    }

    initproc = find_proc(pid);
c010dead:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010deb0:	89 04 24             	mov    %eax,(%esp)
c010deb3:	e8 ed e5 ff ff       	call   c010c4a5 <find_proc>
c010deb8:	a3 24 ff 14 c0       	mov    %eax,0xc014ff24
    set_proc_name(initproc, "init");
c010debd:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010dec2:	c7 44 24 04 c1 83 11 	movl   $0xc01183c1,0x4(%esp)
c010dec9:	c0 
c010deca:	89 04 24             	mov    %eax,(%esp)
c010decd:	e8 ba e1 ff ff       	call   c010c08c <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010ded2:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010ded7:	85 c0                	test   %eax,%eax
c010ded9:	74 0c                	je     c010dee7 <proc_init+0x1aa>
c010dedb:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010dee0:	8b 40 04             	mov    0x4(%eax),%eax
c010dee3:	85 c0                	test   %eax,%eax
c010dee5:	74 24                	je     c010df0b <proc_init+0x1ce>
c010dee7:	c7 44 24 0c c8 83 11 	movl   $0xc01183c8,0xc(%esp)
c010deee:	c0 
c010deef:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010def6:	c0 
c010def7:	c7 44 24 04 5c 04 00 	movl   $0x45c,0x4(%esp)
c010defe:	00 
c010deff:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010df06:	e8 bd 2f ff ff       	call   c0100ec8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010df0b:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010df10:	85 c0                	test   %eax,%eax
c010df12:	74 0d                	je     c010df21 <proc_init+0x1e4>
c010df14:	a1 24 ff 14 c0       	mov    0xc014ff24,%eax
c010df19:	8b 40 04             	mov    0x4(%eax),%eax
c010df1c:	83 f8 01             	cmp    $0x1,%eax
c010df1f:	74 24                	je     c010df45 <proc_init+0x208>
c010df21:	c7 44 24 0c f0 83 11 	movl   $0xc01183f0,0xc(%esp)
c010df28:	c0 
c010df29:	c7 44 24 08 cb 7f 11 	movl   $0xc0117fcb,0x8(%esp)
c010df30:	c0 
c010df31:	c7 44 24 04 5d 04 00 	movl   $0x45d,0x4(%esp)
c010df38:	00 
c010df39:	c7 04 24 a4 7f 11 c0 	movl   $0xc0117fa4,(%esp)
c010df40:	e8 83 2f ff ff       	call   c0100ec8 <__panic>
}
c010df45:	83 c4 24             	add    $0x24,%esp
c010df48:	5b                   	pop    %ebx
c010df49:	5d                   	pop    %ebp
c010df4a:	c3                   	ret    

c010df4b <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010df4b:	55                   	push   %ebp
c010df4c:	89 e5                	mov    %esp,%ebp
c010df4e:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010df51:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df56:	8b 40 10             	mov    0x10(%eax),%eax
c010df59:	85 c0                	test   %eax,%eax
c010df5b:	74 07                	je     c010df64 <cpu_idle+0x19>
            schedule();
c010df5d:	e8 3e 06 00 00       	call   c010e5a0 <schedule>
        }
    }
c010df62:	eb ed                	jmp    c010df51 <cpu_idle+0x6>
c010df64:	eb eb                	jmp    c010df51 <cpu_idle+0x6>

c010df66 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010df66:	55                   	push   %ebp
c010df67:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010df69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df6d:	75 11                	jne    c010df80 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010df6f:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df74:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010df7b:	00 00 00 
c010df7e:	eb 0e                	jmp    c010df8e <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010df80:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010df85:	8b 55 08             	mov    0x8(%ebp),%edx
c010df88:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010df8e:	5d                   	pop    %ebp
c010df8f:	c3                   	ret    

c010df90 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010df90:	55                   	push   %ebp
c010df91:	89 e5                	mov    %esp,%ebp
c010df93:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010df96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010df9a:	75 07                	jne    c010dfa3 <do_sleep+0x13>
        return 0;
c010df9c:	b8 00 00 00 00       	mov    $0x0,%eax
c010dfa1:	eb 6b                	jmp    c010e00e <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010dfa3:	e8 40 dd ff ff       	call   c010bce8 <__intr_save>
c010dfa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010dfab:	8b 55 08             	mov    0x8(%ebp),%edx
c010dfae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dfb3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010dfb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010dfbb:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010dfbe:	89 04 24             	mov    %eax,(%esp)
c010dfc1:	e8 e9 dc ff ff       	call   c010bcaf <timer_init>
c010dfc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010dfc9:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dfce:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010dfd4:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010dfd9:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010dfe0:	00 00 80 
    add_timer(timer);
c010dfe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dfe6:	89 04 24             	mov    %eax,(%esp)
c010dfe9:	e8 3d 06 00 00       	call   c010e62b <add_timer>
    local_intr_restore(intr_flag);
c010dfee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dff1:	89 04 24             	mov    %eax,(%esp)
c010dff4:	e8 19 dd ff ff       	call   c010bd12 <__intr_restore>

    schedule();
c010dff9:	e8 a2 05 00 00       	call   c010e5a0 <schedule>

    del_timer(timer);
c010dffe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e001:	89 04 24             	mov    %eax,(%esp)
c010e004:	e8 60 07 00 00       	call   c010e769 <del_timer>
    return 0;
c010e009:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e00e:	c9                   	leave  
c010e00f:	c3                   	ret    

c010e010 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010e010:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010e014:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010e016:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010e019:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010e01c:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010e01f:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010e022:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010e025:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010e028:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010e02b:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010e02f:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010e032:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010e035:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010e038:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010e03b:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010e03e:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010e041:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010e044:	ff 30                	pushl  (%eax)

    ret
c010e046:	c3                   	ret    

c010e047 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010e047:	55                   	push   %ebp
c010e048:	89 e5                	mov    %esp,%ebp
c010e04a:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010e04d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e051:	75 08                	jne    c010e05b <skew_heap_merge+0x14>
c010e053:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e056:	e9 bd 00 00 00       	jmp    c010e118 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010e05b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e05f:	75 08                	jne    c010e069 <skew_heap_merge+0x22>
c010e061:	8b 45 08             	mov    0x8(%ebp),%eax
c010e064:	e9 af 00 00 00       	jmp    c010e118 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010e069:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e06c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e070:	8b 45 08             	mov    0x8(%ebp),%eax
c010e073:	89 04 24             	mov    %eax,(%esp)
c010e076:	8b 45 10             	mov    0x10(%ebp),%eax
c010e079:	ff d0                	call   *%eax
c010e07b:	83 f8 ff             	cmp    $0xffffffff,%eax
c010e07e:	75 4d                	jne    c010e0cd <skew_heap_merge+0x86>
     {
          r = a->left;
c010e080:	8b 45 08             	mov    0x8(%ebp),%eax
c010e083:	8b 40 04             	mov    0x4(%eax),%eax
c010e086:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010e089:	8b 45 08             	mov    0x8(%ebp),%eax
c010e08c:	8b 40 08             	mov    0x8(%eax),%eax
c010e08f:	8b 55 10             	mov    0x10(%ebp),%edx
c010e092:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e096:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e099:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e09d:	89 04 24             	mov    %eax,(%esp)
c010e0a0:	e8 a2 ff ff ff       	call   c010e047 <skew_heap_merge>
c010e0a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010e0a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e0ae:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010e0b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e0b7:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010e0ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e0be:	74 08                	je     c010e0c8 <skew_heap_merge+0x81>
c010e0c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e0c3:	8b 55 08             	mov    0x8(%ebp),%edx
c010e0c6:	89 10                	mov    %edx,(%eax)

          return a;
c010e0c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0cb:	eb 4b                	jmp    c010e118 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010e0cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0d0:	8b 40 04             	mov    0x4(%eax),%eax
c010e0d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010e0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0d9:	8b 40 08             	mov    0x8(%eax),%eax
c010e0dc:	8b 55 10             	mov    0x10(%ebp),%edx
c010e0df:	89 54 24 08          	mov    %edx,0x8(%esp)
c010e0e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e0e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0ea:	89 04 24             	mov    %eax,(%esp)
c010e0ed:	e8 55 ff ff ff       	call   c010e047 <skew_heap_merge>
c010e0f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010e0f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e0f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e0fb:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010e0fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e101:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e104:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010e107:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e10b:	74 08                	je     c010e115 <skew_heap_merge+0xce>
c010e10d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e110:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e113:	89 10                	mov    %edx,(%eax)

          return b;
c010e115:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010e118:	c9                   	leave  
c010e119:	c3                   	ret    

c010e11a <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010e11a:	55                   	push   %ebp
c010e11b:	89 e5                	mov    %esp,%ebp
c010e11d:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010e120:	8b 45 08             	mov    0x8(%ebp),%eax
c010e123:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e128:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010e12b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e12e:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e133:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010e136:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e139:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010e13f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e142:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e148:	29 c2                	sub    %eax,%edx
c010e14a:	89 d0                	mov    %edx,%eax
c010e14c:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010e14f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e153:	7e 07                	jle    c010e15c <proc_stride_comp_f+0x42>
c010e155:	b8 01 00 00 00       	mov    $0x1,%eax
c010e15a:	eb 12                	jmp    c010e16e <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010e15c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e160:	75 07                	jne    c010e169 <proc_stride_comp_f+0x4f>
c010e162:	b8 00 00 00 00       	mov    $0x0,%eax
c010e167:	eb 05                	jmp    c010e16e <proc_stride_comp_f+0x54>
     else return -1;
c010e169:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010e16e:	c9                   	leave  
c010e16f:	c3                   	ret    

c010e170 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010e170:	55                   	push   %ebp
c010e171:	89 e5                	mov    %esp,%ebp
c010e173:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010e176:	8b 45 08             	mov    0x8(%ebp),%eax
c010e179:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010e17c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e17f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010e182:	89 50 04             	mov    %edx,0x4(%eax)
c010e185:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e188:	8b 50 04             	mov    0x4(%eax),%edx
c010e18b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010e18e:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010e190:	8b 45 08             	mov    0x8(%ebp),%eax
c010e193:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010e19a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e19d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010e1a4:	c9                   	leave  
c010e1a5:	c3                   	ret    

c010e1a6 <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010e1a6:	55                   	push   %ebp
c010e1a7:	89 e5                	mov    %esp,%ebp
c010e1a9:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e1ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e1af:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1b8:	8b 40 10             	mov    0x10(%eax),%eax
c010e1bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e1be:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e1c1:	c7 45 ec 1a e1 10 c0 	movl   $0xc010e11a,-0x14(%ebp)
c010e1c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e1cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010e1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010e1d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1da:	8b 10                	mov    (%eax),%edx
c010e1dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1df:	89 50 08             	mov    %edx,0x8(%eax)
c010e1e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1e5:	8b 50 08             	mov    0x8(%eax),%edx
c010e1e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e1eb:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010e1ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e1f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e1f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e1f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e1fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e1ff:	89 04 24             	mov    %eax,(%esp)
c010e202:	e8 40 fe ff ff       	call   c010e047 <skew_heap_merge>
c010e207:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e209:	8b 45 08             	mov    0x8(%ebp),%eax
c010e20c:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010e20f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e212:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e218:	85 c0                	test   %eax,%eax
c010e21a:	74 13                	je     c010e22f <stride_enqueue+0x89>
c010e21c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e21f:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010e225:	8b 45 08             	mov    0x8(%ebp),%eax
c010e228:	8b 40 0c             	mov    0xc(%eax),%eax
c010e22b:	39 c2                	cmp    %eax,%edx
c010e22d:	7e 0f                	jle    c010e23e <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010e22f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e232:	8b 50 0c             	mov    0xc(%eax),%edx
c010e235:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e238:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010e23e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e241:	8b 55 08             	mov    0x8(%ebp),%edx
c010e244:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010e24a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e24d:	8b 40 08             	mov    0x8(%eax),%eax
c010e250:	8d 50 01             	lea    0x1(%eax),%edx
c010e253:	8b 45 08             	mov    0x8(%ebp),%eax
c010e256:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e259:	c9                   	leave  
c010e25a:	c3                   	ret    

c010e25b <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010e25b:	55                   	push   %ebp
c010e25c:	89 e5                	mov    %esp,%ebp
c010e25e:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010e261:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e264:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010e26a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e26d:	8b 40 10             	mov    0x10(%eax),%eax
c010e270:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e273:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010e276:	c7 45 ec 1a e1 10 c0 	movl   $0xc010e11a,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010e27d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e280:	8b 00                	mov    (%eax),%eax
c010e282:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010e285:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e288:	8b 50 08             	mov    0x8(%eax),%edx
c010e28b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e28e:	8b 40 04             	mov    0x4(%eax),%eax
c010e291:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010e294:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010e298:	89 54 24 04          	mov    %edx,0x4(%esp)
c010e29c:	89 04 24             	mov    %eax,(%esp)
c010e29f:	e8 a3 fd ff ff       	call   c010e047 <skew_heap_merge>
c010e2a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010e2a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010e2ab:	74 08                	je     c010e2b5 <stride_dequeue+0x5a>
c010e2ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e2b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e2b3:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010e2b5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e2b9:	74 24                	je     c010e2df <stride_dequeue+0x84>
     {
          if (p->left == b)
c010e2bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2be:	8b 40 04             	mov    0x4(%eax),%eax
c010e2c1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e2c4:	75 0b                	jne    c010e2d1 <stride_dequeue+0x76>
               p->left = rep;
c010e2c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e2cc:	89 50 04             	mov    %edx,0x4(%eax)
c010e2cf:	eb 09                	jmp    c010e2da <stride_dequeue+0x7f>
          else p->right = rep;
c010e2d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e2d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010e2d7:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010e2da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2dd:	eb 03                	jmp    c010e2e2 <stride_dequeue+0x87>
     }
     else return rep;
c010e2df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e2e2:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010e2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2e7:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010e2ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ed:	8b 40 08             	mov    0x8(%eax),%eax
c010e2f0:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e2f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2f6:	89 50 08             	mov    %edx,0x8(%eax)
}
c010e2f9:	c9                   	leave  
c010e2fa:	c3                   	ret    

c010e2fb <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010e2fb:	55                   	push   %ebp
c010e2fc:	89 e5                	mov    %esp,%ebp
c010e2fe:	53                   	push   %ebx
c010e2ff:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010e302:	8b 45 08             	mov    0x8(%ebp),%eax
c010e305:	8b 40 10             	mov    0x10(%eax),%eax
c010e308:	85 c0                	test   %eax,%eax
c010e30a:	75 07                	jne    c010e313 <stride_pick_next+0x18>
c010e30c:	b8 00 00 00 00       	mov    $0x0,%eax
c010e311:	eb 62                	jmp    c010e375 <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010e313:	8b 45 08             	mov    0x8(%ebp),%eax
c010e316:	8b 40 10             	mov    0x10(%eax),%eax
c010e319:	2d b0 00 00 00       	sub    $0xb0,%eax
c010e31e:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010e321:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e324:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010e32a:	85 c0                	test   %eax,%eax
c010e32c:	75 1a                	jne    c010e348 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010e32e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e331:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010e337:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010e33d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e340:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010e346:	eb 2a                	jmp    c010e372 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010e348:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e34b:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010e351:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e354:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010e35a:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010e35f:	ba 00 00 00 00       	mov    $0x0,%edx
c010e364:	f7 f3                	div    %ebx
c010e366:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010e369:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010e36c:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010e372:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010e375:	83 c4 10             	add    $0x10,%esp
c010e378:	5b                   	pop    %ebx
c010e379:	5d                   	pop    %ebp
c010e37a:	c3                   	ret    

c010e37b <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010e37b:	55                   	push   %ebp
c010e37c:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010e37e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e381:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e387:	85 c0                	test   %eax,%eax
c010e389:	7e 15                	jle    c010e3a0 <stride_proc_tick+0x25>
          proc->time_slice --;
c010e38b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e38e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e394:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e39a:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010e3a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3a3:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010e3a9:	85 c0                	test   %eax,%eax
c010e3ab:	75 0a                	jne    c010e3b7 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010e3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e3b0:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010e3b7:	5d                   	pop    %ebp
c010e3b8:	c3                   	ret    

c010e3b9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e3b9:	55                   	push   %ebp
c010e3ba:	89 e5                	mov    %esp,%ebp
c010e3bc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e3bf:	9c                   	pushf  
c010e3c0:	58                   	pop    %eax
c010e3c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e3c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e3c7:	25 00 02 00 00       	and    $0x200,%eax
c010e3cc:	85 c0                	test   %eax,%eax
c010e3ce:	74 0c                	je     c010e3dc <__intr_save+0x23>
        intr_disable();
c010e3d0:	e8 55 3d ff ff       	call   c010212a <intr_disable>
        return 1;
c010e3d5:	b8 01 00 00 00       	mov    $0x1,%eax
c010e3da:	eb 05                	jmp    c010e3e1 <__intr_save+0x28>
    }
    return 0;
c010e3dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e3e1:	c9                   	leave  
c010e3e2:	c3                   	ret    

c010e3e3 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e3e3:	55                   	push   %ebp
c010e3e4:	89 e5                	mov    %esp,%ebp
c010e3e6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e3e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e3ed:	74 05                	je     c010e3f4 <__intr_restore+0x11>
        intr_enable();
c010e3ef:	e8 30 3d ff ff       	call   c0102124 <intr_enable>
    }
}
c010e3f4:	c9                   	leave  
c010e3f5:	c3                   	ret    

c010e3f6 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010e3f6:	55                   	push   %ebp
c010e3f7:	89 e5                	mov    %esp,%ebp
c010e3f9:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e3fc:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e401:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e404:	74 1a                	je     c010e420 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010e406:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e40b:	8b 40 08             	mov    0x8(%eax),%eax
c010e40e:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e414:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e417:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e41b:	89 14 24             	mov    %edx,(%esp)
c010e41e:	ff d0                	call   *%eax
    }
}
c010e420:	c9                   	leave  
c010e421:	c3                   	ret    

c010e422 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010e422:	55                   	push   %ebp
c010e423:	89 e5                	mov    %esp,%ebp
c010e425:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010e428:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e42d:	8b 40 0c             	mov    0xc(%eax),%eax
c010e430:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e436:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e439:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e43d:	89 14 24             	mov    %edx,(%esp)
c010e440:	ff d0                	call   *%eax
}
c010e442:	c9                   	leave  
c010e443:	c3                   	ret    

c010e444 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010e444:	55                   	push   %ebp
c010e445:	89 e5                	mov    %esp,%ebp
c010e447:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010e44a:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e44f:	8b 40 10             	mov    0x10(%eax),%eax
c010e452:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e458:	89 14 24             	mov    %edx,(%esp)
c010e45b:	ff d0                	call   *%eax
}
c010e45d:	c9                   	leave  
c010e45e:	c3                   	ret    

c010e45f <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010e45f:	55                   	push   %ebp
c010e460:	89 e5                	mov    %esp,%ebp
c010e462:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010e465:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e46a:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e46d:	74 1c                	je     c010e48b <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010e46f:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e474:	8b 40 14             	mov    0x14(%eax),%eax
c010e477:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e47d:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010e480:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010e484:	89 14 24             	mov    %edx,(%esp)
c010e487:	ff d0                	call   *%eax
c010e489:	eb 0a                	jmp    c010e495 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010e48b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e48e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010e495:	c9                   	leave  
c010e496:	c3                   	ret    

c010e497 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010e497:	55                   	push   %ebp
c010e498:	89 e5                	mov    %esp,%ebp
c010e49a:	83 ec 28             	sub    $0x28,%esp
c010e49d:	c7 45 f4 94 1f 15 c0 	movl   $0xc0151f94,-0xc(%ebp)
c010e4a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e4aa:	89 50 04             	mov    %edx,0x4(%eax)
c010e4ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4b0:	8b 50 04             	mov    0x4(%eax),%edx
c010e4b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4b6:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010e4b8:	c7 05 9c 1f 15 c0 8c 	movl   $0xc014ea8c,0xc0151f9c
c010e4bf:	ea 14 c0 

    rq = &__rq;
c010e4c2:	c7 05 a0 1f 15 c0 a4 	movl   $0xc0151fa4,0xc0151fa0
c010e4c9:	1f 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010e4cc:	a1 a0 1f 15 c0       	mov    0xc0151fa0,%eax
c010e4d1:	c7 40 0c 14 00 00 00 	movl   $0x14,0xc(%eax)
    sched_class->init(rq);
c010e4d8:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e4dd:	8b 40 04             	mov    0x4(%eax),%eax
c010e4e0:	8b 15 a0 1f 15 c0    	mov    0xc0151fa0,%edx
c010e4e6:	89 14 24             	mov    %edx,(%esp)
c010e4e9:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010e4eb:	a1 9c 1f 15 c0       	mov    0xc0151f9c,%eax
c010e4f0:	8b 00                	mov    (%eax),%eax
c010e4f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e4f6:	c7 04 24 28 84 11 c0 	movl   $0xc0118428,(%esp)
c010e4fd:	e8 63 1e ff ff       	call   c0100365 <cprintf>
}
c010e502:	c9                   	leave  
c010e503:	c3                   	ret    

c010e504 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010e504:	55                   	push   %ebp
c010e505:	89 e5                	mov    %esp,%ebp
c010e507:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010e50a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e50d:	8b 00                	mov    (%eax),%eax
c010e50f:	83 f8 03             	cmp    $0x3,%eax
c010e512:	75 24                	jne    c010e538 <wakeup_proc+0x34>
c010e514:	c7 44 24 0c 39 84 11 	movl   $0xc0118439,0xc(%esp)
c010e51b:	c0 
c010e51c:	c7 44 24 08 54 84 11 	movl   $0xc0118454,0x8(%esp)
c010e523:	c0 
c010e524:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010e52b:	00 
c010e52c:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e533:	e8 90 29 ff ff       	call   c0100ec8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010e538:	e8 7c fe ff ff       	call   c010e3b9 <__intr_save>
c010e53d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010e540:	8b 45 08             	mov    0x8(%ebp),%eax
c010e543:	8b 00                	mov    (%eax),%eax
c010e545:	83 f8 02             	cmp    $0x2,%eax
c010e548:	74 2d                	je     c010e577 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010e54a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e54d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010e553:	8b 45 08             	mov    0x8(%ebp),%eax
c010e556:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010e55d:	00 00 00 
            if (proc != current) {
c010e560:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e565:	39 45 08             	cmp    %eax,0x8(%ebp)
c010e568:	74 29                	je     c010e593 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010e56a:	8b 45 08             	mov    0x8(%ebp),%eax
c010e56d:	89 04 24             	mov    %eax,(%esp)
c010e570:	e8 81 fe ff ff       	call   c010e3f6 <sched_class_enqueue>
c010e575:	eb 1c                	jmp    c010e593 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010e577:	c7 44 24 08 7f 84 11 	movl   $0xc011847f,0x8(%esp)
c010e57e:	c0 
c010e57f:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010e586:	00 
c010e587:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e58e:	e8 a1 29 ff ff       	call   c0100f34 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010e593:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e596:	89 04 24             	mov    %eax,(%esp)
c010e599:	e8 45 fe ff ff       	call   c010e3e3 <__intr_restore>
}
c010e59e:	c9                   	leave  
c010e59f:	c3                   	ret    

c010e5a0 <schedule>:

void
schedule(void) {
c010e5a0:	55                   	push   %ebp
c010e5a1:	89 e5                	mov    %esp,%ebp
c010e5a3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010e5a6:	e8 0e fe ff ff       	call   c010e3b9 <__intr_save>
c010e5ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010e5ae:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5b3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010e5ba:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5bf:	8b 00                	mov    (%eax),%eax
c010e5c1:	83 f8 02             	cmp    $0x2,%eax
c010e5c4:	75 0d                	jne    c010e5d3 <schedule+0x33>
            sched_class_enqueue(current);
c010e5c6:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e5cb:	89 04 24             	mov    %eax,(%esp)
c010e5ce:	e8 23 fe ff ff       	call   c010e3f6 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010e5d3:	e8 6c fe ff ff       	call   c010e444 <sched_class_pick_next>
c010e5d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e5db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e5df:	74 0b                	je     c010e5ec <schedule+0x4c>
            sched_class_dequeue(next);
c010e5e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5e4:	89 04 24             	mov    %eax,(%esp)
c010e5e7:	e8 36 fe ff ff       	call   c010e422 <sched_class_dequeue>
        }
        if (next == NULL) {
c010e5ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e5f0:	75 08                	jne    c010e5fa <schedule+0x5a>
            next = idleproc;
c010e5f2:	a1 20 ff 14 c0       	mov    0xc014ff20,%eax
c010e5f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010e5fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e5fd:	8b 40 08             	mov    0x8(%eax),%eax
c010e600:	8d 50 01             	lea    0x1(%eax),%edx
c010e603:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e606:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010e609:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e60e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e611:	74 0b                	je     c010e61e <schedule+0x7e>
            proc_run(next);
c010e613:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e616:	89 04 24             	mov    %eax,(%esp)
c010e619:	e8 46 dd ff ff       	call   c010c364 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010e61e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e621:	89 04 24             	mov    %eax,(%esp)
c010e624:	e8 ba fd ff ff       	call   c010e3e3 <__intr_restore>
}
c010e629:	c9                   	leave  
c010e62a:	c3                   	ret    

c010e62b <add_timer>:

void
add_timer(timer_t *timer) {
c010e62b:	55                   	push   %ebp
c010e62c:	89 e5                	mov    %esp,%ebp
c010e62e:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e631:	e8 83 fd ff ff       	call   c010e3b9 <__intr_save>
c010e636:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010e639:	8b 45 08             	mov    0x8(%ebp),%eax
c010e63c:	8b 00                	mov    (%eax),%eax
c010e63e:	85 c0                	test   %eax,%eax
c010e640:	74 0a                	je     c010e64c <add_timer+0x21>
c010e642:	8b 45 08             	mov    0x8(%ebp),%eax
c010e645:	8b 40 04             	mov    0x4(%eax),%eax
c010e648:	85 c0                	test   %eax,%eax
c010e64a:	75 24                	jne    c010e670 <add_timer+0x45>
c010e64c:	c7 44 24 0c 9c 84 11 	movl   $0xc011849c,0xc(%esp)
c010e653:	c0 
c010e654:	c7 44 24 08 54 84 11 	movl   $0xc0118454,0x8(%esp)
c010e65b:	c0 
c010e65c:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010e663:	00 
c010e664:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e66b:	e8 58 28 ff ff       	call   c0100ec8 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010e670:	8b 45 08             	mov    0x8(%ebp),%eax
c010e673:	83 c0 08             	add    $0x8,%eax
c010e676:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e679:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e67c:	8b 40 04             	mov    0x4(%eax),%eax
c010e67f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e682:	0f 94 c0             	sete   %al
c010e685:	0f b6 c0             	movzbl %al,%eax
c010e688:	85 c0                	test   %eax,%eax
c010e68a:	75 24                	jne    c010e6b0 <add_timer+0x85>
c010e68c:	c7 44 24 0c c8 84 11 	movl   $0xc01184c8,0xc(%esp)
c010e693:	c0 
c010e694:	c7 44 24 08 54 84 11 	movl   $0xc0118454,0x8(%esp)
c010e69b:	c0 
c010e69c:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010e6a3:	00 
c010e6a4:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e6ab:	e8 18 28 ff ff       	call   c0100ec8 <__panic>
c010e6b0:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e6b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e6ba:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010e6bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010e6c0:	eb 4a                	jmp    c010e70c <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010e6c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6c5:	83 e8 08             	sub    $0x8,%eax
c010e6c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010e6cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6ce:	8b 10                	mov    (%eax),%edx
c010e6d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6d3:	8b 00                	mov    (%eax),%eax
c010e6d5:	39 c2                	cmp    %eax,%edx
c010e6d7:	73 13                	jae    c010e6ec <add_timer+0xc1>
                next->expires -= timer->expires;
c010e6d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6dc:	8b 10                	mov    (%eax),%edx
c010e6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6e1:	8b 00                	mov    (%eax),%eax
c010e6e3:	29 c2                	sub    %eax,%edx
c010e6e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6e8:	89 10                	mov    %edx,(%eax)
                break;
c010e6ea:	eb 29                	jmp    c010e715 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010e6ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6ef:	8b 10                	mov    (%eax),%edx
c010e6f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6f4:	8b 00                	mov    (%eax),%eax
c010e6f6:	29 c2                	sub    %eax,%edx
c010e6f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6fb:	89 10                	mov    %edx,(%eax)
c010e6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e700:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e703:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e706:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010e709:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010e70c:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e713:	75 ad                	jne    c010e6c2 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010e715:	8b 45 08             	mov    0x8(%ebp),%eax
c010e718:	8d 50 08             	lea    0x8(%eax),%edx
c010e71b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e71e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010e721:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010e724:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e727:	8b 00                	mov    (%eax),%eax
c010e729:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e72c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e72f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010e732:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e735:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e738:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e73b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e73e:	89 10                	mov    %edx,(%eax)
c010e740:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010e743:	8b 10                	mov    (%eax),%edx
c010e745:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e748:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e74b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e74e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010e751:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e754:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e757:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e75a:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010e75c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e75f:	89 04 24             	mov    %eax,(%esp)
c010e762:	e8 7c fc ff ff       	call   c010e3e3 <__intr_restore>
}
c010e767:	c9                   	leave  
c010e768:	c3                   	ret    

c010e769 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010e769:	55                   	push   %ebp
c010e76a:	89 e5                	mov    %esp,%ebp
c010e76c:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e76f:	e8 45 fc ff ff       	call   c010e3b9 <__intr_save>
c010e774:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010e777:	8b 45 08             	mov    0x8(%ebp),%eax
c010e77a:	83 c0 08             	add    $0x8,%eax
c010e77d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e780:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e783:	8b 40 04             	mov    0x4(%eax),%eax
c010e786:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010e789:	0f 94 c0             	sete   %al
c010e78c:	0f b6 c0             	movzbl %al,%eax
c010e78f:	85 c0                	test   %eax,%eax
c010e791:	0f 85 89 00 00 00    	jne    c010e820 <del_timer+0xb7>
            if (timer->expires != 0) {
c010e797:	8b 45 08             	mov    0x8(%ebp),%eax
c010e79a:	8b 00                	mov    (%eax),%eax
c010e79c:	85 c0                	test   %eax,%eax
c010e79e:	74 35                	je     c010e7d5 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010e7a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7a3:	83 c0 08             	add    $0x8,%eax
c010e7a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e7a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e7ac:	8b 40 04             	mov    0x4(%eax),%eax
c010e7af:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010e7b2:	81 7d f0 94 1f 15 c0 	cmpl   $0xc0151f94,-0x10(%ebp)
c010e7b9:	74 1a                	je     c010e7d5 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010e7bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e7be:	83 e8 08             	sub    $0x8,%eax
c010e7c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010e7c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7c7:	8b 10                	mov    (%eax),%edx
c010e7c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7cc:	8b 00                	mov    (%eax),%eax
c010e7ce:	01 c2                	add    %eax,%edx
c010e7d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e7d3:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010e7d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e7d8:	83 c0 08             	add    $0x8,%eax
c010e7db:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e7de:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e7e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010e7e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e7e7:	8b 40 04             	mov    0x4(%eax),%eax
c010e7ea:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e7ed:	8b 12                	mov    (%edx),%edx
c010e7ef:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e7f2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010e7f5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e7f8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e7fb:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010e7fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e801:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e804:	89 10                	mov    %edx,(%eax)
c010e806:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e809:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010e80c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e80f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e812:	89 50 04             	mov    %edx,0x4(%eax)
c010e815:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e818:	8b 50 04             	mov    0x4(%eax),%edx
c010e81b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e81e:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010e820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e823:	89 04 24             	mov    %eax,(%esp)
c010e826:	e8 b8 fb ff ff       	call   c010e3e3 <__intr_restore>
}
c010e82b:	c9                   	leave  
c010e82c:	c3                   	ret    

c010e82d <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010e82d:	55                   	push   %ebp
c010e82e:	89 e5                	mov    %esp,%ebp
c010e830:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010e833:	e8 81 fb ff ff       	call   c010e3b9 <__intr_save>
c010e838:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e83b:	c7 45 e4 94 1f 15 c0 	movl   $0xc0151f94,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e842:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e845:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010e848:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010e84b:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e852:	0f 84 fb 00 00 00    	je     c010e953 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010e858:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e85b:	83 e8 08             	sub    $0x8,%eax
c010e85e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010e861:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e864:	8b 00                	mov    (%eax),%eax
c010e866:	85 c0                	test   %eax,%eax
c010e868:	75 24                	jne    c010e88e <run_timer_list+0x61>
c010e86a:	c7 44 24 0c e9 84 11 	movl   $0xc01184e9,0xc(%esp)
c010e871:	c0 
c010e872:	c7 44 24 08 54 84 11 	movl   $0xc0118454,0x8(%esp)
c010e879:	c0 
c010e87a:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
c010e881:	00 
c010e882:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e889:	e8 3a 26 ff ff       	call   c0100ec8 <__panic>
            timer->expires --;
c010e88e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e891:	8b 00                	mov    (%eax),%eax
c010e893:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e896:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e899:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010e89b:	e9 a6 00 00 00       	jmp    c010e946 <run_timer_list+0x119>
c010e8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e8a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8a9:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010e8ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010e8af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8b2:	8b 40 04             	mov    0x4(%eax),%eax
c010e8b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010e8b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8bb:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e8c1:	85 c0                	test   %eax,%eax
c010e8c3:	74 31                	je     c010e8f6 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010e8c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8c8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010e8ce:	85 c0                	test   %eax,%eax
c010e8d0:	78 4a                	js     c010e91c <run_timer_list+0xef>
c010e8d2:	c7 44 24 0c 00 85 11 	movl   $0xc0118500,0xc(%esp)
c010e8d9:	c0 
c010e8da:	c7 44 24 08 54 84 11 	movl   $0xc0118454,0x8(%esp)
c010e8e1:	c0 
c010e8e2:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c010e8e9:	00 
c010e8ea:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e8f1:	e8 d2 25 ff ff       	call   c0100ec8 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010e8f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e8f9:	8b 40 04             	mov    0x4(%eax),%eax
c010e8fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010e900:	c7 44 24 08 24 85 11 	movl   $0xc0118524,0x8(%esp)
c010e907:	c0 
c010e908:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010e90f:	00 
c010e910:	c7 04 24 69 84 11 c0 	movl   $0xc0118469,(%esp)
c010e917:	e8 18 26 ff ff       	call   c0100f34 <__warn>
                }
                wakeup_proc(proc);
c010e91c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e91f:	89 04 24             	mov    %eax,(%esp)
c010e922:	e8 dd fb ff ff       	call   c010e504 <wakeup_proc>
                del_timer(timer);
c010e927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e92a:	89 04 24             	mov    %eax,(%esp)
c010e92d:	e8 37 fe ff ff       	call   c010e769 <del_timer>
                if (le == &timer_list) {
c010e932:	81 7d f4 94 1f 15 c0 	cmpl   $0xc0151f94,-0xc(%ebp)
c010e939:	75 02                	jne    c010e93d <run_timer_list+0x110>
                    break;
c010e93b:	eb 16                	jmp    c010e953 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010e93d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e940:	83 e8 08             	sub    $0x8,%eax
c010e943:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010e946:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e949:	8b 00                	mov    (%eax),%eax
c010e94b:	85 c0                	test   %eax,%eax
c010e94d:	0f 84 4d ff ff ff    	je     c010e8a0 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010e953:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e958:	89 04 24             	mov    %eax,(%esp)
c010e95b:	e8 ff fa ff ff       	call   c010e45f <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010e960:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e963:	89 04 24             	mov    %eax,(%esp)
c010e966:	e8 78 fa ff ff       	call   c010e3e3 <__intr_restore>
}
c010e96b:	c9                   	leave  
c010e96c:	c3                   	ret    

c010e96d <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010e96d:	55                   	push   %ebp
c010e96e:	89 e5                	mov    %esp,%ebp
c010e970:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010e973:	8b 45 08             	mov    0x8(%ebp),%eax
c010e976:	8b 00                	mov    (%eax),%eax
c010e978:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010e97b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e97e:	89 04 24             	mov    %eax,(%esp)
c010e981:	e8 5b e1 ff ff       	call   c010cae1 <do_exit>
}
c010e986:	c9                   	leave  
c010e987:	c3                   	ret    

c010e988 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010e988:	55                   	push   %ebp
c010e989:	89 e5                	mov    %esp,%ebp
c010e98b:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e98e:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010e993:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e996:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010e999:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e99c:	8b 40 44             	mov    0x44(%eax),%eax
c010e99f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010e9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9a5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010e9a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e9b0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010e9b7:	e8 db df ff ff       	call   c010c997 <do_fork>
}
c010e9bc:	c9                   	leave  
c010e9bd:	c3                   	ret    

c010e9be <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010e9be:	55                   	push   %ebp
c010e9bf:	89 e5                	mov    %esp,%ebp
c010e9c1:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010e9c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9c7:	8b 00                	mov    (%eax),%eax
c010e9c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010e9cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9cf:	83 c0 04             	add    $0x4,%eax
c010e9d2:	8b 00                	mov    (%eax),%eax
c010e9d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010e9d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e9da:	89 44 24 04          	mov    %eax,0x4(%esp)
c010e9de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9e1:	89 04 24             	mov    %eax,(%esp)
c010e9e4:	e8 d6 ee ff ff       	call   c010d8bf <do_wait>
}
c010e9e9:	c9                   	leave  
c010e9ea:	c3                   	ret    

c010e9eb <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010e9eb:	55                   	push   %ebp
c010e9ec:	89 e5                	mov    %esp,%ebp
c010e9ee:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010e9f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9f4:	8b 00                	mov    (%eax),%eax
c010e9f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010e9f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9fc:	83 c0 04             	add    $0x4,%eax
c010e9ff:	8b 00                	mov    (%eax),%eax
c010ea01:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010ea04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea07:	83 c0 08             	add    $0x8,%eax
c010ea0a:	8b 00                	mov    (%eax),%eax
c010ea0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010ea0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea12:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ea16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea19:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ea1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea20:	89 04 24             	mov    %eax,(%esp)
c010ea23:	e8 44 ec ff ff       	call   c010d66c <do_execve>
}
c010ea28:	c9                   	leave  
c010ea29:	c3                   	ret    

c010ea2a <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ea2a:	55                   	push   %ebp
c010ea2b:	89 e5                	mov    %esp,%ebp
c010ea2d:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ea30:	e8 74 ee ff ff       	call   c010d8a9 <do_yield>
}
c010ea35:	c9                   	leave  
c010ea36:	c3                   	ret    

c010ea37 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ea37:	55                   	push   %ebp
c010ea38:	89 e5                	mov    %esp,%ebp
c010ea3a:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ea3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea40:	8b 00                	mov    (%eax),%eax
c010ea42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ea45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea48:	89 04 24             	mov    %eax,(%esp)
c010ea4b:	e8 0f f0 ff ff       	call   c010da5f <do_kill>
}
c010ea50:	c9                   	leave  
c010ea51:	c3                   	ret    

c010ea52 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010ea52:	55                   	push   %ebp
c010ea53:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010ea55:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ea5a:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ea5d:	5d                   	pop    %ebp
c010ea5e:	c3                   	ret    

c010ea5f <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ea5f:	55                   	push   %ebp
c010ea60:	89 e5                	mov    %esp,%ebp
c010ea62:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010ea65:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea68:	8b 00                	mov    (%eax),%eax
c010ea6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ea6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea70:	89 04 24             	mov    %eax,(%esp)
c010ea73:	e8 13 19 ff ff       	call   c010038b <cputchar>
    return 0;
c010ea78:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea7d:	c9                   	leave  
c010ea7e:	c3                   	ret    

c010ea7f <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ea7f:	55                   	push   %ebp
c010ea80:	89 e5                	mov    %esp,%ebp
c010ea82:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ea85:	e8 97 81 ff ff       	call   c0106c21 <print_pgdir>
    return 0;
c010ea8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ea8f:	c9                   	leave  
c010ea90:	c3                   	ret    

c010ea91 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ea91:	55                   	push   %ebp
c010ea92:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ea94:	a1 10 30 15 c0       	mov    0xc0153010,%eax
}
c010ea99:	5d                   	pop    %ebp
c010ea9a:	c3                   	ret    

c010ea9b <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ea9b:	55                   	push   %ebp
c010ea9c:	89 e5                	mov    %esp,%ebp
c010ea9e:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010eaa1:	8b 45 08             	mov    0x8(%ebp),%eax
c010eaa4:	8b 00                	mov    (%eax),%eax
c010eaa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010eaa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaac:	89 04 24             	mov    %eax,(%esp)
c010eaaf:	e8 b2 f4 ff ff       	call   c010df66 <lab6_set_priority>
    return 0;
c010eab4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eab9:	c9                   	leave  
c010eaba:	c3                   	ret    

c010eabb <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010eabb:	55                   	push   %ebp
c010eabc:	89 e5                	mov    %esp,%ebp
c010eabe:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010eac1:	8b 45 08             	mov    0x8(%ebp),%eax
c010eac4:	8b 00                	mov    (%eax),%eax
c010eac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010eac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eacc:	89 04 24             	mov    %eax,(%esp)
c010eacf:	e8 bc f4 ff ff       	call   c010df90 <do_sleep>
}
c010ead4:	c9                   	leave  
c010ead5:	c3                   	ret    

c010ead6 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010ead6:	55                   	push   %ebp
c010ead7:	89 e5                	mov    %esp,%ebp
c010ead9:	83 ec 28             	sub    $0x28,%esp
    const char *path = (const char *)arg[0];
c010eadc:	8b 45 08             	mov    0x8(%ebp),%eax
c010eadf:	8b 00                	mov    (%eax),%eax
c010eae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010eae4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eae7:	8b 40 04             	mov    0x4(%eax),%eax
c010eaea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010eaed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eaf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eaf7:	89 04 24             	mov    %eax,(%esp)
c010eafa:	e8 62 ca ff ff       	call   c010b561 <sysfile_open>
}
c010eaff:	c9                   	leave  
c010eb00:	c3                   	ret    

c010eb01 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010eb01:	55                   	push   %ebp
c010eb02:	89 e5                	mov    %esp,%ebp
c010eb04:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb07:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb0a:	8b 00                	mov    (%eax),%eax
c010eb0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010eb0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb12:	89 04 24             	mov    %eax,(%esp)
c010eb15:	e8 92 ca ff ff       	call   c010b5ac <sysfile_close>
}
c010eb1a:	c9                   	leave  
c010eb1b:	c3                   	ret    

c010eb1c <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010eb1c:	55                   	push   %ebp
c010eb1d:	89 e5                	mov    %esp,%ebp
c010eb1f:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb22:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb25:	8b 00                	mov    (%eax),%eax
c010eb27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eb2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb2d:	83 c0 04             	add    $0x4,%eax
c010eb30:	8b 00                	mov    (%eax),%eax
c010eb32:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eb35:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb38:	8b 40 08             	mov    0x8(%eax),%eax
c010eb3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010eb3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb41:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb48:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb4f:	89 04 24             	mov    %eax,(%esp)
c010eb52:	e8 68 ca ff ff       	call   c010b5bf <sysfile_read>
}
c010eb57:	c9                   	leave  
c010eb58:	c3                   	ret    

c010eb59 <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010eb59:	55                   	push   %ebp
c010eb5a:	89 e5                	mov    %esp,%ebp
c010eb5c:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb62:	8b 00                	mov    (%eax),%eax
c010eb64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010eb67:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb6a:	83 c0 04             	add    $0x4,%eax
c010eb6d:	8b 00                	mov    (%eax),%eax
c010eb6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010eb72:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb75:	8b 40 08             	mov    0x8(%eax),%eax
c010eb78:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010eb7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb7e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010eb82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb85:	89 44 24 04          	mov    %eax,0x4(%esp)
c010eb89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb8c:	89 04 24             	mov    %eax,(%esp)
c010eb8f:	e8 a3 cb ff ff       	call   c010b737 <sysfile_write>
}
c010eb94:	c9                   	leave  
c010eb95:	c3                   	ret    

c010eb96 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010eb96:	55                   	push   %ebp
c010eb97:	89 e5                	mov    %esp,%ebp
c010eb99:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010eb9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010eb9f:	8b 00                	mov    (%eax),%eax
c010eba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010eba4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eba7:	83 c0 04             	add    $0x4,%eax
c010ebaa:	8b 00                	mov    (%eax),%eax
c010ebac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ebaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebb2:	83 c0 08             	add    $0x8,%eax
c010ebb5:	8b 00                	mov    (%eax),%eax
c010ebb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ebba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebbd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ebc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebc4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebcb:	89 04 24             	mov    %eax,(%esp)
c010ebce:	e8 de cc ff ff       	call   c010b8b1 <sysfile_seek>
}
c010ebd3:	c9                   	leave  
c010ebd4:	c3                   	ret    

c010ebd5 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010ebd5:	55                   	push   %ebp
c010ebd6:	89 e5                	mov    %esp,%ebp
c010ebd8:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ebdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebde:	8b 00                	mov    (%eax),%eax
c010ebe0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010ebe3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebe6:	83 c0 04             	add    $0x4,%eax
c010ebe9:	8b 00                	mov    (%eax),%eax
c010ebeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ebee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ebf1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ebf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebf8:	89 04 24             	mov    %eax,(%esp)
c010ebfb:	e8 d2 cc ff ff       	call   c010b8d2 <sysfile_fstat>
}
c010ec00:	c9                   	leave  
c010ec01:	c3                   	ret    

c010ec02 <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010ec02:	55                   	push   %ebp
c010ec03:	89 e5                	mov    %esp,%ebp
c010ec05:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ec08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec0b:	8b 00                	mov    (%eax),%eax
c010ec0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010ec10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec13:	89 04 24             	mov    %eax,(%esp)
c010ec16:	e8 35 cd ff ff       	call   c010b950 <sysfile_fsync>
}
c010ec1b:	c9                   	leave  
c010ec1c:	c3                   	ret    

c010ec1d <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010ec1d:	55                   	push   %ebp
c010ec1e:	89 e5                	mov    %esp,%ebp
c010ec20:	83 ec 28             	sub    $0x28,%esp
    char *buf = (char *)arg[0];
c010ec23:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec26:	8b 00                	mov    (%eax),%eax
c010ec28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ec2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec2e:	8b 40 04             	mov    0x4(%eax),%eax
c010ec31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010ec34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec37:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec3e:	89 04 24             	mov    %eax,(%esp)
c010ec41:	e8 a7 ce ff ff       	call   c010baed <sysfile_getcwd>
}
c010ec46:	c9                   	leave  
c010ec47:	c3                   	ret    

c010ec48 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010ec48:	55                   	push   %ebp
c010ec49:	89 e5                	mov    %esp,%ebp
c010ec4b:	83 ec 28             	sub    $0x28,%esp
    int fd = (int)arg[0];
c010ec4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec51:	8b 00                	mov    (%eax),%eax
c010ec53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010ec56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec59:	83 c0 04             	add    $0x4,%eax
c010ec5c:	8b 00                	mov    (%eax),%eax
c010ec5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010ec61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec64:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec6b:	89 04 24             	mov    %eax,(%esp)
c010ec6e:	e8 11 cf ff ff       	call   c010bb84 <sysfile_getdirentry>
}
c010ec73:	c9                   	leave  
c010ec74:	c3                   	ret    

c010ec75 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010ec75:	55                   	push   %ebp
c010ec76:	89 e5                	mov    %esp,%ebp
c010ec78:	83 ec 28             	sub    $0x28,%esp
    int fd1 = (int)arg[0];
c010ec7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec7e:	8b 00                	mov    (%eax),%eax
c010ec80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010ec83:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec86:	83 c0 04             	add    $0x4,%eax
c010ec89:	8b 00                	mov    (%eax),%eax
c010ec8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010ec8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ec91:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ec95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec98:	89 04 24             	mov    %eax,(%esp)
c010ec9b:	e8 d8 cf ff ff       	call   c010bc78 <sysfile_dup>
}
c010eca0:	c9                   	leave  
c010eca1:	c3                   	ret    

c010eca2 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010eca2:	55                   	push   %ebp
c010eca3:	89 e5                	mov    %esp,%ebp
c010eca5:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010eca8:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ecad:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ecb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ecb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb6:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ecb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ecbc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ecc0:	78 60                	js     c010ed22 <syscall+0x80>
c010ecc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ecc5:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ecca:	77 56                	ja     c010ed22 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010eccc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eccf:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010ecd6:	85 c0                	test   %eax,%eax
c010ecd8:	74 48                	je     c010ed22 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ecda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecdd:	8b 40 14             	mov    0x14(%eax),%eax
c010ece0:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ece3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ece6:	8b 40 18             	mov    0x18(%eax),%eax
c010ece9:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ecec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecef:	8b 40 10             	mov    0x10(%eax),%eax
c010ecf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ecf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecf8:	8b 00                	mov    (%eax),%eax
c010ecfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ecfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed00:	8b 40 04             	mov    0x4(%eax),%eax
c010ed03:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ed06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed09:	8b 04 85 c0 ea 14 c0 	mov    -0x3feb1540(,%eax,4),%eax
c010ed10:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ed13:	89 14 24             	mov    %edx,(%esp)
c010ed16:	ff d0                	call   *%eax
c010ed18:	89 c2                	mov    %eax,%edx
c010ed1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed1d:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ed20:	eb 46                	jmp    c010ed68 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ed22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed25:	89 04 24             	mov    %eax,(%esp)
c010ed28:	e8 bb 37 ff ff       	call   c01024e8 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ed2d:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ed32:	8d 50 48             	lea    0x48(%eax),%edx
c010ed35:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c010ed3a:	8b 40 04             	mov    0x4(%eax),%eax
c010ed3d:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ed41:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ed45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed48:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ed4c:	c7 44 24 08 44 85 11 	movl   $0xc0118544,0x8(%esp)
c010ed53:	c0 
c010ed54:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010ed5b:	00 
c010ed5c:	c7 04 24 70 85 11 c0 	movl   $0xc0118570,(%esp)
c010ed63:	e8 60 21 ff ff       	call   c0100ec8 <__panic>
            num, current->pid, current->name);
}
c010ed68:	c9                   	leave  
c010ed69:	c3                   	ret    

c010ed6a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ed6a:	55                   	push   %ebp
c010ed6b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ed6d:	8b 55 08             	mov    0x8(%ebp),%edx
c010ed70:	a1 28 30 15 c0       	mov    0xc0153028,%eax
c010ed75:	29 c2                	sub    %eax,%edx
c010ed77:	89 d0                	mov    %edx,%eax
c010ed79:	c1 f8 05             	sar    $0x5,%eax
}
c010ed7c:	5d                   	pop    %ebp
c010ed7d:	c3                   	ret    

c010ed7e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ed7e:	55                   	push   %ebp
c010ed7f:	89 e5                	mov    %esp,%ebp
c010ed81:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010ed84:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed87:	89 04 24             	mov    %eax,(%esp)
c010ed8a:	e8 db ff ff ff       	call   c010ed6a <page2ppn>
c010ed8f:	c1 e0 0c             	shl    $0xc,%eax
}
c010ed92:	c9                   	leave  
c010ed93:	c3                   	ret    

c010ed94 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ed94:	55                   	push   %ebp
c010ed95:	89 e5                	mov    %esp,%ebp
c010ed97:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010ed9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed9d:	89 04 24             	mov    %eax,(%esp)
c010eda0:	e8 d9 ff ff ff       	call   c010ed7e <page2pa>
c010eda5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eda8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edab:	c1 e8 0c             	shr    $0xc,%eax
c010edae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010edb1:	a1 80 fe 14 c0       	mov    0xc014fe80,%eax
c010edb6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010edb9:	72 23                	jb     c010edde <page2kva+0x4a>
c010edbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edbe:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010edc2:	c7 44 24 08 88 85 11 	movl   $0xc0118588,0x8(%esp)
c010edc9:	c0 
c010edca:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010edd1:	00 
c010edd2:	c7 04 24 ab 85 11 c0 	movl   $0xc01185ab,(%esp)
c010edd9:	e8 ea 20 ff ff       	call   c0100ec8 <__panic>
c010edde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ede1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010ede6:	c9                   	leave  
c010ede7:	c3                   	ret    

c010ede8 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010ede8:	55                   	push   %ebp
c010ede9:	89 e5                	mov    %esp,%ebp
c010edeb:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010edee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010edf5:	e8 28 2e ff ff       	call   c0101c22 <ide_device_valid>
c010edfa:	85 c0                	test   %eax,%eax
c010edfc:	75 1c                	jne    c010ee1a <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010edfe:	c7 44 24 08 b9 85 11 	movl   $0xc01185b9,0x8(%esp)
c010ee05:	c0 
c010ee06:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010ee0d:	00 
c010ee0e:	c7 04 24 d3 85 11 c0 	movl   $0xc01185d3,(%esp)
c010ee15:	e8 ae 20 ff ff       	call   c0100ec8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010ee1a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ee21:	e8 3b 2e ff ff       	call   c0101c61 <ide_device_size>
c010ee26:	c1 e8 03             	shr    $0x3,%eax
c010ee29:	a3 dc 30 15 c0       	mov    %eax,0xc01530dc
}
c010ee2e:	c9                   	leave  
c010ee2f:	c3                   	ret    

c010ee30 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010ee30:	55                   	push   %ebp
c010ee31:	89 e5                	mov    %esp,%ebp
c010ee33:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010ee36:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ee39:	89 04 24             	mov    %eax,(%esp)
c010ee3c:	e8 53 ff ff ff       	call   c010ed94 <page2kva>
c010ee41:	8b 55 08             	mov    0x8(%ebp),%edx
c010ee44:	c1 ea 08             	shr    $0x8,%edx
c010ee47:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ee4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee4e:	74 0b                	je     c010ee5b <swapfs_read+0x2b>
c010ee50:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010ee56:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010ee59:	72 23                	jb     c010ee7e <swapfs_read+0x4e>
c010ee5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee5e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ee62:	c7 44 24 08 e9 85 11 	movl   $0xc01185e9,0x8(%esp)
c010ee69:	c0 
c010ee6a:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010ee71:	00 
c010ee72:	c7 04 24 d3 85 11 c0 	movl   $0xc01185d3,(%esp)
c010ee79:	e8 4a 20 ff ff       	call   c0100ec8 <__panic>
c010ee7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ee81:	c1 e2 03             	shl    $0x3,%edx
c010ee84:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010ee8b:	00 
c010ee8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ee90:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ee94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ee9b:	e8 00 2e ff ff       	call   c0101ca0 <ide_read_secs>
}
c010eea0:	c9                   	leave  
c010eea1:	c3                   	ret    

c010eea2 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010eea2:	55                   	push   %ebp
c010eea3:	89 e5                	mov    %esp,%ebp
c010eea5:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010eea8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010eeab:	89 04 24             	mov    %eax,(%esp)
c010eeae:	e8 e1 fe ff ff       	call   c010ed94 <page2kva>
c010eeb3:	8b 55 08             	mov    0x8(%ebp),%edx
c010eeb6:	c1 ea 08             	shr    $0x8,%edx
c010eeb9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010eebc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eec0:	74 0b                	je     c010eecd <swapfs_write+0x2b>
c010eec2:	8b 15 dc 30 15 c0    	mov    0xc01530dc,%edx
c010eec8:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010eecb:	72 23                	jb     c010eef0 <swapfs_write+0x4e>
c010eecd:	8b 45 08             	mov    0x8(%ebp),%eax
c010eed0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010eed4:	c7 44 24 08 e9 85 11 	movl   $0xc01185e9,0x8(%esp)
c010eedb:	c0 
c010eedc:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010eee3:	00 
c010eee4:	c7 04 24 d3 85 11 c0 	movl   $0xc01185d3,(%esp)
c010eeeb:	e8 d8 1f ff ff       	call   c0100ec8 <__panic>
c010eef0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010eef3:	c1 e2 03             	shl    $0x3,%edx
c010eef6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010eefd:	00 
c010eefe:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ef02:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ef06:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ef0d:	e8 d0 2f ff ff       	call   c0101ee2 <ide_write_secs>
}
c010ef12:	c9                   	leave  
c010ef13:	c3                   	ret    

c010ef14 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010ef14:	55                   	push   %ebp
c010ef15:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010ef17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef1a:	8b 40 30             	mov    0x30(%eax),%eax
}
c010ef1d:	5d                   	pop    %ebp
c010ef1e:	c3                   	ret    

c010ef1f <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010ef1f:	55                   	push   %ebp
c010ef20:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010ef22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef25:	8b 40 34             	mov    0x34(%eax),%eax
}
c010ef28:	5d                   	pop    %ebp
c010ef29:	c3                   	ret    

c010ef2a <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010ef2a:	55                   	push   %ebp
c010ef2b:	89 e5                	mov    %esp,%ebp
c010ef2d:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010ef30:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c010ef37:	e8 85 5d ff ff       	call   c0104cc1 <kmalloc>
c010ef3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef43:	74 09                	je     c010ef4e <__alloc_inode+0x24>
        node->in_type = type;
c010ef45:	8b 55 08             	mov    0x8(%ebp),%edx
c010ef48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef4b:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010ef4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ef51:	c9                   	leave  
c010ef52:	c3                   	ret    

c010ef53 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010ef53:	55                   	push   %ebp
c010ef54:	89 e5                	mov    %esp,%ebp
c010ef56:	83 ec 18             	sub    $0x18,%esp
    node->ref_count = 0;
c010ef59:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef5c:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010ef63:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef66:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010ef6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef70:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ef73:	89 50 3c             	mov    %edx,0x3c(%eax)
c010ef76:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef79:	8b 55 10             	mov    0x10(%ebp),%edx
c010ef7c:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010ef7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef82:	89 04 24             	mov    %eax,(%esp)
c010ef85:	e8 7b 00 00 00       	call   c010f005 <inode_ref_inc>
}
c010ef8a:	c9                   	leave  
c010ef8b:	c3                   	ret    

c010ef8c <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010ef8c:	55                   	push   %ebp
c010ef8d:	89 e5                	mov    %esp,%ebp
c010ef8f:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) == 0);
c010ef92:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef95:	89 04 24             	mov    %eax,(%esp)
c010ef98:	e8 77 ff ff ff       	call   c010ef14 <inode_ref_count>
c010ef9d:	85 c0                	test   %eax,%eax
c010ef9f:	74 24                	je     c010efc5 <inode_kill+0x39>
c010efa1:	c7 44 24 0c 08 86 11 	movl   $0xc0118608,0xc(%esp)
c010efa8:	c0 
c010efa9:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010efb0:	c0 
c010efb1:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
c010efb8:	00 
c010efb9:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010efc0:	e8 03 1f ff ff       	call   c0100ec8 <__panic>
    assert(inode_open_count(node) == 0);
c010efc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010efc8:	89 04 24             	mov    %eax,(%esp)
c010efcb:	e8 4f ff ff ff       	call   c010ef1f <inode_open_count>
c010efd0:	85 c0                	test   %eax,%eax
c010efd2:	74 24                	je     c010eff8 <inode_kill+0x6c>
c010efd4:	c7 44 24 0c 4c 86 11 	movl   $0xc011864c,0xc(%esp)
c010efdb:	c0 
c010efdc:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010efe3:	c0 
c010efe4:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c010efeb:	00 
c010efec:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010eff3:	e8 d0 1e ff ff       	call   c0100ec8 <__panic>
    kfree(node);
c010eff8:	8b 45 08             	mov    0x8(%ebp),%eax
c010effb:	89 04 24             	mov    %eax,(%esp)
c010effe:	e8 d9 5c ff ff       	call   c0104cdc <kfree>
}
c010f003:	c9                   	leave  
c010f004:	c3                   	ret    

c010f005 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f005:	55                   	push   %ebp
c010f006:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f008:	8b 45 08             	mov    0x8(%ebp),%eax
c010f00b:	8b 40 30             	mov    0x30(%eax),%eax
c010f00e:	8d 50 01             	lea    0x1(%eax),%edx
c010f011:	8b 45 08             	mov    0x8(%ebp),%eax
c010f014:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f017:	8b 45 08             	mov    0x8(%ebp),%eax
c010f01a:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f01d:	5d                   	pop    %ebp
c010f01e:	c3                   	ret    

c010f01f <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f01f:	55                   	push   %ebp
c010f020:	89 e5                	mov    %esp,%ebp
c010f022:	83 ec 28             	sub    $0x28,%esp
    assert(inode_ref_count(node) > 0);
c010f025:	8b 45 08             	mov    0x8(%ebp),%eax
c010f028:	89 04 24             	mov    %eax,(%esp)
c010f02b:	e8 e4 fe ff ff       	call   c010ef14 <inode_ref_count>
c010f030:	85 c0                	test   %eax,%eax
c010f032:	7f 24                	jg     c010f058 <inode_ref_dec+0x39>
c010f034:	c7 44 24 0c 68 86 11 	movl   $0xc0118668,0xc(%esp)
c010f03b:	c0 
c010f03c:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f043:	c0 
c010f044:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
c010f04b:	00 
c010f04c:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f053:	e8 70 1e ff ff       	call   c0100ec8 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f058:	8b 45 08             	mov    0x8(%ebp),%eax
c010f05b:	8b 40 30             	mov    0x30(%eax),%eax
c010f05e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f061:	8b 45 08             	mov    0x8(%ebp),%eax
c010f064:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f067:	8b 45 08             	mov    0x8(%ebp),%eax
c010f06a:	8b 40 30             	mov    0x30(%eax),%eax
c010f06d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f070:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f074:	0f 85 8d 00 00 00    	jne    c010f107 <inode_ref_dec+0xe8>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f07a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f07d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f080:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f084:	74 17                	je     c010f09d <inode_ref_dec+0x7e>
c010f086:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f089:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f08c:	85 c0                	test   %eax,%eax
c010f08e:	74 0d                	je     c010f09d <inode_ref_dec+0x7e>
c010f090:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f093:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f096:	8b 40 24             	mov    0x24(%eax),%eax
c010f099:	85 c0                	test   %eax,%eax
c010f09b:	75 24                	jne    c010f0c1 <inode_ref_dec+0xa2>
c010f09d:	c7 44 24 0c 84 86 11 	movl   $0xc0118684,0xc(%esp)
c010f0a4:	c0 
c010f0a5:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f0ac:	c0 
c010f0ad:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
c010f0b4:	00 
c010f0b5:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f0bc:	e8 07 1e ff ff       	call   c0100ec8 <__panic>
c010f0c1:	c7 44 24 04 d4 86 11 	movl   $0xc01186d4,0x4(%esp)
c010f0c8:	c0 
c010f0c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f0cc:	89 04 24             	mov    %eax,(%esp)
c010f0cf:	e8 39 01 00 00       	call   c010f20d <inode_check>
c010f0d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f0d7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f0da:	8b 40 24             	mov    0x24(%eax),%eax
c010f0dd:	8b 55 08             	mov    0x8(%ebp),%edx
c010f0e0:	89 14 24             	mov    %edx,(%esp)
c010f0e3:	ff d0                	call   *%eax
c010f0e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f0e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f0ec:	74 19                	je     c010f107 <inode_ref_dec+0xe8>
c010f0ee:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f0f2:	74 13                	je     c010f107 <inode_ref_dec+0xe8>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f0f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f0fb:	c7 04 24 dc 86 11 c0 	movl   $0xc01186dc,(%esp)
c010f102:	e8 5e 12 ff ff       	call   c0100365 <cprintf>
        }
    }
    return ref_count;
c010f107:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f10a:	c9                   	leave  
c010f10b:	c3                   	ret    

c010f10c <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f10c:	55                   	push   %ebp
c010f10d:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f10f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f112:	8b 40 34             	mov    0x34(%eax),%eax
c010f115:	8d 50 01             	lea    0x1(%eax),%edx
c010f118:	8b 45 08             	mov    0x8(%ebp),%eax
c010f11b:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f11e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f121:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f124:	5d                   	pop    %ebp
c010f125:	c3                   	ret    

c010f126 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f126:	55                   	push   %ebp
c010f127:	89 e5                	mov    %esp,%ebp
c010f129:	83 ec 28             	sub    $0x28,%esp
    assert(inode_open_count(node) > 0);
c010f12c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f12f:	89 04 24             	mov    %eax,(%esp)
c010f132:	e8 e8 fd ff ff       	call   c010ef1f <inode_open_count>
c010f137:	85 c0                	test   %eax,%eax
c010f139:	7f 24                	jg     c010f15f <inode_open_dec+0x39>
c010f13b:	c7 44 24 0c fc 86 11 	movl   $0xc01186fc,0xc(%esp)
c010f142:	c0 
c010f143:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f14a:	c0 
c010f14b:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c010f152:	00 
c010f153:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f15a:	e8 69 1d ff ff       	call   c0100ec8 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f15f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f162:	8b 40 34             	mov    0x34(%eax),%eax
c010f165:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f168:	8b 45 08             	mov    0x8(%ebp),%eax
c010f16b:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f16e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f171:	8b 40 34             	mov    0x34(%eax),%eax
c010f174:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f177:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f17b:	0f 85 87 00 00 00    	jne    c010f208 <inode_open_dec+0xe2>
        if ((ret = vop_close(node)) != 0) {
c010f181:	8b 45 08             	mov    0x8(%ebp),%eax
c010f184:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f187:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f18b:	74 17                	je     c010f1a4 <inode_open_dec+0x7e>
c010f18d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f190:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f193:	85 c0                	test   %eax,%eax
c010f195:	74 0d                	je     c010f1a4 <inode_open_dec+0x7e>
c010f197:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f19a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f19d:	8b 40 08             	mov    0x8(%eax),%eax
c010f1a0:	85 c0                	test   %eax,%eax
c010f1a2:	75 24                	jne    c010f1c8 <inode_open_dec+0xa2>
c010f1a4:	c7 44 24 0c 18 87 11 	movl   $0xc0118718,0xc(%esp)
c010f1ab:	c0 
c010f1ac:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f1b3:	c0 
c010f1b4:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c010f1bb:	00 
c010f1bc:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f1c3:	e8 00 1d ff ff       	call   c0100ec8 <__panic>
c010f1c8:	c7 44 24 04 66 87 11 	movl   $0xc0118766,0x4(%esp)
c010f1cf:	c0 
c010f1d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1d3:	89 04 24             	mov    %eax,(%esp)
c010f1d6:	e8 32 00 00 00       	call   c010f20d <inode_check>
c010f1db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1de:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1e1:	8b 40 08             	mov    0x8(%eax),%eax
c010f1e4:	8b 55 08             	mov    0x8(%ebp),%edx
c010f1e7:	89 14 24             	mov    %edx,(%esp)
c010f1ea:	ff d0                	call   *%eax
c010f1ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f1ef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f1f3:	74 13                	je     c010f208 <inode_open_dec+0xe2>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f1f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f1fc:	c7 04 24 6c 87 11 c0 	movl   $0xc011876c,(%esp)
c010f203:	e8 5d 11 ff ff       	call   c0100365 <cprintf>
        }
    }
    return open_count;
c010f208:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f20b:	c9                   	leave  
c010f20c:	c3                   	ret    

c010f20d <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f20d:	55                   	push   %ebp
c010f20e:	89 e5                	mov    %esp,%ebp
c010f210:	83 ec 28             	sub    $0x28,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f213:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f217:	74 0a                	je     c010f223 <inode_check+0x16>
c010f219:	8b 45 08             	mov    0x8(%ebp),%eax
c010f21c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f21f:	85 c0                	test   %eax,%eax
c010f221:	75 24                	jne    c010f247 <inode_check+0x3a>
c010f223:	c7 44 24 0c 8c 87 11 	movl   $0xc011878c,0xc(%esp)
c010f22a:	c0 
c010f22b:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f232:	c0 
c010f233:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010f23a:	00 
c010f23b:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f242:	e8 81 1c ff ff       	call   c0100ec8 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f247:	8b 45 08             	mov    0x8(%ebp),%eax
c010f24a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f24d:	8b 00                	mov    (%eax),%eax
c010f24f:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f254:	74 24                	je     c010f27a <inode_check+0x6d>
c010f256:	c7 44 24 0c b4 87 11 	movl   $0xc01187b4,0xc(%esp)
c010f25d:	c0 
c010f25e:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f265:	c0 
c010f266:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c010f26d:	00 
c010f26e:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f275:	e8 4e 1c ff ff       	call   c0100ec8 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f27a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f27d:	89 04 24             	mov    %eax,(%esp)
c010f280:	e8 8f fc ff ff       	call   c010ef14 <inode_ref_count>
c010f285:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f288:	8b 45 08             	mov    0x8(%ebp),%eax
c010f28b:	89 04 24             	mov    %eax,(%esp)
c010f28e:	e8 8c fc ff ff       	call   c010ef1f <inode_open_count>
c010f293:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f296:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f299:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f29c:	7c 06                	jl     c010f2a4 <inode_check+0x97>
c010f29e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f2a2:	79 24                	jns    c010f2c8 <inode_check+0xbb>
c010f2a4:	c7 44 24 0c dc 87 11 	movl   $0xc01187dc,0xc(%esp)
c010f2ab:	c0 
c010f2ac:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f2b3:	c0 
c010f2b4:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c010f2bb:	00 
c010f2bc:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f2c3:	e8 00 1c ff ff       	call   c0100ec8 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f2c8:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f2cf:	7f 09                	jg     c010f2da <inode_check+0xcd>
c010f2d1:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f2d8:	7e 24                	jle    c010f2fe <inode_check+0xf1>
c010f2da:	c7 44 24 0c 08 88 11 	movl   $0xc0118808,0xc(%esp)
c010f2e1:	c0 
c010f2e2:	c7 44 24 08 23 86 11 	movl   $0xc0118623,0x8(%esp)
c010f2e9:	c0 
c010f2ea:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010f2f1:	00 
c010f2f2:	c7 04 24 38 86 11 c0 	movl   $0xc0118638,(%esp)
c010f2f9:	e8 ca 1b ff ff       	call   c0100ec8 <__panic>
}
c010f2fe:	c9                   	leave  
c010f2ff:	c3                   	ret    

c010f300 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f300:	55                   	push   %ebp
c010f301:	89 e5                	mov    %esp,%ebp
c010f303:	83 ec 28             	sub    $0x28,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f306:	c7 04 24 80 00 00 00 	movl   $0x80,(%esp)
c010f30d:	e8 af 59 ff ff       	call   c0104cc1 <kmalloc>
c010f312:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f319:	74 09                	je     c010f324 <__alloc_fs+0x24>
        fs->fs_type = type;
c010f31b:	8b 55 08             	mov    0x8(%ebp),%edx
c010f31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f321:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f324:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f327:	c9                   	leave  
c010f328:	c3                   	ret    

c010f329 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f329:	55                   	push   %ebp
c010f32a:	89 e5                	mov    %esp,%ebp
c010f32c:	83 ec 18             	sub    $0x18,%esp
    sem_init(&bootfs_sem, 1);
c010f32f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f336:	00 
c010f337:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f33e:	e8 ac a7 ff ff       	call   c0109aef <sem_init>
    vfs_devlist_init();
c010f343:	e8 63 01 00 00       	call   c010f4ab <vfs_devlist_init>
}
c010f348:	c9                   	leave  
c010f349:	c3                   	ret    

c010f34a <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f34a:	55                   	push   %ebp
c010f34b:	89 e5                	mov    %esp,%ebp
c010f34d:	83 ec 18             	sub    $0x18,%esp
    down(&bootfs_sem);
c010f350:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f357:	e8 21 a9 ff ff       	call   c0109c7d <down>
}
c010f35c:	c9                   	leave  
c010f35d:	c3                   	ret    

c010f35e <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f35e:	55                   	push   %ebp
c010f35f:	89 e5                	mov    %esp,%ebp
c010f361:	83 ec 18             	sub    $0x18,%esp
    up(&bootfs_sem);
c010f364:	c7 04 24 b8 1f 15 c0 	movl   $0xc0151fb8,(%esp)
c010f36b:	e8 f2 a8 ff ff       	call   c0109c62 <up>
}
c010f370:	c9                   	leave  
c010f371:	c3                   	ret    

c010f372 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f372:	55                   	push   %ebp
c010f373:	89 e5                	mov    %esp,%ebp
c010f375:	83 ec 28             	sub    $0x28,%esp
    struct inode *old;
    lock_bootfs();
c010f378:	e8 cd ff ff ff       	call   c010f34a <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f37d:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f382:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f385:	8b 45 08             	mov    0x8(%ebp),%eax
c010f388:	a3 c4 1f 15 c0       	mov    %eax,0xc0151fc4
    }
    unlock_bootfs();
c010f38d:	e8 cc ff ff ff       	call   c010f35e <unlock_bootfs>
    if (old != NULL) {
c010f392:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f396:	74 0b                	je     c010f3a3 <change_bootfs+0x31>
        vop_ref_dec(old);
c010f398:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f39b:	89 04 24             	mov    %eax,(%esp)
c010f39e:	e8 7c fc ff ff       	call   c010f01f <inode_ref_dec>
    }
}
c010f3a3:	c9                   	leave  
c010f3a4:	c3                   	ret    

c010f3a5 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f3a5:	55                   	push   %ebp
c010f3a6:	89 e5                	mov    %esp,%ebp
c010f3a8:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f3ab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f3b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f3b6:	74 62                	je     c010f41a <vfs_set_bootfs+0x75>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f3b8:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010f3bf:	00 
c010f3c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3c3:	89 04 24             	mov    %eax,(%esp)
c010f3c6:	e8 ef 5e 00 00       	call   c01152ba <strchr>
c010f3cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f3ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3d2:	74 0d                	je     c010f3e1 <vfs_set_bootfs+0x3c>
c010f3d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3d7:	83 c0 01             	add    $0x1,%eax
c010f3da:	0f b6 00             	movzbl (%eax),%eax
c010f3dd:	84 c0                	test   %al,%al
c010f3df:	74 07                	je     c010f3e8 <vfs_set_bootfs+0x43>
            return -E_INVAL;
c010f3e1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f3e6:	eb 42                	jmp    c010f42a <vfs_set_bootfs+0x85>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010f3e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3eb:	89 04 24             	mov    %eax,(%esp)
c010f3ee:	e8 99 10 00 00       	call   c011048c <vfs_chdir>
c010f3f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3fa:	74 05                	je     c010f401 <vfs_set_bootfs+0x5c>
            return ret;
c010f3fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3ff:	eb 29                	jmp    c010f42a <vfs_set_bootfs+0x85>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f401:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f404:	89 04 24             	mov    %eax,(%esp)
c010f407:	e8 54 0f 00 00       	call   c0110360 <vfs_get_curdir>
c010f40c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f40f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f413:	74 05                	je     c010f41a <vfs_set_bootfs+0x75>
            return ret;
c010f415:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f418:	eb 10                	jmp    c010f42a <vfs_set_bootfs+0x85>
        }
    }
    change_bootfs(node);
c010f41a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f41d:	89 04 24             	mov    %eax,(%esp)
c010f420:	e8 4d ff ff ff       	call   c010f372 <change_bootfs>
    return 0;
c010f425:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f42a:	c9                   	leave  
c010f42b:	c3                   	ret    

c010f42c <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010f42c:	55                   	push   %ebp
c010f42d:	89 e5                	mov    %esp,%ebp
c010f42f:	83 ec 28             	sub    $0x28,%esp
    struct inode *node = NULL;
c010f432:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010f439:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f43e:	85 c0                	test   %eax,%eax
c010f440:	74 25                	je     c010f467 <vfs_get_bootfs+0x3b>
        lock_bootfs();
c010f442:	e8 03 ff ff ff       	call   c010f34a <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010f447:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f44c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f44f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f453:	74 0d                	je     c010f462 <vfs_get_bootfs+0x36>
                vop_ref_inc(bootfs_node);
c010f455:	a1 c4 1f 15 c0       	mov    0xc0151fc4,%eax
c010f45a:	89 04 24             	mov    %eax,(%esp)
c010f45d:	e8 a3 fb ff ff       	call   c010f005 <inode_ref_inc>
            }
        }
        unlock_bootfs();
c010f462:	e8 f7 fe ff ff       	call   c010f35e <unlock_bootfs>
    }
    if (node == NULL) {
c010f467:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f46b:	75 07                	jne    c010f474 <vfs_get_bootfs+0x48>
        return -E_NOENT;
c010f46d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f472:	eb 0d                	jmp    c010f481 <vfs_get_bootfs+0x55>
    }
    *node_store = node;
c010f474:	8b 45 08             	mov    0x8(%ebp),%eax
c010f477:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f47a:	89 10                	mov    %edx,(%eax)
    return 0;
c010f47c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f481:	c9                   	leave  
c010f482:	c3                   	ret    

c010f483 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010f483:	55                   	push   %ebp
c010f484:	89 e5                	mov    %esp,%ebp
c010f486:	83 ec 18             	sub    $0x18,%esp
    down(&vdev_list_sem);
c010f489:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f490:	e8 e8 a7 ff ff       	call   c0109c7d <down>
}
c010f495:	c9                   	leave  
c010f496:	c3                   	ret    

c010f497 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010f497:	55                   	push   %ebp
c010f498:	89 e5                	mov    %esp,%ebp
c010f49a:	83 ec 18             	sub    $0x18,%esp
    up(&vdev_list_sem);
c010f49d:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f4a4:	e8 b9 a7 ff ff       	call   c0109c62 <up>
}
c010f4a9:	c9                   	leave  
c010f4aa:	c3                   	ret    

c010f4ab <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010f4ab:	55                   	push   %ebp
c010f4ac:	89 e5                	mov    %esp,%ebp
c010f4ae:	83 ec 28             	sub    $0x28,%esp
c010f4b1:	c7 45 f4 c8 1f 15 c0 	movl   $0xc0151fc8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010f4b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f4be:	89 50 04             	mov    %edx,0x4(%eax)
c010f4c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4c4:	8b 50 04             	mov    0x4(%eax),%edx
c010f4c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4ca:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010f4cc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010f4d3:	00 
c010f4d4:	c7 04 24 d0 1f 15 c0 	movl   $0xc0151fd0,(%esp)
c010f4db:	e8 0f a6 ff ff       	call   c0109aef <sem_init>
}
c010f4e0:	c9                   	leave  
c010f4e1:	c3                   	ret    

c010f4e2 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010f4e2:	55                   	push   %ebp
c010f4e3:	89 e5                	mov    %esp,%ebp
c010f4e5:	83 ec 38             	sub    $0x38,%esp
c010f4e8:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f4ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f4f2:	8b 40 04             	mov    0x4(%eax),%eax
c010f4f5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010f4f8:	0f 94 c0             	sete   %al
c010f4fb:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f4fe:	85 c0                	test   %eax,%eax
c010f500:	75 57                	jne    c010f559 <vfs_cleanup+0x77>
        lock_vdev_list();
c010f502:	e8 7c ff ff ff       	call   c010f483 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f507:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f50e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f511:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010f514:	eb 27                	jmp    c010f53d <vfs_cleanup+0x5b>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f516:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f519:	83 e8 10             	sub    $0x10,%eax
c010f51c:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->fs != NULL) {
c010f51f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f522:	8b 40 08             	mov    0x8(%eax),%eax
c010f525:	85 c0                	test   %eax,%eax
c010f527:	74 14                	je     c010f53d <vfs_cleanup+0x5b>
                    fsop_cleanup(vdev->fs);
c010f529:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f52c:	8b 40 08             	mov    0x8(%eax),%eax
c010f52f:	8b 40 7c             	mov    0x7c(%eax),%eax
c010f532:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f535:	8b 52 08             	mov    0x8(%edx),%edx
c010f538:	89 14 24             	mov    %edx,(%esp)
c010f53b:	ff d0                	call   *%eax
c010f53d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f540:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f543:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f546:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f549:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f54c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f54f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f552:	75 c2                	jne    c010f516 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010f554:	e8 3e ff ff ff       	call   c010f497 <unlock_vdev_list>
    }
}
c010f559:	c9                   	leave  
c010f55a:	c3                   	ret    

c010f55b <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010f55b:	55                   	push   %ebp
c010f55c:	89 e5                	mov    %esp,%ebp
c010f55e:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010f561:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f565:	75 24                	jne    c010f58b <vfs_get_root+0x30>
c010f567:	c7 44 24 0c 44 88 11 	movl   $0xc0118844,0xc(%esp)
c010f56e:	c0 
c010f56f:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010f576:	c0 
c010f577:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c010f57e:	00 
c010f57f:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010f586:	e8 3d 19 ff ff       	call   c0100ec8 <__panic>
    int ret = -E_NO_DEV;
c010f58b:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010f592:	c7 45 e0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010f599:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f59c:	8b 40 04             	mov    0x4(%eax),%eax
c010f59f:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010f5a2:	0f 94 c0             	sete   %al
c010f5a5:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010f5a8:	85 c0                	test   %eax,%eax
c010f5aa:	0f 85 c3 00 00 00    	jne    c010f673 <vfs_get_root+0x118>
        lock_vdev_list();
c010f5b0:	e8 ce fe ff ff       	call   c010f483 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010f5b5:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f5bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f5bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010f5c2:	e9 8c 00 00 00       	jmp    c010f653 <vfs_get_root+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f5c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f5ca:	83 e8 10             	sub    $0x10,%eax
c010f5cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010f5d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5d3:	8b 00                	mov    (%eax),%eax
c010f5d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f5d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f5dc:	89 04 24             	mov    %eax,(%esp)
c010f5df:	e8 37 5c 00 00       	call   c011521b <strcmp>
c010f5e4:	85 c0                	test   %eax,%eax
c010f5e6:	75 6b                	jne    c010f653 <vfs_get_root+0xf8>
                    struct inode *found = NULL;
c010f5e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010f5ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5f2:	8b 40 08             	mov    0x8(%eax),%eax
c010f5f5:	85 c0                	test   %eax,%eax
c010f5f7:	74 19                	je     c010f612 <vfs_get_root+0xb7>
                        found = fsop_get_root(vdev->fs);
c010f5f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f5fc:	8b 40 08             	mov    0x8(%eax),%eax
c010f5ff:	8b 40 74             	mov    0x74(%eax),%eax
c010f602:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f605:	8b 52 08             	mov    0x8(%edx),%edx
c010f608:	89 14 24             	mov    %edx,(%esp)
c010f60b:	ff d0                	call   *%eax
c010f60d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f610:	eb 21                	jmp    c010f633 <vfs_get_root+0xd8>
                    }
                    else if (!vdev->mountable) {
c010f612:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f615:	8b 40 0c             	mov    0xc(%eax),%eax
c010f618:	85 c0                	test   %eax,%eax
c010f61a:	75 17                	jne    c010f633 <vfs_get_root+0xd8>
                        vop_ref_inc(vdev->devnode);
c010f61c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f61f:	8b 40 04             	mov    0x4(%eax),%eax
c010f622:	89 04 24             	mov    %eax,(%esp)
c010f625:	e8 db f9 ff ff       	call   c010f005 <inode_ref_inc>
                        found = vdev->devnode;
c010f62a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f62d:	8b 40 04             	mov    0x4(%eax),%eax
c010f630:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010f633:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f637:	74 11                	je     c010f64a <vfs_get_root+0xef>
                        ret = 0, *node_store = found;
c010f639:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010f640:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f643:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f646:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010f648:	eb 24                	jmp    c010f66e <vfs_get_root+0x113>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010f64a:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010f651:	eb 1b                	jmp    c010f66e <vfs_get_root+0x113>
c010f653:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f656:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f659:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f65c:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010f65f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f662:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f665:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010f668:	0f 85 59 ff ff ff    	jne    c010f5c7 <vfs_get_root+0x6c>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010f66e:	e8 24 fe ff ff       	call   c010f497 <unlock_vdev_list>
    }
    return ret;
c010f673:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f676:	c9                   	leave  
c010f677:	c3                   	ret    

c010f678 <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010f678:	55                   	push   %ebp
c010f679:	89 e5                	mov    %esp,%ebp
c010f67b:	83 ec 28             	sub    $0x28,%esp
    assert(fs != NULL);
c010f67e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f682:	75 24                	jne    c010f6a8 <vfs_get_devname+0x30>
c010f684:	c7 44 24 0c 7e 88 11 	movl   $0xc011887e,0xc(%esp)
c010f68b:	c0 
c010f68c:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010f693:	c0 
c010f694:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010f69b:	00 
c010f69c:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010f6a3:	e8 20 18 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f6a8:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f6af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f6b5:	eb 1b                	jmp    c010f6d2 <vfs_get_devname+0x5a>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f6b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6ba:	83 e8 10             	sub    $0x10,%eax
c010f6bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010f6c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6c3:	8b 40 08             	mov    0x8(%eax),%eax
c010f6c6:	3b 45 08             	cmp    0x8(%ebp),%eax
c010f6c9:	75 07                	jne    c010f6d2 <vfs_get_devname+0x5a>
            return vdev->devname;
c010f6cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6ce:	8b 00                	mov    (%eax),%eax
c010f6d0:	eb 1c                	jmp    c010f6ee <vfs_get_devname+0x76>
c010f6d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f6d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6db:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f6de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f6e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f6e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f6e7:	75 ce                	jne    c010f6b7 <vfs_get_devname+0x3f>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010f6e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f6ee:	c9                   	leave  
c010f6ef:	c3                   	ret    

c010f6f0 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010f6f0:	55                   	push   %ebp
c010f6f1:	89 e5                	mov    %esp,%ebp
c010f6f3:	83 ec 28             	sub    $0x28,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010f6f6:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f6fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f700:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f703:	eb 28                	jmp    c010f72d <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f705:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f708:	83 e8 10             	sub    $0x10,%eax
c010f70b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010f70e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f711:	8b 00                	mov    (%eax),%eax
c010f713:	8b 55 08             	mov    0x8(%ebp),%edx
c010f716:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f71a:	89 04 24             	mov    %eax,(%esp)
c010f71d:	e8 f9 5a 00 00       	call   c011521b <strcmp>
c010f722:	85 c0                	test   %eax,%eax
c010f724:	75 07                	jne    c010f72d <check_devname_conflict+0x3d>
            return 0;
c010f726:	b8 00 00 00 00       	mov    $0x0,%eax
c010f72b:	eb 1c                	jmp    c010f749 <check_devname_conflict+0x59>
c010f72d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f730:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f733:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f736:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f739:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f73c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f73f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f742:	75 c1                	jne    c010f705 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010f744:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010f749:	c9                   	leave  
c010f74a:	c3                   	ret    

c010f74b <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010f74b:	55                   	push   %ebp
c010f74c:	89 e5                	mov    %esp,%ebp
c010f74e:	83 ec 48             	sub    $0x48,%esp
    assert(devname != NULL);
c010f751:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f755:	75 24                	jne    c010f77b <vfs_do_add+0x30>
c010f757:	c7 44 24 0c 44 88 11 	movl   $0xc0118844,0xc(%esp)
c010f75e:	c0 
c010f75f:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010f766:	c0 
c010f767:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
c010f76e:	00 
c010f76f:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010f776:	e8 4d 17 ff ff       	call   c0100ec8 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010f77b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f77f:	75 06                	jne    c010f787 <vfs_do_add+0x3c>
c010f781:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f785:	74 37                	je     c010f7be <vfs_do_add+0x73>
c010f787:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f78b:	74 0d                	je     c010f79a <vfs_do_add+0x4f>
c010f78d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f790:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f793:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f798:	74 24                	je     c010f7be <vfs_do_add+0x73>
c010f79a:	c7 44 24 0c 8c 88 11 	movl   $0xc011888c,0xc(%esp)
c010f7a1:	c0 
c010f7a2:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010f7a9:	c0 
c010f7aa:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
c010f7b1:	00 
c010f7b2:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010f7b9:	e8 0a 17 ff ff       	call   c0100ec8 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010f7be:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7c1:	89 04 24             	mov    %eax,(%esp)
c010f7c4:	e8 5a 59 00 00       	call   c0115123 <strlen>
c010f7c9:	83 f8 1f             	cmp    $0x1f,%eax
c010f7cc:	76 0a                	jbe    c010f7d8 <vfs_do_add+0x8d>
        return -E_TOO_BIG;
c010f7ce:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010f7d3:	e9 00 01 00 00       	jmp    c010f8d8 <vfs_do_add+0x18d>
    }

    int ret = -E_NO_MEM;
c010f7d8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010f7df:	8b 45 08             	mov    0x8(%ebp),%eax
c010f7e2:	89 04 24             	mov    %eax,(%esp)
c010f7e5:	e8 1c 0c ff ff       	call   c0100406 <strdup>
c010f7ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f7ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f7f1:	75 08                	jne    c010f7fb <vfs_do_add+0xb0>
        return ret;
c010f7f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f7f6:	e9 dd 00 00 00       	jmp    c010f8d8 <vfs_do_add+0x18d>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010f7fb:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010f802:	e8 ba 54 ff ff       	call   c0104cc1 <kmalloc>
c010f807:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f80a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f80e:	75 05                	jne    c010f815 <vfs_do_add+0xca>
        goto failed_cleanup_name;
c010f810:	e9 b5 00 00 00       	jmp    c010f8ca <vfs_do_add+0x17f>
    }

    ret = -E_EXISTS;
c010f815:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010f81c:	e8 62 fc ff ff       	call   c010f483 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010f821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f824:	89 04 24             	mov    %eax,(%esp)
c010f827:	e8 c4 fe ff ff       	call   c010f6f0 <check_devname_conflict>
c010f82c:	85 c0                	test   %eax,%eax
c010f82e:	75 16                	jne    c010f846 <vfs_do_add+0xfb>
        unlock_vdev_list();
c010f830:	e8 62 fc ff ff       	call   c010f497 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010f835:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010f836:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f839:	89 04 24             	mov    %eax,(%esp)
c010f83c:	e8 9b 54 ff ff       	call   c0104cdc <kfree>
c010f841:	e9 84 00 00 00       	jmp    c010f8ca <vfs_do_add+0x17f>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010f846:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f849:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f84c:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010f84e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f851:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f854:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010f857:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f85a:	8b 55 14             	mov    0x14(%ebp),%edx
c010f85d:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010f860:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f863:	8b 55 10             	mov    0x10(%ebp),%edx
c010f866:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010f869:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f86c:	83 c0 10             	add    $0x10,%eax
c010f86f:	c7 45 e8 c8 1f 15 c0 	movl   $0xc0151fc8,-0x18(%ebp)
c010f876:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f879:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f87c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f87f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f882:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f885:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f888:	8b 40 04             	mov    0x4(%eax),%eax
c010f88b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f88e:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010f891:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f894:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010f897:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f89a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f89d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f8a0:	89 10                	mov    %edx,(%eax)
c010f8a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f8a5:	8b 10                	mov    (%eax),%edx
c010f8a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f8aa:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f8ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f8b3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f8b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f8b9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010f8bc:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010f8be:	e8 d4 fb ff ff       	call   c010f497 <unlock_vdev_list>
    return 0;
c010f8c3:	b8 00 00 00 00       	mov    $0x0,%eax
c010f8c8:	eb 0e                	jmp    c010f8d8 <vfs_do_add+0x18d>

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010f8ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f8cd:	89 04 24             	mov    %eax,(%esp)
c010f8d0:	e8 07 54 ff ff       	call   c0104cdc <kfree>
    return ret;
c010f8d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f8d8:	c9                   	leave  
c010f8d9:	c3                   	ret    

c010f8da <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010f8da:	55                   	push   %ebp
c010f8db:	89 e5                	mov    %esp,%ebp
c010f8dd:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010f8e0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010f8e7:	00 
c010f8e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8eb:	89 44 24 08          	mov    %eax,0x8(%esp)
c010f8ef:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010f8f6:	00 
c010f8f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f8fa:	89 04 24             	mov    %eax,(%esp)
c010f8fd:	e8 49 fe ff ff       	call   c010f74b <vfs_do_add>
}
c010f902:	c9                   	leave  
c010f903:	c3                   	ret    

c010f904 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010f904:	55                   	push   %ebp
c010f905:	89 e5                	mov    %esp,%ebp
c010f907:	83 ec 18             	sub    $0x18,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010f90a:	8b 45 10             	mov    0x10(%ebp),%eax
c010f90d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010f911:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010f918:	00 
c010f919:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f91c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f920:	8b 45 08             	mov    0x8(%ebp),%eax
c010f923:	89 04 24             	mov    %eax,(%esp)
c010f926:	e8 20 fe ff ff       	call   c010f74b <vfs_do_add>
}
c010f92b:	c9                   	leave  
c010f92c:	c3                   	ret    

c010f92d <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010f92d:	55                   	push   %ebp
c010f92e:	89 e5                	mov    %esp,%ebp
c010f930:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010f933:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f937:	75 24                	jne    c010f95d <find_mount+0x30>
c010f939:	c7 44 24 0c 44 88 11 	movl   $0xc0118844,0xc(%esp)
c010f940:	c0 
c010f941:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010f948:	c0 
c010f949:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010f950:	00 
c010f951:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010f958:	e8 6b 15 ff ff       	call   c0100ec8 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010f95d:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010f964:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f967:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f96a:	eb 3a                	jmp    c010f9a6 <find_mount+0x79>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010f96c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f96f:	83 e8 10             	sub    $0x10,%eax
c010f972:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010f975:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f978:	8b 40 0c             	mov    0xc(%eax),%eax
c010f97b:	85 c0                	test   %eax,%eax
c010f97d:	74 27                	je     c010f9a6 <find_mount+0x79>
c010f97f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f982:	8b 00                	mov    (%eax),%eax
c010f984:	8b 55 08             	mov    0x8(%ebp),%edx
c010f987:	89 54 24 04          	mov    %edx,0x4(%esp)
c010f98b:	89 04 24             	mov    %eax,(%esp)
c010f98e:	e8 88 58 00 00       	call   c011521b <strcmp>
c010f993:	85 c0                	test   %eax,%eax
c010f995:	75 0f                	jne    c010f9a6 <find_mount+0x79>
            *vdev_store = vdev;
c010f997:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f99a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f99d:	89 10                	mov    %edx,(%eax)
            return 0;
c010f99f:	b8 00 00 00 00       	mov    $0x0,%eax
c010f9a4:	eb 1c                	jmp    c010f9c2 <find_mount+0x95>
c010f9a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f9ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9af:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010f9b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f9bb:	75 af                	jne    c010f96c <find_mount+0x3f>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010f9bd:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010f9c2:	c9                   	leave  
c010f9c3:	c3                   	ret    

c010f9c4 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010f9c4:	55                   	push   %ebp
c010f9c5:	89 e5                	mov    %esp,%ebp
c010f9c7:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010f9ca:	e8 b4 fa ff ff       	call   c010f483 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010f9cf:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f9d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010f9d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9d9:	89 04 24             	mov    %eax,(%esp)
c010f9dc:	e8 4c ff ff ff       	call   c010f92d <find_mount>
c010f9e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9e8:	74 05                	je     c010f9ef <vfs_mount+0x2b>
        goto out;
c010f9ea:	e9 f4 00 00 00       	jmp    c010fae3 <vfs_mount+0x11f>
    }
    if (vdev->fs != NULL) {
c010f9ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9f2:	8b 40 08             	mov    0x8(%eax),%eax
c010f9f5:	85 c0                	test   %eax,%eax
c010f9f7:	74 0c                	je     c010fa05 <vfs_mount+0x41>
        ret = -E_BUSY;
c010f9f9:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010fa00:	e9 de 00 00 00       	jmp    c010fae3 <vfs_mount+0x11f>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fa05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa08:	8b 00                	mov    (%eax),%eax
c010fa0a:	85 c0                	test   %eax,%eax
c010fa0c:	74 0a                	je     c010fa18 <vfs_mount+0x54>
c010fa0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa11:	8b 40 0c             	mov    0xc(%eax),%eax
c010fa14:	85 c0                	test   %eax,%eax
c010fa16:	75 24                	jne    c010fa3c <vfs_mount+0x78>
c010fa18:	c7 44 24 0c e8 88 11 	movl   $0xc01188e8,0xc(%esp)
c010fa1f:	c0 
c010fa20:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010fa27:	c0 
c010fa28:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c010fa2f:	00 
c010fa30:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010fa37:	e8 8c 14 ff ff       	call   c0100ec8 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010fa3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa3f:	8b 40 04             	mov    0x4(%eax),%eax
c010fa42:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa45:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa49:	74 0d                	je     c010fa58 <vfs_mount+0x94>
c010fa4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa4e:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fa51:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fa56:	74 24                	je     c010fa7c <vfs_mount+0xb8>
c010fa58:	c7 44 24 0c 14 89 11 	movl   $0xc0118914,0xc(%esp)
c010fa5f:	c0 
c010fa60:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010fa67:	c0 
c010fa68:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010fa6f:	00 
c010fa70:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010fa77:	e8 4c 14 ff ff       	call   c0100ec8 <__panic>
c010fa7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010fa82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa85:	83 c0 08             	add    $0x8,%eax
c010fa88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fa8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa8f:	89 04 24             	mov    %eax,(%esp)
c010fa92:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa95:	ff d0                	call   *%eax
c010fa97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa9e:	75 43                	jne    c010fae3 <vfs_mount+0x11f>
        assert(vdev->fs != NULL);
c010faa0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010faa3:	8b 40 08             	mov    0x8(%eax),%eax
c010faa6:	85 c0                	test   %eax,%eax
c010faa8:	75 24                	jne    c010face <vfs_mount+0x10a>
c010faaa:	c7 44 24 0c 47 89 11 	movl   $0xc0118947,0xc(%esp)
c010fab1:	c0 
c010fab2:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010fab9:	c0 
c010faba:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
c010fac1:	00 
c010fac2:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010fac9:	e8 fa 13 ff ff       	call   c0100ec8 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010face:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fad1:	8b 00                	mov    (%eax),%eax
c010fad3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fad7:	c7 04 24 58 89 11 c0 	movl   $0xc0118958,(%esp)
c010fade:	e8 82 08 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fae3:	e8 af f9 ff ff       	call   c010f497 <unlock_vdev_list>
    return ret;
c010fae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010faeb:	c9                   	leave  
c010faec:	c3                   	ret    

c010faed <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010faed:	55                   	push   %ebp
c010faee:	89 e5                	mov    %esp,%ebp
c010faf0:	83 ec 28             	sub    $0x28,%esp
    int ret;
    lock_vdev_list();
c010faf3:	e8 8b f9 ff ff       	call   c010f483 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010faf8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010fafb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010faff:	8b 45 08             	mov    0x8(%ebp),%eax
c010fb02:	89 04 24             	mov    %eax,(%esp)
c010fb05:	e8 23 fe ff ff       	call   c010f92d <find_mount>
c010fb0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb11:	74 05                	je     c010fb18 <vfs_unmount+0x2b>
        goto out;
c010fb13:	e9 a8 00 00 00       	jmp    c010fbc0 <vfs_unmount+0xd3>
    }
    if (vdev->fs == NULL) {
c010fb18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb1b:	8b 40 08             	mov    0x8(%eax),%eax
c010fb1e:	85 c0                	test   %eax,%eax
c010fb20:	75 0c                	jne    c010fb2e <vfs_unmount+0x41>
        ret = -E_INVAL;
c010fb22:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010fb29:	e9 92 00 00 00       	jmp    c010fbc0 <vfs_unmount+0xd3>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010fb2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb31:	8b 00                	mov    (%eax),%eax
c010fb33:	85 c0                	test   %eax,%eax
c010fb35:	74 0a                	je     c010fb41 <vfs_unmount+0x54>
c010fb37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb3a:	8b 40 0c             	mov    0xc(%eax),%eax
c010fb3d:	85 c0                	test   %eax,%eax
c010fb3f:	75 24                	jne    c010fb65 <vfs_unmount+0x78>
c010fb41:	c7 44 24 0c e8 88 11 	movl   $0xc01188e8,0xc(%esp)
c010fb48:	c0 
c010fb49:	c7 44 24 08 54 88 11 	movl   $0xc0118854,0x8(%esp)
c010fb50:	c0 
c010fb51:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010fb58:	00 
c010fb59:	c7 04 24 69 88 11 c0 	movl   $0xc0118869,(%esp)
c010fb60:	e8 63 13 ff ff       	call   c0100ec8 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fb65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb68:	8b 40 08             	mov    0x8(%eax),%eax
c010fb6b:	8b 40 70             	mov    0x70(%eax),%eax
c010fb6e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb71:	8b 52 08             	mov    0x8(%edx),%edx
c010fb74:	89 14 24             	mov    %edx,(%esp)
c010fb77:	ff d0                	call   *%eax
c010fb79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb80:	74 02                	je     c010fb84 <vfs_unmount+0x97>
        goto out;
c010fb82:	eb 3c                	jmp    c010fbc0 <vfs_unmount+0xd3>
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010fb84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb87:	8b 40 08             	mov    0x8(%eax),%eax
c010fb8a:	8b 40 78             	mov    0x78(%eax),%eax
c010fb8d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fb90:	8b 52 08             	mov    0x8(%edx),%edx
c010fb93:	89 14 24             	mov    %edx,(%esp)
c010fb96:	ff d0                	call   *%eax
c010fb98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fb9b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fb9f:	75 1f                	jne    c010fbc0 <vfs_unmount+0xd3>
        vdev->fs = NULL;
c010fba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fba4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010fbab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbae:	8b 00                	mov    (%eax),%eax
c010fbb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fbb4:	c7 04 24 68 89 11 c0 	movl   $0xc0118968,(%esp)
c010fbbb:	e8 a5 07 ff ff       	call   c0100365 <cprintf>
    }

out:
    unlock_vdev_list();
c010fbc0:	e8 d2 f8 ff ff       	call   c010f497 <unlock_vdev_list>
    return ret;
c010fbc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fbc8:	c9                   	leave  
c010fbc9:	c3                   	ret    

c010fbca <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010fbca:	55                   	push   %ebp
c010fbcb:	89 e5                	mov    %esp,%ebp
c010fbcd:	83 ec 38             	sub    $0x38,%esp
c010fbd0:	c7 45 e4 c8 1f 15 c0 	movl   $0xc0151fc8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010fbd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fbda:	8b 40 04             	mov    0x4(%eax),%eax
c010fbdd:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010fbe0:	0f 94 c0             	sete   %al
c010fbe3:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010fbe6:	85 c0                	test   %eax,%eax
c010fbe8:	0f 85 f1 00 00 00    	jne    c010fcdf <vfs_unmount_all+0x115>
        lock_vdev_list();
c010fbee:	e8 90 f8 ff ff       	call   c010f483 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010fbf3:	c7 45 f0 c8 1f 15 c0 	movl   $0xc0151fc8,-0x10(%ebp)
c010fbfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fbfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010fc00:	e9 ba 00 00 00       	jmp    c010fcbf <vfs_unmount_all+0xf5>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010fc05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc08:	83 e8 10             	sub    $0x10,%eax
c010fc0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010fc0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc11:	8b 40 0c             	mov    0xc(%eax),%eax
c010fc14:	85 c0                	test   %eax,%eax
c010fc16:	0f 84 a3 00 00 00    	je     c010fcbf <vfs_unmount_all+0xf5>
c010fc1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc1f:	8b 40 08             	mov    0x8(%eax),%eax
c010fc22:	85 c0                	test   %eax,%eax
c010fc24:	0f 84 95 00 00 00    	je     c010fcbf <vfs_unmount_all+0xf5>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010fc2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc2d:	8b 40 08             	mov    0x8(%eax),%eax
c010fc30:	8b 40 70             	mov    0x70(%eax),%eax
c010fc33:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc36:	8b 52 08             	mov    0x8(%edx),%edx
c010fc39:	89 14 24             	mov    %edx,(%esp)
c010fc3c:	ff d0                	call   *%eax
c010fc3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fc41:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc45:	74 1e                	je     c010fc65 <vfs_unmount_all+0x9b>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010fc47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc4a:	8b 00                	mov    (%eax),%eax
c010fc4c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fc4f:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fc53:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc57:	c7 04 24 7c 89 11 c0 	movl   $0xc011897c,(%esp)
c010fc5e:	e8 02 07 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fc63:	eb 5a                	jmp    c010fcbf <vfs_unmount_all+0xf5>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010fc65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc68:	8b 40 08             	mov    0x8(%eax),%eax
c010fc6b:	8b 40 78             	mov    0x78(%eax),%eax
c010fc6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fc71:	8b 52 08             	mov    0x8(%edx),%edx
c010fc74:	89 14 24             	mov    %edx,(%esp)
c010fc77:	ff d0                	call   *%eax
c010fc79:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fc7c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fc80:	74 1e                	je     c010fca0 <vfs_unmount_all+0xd6>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010fc82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc85:	8b 00                	mov    (%eax),%eax
c010fc87:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fc8a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010fc8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fc92:	c7 04 24 a4 89 11 c0 	movl   $0xc01189a4,(%esp)
c010fc99:	e8 c7 06 ff ff       	call   c0100365 <cprintf>
                        continue ;
c010fc9e:	eb 1f                	jmp    c010fcbf <vfs_unmount_all+0xf5>
                    }
                    vdev->fs = NULL;
c010fca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fca3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010fcaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fcad:	8b 00                	mov    (%eax),%eax
c010fcaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fcb3:	c7 04 24 68 89 11 c0 	movl   $0xc0118968,(%esp)
c010fcba:	e8 a6 06 ff ff       	call   c0100365 <cprintf>
c010fcbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fcc2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010fcc5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fcc8:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010fccb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fcce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fcd1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010fcd4:	0f 85 2b ff ff ff    	jne    c010fc05 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010fcda:	e8 b8 f7 ff ff       	call   c010f497 <unlock_vdev_list>
    }
    return 0;
c010fcdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fce4:	c9                   	leave  
c010fce5:	c3                   	ret    

c010fce6 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010fce6:	55                   	push   %ebp
c010fce7:	89 e5                	mov    %esp,%ebp
c010fce9:	53                   	push   %ebx
c010fcea:	83 ec 44             	sub    $0x44,%esp
    bool can_write = 0;
c010fced:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010fcf4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcf7:	83 e0 03             	and    $0x3,%eax
c010fcfa:	85 c0                	test   %eax,%eax
c010fcfc:	74 18                	je     c010fd16 <vfs_open+0x30>
c010fcfe:	83 f8 02             	cmp    $0x2,%eax
c010fd01:	77 09                	ja     c010fd0c <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010fd03:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010fd0a:	eb 0b                	jmp    c010fd17 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010fd0c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fd11:	e9 ba 02 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010fd16:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010fd17:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd1a:	83 e0 10             	and    $0x10,%eax
c010fd1d:	85 c0                	test   %eax,%eax
c010fd1f:	74 10                	je     c010fd31 <vfs_open+0x4b>
        if (!can_write) {
c010fd21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd25:	75 0a                	jne    c010fd31 <vfs_open+0x4b>
            return -E_INVAL;
c010fd27:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fd2c:	e9 9f 02 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010fd31:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd34:	83 e0 08             	and    $0x8,%eax
c010fd37:	85 c0                	test   %eax,%eax
c010fd39:	0f 95 c0             	setne  %al
c010fd3c:	0f b6 c0             	movzbl %al,%eax
c010fd3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010fd42:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd45:	83 e0 04             	and    $0x4,%eax
c010fd48:	85 c0                	test   %eax,%eax
c010fd4a:	0f 95 c0             	setne  %al
c010fd4d:	0f b6 c0             	movzbl %al,%eax
c010fd50:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010fd53:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fd56:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd5d:	89 04 24             	mov    %eax,(%esp)
c010fd60:	e8 7a 04 00 00       	call   c01101df <vfs_lookup>
c010fd65:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010fd68:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fd6c:	0f 84 cc 00 00 00    	je     c010fe3e <vfs_open+0x158>
        if (ret == -16 && (create)) {
c010fd72:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010fd76:	0f 85 ba 00 00 00    	jne    c010fe36 <vfs_open+0x150>
c010fd7c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd80:	0f 84 b0 00 00 00    	je     c010fe36 <vfs_open+0x150>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010fd86:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010fd89:	89 44 24 08          	mov    %eax,0x8(%esp)
c010fd8d:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010fd90:	89 44 24 04          	mov    %eax,0x4(%esp)
c010fd94:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd97:	89 04 24             	mov    %eax,(%esp)
c010fd9a:	e8 20 05 00 00       	call   c01102bf <vfs_lookup_parent>
c010fd9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fda2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fda6:	74 08                	je     c010fdb0 <vfs_open+0xca>
                return ret;
c010fda8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fdab:	e9 20 02 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
            }
            ret = vop_create(dir, name, excl, &node);
c010fdb0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010fdb3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010fdb6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010fdba:	74 17                	je     c010fdd3 <vfs_open+0xed>
c010fdbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fdbf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fdc2:	85 c0                	test   %eax,%eax
c010fdc4:	74 0d                	je     c010fdd3 <vfs_open+0xed>
c010fdc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fdc9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fdcc:	8b 40 34             	mov    0x34(%eax),%eax
c010fdcf:	85 c0                	test   %eax,%eax
c010fdd1:	75 24                	jne    c010fdf7 <vfs_open+0x111>
c010fdd3:	c7 44 24 0c d0 89 11 	movl   $0xc01189d0,0xc(%esp)
c010fdda:	c0 
c010fddb:	c7 44 24 08 1f 8a 11 	movl   $0xc0118a1f,0x8(%esp)
c010fde2:	c0 
c010fde3:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010fdea:	00 
c010fdeb:	c7 04 24 34 8a 11 c0 	movl   $0xc0118a34,(%esp)
c010fdf2:	e8 d1 10 ff ff       	call   c0100ec8 <__panic>
c010fdf7:	c7 44 24 04 4a 8a 11 	movl   $0xc0118a4a,0x4(%esp)
c010fdfe:	c0 
c010fdff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe02:	89 04 24             	mov    %eax,(%esp)
c010fe05:	e8 03 f4 ff ff       	call   c010f20d <inode_check>
c010fe0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010fe0d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe10:	8b 40 34             	mov    0x34(%eax),%eax
c010fe13:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010fe16:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010fe19:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010fe1c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010fe20:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010fe23:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010fe27:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010fe2b:	89 14 24             	mov    %edx,(%esp)
c010fe2e:	ff d0                	call   *%eax
c010fe30:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010fe33:	90                   	nop
c010fe34:	eb 1e                	jmp    c010fe54 <vfs_open+0x16e>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010fe36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fe39:	e9 92 01 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
    } else if (excl && create) {
c010fe3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fe42:	74 10                	je     c010fe54 <vfs_open+0x16e>
c010fe44:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe48:	74 0a                	je     c010fe54 <vfs_open+0x16e>
        return -E_EXISTS;
c010fe4a:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010fe4f:	e9 7c 01 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
    }
    assert(node != NULL);
c010fe54:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe57:	85 c0                	test   %eax,%eax
c010fe59:	75 24                	jne    c010fe7f <vfs_open+0x199>
c010fe5b:	c7 44 24 0c 51 8a 11 	movl   $0xc0118a51,0xc(%esp)
c010fe62:	c0 
c010fe63:	c7 44 24 08 1f 8a 11 	movl   $0xc0118a1f,0x8(%esp)
c010fe6a:	c0 
c010fe6b:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
c010fe72:	00 
c010fe73:	c7 04 24 34 8a 11 c0 	movl   $0xc0118a34,(%esp)
c010fe7a:	e8 49 10 ff ff       	call   c0100ec8 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010fe7f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fe82:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010fe85:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010fe89:	74 17                	je     c010fea2 <vfs_open+0x1bc>
c010fe8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe8e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe91:	85 c0                	test   %eax,%eax
c010fe93:	74 0d                	je     c010fea2 <vfs_open+0x1bc>
c010fe95:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fe98:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fe9b:	8b 40 04             	mov    0x4(%eax),%eax
c010fe9e:	85 c0                	test   %eax,%eax
c010fea0:	75 24                	jne    c010fec6 <vfs_open+0x1e0>
c010fea2:	c7 44 24 0c 60 8a 11 	movl   $0xc0118a60,0xc(%esp)
c010fea9:	c0 
c010feaa:	c7 44 24 08 1f 8a 11 	movl   $0xc0118a1f,0x8(%esp)
c010feb1:	c0 
c010feb2:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c010feb9:	00 
c010feba:	c7 04 24 34 8a 11 c0 	movl   $0xc0118a34,(%esp)
c010fec1:	e8 02 10 ff ff       	call   c0100ec8 <__panic>
c010fec6:	c7 44 24 04 ad 8a 11 	movl   $0xc0118aad,0x4(%esp)
c010fecd:	c0 
c010fece:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fed1:	89 04 24             	mov    %eax,(%esp)
c010fed4:	e8 34 f3 ff ff       	call   c010f20d <inode_check>
c010fed9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010fedc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fedf:	8b 40 04             	mov    0x4(%eax),%eax
c010fee2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010fee5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c010fee8:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010feec:	89 14 24             	mov    %edx,(%esp)
c010feef:	ff d0                	call   *%eax
c010fef1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fef4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fef8:	74 13                	je     c010ff0d <vfs_open+0x227>
        vop_ref_dec(node);
c010fefa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010fefd:	89 04 24             	mov    %eax,(%esp)
c010ff00:	e8 1a f1 ff ff       	call   c010f01f <inode_ref_dec>
        return ret;
c010ff05:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ff08:	e9 c3 00 00 00       	jmp    c010ffd0 <vfs_open+0x2ea>
    }

    vop_open_inc(node);
c010ff0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff10:	89 04 24             	mov    %eax,(%esp)
c010ff13:	e8 f4 f1 ff ff       	call   c010f10c <inode_open_inc>
    if (open_flags & O_TRUNC || create) {
c010ff18:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff1b:	83 e0 10             	and    $0x10,%eax
c010ff1e:	85 c0                	test   %eax,%eax
c010ff20:	75 0a                	jne    c010ff2c <vfs_open+0x246>
c010ff22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff26:	0f 84 97 00 00 00    	je     c010ffc3 <vfs_open+0x2dd>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010ff2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ff2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ff32:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010ff36:	74 17                	je     c010ff4f <vfs_open+0x269>
c010ff38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff3b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff3e:	85 c0                	test   %eax,%eax
c010ff40:	74 0d                	je     c010ff4f <vfs_open+0x269>
c010ff42:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff45:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff48:	8b 40 30             	mov    0x30(%eax),%eax
c010ff4b:	85 c0                	test   %eax,%eax
c010ff4d:	75 24                	jne    c010ff73 <vfs_open+0x28d>
c010ff4f:	c7 44 24 0c b4 8a 11 	movl   $0xc0118ab4,0xc(%esp)
c010ff56:	c0 
c010ff57:	c7 44 24 08 1f 8a 11 	movl   $0xc0118a1f,0x8(%esp)
c010ff5e:	c0 
c010ff5f:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c010ff66:	00 
c010ff67:	c7 04 24 34 8a 11 c0 	movl   $0xc0118a34,(%esp)
c010ff6e:	e8 55 0f ff ff       	call   c0100ec8 <__panic>
c010ff73:	c7 44 24 04 05 8b 11 	movl   $0xc0118b05,0x4(%esp)
c010ff7a:	c0 
c010ff7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff7e:	89 04 24             	mov    %eax,(%esp)
c010ff81:	e8 87 f2 ff ff       	call   c010f20d <inode_check>
c010ff86:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ff89:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ff8c:	8b 40 30             	mov    0x30(%eax),%eax
c010ff8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ff92:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ff99:	00 
c010ff9a:	89 14 24             	mov    %edx,(%esp)
c010ff9d:	ff d0                	call   *%eax
c010ff9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ffa2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ffa6:	74 1b                	je     c010ffc3 <vfs_open+0x2dd>
            vop_open_dec(node);
c010ffa8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ffab:	89 04 24             	mov    %eax,(%esp)
c010ffae:	e8 73 f1 ff ff       	call   c010f126 <inode_open_dec>
            vop_ref_dec(node);
c010ffb3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ffb6:	89 04 24             	mov    %eax,(%esp)
c010ffb9:	e8 61 f0 ff ff       	call   c010f01f <inode_ref_dec>
            return ret;
c010ffbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ffc1:	eb 0d                	jmp    c010ffd0 <vfs_open+0x2ea>
        }
    }
    *node_store = node;
c010ffc3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ffc6:	8b 45 10             	mov    0x10(%ebp),%eax
c010ffc9:	89 10                	mov    %edx,(%eax)
    return 0;
c010ffcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ffd0:	83 c4 44             	add    $0x44,%esp
c010ffd3:	5b                   	pop    %ebx
c010ffd4:	5d                   	pop    %ebp
c010ffd5:	c3                   	ret    

c010ffd6 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010ffd6:	55                   	push   %ebp
c010ffd7:	89 e5                	mov    %esp,%ebp
c010ffd9:	83 ec 18             	sub    $0x18,%esp
    vop_open_dec(node);
c010ffdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffdf:	89 04 24             	mov    %eax,(%esp)
c010ffe2:	e8 3f f1 ff ff       	call   c010f126 <inode_open_dec>
    vop_ref_dec(node);
c010ffe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ffea:	89 04 24             	mov    %eax,(%esp)
c010ffed:	e8 2d f0 ff ff       	call   c010f01f <inode_ref_dec>
    return 0;
c010fff2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fff7:	c9                   	leave  
c010fff8:	c3                   	ret    

c010fff9 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010fff9:	55                   	push   %ebp
c010fffa:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010fffc:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110001:	5d                   	pop    %ebp
c0110002:	c3                   	ret    

c0110003 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c0110003:	55                   	push   %ebp
c0110004:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110006:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011000b:	5d                   	pop    %ebp
c011000c:	c3                   	ret    

c011000d <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c011000d:	55                   	push   %ebp
c011000e:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110010:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110015:	5d                   	pop    %ebp
c0110016:	c3                   	ret    

c0110017 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c0110017:	55                   	push   %ebp
c0110018:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011001a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c011001f:	5d                   	pop    %ebp
c0110020:	c3                   	ret    

c0110021 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c0110021:	55                   	push   %ebp
c0110022:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110024:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110029:	5d                   	pop    %ebp
c011002a:	c3                   	ret    

c011002b <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c011002b:	55                   	push   %ebp
c011002c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011002e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110033:	5d                   	pop    %ebp
c0110034:	c3                   	ret    

c0110035 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c0110035:	55                   	push   %ebp
c0110036:	89 e5                	mov    %esp,%ebp
c0110038:	83 ec 38             	sub    $0x38,%esp
    int i, slash = -1, colon = -1;
c011003b:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c0110042:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c0110049:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0110050:	eb 32                	jmp    c0110084 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c0110052:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110055:	8b 45 08             	mov    0x8(%ebp),%eax
c0110058:	01 d0                	add    %edx,%eax
c011005a:	0f b6 00             	movzbl (%eax),%eax
c011005d:	3c 3a                	cmp    $0x3a,%al
c011005f:	75 08                	jne    c0110069 <get_device+0x34>
c0110061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110064:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110067:	eb 2a                	jmp    c0110093 <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c0110069:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011006c:	8b 45 08             	mov    0x8(%ebp),%eax
c011006f:	01 d0                	add    %edx,%eax
c0110071:	0f b6 00             	movzbl (%eax),%eax
c0110074:	3c 2f                	cmp    $0x2f,%al
c0110076:	75 08                	jne    c0110080 <get_device+0x4b>
c0110078:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011007b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011007e:	eb 13                	jmp    c0110093 <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c0110080:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110084:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110087:	8b 45 08             	mov    0x8(%ebp),%eax
c011008a:	01 d0                	add    %edx,%eax
c011008c:	0f b6 00             	movzbl (%eax),%eax
c011008f:	84 c0                	test   %al,%al
c0110091:	75 bf                	jne    c0110052 <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c0110093:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110097:	79 1e                	jns    c01100b7 <get_device+0x82>
c0110099:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011009d:	74 18                	je     c01100b7 <get_device+0x82>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c011009f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01100a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01100a5:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c01100a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01100aa:	89 04 24             	mov    %eax,(%esp)
c01100ad:	e8 ae 02 00 00       	call   c0110360 <vfs_get_curdir>
c01100b2:	e9 26 01 00 00       	jmp    c01101dd <get_device+0x1a8>
    }
    if (colon > 0) {
c01100b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01100bb:	7e 42                	jle    c01100ff <get_device+0xca>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c01100bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01100c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01100c3:	01 d0                	add    %edx,%eax
c01100c5:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c01100c8:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01100cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01100cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01100d2:	01 d0                	add    %edx,%eax
c01100d4:	0f b6 00             	movzbl (%eax),%eax
c01100d7:	3c 2f                	cmp    $0x2f,%al
c01100d9:	74 ed                	je     c01100c8 <get_device+0x93>
        *subpath = path + colon;
c01100db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01100de:	8b 45 08             	mov    0x8(%ebp),%eax
c01100e1:	01 c2                	add    %eax,%edx
c01100e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01100e6:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c01100e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01100eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01100ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01100f2:	89 04 24             	mov    %eax,(%esp)
c01100f5:	e8 61 f4 ff ff       	call   c010f55b <vfs_get_root>
c01100fa:	e9 de 00 00 00       	jmp    c01101dd <get_device+0x1a8>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c01100ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0110102:	0f b6 00             	movzbl (%eax),%eax
c0110105:	3c 2f                	cmp    $0x2f,%al
c0110107:	75 20                	jne    c0110129 <get_device+0xf4>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c0110109:	8b 45 10             	mov    0x10(%ebp),%eax
c011010c:	89 04 24             	mov    %eax,(%esp)
c011010f:	e8 18 f3 ff ff       	call   c010f42c <vfs_get_bootfs>
c0110114:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110117:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011011b:	0f 84 a1 00 00 00    	je     c01101c2 <get_device+0x18d>
            return ret;
c0110121:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110124:	e9 b4 00 00 00       	jmp    c01101dd <get_device+0x1a8>
        }
    }
    else {
        assert(*path == ':');
c0110129:	8b 45 08             	mov    0x8(%ebp),%eax
c011012c:	0f b6 00             	movzbl (%eax),%eax
c011012f:	3c 3a                	cmp    $0x3a,%al
c0110131:	74 24                	je     c0110157 <get_device+0x122>
c0110133:	c7 44 24 0c 10 8b 11 	movl   $0xc0118b10,0xc(%esp)
c011013a:	c0 
c011013b:	c7 44 24 08 1d 8b 11 	movl   $0xc0118b1d,0x8(%esp)
c0110142:	c0 
c0110143:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
c011014a:	00 
c011014b:	c7 04 24 32 8b 11 c0 	movl   $0xc0118b32,(%esp)
c0110152:	e8 71 0d ff ff       	call   c0100ec8 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c0110157:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011015a:	89 04 24             	mov    %eax,(%esp)
c011015d:	e8 fe 01 00 00       	call   c0110360 <vfs_get_curdir>
c0110162:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110165:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110169:	74 05                	je     c0110170 <get_device+0x13b>
            return ret;
c011016b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011016e:	eb 6d                	jmp    c01101dd <get_device+0x1a8>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c0110170:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110173:	8b 40 38             	mov    0x38(%eax),%eax
c0110176:	85 c0                	test   %eax,%eax
c0110178:	75 24                	jne    c011019e <get_device+0x169>
c011017a:	c7 44 24 0c 4a 8b 11 	movl   $0xc0118b4a,0xc(%esp)
c0110181:	c0 
c0110182:	c7 44 24 08 1d 8b 11 	movl   $0xc0118b1d,0x8(%esp)
c0110189:	c0 
c011018a:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c0110191:	00 
c0110192:	c7 04 24 32 8b 11 c0 	movl   $0xc0118b32,(%esp)
c0110199:	e8 2a 0d ff ff       	call   c0100ec8 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c011019e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01101a1:	8b 40 38             	mov    0x38(%eax),%eax
c01101a4:	8b 40 74             	mov    0x74(%eax),%eax
c01101a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01101aa:	8b 52 38             	mov    0x38(%edx),%edx
c01101ad:	89 14 24             	mov    %edx,(%esp)
c01101b0:	ff d0                	call   *%eax
c01101b2:	8b 55 10             	mov    0x10(%ebp),%edx
c01101b5:	89 02                	mov    %eax,(%edx)
        vop_ref_dec(node);
c01101b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01101ba:	89 04 24             	mov    %eax,(%esp)
c01101bd:	e8 5d ee ff ff       	call   c010f01f <inode_ref_dec>
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c01101c2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01101c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01101c9:	0f b6 00             	movzbl (%eax),%eax
c01101cc:	3c 2f                	cmp    $0x2f,%al
c01101ce:	74 f2                	je     c01101c2 <get_device+0x18d>
    *subpath = path;
c01101d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01101d6:	89 10                	mov    %edx,(%eax)
    return 0;
c01101d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01101dd:	c9                   	leave  
c01101de:	c3                   	ret    

c01101df <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c01101df:	55                   	push   %ebp
c01101e0:	89 e5                	mov    %esp,%ebp
c01101e2:	56                   	push   %esi
c01101e3:	53                   	push   %ebx
c01101e4:	83 ec 20             	sub    $0x20,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01101e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01101ea:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01101ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01101f1:	8d 75 08             	lea    0x8(%ebp),%esi
c01101f4:	89 74 24 04          	mov    %esi,0x4(%esp)
c01101f8:	89 04 24             	mov    %eax,(%esp)
c01101fb:	e8 35 fe ff ff       	call   c0110035 <get_device>
c0110200:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110203:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110207:	74 08                	je     c0110211 <vfs_lookup+0x32>
        return ret;
c0110209:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011020c:	e9 a7 00 00 00       	jmp    c01102b8 <vfs_lookup+0xd9>
    }
    if (*path != '\0') {
c0110211:	8b 45 08             	mov    0x8(%ebp),%eax
c0110214:	0f b6 00             	movzbl (%eax),%eax
c0110217:	84 c0                	test   %al,%al
c0110219:	0f 84 8c 00 00 00    	je     c01102ab <vfs_lookup+0xcc>
        ret = vop_lookup(node, path, node_store);
c011021f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110222:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110225:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110229:	74 17                	je     c0110242 <vfs_lookup+0x63>
c011022b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011022e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110231:	85 c0                	test   %eax,%eax
c0110233:	74 0d                	je     c0110242 <vfs_lookup+0x63>
c0110235:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110238:	8b 40 3c             	mov    0x3c(%eax),%eax
c011023b:	8b 40 38             	mov    0x38(%eax),%eax
c011023e:	85 c0                	test   %eax,%eax
c0110240:	75 24                	jne    c0110266 <vfs_lookup+0x87>
c0110242:	c7 44 24 0c 60 8b 11 	movl   $0xc0118b60,0xc(%esp)
c0110249:	c0 
c011024a:	c7 44 24 08 1d 8b 11 	movl   $0xc0118b1d,0x8(%esp)
c0110251:	c0 
c0110252:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
c0110259:	00 
c011025a:	c7 04 24 32 8b 11 c0 	movl   $0xc0118b32,(%esp)
c0110261:	e8 62 0c ff ff       	call   c0100ec8 <__panic>
c0110266:	c7 44 24 04 af 8b 11 	movl   $0xc0118baf,0x4(%esp)
c011026d:	c0 
c011026e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110271:	89 04 24             	mov    %eax,(%esp)
c0110274:	e8 94 ef ff ff       	call   c010f20d <inode_check>
c0110279:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011027c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011027f:	8b 40 38             	mov    0x38(%eax),%eax
c0110282:	8b 4d 08             	mov    0x8(%ebp),%ecx
c0110285:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110288:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c011028b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c011028f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110293:	89 14 24             	mov    %edx,(%esp)
c0110296:	ff d0                	call   *%eax
c0110298:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c011029b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011029e:	89 04 24             	mov    %eax,(%esp)
c01102a1:	e8 79 ed ff ff       	call   c010f01f <inode_ref_dec>
        return ret;
c01102a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102a9:	eb 0d                	jmp    c01102b8 <vfs_lookup+0xd9>
    }
    *node_store = node;
c01102ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01102ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102b1:	89 10                	mov    %edx,(%eax)
    return 0;
c01102b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01102b8:	83 c4 20             	add    $0x20,%esp
c01102bb:	5b                   	pop    %ebx
c01102bc:	5e                   	pop    %esi
c01102bd:	5d                   	pop    %ebp
c01102be:	c3                   	ret    

c01102bf <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c01102bf:	55                   	push   %ebp
c01102c0:	89 e5                	mov    %esp,%ebp
c01102c2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c01102c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01102c8:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01102cb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01102cf:	8d 4d 08             	lea    0x8(%ebp),%ecx
c01102d2:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01102d6:	89 04 24             	mov    %eax,(%esp)
c01102d9:	e8 57 fd ff ff       	call   c0110035 <get_device>
c01102de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102e5:	74 05                	je     c01102ec <vfs_lookup_parent+0x2d>
        return ret;
c01102e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102ea:	eb 15                	jmp    c0110301 <vfs_lookup_parent+0x42>
    }
    *endp = path;
c01102ec:	8b 55 08             	mov    0x8(%ebp),%edx
c01102ef:	8b 45 10             	mov    0x10(%ebp),%eax
c01102f2:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c01102f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01102f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102fa:	89 10                	mov    %edx,(%eax)
    return 0;
c01102fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110301:	c9                   	leave  
c0110302:	c3                   	ret    

c0110303 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c0110303:	55                   	push   %ebp
c0110304:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c0110306:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c011030b:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110311:	8b 00                	mov    (%eax),%eax
}
c0110313:	5d                   	pop    %ebp
c0110314:	c3                   	ret    

c0110315 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c0110315:	55                   	push   %ebp
c0110316:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c0110318:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c011031d:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110323:	8b 55 08             	mov    0x8(%ebp),%edx
c0110326:	89 10                	mov    %edx,(%eax)
}
c0110328:	5d                   	pop    %ebp
c0110329:	c3                   	ret    

c011032a <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c011032a:	55                   	push   %ebp
c011032b:	89 e5                	mov    %esp,%ebp
c011032d:	83 ec 18             	sub    $0x18,%esp
    lock_files(current->filesp);
c0110330:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0110335:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c011033b:	89 04 24             	mov    %eax,(%esp)
c011033e:	e8 b7 ac ff ff       	call   c010affa <lock_files>
}
c0110343:	c9                   	leave  
c0110344:	c3                   	ret    

c0110345 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c0110345:	55                   	push   %ebp
c0110346:	89 e5                	mov    %esp,%ebp
c0110348:	83 ec 18             	sub    $0x18,%esp
    unlock_files(current->filesp);
c011034b:	a1 28 ff 14 c0       	mov    0xc014ff28,%eax
c0110350:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0110356:	89 04 24             	mov    %eax,(%esp)
c0110359:	e8 b2 ac ff ff       	call   c010b010 <unlock_files>
}
c011035e:	c9                   	leave  
c011035f:	c3                   	ret    

c0110360 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c0110360:	55                   	push   %ebp
c0110361:	89 e5                	mov    %esp,%ebp
c0110363:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c0110366:	e8 98 ff ff ff       	call   c0110303 <get_cwd_nolock>
c011036b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011036e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110372:	74 1a                	je     c011038e <vfs_get_curdir+0x2e>
        vop_ref_inc(node);
c0110374:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110377:	89 04 24             	mov    %eax,(%esp)
c011037a:	e8 86 ec ff ff       	call   c010f005 <inode_ref_inc>
        *dir_store = node;
c011037f:	8b 45 08             	mov    0x8(%ebp),%eax
c0110382:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0110385:	89 10                	mov    %edx,(%eax)
        return 0;
c0110387:	b8 00 00 00 00       	mov    $0x0,%eax
c011038c:	eb 05                	jmp    c0110393 <vfs_get_curdir+0x33>
    }
    return -E_NOENT;
c011038e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110393:	c9                   	leave  
c0110394:	c3                   	ret    

c0110395 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c0110395:	55                   	push   %ebp
c0110396:	89 e5                	mov    %esp,%ebp
c0110398:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c011039b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c01103a2:	e8 83 ff ff ff       	call   c011032a <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c01103a7:	e8 57 ff ff ff       	call   c0110303 <get_cwd_nolock>
c01103ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01103af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01103b2:	3b 45 08             	cmp    0x8(%ebp),%eax
c01103b5:	0f 84 c7 00 00 00    	je     c0110482 <vfs_set_curdir+0xed>
        if (dir != NULL) {
c01103bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01103bf:	0f 84 a1 00 00 00    	je     c0110466 <vfs_set_curdir+0xd1>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c01103c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01103c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01103cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01103cf:	74 17                	je     c01103e8 <vfs_set_curdir+0x53>
c01103d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103d4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103d7:	85 c0                	test   %eax,%eax
c01103d9:	74 0d                	je     c01103e8 <vfs_set_curdir+0x53>
c01103db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01103de:	8b 40 3c             	mov    0x3c(%eax),%eax
c01103e1:	8b 40 28             	mov    0x28(%eax),%eax
c01103e4:	85 c0                	test   %eax,%eax
c01103e6:	75 24                	jne    c011040c <vfs_set_curdir+0x77>
c01103e8:	c7 44 24 0c b8 8b 11 	movl   $0xc0118bb8,0xc(%esp)
c01103ef:	c0 
c01103f0:	c7 44 24 08 08 8c 11 	movl   $0xc0118c08,0x8(%esp)
c01103f7:	c0 
c01103f8:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01103ff:	00 
c0110400:	c7 04 24 1d 8c 11 c0 	movl   $0xc0118c1d,(%esp)
c0110407:	e8 bc 0a ff ff       	call   c0100ec8 <__panic>
c011040c:	c7 44 24 04 33 8c 11 	movl   $0xc0118c33,0x4(%esp)
c0110413:	c0 
c0110414:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110417:	89 04 24             	mov    %eax,(%esp)
c011041a:	e8 ee ed ff ff       	call   c010f20d <inode_check>
c011041f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110422:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110425:	8b 40 28             	mov    0x28(%eax),%eax
c0110428:	8d 55 e8             	lea    -0x18(%ebp),%edx
c011042b:	89 54 24 04          	mov    %edx,0x4(%esp)
c011042f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110432:	89 14 24             	mov    %edx,(%esp)
c0110435:	ff d0                	call   *%eax
c0110437:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011043a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011043e:	74 02                	je     c0110442 <vfs_set_curdir+0xad>
                goto out;
c0110440:	eb 40                	jmp    c0110482 <vfs_set_curdir+0xed>
            }
            if (!S_ISDIR(type)) {
c0110442:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110445:	25 00 70 00 00       	and    $0x7000,%eax
c011044a:	3d 00 20 00 00       	cmp    $0x2000,%eax
c011044f:	74 0a                	je     c011045b <vfs_set_curdir+0xc6>
                ret = -E_NOTDIR;
c0110451:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c0110458:	90                   	nop
c0110459:	eb 27                	jmp    c0110482 <vfs_set_curdir+0xed>
            }
            vop_ref_inc(dir);
c011045b:	8b 45 08             	mov    0x8(%ebp),%eax
c011045e:	89 04 24             	mov    %eax,(%esp)
c0110461:	e8 9f eb ff ff       	call   c010f005 <inode_ref_inc>
        }
        set_cwd_nolock(dir);
c0110466:	8b 45 08             	mov    0x8(%ebp),%eax
c0110469:	89 04 24             	mov    %eax,(%esp)
c011046c:	e8 a4 fe ff ff       	call   c0110315 <set_cwd_nolock>
        if (old_dir != NULL) {
c0110471:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110475:	74 0b                	je     c0110482 <vfs_set_curdir+0xed>
            vop_ref_dec(old_dir);
c0110477:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011047a:	89 04 24             	mov    %eax,(%esp)
c011047d:	e8 9d eb ff ff       	call   c010f01f <inode_ref_dec>
        }
    }
out:
    unlock_cfs();
c0110482:	e8 be fe ff ff       	call   c0110345 <unlock_cfs>
    return ret;
c0110487:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011048a:	c9                   	leave  
c011048b:	c3                   	ret    

c011048c <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c011048c:	55                   	push   %ebp
c011048d:	89 e5                	mov    %esp,%ebp
c011048f:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c0110492:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0110495:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110499:	8b 45 08             	mov    0x8(%ebp),%eax
c011049c:	89 04 24             	mov    %eax,(%esp)
c011049f:	e8 3b fd ff ff       	call   c01101df <vfs_lookup>
c01104a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104ab:	75 19                	jne    c01104c6 <vfs_chdir+0x3a>
        ret = vfs_set_curdir(node);
c01104ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104b0:	89 04 24             	mov    %eax,(%esp)
c01104b3:	e8 dd fe ff ff       	call   c0110395 <vfs_set_curdir>
c01104b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c01104bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104be:	89 04 24             	mov    %eax,(%esp)
c01104c1:	e8 59 eb ff ff       	call   c010f01f <inode_ref_dec>
    }
    return ret;
c01104c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01104c9:	c9                   	leave  
c01104ca:	c3                   	ret    

c01104cb <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c01104cb:	55                   	push   %ebp
c01104cc:	89 e5                	mov    %esp,%ebp
c01104ce:	83 ec 48             	sub    $0x48,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c01104d1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01104d4:	89 04 24             	mov    %eax,(%esp)
c01104d7:	e8 84 fe ff ff       	call   c0110360 <vfs_get_curdir>
c01104dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104e3:	74 08                	je     c01104ed <vfs_getcwd+0x22>
        return ret;
c01104e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104e8:	e9 3a 01 00 00       	jmp    c0110627 <vfs_getcwd+0x15c>
    }
    assert(node->in_fs != NULL);
c01104ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104f0:	8b 40 38             	mov    0x38(%eax),%eax
c01104f3:	85 c0                	test   %eax,%eax
c01104f5:	75 24                	jne    c011051b <vfs_getcwd+0x50>
c01104f7:	c7 44 24 0c 3b 8c 11 	movl   $0xc0118c3b,0xc(%esp)
c01104fe:	c0 
c01104ff:	c7 44 24 08 08 8c 11 	movl   $0xc0118c08,0x8(%esp)
c0110506:	c0 
c0110507:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c011050e:	00 
c011050f:	c7 04 24 1d 8c 11 c0 	movl   $0xc0118c1d,(%esp)
c0110516:	e8 ad 09 ff ff       	call   c0100ec8 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c011051b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011051e:	8b 40 38             	mov    0x38(%eax),%eax
c0110521:	89 04 24             	mov    %eax,(%esp)
c0110524:	e8 4f f1 ff ff       	call   c010f678 <vfs_get_devname>
c0110529:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c011052c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011052f:	89 04 24             	mov    %eax,(%esp)
c0110532:	e8 ec 4b 00 00       	call   c0115123 <strlen>
c0110537:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011053e:	00 
c011053f:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110546:	00 
c0110547:	89 44 24 08          	mov    %eax,0x8(%esp)
c011054b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011054e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110552:	8b 45 08             	mov    0x8(%ebp),%eax
c0110555:	89 04 24             	mov    %eax,(%esp)
c0110558:	e8 95 ad ff ff       	call   c010b2f2 <iobuf_move>
c011055d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110560:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110564:	74 05                	je     c011056b <vfs_getcwd+0xa0>
        goto out;
c0110566:	e9 ae 00 00 00       	jmp    c0110619 <vfs_getcwd+0x14e>
    }
    char colon = ':';
c011056b:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c011056f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0110576:	00 
c0110577:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011057e:	00 
c011057f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110586:	00 
c0110587:	8d 45 e7             	lea    -0x19(%ebp),%eax
c011058a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011058e:	8b 45 08             	mov    0x8(%ebp),%eax
c0110591:	89 04 24             	mov    %eax,(%esp)
c0110594:	e8 59 ad ff ff       	call   c010b2f2 <iobuf_move>
c0110599:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011059c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105a0:	74 02                	je     c01105a4 <vfs_getcwd+0xd9>
        goto out;
c01105a2:	eb 75                	jmp    c0110619 <vfs_getcwd+0x14e>
    }
    ret = vop_namefile(node, iob);
c01105a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01105aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01105ae:	74 17                	je     c01105c7 <vfs_getcwd+0xfc>
c01105b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105b3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105b6:	85 c0                	test   %eax,%eax
c01105b8:	74 0d                	je     c01105c7 <vfs_getcwd+0xfc>
c01105ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105bd:	8b 40 3c             	mov    0x3c(%eax),%eax
c01105c0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01105c3:	85 c0                	test   %eax,%eax
c01105c5:	75 24                	jne    c01105eb <vfs_getcwd+0x120>
c01105c7:	c7 44 24 0c 50 8c 11 	movl   $0xc0118c50,0xc(%esp)
c01105ce:	c0 
c01105cf:	c7 44 24 08 08 8c 11 	movl   $0xc0118c08,0x8(%esp)
c01105d6:	c0 
c01105d7:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c01105de:	00 
c01105df:	c7 04 24 1d 8c 11 c0 	movl   $0xc0118c1d,(%esp)
c01105e6:	e8 dd 08 ff ff       	call   c0100ec8 <__panic>
c01105eb:	c7 44 24 04 a1 8c 11 	movl   $0xc0118ca1,0x4(%esp)
c01105f2:	c0 
c01105f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105f6:	89 04 24             	mov    %eax,(%esp)
c01105f9:	e8 0f ec ff ff       	call   c010f20d <inode_check>
c01105fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110601:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110604:	8b 40 1c             	mov    0x1c(%eax),%eax
c0110607:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011060a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c011060d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0110611:	89 14 24             	mov    %edx,(%esp)
c0110614:	ff d0                	call   *%eax
c0110616:	89 45 f4             	mov    %eax,-0xc(%ebp)

out:
    vop_ref_dec(node);
c0110619:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011061c:	89 04 24             	mov    %eax,(%esp)
c011061f:	e8 fb e9 ff ff       	call   c010f01f <inode_ref_dec>
    return ret;
c0110624:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110627:	c9                   	leave  
c0110628:	c3                   	ret    

c0110629 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c0110629:	55                   	push   %ebp
c011062a:	89 e5                	mov    %esp,%ebp
c011062c:	83 ec 28             	sub    $0x28,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c011062f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110632:	83 e0 3c             	and    $0x3c,%eax
c0110635:	85 c0                	test   %eax,%eax
c0110637:	74 07                	je     c0110640 <dev_open+0x17>
        return -E_INVAL;
c0110639:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011063e:	eb 58                	jmp    c0110698 <dev_open+0x6f>
    }
    struct device *dev = vop_info(node, device);
c0110640:	8b 45 08             	mov    0x8(%ebp),%eax
c0110643:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110646:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011064a:	74 0d                	je     c0110659 <dev_open+0x30>
c011064c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011064f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110652:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110657:	74 24                	je     c011067d <dev_open+0x54>
c0110659:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c0110660:	c0 
c0110661:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c0110668:	c0 
c0110669:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0110670:	00 
c0110671:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110678:	e8 4b 08 ff ff       	call   c0100ec8 <__panic>
c011067d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110680:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c0110683:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110686:	8b 40 08             	mov    0x8(%eax),%eax
c0110689:	8b 55 0c             	mov    0xc(%ebp),%edx
c011068c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110690:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110693:	89 14 24             	mov    %edx,(%esp)
c0110696:	ff d0                	call   *%eax
}
c0110698:	c9                   	leave  
c0110699:	c3                   	ret    

c011069a <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c011069a:	55                   	push   %ebp
c011069b:	89 e5                	mov    %esp,%ebp
c011069d:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01106a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01106a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01106aa:	74 0d                	je     c01106b9 <dev_close+0x1f>
c01106ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106af:	8b 40 2c             	mov    0x2c(%eax),%eax
c01106b2:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01106b7:	74 24                	je     c01106dd <dev_close+0x43>
c01106b9:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c01106c0:	c0 
c01106c1:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c01106c8:	c0 
c01106c9:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01106d0:	00 
c01106d1:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c01106d8:	e8 eb 07 ff ff       	call   c0100ec8 <__panic>
c01106dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c01106e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106e6:	8b 40 0c             	mov    0xc(%eax),%eax
c01106e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01106ec:	89 14 24             	mov    %edx,(%esp)
c01106ef:	ff d0                	call   *%eax
}
c01106f1:	c9                   	leave  
c01106f2:	c3                   	ret    

c01106f3 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c01106f3:	55                   	push   %ebp
c01106f4:	89 e5                	mov    %esp,%ebp
c01106f6:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01106f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01106fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01106ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110703:	74 0d                	je     c0110712 <dev_read+0x1f>
c0110705:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110708:	8b 40 2c             	mov    0x2c(%eax),%eax
c011070b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110710:	74 24                	je     c0110736 <dev_read+0x43>
c0110712:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c0110719:	c0 
c011071a:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c0110721:	c0 
c0110722:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
c0110729:	00 
c011072a:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110731:	e8 92 07 ff ff       	call   c0100ec8 <__panic>
c0110736:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110739:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c011073c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011073f:	8b 40 10             	mov    0x10(%eax),%eax
c0110742:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110749:	00 
c011074a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011074d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110751:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110754:	89 14 24             	mov    %edx,(%esp)
c0110757:	ff d0                	call   *%eax
}
c0110759:	c9                   	leave  
c011075a:	c3                   	ret    

c011075b <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c011075b:	55                   	push   %ebp
c011075c:	89 e5                	mov    %esp,%ebp
c011075e:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110761:	8b 45 08             	mov    0x8(%ebp),%eax
c0110764:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110767:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011076b:	74 0d                	je     c011077a <dev_write+0x1f>
c011076d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110770:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110773:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110778:	74 24                	je     c011079e <dev_write+0x43>
c011077a:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c0110781:	c0 
c0110782:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c0110789:	c0 
c011078a:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0110791:	00 
c0110792:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110799:	e8 2a 07 ff ff       	call   c0100ec8 <__panic>
c011079e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c01107a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01107a7:	8b 40 10             	mov    0x10(%eax),%eax
c01107aa:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01107b1:	00 
c01107b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01107b5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01107b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01107bc:	89 14 24             	mov    %edx,(%esp)
c01107bf:	ff d0                	call   *%eax
}
c01107c1:	c9                   	leave  
c01107c2:	c3                   	ret    

c01107c3 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c01107c3:	55                   	push   %ebp
c01107c4:	89 e5                	mov    %esp,%ebp
c01107c6:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01107c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01107cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01107cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01107d3:	74 0d                	je     c01107e2 <dev_ioctl+0x1f>
c01107d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107d8:	8b 40 2c             	mov    0x2c(%eax),%eax
c01107db:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01107e0:	74 24                	je     c0110806 <dev_ioctl+0x43>
c01107e2:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c01107e9:	c0 
c01107ea:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c01107f1:	c0 
c01107f2:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
c01107f9:	00 
c01107fa:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110801:	e8 c2 06 ff ff       	call   c0100ec8 <__panic>
c0110806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110809:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c011080c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011080f:	8b 40 14             	mov    0x14(%eax),%eax
c0110812:	8b 55 10             	mov    0x10(%ebp),%edx
c0110815:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110819:	8b 55 0c             	mov    0xc(%ebp),%edx
c011081c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0110820:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110823:	89 14 24             	mov    %edx,(%esp)
c0110826:	ff d0                	call   *%eax
}
c0110828:	c9                   	leave  
c0110829:	c3                   	ret    

c011082a <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c011082a:	55                   	push   %ebp
c011082b:	89 e5                	mov    %esp,%ebp
c011082d:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110830:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0110837:	00 
c0110838:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011083f:	00 
c0110840:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110843:	89 04 24             	mov    %eax,(%esp)
c0110846:	e8 2e 4c 00 00       	call   c0115479 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011084b:	8b 45 08             	mov    0x8(%ebp),%eax
c011084e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110851:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110855:	74 17                	je     c011086e <dev_fstat+0x44>
c0110857:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011085a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011085d:	85 c0                	test   %eax,%eax
c011085f:	74 0d                	je     c011086e <dev_fstat+0x44>
c0110861:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110864:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110867:	8b 40 28             	mov    0x28(%eax),%eax
c011086a:	85 c0                	test   %eax,%eax
c011086c:	75 24                	jne    c0110892 <dev_fstat+0x68>
c011086e:	c7 44 24 0c 1c 8d 11 	movl   $0xc0118d1c,0xc(%esp)
c0110875:	c0 
c0110876:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c011087d:	c0 
c011087e:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0110885:	00 
c0110886:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c011088d:	e8 36 06 ff ff       	call   c0100ec8 <__panic>
c0110892:	c7 44 24 04 6c 8d 11 	movl   $0xc0118d6c,0x4(%esp)
c0110899:	c0 
c011089a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011089d:	89 04 24             	mov    %eax,(%esp)
c01108a0:	e8 68 e9 ff ff       	call   c010f20d <inode_check>
c01108a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108a8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01108ab:	8b 40 28             	mov    0x28(%eax),%eax
c01108ae:	8b 55 0c             	mov    0xc(%ebp),%edx
c01108b1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01108b5:	8b 55 08             	mov    0x8(%ebp),%edx
c01108b8:	89 14 24             	mov    %edx,(%esp)
c01108bb:	ff d0                	call   *%eax
c01108bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01108c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01108c4:	74 05                	je     c01108cb <dev_fstat+0xa1>
        return ret;
c01108c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01108c9:	eb 72                	jmp    c011093d <dev_fstat+0x113>
    }
    struct device *dev = vop_info(node, device);
c01108cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01108ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01108d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01108d5:	74 0d                	je     c01108e4 <dev_fstat+0xba>
c01108d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108da:	8b 40 2c             	mov    0x2c(%eax),%eax
c01108dd:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01108e2:	74 24                	je     c0110908 <dev_fstat+0xde>
c01108e4:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c01108eb:	c0 
c01108ec:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c01108f3:	c0 
c01108f4:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c01108fb:	00 
c01108fc:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c0110903:	e8 c0 05 ff ff       	call   c0100ec8 <__panic>
c0110908:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011090b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c011090e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110911:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c0110918:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011091b:	8b 10                	mov    (%eax),%edx
c011091d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110920:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c0110923:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110926:	8b 50 08             	mov    0x8(%eax),%edx
c0110929:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011092c:	8b 40 04             	mov    0x4(%eax),%eax
c011092f:	0f af d0             	imul   %eax,%edx
c0110932:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110935:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0110938:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011093d:	c9                   	leave  
c011093e:	c3                   	ret    

c011093f <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c011093f:	55                   	push   %ebp
c0110940:	89 e5                	mov    %esp,%ebp
c0110942:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c0110945:	8b 45 08             	mov    0x8(%ebp),%eax
c0110948:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011094b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011094f:	74 0d                	je     c011095e <dev_gettype+0x1f>
c0110951:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110954:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110957:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011095c:	74 24                	je     c0110982 <dev_gettype+0x43>
c011095e:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c0110965:	c0 
c0110966:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c011096d:	c0 
c011096e:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c0110975:	00 
c0110976:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c011097d:	e8 46 05 ff ff       	call   c0100ec8 <__panic>
c0110982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110985:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110988:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011098b:	8b 00                	mov    (%eax),%eax
c011098d:	85 c0                	test   %eax,%eax
c011098f:	74 07                	je     c0110998 <dev_gettype+0x59>
c0110991:	b8 00 50 00 00       	mov    $0x5000,%eax
c0110996:	eb 05                	jmp    c011099d <dev_gettype+0x5e>
c0110998:	b8 00 40 00 00       	mov    $0x4000,%eax
c011099d:	8b 55 0c             	mov    0xc(%ebp),%edx
c01109a0:	89 02                	mov    %eax,(%edx)
    return 0;
c01109a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01109a7:	c9                   	leave  
c01109a8:	c3                   	ret    

c01109a9 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c01109a9:	55                   	push   %ebp
c01109aa:	89 e5                	mov    %esp,%ebp
c01109ac:	83 ec 28             	sub    $0x28,%esp
    struct device *dev = vop_info(node, device);
c01109af:	8b 45 08             	mov    0x8(%ebp),%eax
c01109b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109b9:	74 0d                	je     c01109c8 <dev_tryseek+0x1f>
c01109bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109be:	8b 40 2c             	mov    0x2c(%eax),%eax
c01109c1:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01109c6:	74 24                	je     c01109ec <dev_tryseek+0x43>
c01109c8:	c7 44 24 0c c0 8c 11 	movl   $0xc0118cc0,0xc(%esp)
c01109cf:	c0 
c01109d0:	c7 44 24 08 f3 8c 11 	movl   $0xc0118cf3,0x8(%esp)
c01109d7:	c0 
c01109d8:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01109df:	00 
c01109e0:	c7 04 24 08 8d 11 c0 	movl   $0xc0118d08,(%esp)
c01109e7:	e8 dc 04 ff ff       	call   c0100ec8 <__panic>
c01109ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c01109f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109f5:	8b 00                	mov    (%eax),%eax
c01109f7:	85 c0                	test   %eax,%eax
c01109f9:	74 38                	je     c0110a33 <dev_tryseek+0x8a>
        if ((pos % dev->d_blocksize) == 0) {
c01109fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110a01:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110a04:	ba 00 00 00 00       	mov    $0x0,%edx
c0110a09:	f7 f1                	div    %ecx
c0110a0b:	89 d0                	mov    %edx,%eax
c0110a0d:	85 c0                	test   %eax,%eax
c0110a0f:	75 22                	jne    c0110a33 <dev_tryseek+0x8a>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c0110a11:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110a15:	78 1c                	js     c0110a33 <dev_tryseek+0x8a>
c0110a17:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a1d:	8b 08                	mov    (%eax),%ecx
c0110a1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a22:	8b 40 04             	mov    0x4(%eax),%eax
c0110a25:	0f af c1             	imul   %ecx,%eax
c0110a28:	39 c2                	cmp    %eax,%edx
c0110a2a:	73 07                	jae    c0110a33 <dev_tryseek+0x8a>
                return 0;
c0110a2c:	b8 00 00 00 00       	mov    $0x0,%eax
c0110a31:	eb 05                	jmp    c0110a38 <dev_tryseek+0x8f>
            }
        }
    }
    return -E_INVAL;
c0110a33:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110a38:	c9                   	leave  
c0110a39:	c3                   	ret    

c0110a3a <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c0110a3a:	55                   	push   %ebp
c0110a3b:	89 e5                	mov    %esp,%ebp
c0110a3d:	83 ec 18             	sub    $0x18,%esp
    if (*path != '\0') {
c0110a40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110a43:	0f b6 00             	movzbl (%eax),%eax
c0110a46:	84 c0                	test   %al,%al
c0110a48:	74 07                	je     c0110a51 <dev_lookup+0x17>
        return -E_NOENT;
c0110a4a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110a4f:	eb 18                	jmp    c0110a69 <dev_lookup+0x2f>
    }
    vop_ref_inc(node);
c0110a51:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a54:	89 04 24             	mov    %eax,(%esp)
c0110a57:	e8 a9 e5 ff ff       	call   c010f005 <inode_ref_inc>
    *node_store = node;
c0110a5c:	8b 45 10             	mov    0x10(%ebp),%eax
c0110a5f:	8b 55 08             	mov    0x8(%ebp),%edx
c0110a62:	89 10                	mov    %edx,(%eax)
    return 0;
c0110a64:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a69:	c9                   	leave  
c0110a6a:	c3                   	ret    

c0110a6b <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c0110a6b:	55                   	push   %ebp
c0110a6c:	89 e5                	mov    %esp,%ebp
c0110a6e:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110a71:	e8 8f 07 00 00       	call   c0111205 <dev_init_stdin>
    init_device(stdout);
c0110a76:	e8 0a 09 00 00       	call   c0111385 <dev_init_stdout>
    init_device(disk0);
c0110a7b:	e8 26 04 00 00       	call   c0110ea6 <dev_init_disk0>
}
c0110a80:	c9                   	leave  
c0110a81:	c3                   	ret    

c0110a82 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110a82:	55                   	push   %ebp
c0110a83:	89 e5                	mov    %esp,%ebp
c0110a85:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c0110a88:	c7 04 24 34 12 00 00 	movl   $0x1234,(%esp)
c0110a8f:	e8 96 e4 ff ff       	call   c010ef2a <__alloc_inode>
c0110a94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a9b:	74 1b                	je     c0110ab8 <dev_create_inode+0x36>
        vop_init(node, &dev_node_ops, NULL);
c0110a9d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0110aa4:	00 
c0110aa5:	c7 44 24 04 80 8d 11 	movl   $0xc0118d80,0x4(%esp)
c0110aac:	c0 
c0110aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ab0:	89 04 24             	mov    %eax,(%esp)
c0110ab3:	e8 9b e4 ff ff       	call   c010ef53 <inode_init>
    }
    return node;
c0110ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110abb:	c9                   	leave  
c0110abc:	c3                   	ret    

c0110abd <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c0110abd:	55                   	push   %ebp
c0110abe:	89 e5                	mov    %esp,%ebp
c0110ac0:	83 ec 18             	sub    $0x18,%esp
    down(&(disk0_sem));
c0110ac3:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110aca:	e8 ae 91 ff ff       	call   c0109c7d <down>
}
c0110acf:	c9                   	leave  
c0110ad0:	c3                   	ret    

c0110ad1 <unlock_disk0>:

static void
unlock_disk0(void) {
c0110ad1:	55                   	push   %ebp
c0110ad2:	89 e5                	mov    %esp,%ebp
c0110ad4:	83 ec 18             	sub    $0x18,%esp
    up(&(disk0_sem));
c0110ad7:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110ade:	e8 7f 91 ff ff       	call   c0109c62 <up>
}
c0110ae3:	c9                   	leave  
c0110ae4:	c3                   	ret    

c0110ae5 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c0110ae5:	55                   	push   %ebp
c0110ae6:	89 e5                	mov    %esp,%ebp
    return 0;
c0110ae8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110aed:	5d                   	pop    %ebp
c0110aee:	c3                   	ret    

c0110aef <disk0_close>:

static int
disk0_close(struct device *dev) {
c0110aef:	55                   	push   %ebp
c0110af0:	89 e5                	mov    %esp,%ebp
    return 0;
c0110af2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110af7:	5d                   	pop    %ebp
c0110af8:	c3                   	ret    

c0110af9 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110af9:	55                   	push   %ebp
c0110afa:	89 e5                	mov    %esp,%ebp
c0110afc:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b02:	c1 e0 03             	shl    $0x3,%eax
c0110b05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b08:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b0b:	c1 e0 03             	shl    $0x3,%eax
c0110b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110b11:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110b16:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110b19:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110b1d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b24:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110b28:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110b2f:	e8 6c 11 ff ff       	call   c0101ca0 <ide_read_secs>
c0110b34:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110b37:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110b3b:	74 3f                	je     c0110b7c <disk0_read_blks_nolock+0x83>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b40:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110b44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110b47:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110b4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b4e:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110b55:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b5c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110b60:	c7 44 24 08 c0 8d 11 	movl   $0xc0118dc0,0x8(%esp)
c0110b67:	c0 
c0110b68:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c0110b6f:	00 
c0110b70:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110b77:	e8 4c 03 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110b7c:	c9                   	leave  
c0110b7d:	c3                   	ret    

c0110b7e <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c0110b7e:	55                   	push   %ebp
c0110b7f:	89 e5                	mov    %esp,%ebp
c0110b81:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c0110b84:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b87:	c1 e0 03             	shl    $0x3,%eax
c0110b8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b90:	c1 e0 03             	shl    $0x3,%eax
c0110b93:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c0110b96:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110b9b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110b9e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0110ba2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0110ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ba9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110bad:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110bb4:	e8 29 13 ff ff       	call   c0101ee2 <ide_write_secs>
c0110bb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110bbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110bc0:	74 3f                	je     c0110c01 <disk0_write_blks_nolock+0x83>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c0110bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110bc5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0110bc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110bcc:	89 44 24 18          	mov    %eax,0x18(%esp)
c0110bd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110bd3:	89 44 24 14          	mov    %eax,0x14(%esp)
c0110bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110bda:	89 44 24 10          	mov    %eax,0x10(%esp)
c0110bde:	8b 45 08             	mov    0x8(%ebp),%eax
c0110be1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110be5:	c7 44 24 08 24 8e 11 	movl   $0xc0118e24,0x8(%esp)
c0110bec:	c0 
c0110bed:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
c0110bf4:	00 
c0110bf5:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110bfc:	e8 c7 02 ff ff       	call   c0100ec8 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c0110c01:	c9                   	leave  
c0110c02:	c3                   	ret    

c0110c03 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c0110c03:	55                   	push   %ebp
c0110c04:	89 e5                	mov    %esp,%ebp
c0110c06:	83 ec 48             	sub    $0x48,%esp
    off_t offset = iob->io_offset;
c0110c09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c0c:	8b 40 04             	mov    0x4(%eax),%eax
c0110c0f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c0110c12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110c15:	8b 40 0c             	mov    0xc(%eax),%eax
c0110c18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c0110c1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c1e:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110c24:	85 c0                	test   %eax,%eax
c0110c26:	0f 48 c2             	cmovs  %edx,%eax
c0110c29:	c1 f8 0c             	sar    $0xc,%eax
c0110c2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c0110c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c32:	c1 e8 0c             	shr    $0xc,%eax
c0110c35:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c0110c38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c3b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110c40:	85 c0                	test   %eax,%eax
c0110c42:	75 0c                	jne    c0110c50 <disk0_io+0x4d>
c0110c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110c47:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110c4c:	85 c0                	test   %eax,%eax
c0110c4e:	74 0a                	je     c0110c5a <disk0_io+0x57>
        return -E_INVAL;
c0110c50:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110c55:	e9 7a 01 00 00       	jmp    c0110dd4 <disk0_io+0x1d1>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c0110c5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110c5d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110c60:	01 c2                	add    %eax,%edx
c0110c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0110c65:	8b 00                	mov    (%eax),%eax
c0110c67:	39 c2                	cmp    %eax,%edx
c0110c69:	76 0a                	jbe    c0110c75 <disk0_io+0x72>
        return -E_INVAL;
c0110c6b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110c70:	e9 5f 01 00 00       	jmp    c0110dd4 <disk0_io+0x1d1>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c0110c75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110c79:	75 0a                	jne    c0110c85 <disk0_io+0x82>
        return 0;
c0110c7b:	b8 00 00 00 00       	mov    $0x0,%eax
c0110c80:	e9 4f 01 00 00       	jmp    c0110dd4 <disk0_io+0x1d1>
    }

    lock_disk0();
c0110c85:	e8 33 fe ff ff       	call   c0110abd <lock_disk0>
    while (resid != 0) {
c0110c8a:	e9 31 01 00 00       	jmp    c0110dc0 <disk0_io+0x1bd>
        size_t copied, alen = DISK0_BUFSIZE;
c0110c8f:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c0110c96:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0110c9a:	0f 84 89 00 00 00    	je     c0110d29 <disk0_io+0x126>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c0110ca0:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110ca5:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110ca8:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110cac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0110cb3:	00 
c0110cb4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110cb7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110cbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110cc2:	89 04 24             	mov    %eax,(%esp)
c0110cc5:	e8 28 a6 ff ff       	call   c010b2f2 <iobuf_move>
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c0110cca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ccd:	85 c0                	test   %eax,%eax
c0110ccf:	74 14                	je     c0110ce5 <disk0_io+0xe2>
c0110cd1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110cd4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110cd7:	77 0c                	ja     c0110ce5 <disk0_io+0xe2>
c0110cd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110cdc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110ce1:	85 c0                	test   %eax,%eax
c0110ce3:	74 24                	je     c0110d09 <disk0_io+0x106>
c0110ce5:	c7 44 24 0c 70 8e 11 	movl   $0xc0118e70,0xc(%esp)
c0110cec:	c0 
c0110ced:	c7 44 24 08 ae 8e 11 	movl   $0xc0118eae,0x8(%esp)
c0110cf4:	c0 
c0110cf5:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0110cfc:	00 
c0110cfd:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110d04:	e8 bf 01 ff ff       	call   c0100ec8 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c0110d09:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d0c:	c1 e8 0c             	shr    $0xc,%eax
c0110d0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c0110d12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d1c:	89 04 24             	mov    %eax,(%esp)
c0110d1f:	e8 5a fe ff ff       	call   c0110b7e <disk0_write_blks_nolock>
c0110d24:	e9 8b 00 00 00       	jmp    c0110db4 <disk0_io+0x1b1>
        }
        else {
            if (alen > resid) {
c0110d29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110d2c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0110d2f:	76 06                	jbe    c0110d37 <disk0_io+0x134>
                alen = resid;
c0110d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d34:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110d37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110d3a:	c1 e8 0c             	shr    $0xc,%eax
c0110d3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c0110d40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110d43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d4a:	89 04 24             	mov    %eax,(%esp)
c0110d4d:	e8 a7 fd ff ff       	call   c0110af9 <disk0_read_blks_nolock>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c0110d52:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110d57:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0110d5a:	89 54 24 10          	mov    %edx,0x10(%esp)
c0110d5e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0110d65:	00 
c0110d66:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110d69:	89 54 24 08          	mov    %edx,0x8(%esp)
c0110d6d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110d71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d74:	89 04 24             	mov    %eax,(%esp)
c0110d77:	e8 76 a5 ff ff       	call   c010b2f2 <iobuf_move>
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c0110d7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d7f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110d82:	75 0c                	jne    c0110d90 <disk0_io+0x18d>
c0110d84:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110d8c:	85 c0                	test   %eax,%eax
c0110d8e:	74 24                	je     c0110db4 <disk0_io+0x1b1>
c0110d90:	c7 44 24 0c c4 8e 11 	movl   $0xc0118ec4,0xc(%esp)
c0110d97:	c0 
c0110d98:	c7 44 24 08 ae 8e 11 	movl   $0xc0118eae,0x8(%esp)
c0110d9f:	c0 
c0110da0:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0110da7:	00 
c0110da8:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110daf:	e8 14 01 ff ff       	call   c0100ec8 <__panic>
        }
        resid -= copied, blkno += nblks;
c0110db4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110db7:	29 45 f4             	sub    %eax,-0xc(%ebp)
c0110dba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110dbd:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110dc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110dc4:	0f 85 c5 fe ff ff    	jne    c0110c8f <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c0110dca:	e8 02 fd ff ff       	call   c0110ad1 <unlock_disk0>
    return 0;
c0110dcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110dd4:	c9                   	leave  
c0110dd5:	c3                   	ret    

c0110dd6 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110dd6:	55                   	push   %ebp
c0110dd7:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c0110dd9:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110dde:	5d                   	pop    %ebp
c0110ddf:	c3                   	ret    

c0110de0 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110de0:	55                   	push   %ebp
c0110de1:	89 e5                	mov    %esp,%ebp
c0110de3:	83 ec 18             	sub    $0x18,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110de6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110ded:	e8 30 0e ff ff       	call   c0101c22 <ide_device_valid>
c0110df2:	85 c0                	test   %eax,%eax
c0110df4:	75 1c                	jne    c0110e12 <disk0_device_init+0x32>
        panic("disk0 device isn't available.\n");
c0110df6:	c7 44 24 08 f4 8e 11 	movl   $0xc0118ef4,0x8(%esp)
c0110dfd:	c0 
c0110dfe:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
c0110e05:	00 
c0110e06:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110e0d:	e8 b6 00 ff ff       	call   c0100ec8 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c0110e12:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0110e19:	e8 43 0e ff ff       	call   c0101c61 <ide_device_size>
c0110e1e:	c1 e8 03             	shr    $0x3,%eax
c0110e21:	89 c2                	mov    %eax,%edx
c0110e23:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e26:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c0110e28:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e2b:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c0110e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e35:	c7 40 08 e5 0a 11 c0 	movl   $0xc0110ae5,0x8(%eax)
    dev->d_close = disk0_close;
c0110e3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e3f:	c7 40 0c ef 0a 11 c0 	movl   $0xc0110aef,0xc(%eax)
    dev->d_io = disk0_io;
c0110e46:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e49:	c7 40 10 03 0c 11 c0 	movl   $0xc0110c03,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c0110e50:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e53:	c7 40 14 d6 0d 11 c0 	movl   $0xc0110dd6,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110e5a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0110e61:	00 
c0110e62:	c7 04 24 e0 1f 15 c0 	movl   $0xc0151fe0,(%esp)
c0110e69:	e8 81 8c ff ff       	call   c0109aef <sem_init>

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110e6e:	c7 04 24 00 40 00 00 	movl   $0x4000,(%esp)
c0110e75:	e8 47 3e ff ff       	call   c0104cc1 <kmalloc>
c0110e7a:	a3 dc 1f 15 c0       	mov    %eax,0xc0151fdc
c0110e7f:	a1 dc 1f 15 c0       	mov    0xc0151fdc,%eax
c0110e84:	85 c0                	test   %eax,%eax
c0110e86:	75 1c                	jne    c0110ea4 <disk0_device_init+0xc4>
        panic("disk0 alloc buffer failed.\n");
c0110e88:	c7 44 24 08 13 8f 11 	movl   $0xc0118f13,0x8(%esp)
c0110e8f:	c0 
c0110e90:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
c0110e97:	00 
c0110e98:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110e9f:	e8 24 00 ff ff       	call   c0100ec8 <__panic>
    }
}
c0110ea4:	c9                   	leave  
c0110ea5:	c3                   	ret    

c0110ea6 <dev_init_disk0>:

void
dev_init_disk0(void) {
c0110ea6:	55                   	push   %ebp
c0110ea7:	89 e5                	mov    %esp,%ebp
c0110ea9:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110eac:	e8 d1 fb ff ff       	call   c0110a82 <dev_create_inode>
c0110eb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110eb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110eb8:	75 1c                	jne    c0110ed6 <dev_init_disk0+0x30>
        panic("disk0: dev_create_node.\n");
c0110eba:	c7 44 24 08 2f 8f 11 	movl   $0xc0118f2f,0x8(%esp)
c0110ec1:	c0 
c0110ec2:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
c0110ec9:	00 
c0110eca:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110ed1:	e8 f2 ff fe ff       	call   c0100ec8 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ed9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110edc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110ee0:	74 0d                	je     c0110eef <dev_init_disk0+0x49>
c0110ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ee5:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110ee8:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110eed:	74 24                	je     c0110f13 <dev_init_disk0+0x6d>
c0110eef:	c7 44 24 0c 48 8f 11 	movl   $0xc0118f48,0xc(%esp)
c0110ef6:	c0 
c0110ef7:	c7 44 24 08 ae 8e 11 	movl   $0xc0118eae,0x8(%esp)
c0110efe:	c0 
c0110eff:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
c0110f06:	00 
c0110f07:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110f0e:	e8 b5 ff fe ff       	call   c0100ec8 <__panic>
c0110f13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f16:	89 04 24             	mov    %eax,(%esp)
c0110f19:	e8 c2 fe ff ff       	call   c0110de0 <disk0_device_init>

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c0110f1e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0110f25:	00 
c0110f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0110f2d:	c7 04 24 7b 8f 11 c0 	movl   $0xc0118f7b,(%esp)
c0110f34:	e8 cb e9 ff ff       	call   c010f904 <vfs_add_dev>
c0110f39:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110f3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110f40:	74 23                	je     c0110f65 <dev_init_disk0+0xbf>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c0110f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110f45:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0110f49:	c7 44 24 08 81 8f 11 	movl   $0xc0118f81,0x8(%esp)
c0110f50:	c0 
c0110f51:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
c0110f58:	00 
c0110f59:	c7 04 24 08 8e 11 c0 	movl   $0xc0118e08,(%esp)
c0110f60:	e8 63 ff fe ff       	call   c0100ec8 <__panic>
    }
}
c0110f65:	c9                   	leave  
c0110f66:	c3                   	ret    

c0110f67 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0110f67:	55                   	push   %ebp
c0110f68:	89 e5                	mov    %esp,%ebp
c0110f6a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0110f6d:	9c                   	pushf  
c0110f6e:	58                   	pop    %eax
c0110f6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0110f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0110f75:	25 00 02 00 00       	and    $0x200,%eax
c0110f7a:	85 c0                	test   %eax,%eax
c0110f7c:	74 0c                	je     c0110f8a <__intr_save+0x23>
        intr_disable();
c0110f7e:	e8 a7 11 ff ff       	call   c010212a <intr_disable>
        return 1;
c0110f83:	b8 01 00 00 00       	mov    $0x1,%eax
c0110f88:	eb 05                	jmp    c0110f8f <__intr_save+0x28>
    }
    return 0;
c0110f8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110f8f:	c9                   	leave  
c0110f90:	c3                   	ret    

c0110f91 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0110f91:	55                   	push   %ebp
c0110f92:	89 e5                	mov    %esp,%ebp
c0110f94:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0110f97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0110f9b:	74 05                	je     c0110fa2 <__intr_restore+0x11>
        intr_enable();
c0110f9d:	e8 82 11 ff ff       	call   c0102124 <intr_enable>
    }
}
c0110fa2:	c9                   	leave  
c0110fa3:	c3                   	ret    

c0110fa4 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c0110fa4:	55                   	push   %ebp
c0110fa5:	89 e5                	mov    %esp,%ebp
c0110fa7:	83 ec 28             	sub    $0x28,%esp
c0110faa:	8b 45 08             	mov    0x8(%ebp),%eax
c0110fad:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c0110fb0:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c0110fb4:	0f 84 80 00 00 00    	je     c011103a <dev_stdin_write+0x96>
        local_intr_save(intr_flag);
c0110fba:	e8 a8 ff ff ff       	call   c0110f67 <__intr_save>
c0110fbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c0110fc2:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110fc7:	99                   	cltd   
c0110fc8:	c1 ea 14             	shr    $0x14,%edx
c0110fcb:	01 d0                	add    %edx,%eax
c0110fcd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0110fd2:	29 d0                	sub    %edx,%eax
c0110fd4:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
c0110fd8:	88 90 00 20 15 c0    	mov    %dl,-0x3feae000(%eax)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c0110fde:	8b 15 04 30 15 c0    	mov    0xc0153004,%edx
c0110fe4:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0110fe9:	29 c2                	sub    %eax,%edx
c0110feb:	89 d0                	mov    %edx,%eax
c0110fed:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0110ff2:	7f 0d                	jg     c0111001 <dev_stdin_write+0x5d>
                p_wpos ++;
c0110ff4:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0110ff9:	83 c0 01             	add    $0x1,%eax
c0110ffc:	a3 04 30 15 c0       	mov    %eax,0xc0153004
            }
            if (!wait_queue_empty(wait_queue)) {
c0111001:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0111006:	89 04 24             	mov    %eax,(%esp)
c0111009:	e8 db 8f ff ff       	call   c0109fe9 <wait_queue_empty>
c011100e:	85 c0                	test   %eax,%eax
c0111010:	75 1d                	jne    c011102f <dev_stdin_write+0x8b>
                wakeup_queue(wait_queue, WT_KBD, 1);
c0111012:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c0111017:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c011101e:	00 
c011101f:	c7 44 24 04 04 00 00 	movl   $0x80000004,0x4(%esp)
c0111026:	80 
c0111027:	89 04 24             	mov    %eax,(%esp)
c011102a:	e8 71 90 ff ff       	call   c010a0a0 <wakeup_queue>
            }
        }
        local_intr_restore(intr_flag);
c011102f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111032:	89 04 24             	mov    %eax,(%esp)
c0111035:	e8 57 ff ff ff       	call   c0110f91 <__intr_restore>
    }
}
c011103a:	c9                   	leave  
c011103b:	c3                   	ret    

c011103c <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c011103c:	55                   	push   %ebp
c011103d:	89 e5                	mov    %esp,%ebp
c011103f:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c0111042:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0111049:	e8 19 ff ff ff       	call   c0110f67 <__intr_save>
c011104e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111051:	e9 bb 00 00 00       	jmp    c0111111 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
c0111056:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c011105c:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c0111061:	39 c2                	cmp    %eax,%edx
c0111063:	7d 3d                	jge    c01110a2 <dev_stdin_read+0x66>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c0111065:	8b 45 08             	mov    0x8(%ebp),%eax
c0111068:	8d 50 01             	lea    0x1(%eax),%edx
c011106b:	89 55 08             	mov    %edx,0x8(%ebp)
c011106e:	8b 15 00 30 15 c0    	mov    0xc0153000,%edx
c0111074:	89 d1                	mov    %edx,%ecx
c0111076:	c1 f9 1f             	sar    $0x1f,%ecx
c0111079:	c1 e9 14             	shr    $0x14,%ecx
c011107c:	01 ca                	add    %ecx,%edx
c011107e:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c0111084:	29 ca                	sub    %ecx,%edx
c0111086:	0f b6 92 00 20 15 c0 	movzbl -0x3feae000(%edx),%edx
c011108d:	88 10                	mov    %dl,(%eax)
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c011108f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111093:	a1 00 30 15 c0       	mov    0xc0153000,%eax
c0111098:	83 c0 01             	add    $0x1,%eax
c011109b:	a3 00 30 15 c0       	mov    %eax,0xc0153000
c01110a0:	eb 6f                	jmp    c0111111 <dev_stdin_read+0xd5>
        try_again:
            if (p_rpos < p_wpos) {
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
            }
            else {
                wait_t __wait, *wait = &__wait;
c01110a2:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01110a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c01110a8:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01110ad:	c7 44 24 08 04 00 00 	movl   $0x80000004,0x8(%esp)
c01110b4:	80 
c01110b5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01110b8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01110bc:	89 04 24             	mov    %eax,(%esp)
c01110bf:	e8 71 90 ff ff       	call   c010a135 <wait_current_set>
                local_intr_restore(intr_flag);
c01110c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01110c7:	89 04 24             	mov    %eax,(%esp)
c01110ca:	e8 c2 fe ff ff       	call   c0110f91 <__intr_restore>

                schedule();
c01110cf:	e8 cc d4 ff ff       	call   c010e5a0 <schedule>

                local_intr_save(intr_flag);
c01110d4:	e8 8e fe ff ff       	call   c0110f67 <__intr_save>
c01110d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c01110dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110df:	89 04 24             	mov    %eax,(%esp)
c01110e2:	e8 1f 8f ff ff       	call   c010a006 <wait_in_queue>
c01110e7:	85 c0                	test   %eax,%eax
c01110e9:	74 14                	je     c01110ff <dev_stdin_read+0xc3>
c01110eb:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01110f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01110f3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01110f7:	89 04 24             	mov    %eax,(%esp)
c01110fa:	e8 02 8d ff ff       	call   c0109e01 <wait_queue_del>
                if (wait->wakeup_flags == WT_KBD) {
c01110ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111102:	8b 40 04             	mov    0x4(%eax),%eax
c0111105:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c011110a:	75 11                	jne    c011111d <dev_stdin_read+0xe1>
c011110c:	e9 45 ff ff ff       	jmp    c0111056 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c0111111:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111114:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111117:	0f 82 39 ff ff ff    	jb     c0111056 <dev_stdin_read+0x1a>
                }
                break;
            }
        }
    }
    local_intr_restore(intr_flag);
c011111d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111120:	89 04 24             	mov    %eax,(%esp)
c0111123:	e8 69 fe ff ff       	call   c0110f91 <__intr_restore>
    return ret;
c0111128:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011112b:	c9                   	leave  
c011112c:	c3                   	ret    

c011112d <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c011112d:	55                   	push   %ebp
c011112e:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c0111130:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111134:	74 07                	je     c011113d <stdin_open+0x10>
        return -E_INVAL;
c0111136:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011113b:	eb 05                	jmp    c0111142 <stdin_open+0x15>
    }
    return 0;
c011113d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111142:	5d                   	pop    %ebp
c0111143:	c3                   	ret    

c0111144 <stdin_close>:

static int
stdin_close(struct device *dev) {
c0111144:	55                   	push   %ebp
c0111145:	89 e5                	mov    %esp,%ebp
    return 0;
c0111147:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011114c:	5d                   	pop    %ebp
c011114d:	c3                   	ret    

c011114e <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c011114e:	55                   	push   %ebp
c011114f:	89 e5                	mov    %esp,%ebp
c0111151:	83 ec 28             	sub    $0x28,%esp
    if (!write) {
c0111154:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111158:	75 36                	jne    c0111190 <stdin_io+0x42>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c011115a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011115d:	8b 50 0c             	mov    0xc(%eax),%edx
c0111160:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111163:	8b 00                	mov    (%eax),%eax
c0111165:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111169:	89 04 24             	mov    %eax,(%esp)
c011116c:	e8 cb fe ff ff       	call   c011103c <dev_stdin_read>
c0111171:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111174:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111178:	7e 11                	jle    c011118b <stdin_io+0x3d>
            iob->io_resid -= ret;
c011117a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011117d:	8b 50 0c             	mov    0xc(%eax),%edx
c0111180:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111183:	29 c2                	sub    %eax,%edx
c0111185:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111188:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c011118b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011118e:	eb 05                	jmp    c0111195 <stdin_io+0x47>
    }
    return -E_INVAL;
c0111190:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111195:	c9                   	leave  
c0111196:	c3                   	ret    

c0111197 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c0111197:	55                   	push   %ebp
c0111198:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011119a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c011119f:	5d                   	pop    %ebp
c01111a0:	c3                   	ret    

c01111a1 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c01111a1:	55                   	push   %ebp
c01111a2:	89 e5                	mov    %esp,%ebp
c01111a4:	83 ec 18             	sub    $0x18,%esp
    dev->d_blocks = 0;
c01111a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01111aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c01111b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01111b3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c01111ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01111bd:	c7 40 08 2d 11 11 c0 	movl   $0xc011112d,0x8(%eax)
    dev->d_close = stdin_close;
c01111c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01111c7:	c7 40 0c 44 11 11 c0 	movl   $0xc0111144,0xc(%eax)
    dev->d_io = stdin_io;
c01111ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01111d1:	c7 40 10 4e 11 11 c0 	movl   $0xc011114e,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c01111d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01111db:	c7 40 14 97 11 11 c0 	movl   $0xc0111197,0x14(%eax)

    p_rpos = p_wpos = 0;
c01111e2:	c7 05 04 30 15 c0 00 	movl   $0x0,0xc0153004
c01111e9:	00 00 00 
c01111ec:	a1 04 30 15 c0       	mov    0xc0153004,%eax
c01111f1:	a3 00 30 15 c0       	mov    %eax,0xc0153000
    wait_queue_init(wait_queue);
c01111f6:	a1 c0 ee 14 c0       	mov    0xc014eec0,%eax
c01111fb:	89 04 24             	mov    %eax,(%esp)
c01111fe:	e8 3b 8b ff ff       	call   c0109d3e <wait_queue_init>
}
c0111203:	c9                   	leave  
c0111204:	c3                   	ret    

c0111205 <dev_init_stdin>:

void
dev_init_stdin(void) {
c0111205:	55                   	push   %ebp
c0111206:	89 e5                	mov    %esp,%ebp
c0111208:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011120b:	e8 72 f8 ff ff       	call   c0110a82 <dev_create_inode>
c0111210:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111213:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111217:	75 1c                	jne    c0111235 <dev_init_stdin+0x30>
        panic("stdin: dev_create_node.\n");
c0111219:	c7 44 24 08 9c 8f 11 	movl   $0xc0118f9c,0x8(%esp)
c0111220:	c0 
c0111221:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
c0111228:	00 
c0111229:	c7 04 24 b5 8f 11 c0 	movl   $0xc0118fb5,(%esp)
c0111230:	e8 93 fc fe ff       	call   c0100ec8 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c0111235:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111238:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011123b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011123f:	74 0d                	je     c011124e <dev_init_stdin+0x49>
c0111241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111244:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111247:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011124c:	74 24                	je     c0111272 <dev_init_stdin+0x6d>
c011124e:	c7 44 24 0c d0 8f 11 	movl   $0xc0118fd0,0xc(%esp)
c0111255:	c0 
c0111256:	c7 44 24 08 03 90 11 	movl   $0xc0119003,0x8(%esp)
c011125d:	c0 
c011125e:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0111265:	00 
c0111266:	c7 04 24 b5 8f 11 c0 	movl   $0xc0118fb5,(%esp)
c011126d:	e8 56 fc fe ff       	call   c0100ec8 <__panic>
c0111272:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111275:	89 04 24             	mov    %eax,(%esp)
c0111278:	e8 24 ff ff ff       	call   c01111a1 <stdin_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c011127d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111284:	00 
c0111285:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111288:	89 44 24 04          	mov    %eax,0x4(%esp)
c011128c:	c7 04 24 18 90 11 c0 	movl   $0xc0119018,(%esp)
c0111293:	e8 6c e6 ff ff       	call   c010f904 <vfs_add_dev>
c0111298:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011129b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011129f:	74 23                	je     c01112c4 <dev_init_stdin+0xbf>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c01112a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01112a4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01112a8:	c7 44 24 08 1e 90 11 	movl   $0xc011901e,0x8(%esp)
c01112af:	c0 
c01112b0:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
c01112b7:	00 
c01112b8:	c7 04 24 b5 8f 11 c0 	movl   $0xc0118fb5,(%esp)
c01112bf:	e8 04 fc fe ff       	call   c0100ec8 <__panic>
    }
}
c01112c4:	c9                   	leave  
c01112c5:	c3                   	ret    

c01112c6 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c01112c6:	55                   	push   %ebp
c01112c7:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01112c9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01112cd:	74 07                	je     c01112d6 <stdout_open+0x10>
        return -E_INVAL;
c01112cf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01112d4:	eb 05                	jmp    c01112db <stdout_open+0x15>
    }
    return 0;
c01112d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01112db:	5d                   	pop    %ebp
c01112dc:	c3                   	ret    

c01112dd <stdout_close>:

static int
stdout_close(struct device *dev) {
c01112dd:	55                   	push   %ebp
c01112de:	89 e5                	mov    %esp,%ebp
    return 0;
c01112e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01112e5:	5d                   	pop    %ebp
c01112e6:	c3                   	ret    

c01112e7 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c01112e7:	55                   	push   %ebp
c01112e8:	89 e5                	mov    %esp,%ebp
c01112ea:	83 ec 28             	sub    $0x28,%esp
    if (write) {
c01112ed:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01112f1:	74 41                	je     c0111334 <stdout_io+0x4d>
        char *data = iob->io_base;
c01112f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112f6:	8b 00                	mov    (%eax),%eax
c01112f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c01112fb:	eb 26                	jmp    c0111323 <stdout_io+0x3c>
            cputchar(*data ++);
c01112fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111300:	8d 50 01             	lea    0x1(%eax),%edx
c0111303:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0111306:	0f b6 00             	movzbl (%eax),%eax
c0111309:	0f be c0             	movsbl %al,%eax
c011130c:	89 04 24             	mov    %eax,(%esp)
c011130f:	e8 77 f0 fe ff       	call   c010038b <cputchar>

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c0111314:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111317:	8b 40 0c             	mov    0xc(%eax),%eax
c011131a:	8d 50 ff             	lea    -0x1(%eax),%edx
c011131d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111320:	89 50 0c             	mov    %edx,0xc(%eax)
c0111323:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111326:	8b 40 0c             	mov    0xc(%eax),%eax
c0111329:	85 c0                	test   %eax,%eax
c011132b:	75 d0                	jne    c01112fd <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011132d:	b8 00 00 00 00       	mov    $0x0,%eax
c0111332:	eb 05                	jmp    c0111339 <stdout_io+0x52>
    }
    return -E_INVAL;
c0111334:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111339:	c9                   	leave  
c011133a:	c3                   	ret    

c011133b <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c011133b:	55                   	push   %ebp
c011133c:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011133e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0111343:	5d                   	pop    %ebp
c0111344:	c3                   	ret    

c0111345 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0111345:	55                   	push   %ebp
c0111346:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0111348:	8b 45 08             	mov    0x8(%ebp),%eax
c011134b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0111351:	8b 45 08             	mov    0x8(%ebp),%eax
c0111354:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011135b:	8b 45 08             	mov    0x8(%ebp),%eax
c011135e:	c7 40 08 c6 12 11 c0 	movl   $0xc01112c6,0x8(%eax)
    dev->d_close = stdout_close;
c0111365:	8b 45 08             	mov    0x8(%ebp),%eax
c0111368:	c7 40 0c dd 12 11 c0 	movl   $0xc01112dd,0xc(%eax)
    dev->d_io = stdout_io;
c011136f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111372:	c7 40 10 e7 12 11 c0 	movl   $0xc01112e7,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c0111379:	8b 45 08             	mov    0x8(%ebp),%eax
c011137c:	c7 40 14 3b 13 11 c0 	movl   $0xc011133b,0x14(%eax)
}
c0111383:	5d                   	pop    %ebp
c0111384:	c3                   	ret    

c0111385 <dev_init_stdout>:

void
dev_init_stdout(void) {
c0111385:	55                   	push   %ebp
c0111386:	89 e5                	mov    %esp,%ebp
c0111388:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c011138b:	e8 f2 f6 ff ff       	call   c0110a82 <dev_create_inode>
c0111390:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111393:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111397:	75 1c                	jne    c01113b5 <dev_init_stdout+0x30>
        panic("stdout: dev_create_node.\n");
c0111399:	c7 44 24 08 38 90 11 	movl   $0xc0119038,0x8(%esp)
c01113a0:	c0 
c01113a1:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c01113a8:	00 
c01113a9:	c7 04 24 52 90 11 c0 	movl   $0xc0119052,(%esp)
c01113b0:	e8 13 fb fe ff       	call   c0100ec8 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c01113b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01113b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01113bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01113bf:	74 0d                	je     c01113ce <dev_init_stdout+0x49>
c01113c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113c4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01113c7:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01113cc:	74 24                	je     c01113f2 <dev_init_stdout+0x6d>
c01113ce:	c7 44 24 0c 6c 90 11 	movl   $0xc011906c,0xc(%esp)
c01113d5:	c0 
c01113d6:	c7 44 24 08 9f 90 11 	movl   $0xc011909f,0x8(%esp)
c01113dd:	c0 
c01113de:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
c01113e5:	00 
c01113e6:	c7 04 24 52 90 11 c0 	movl   $0xc0119052,(%esp)
c01113ed:	e8 d6 fa fe ff       	call   c0100ec8 <__panic>
c01113f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113f5:	89 04 24             	mov    %eax,(%esp)
c01113f8:	e8 48 ff ff ff       	call   c0111345 <stdout_device_init>

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c01113fd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111404:	00 
c0111405:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111408:	89 44 24 04          	mov    %eax,0x4(%esp)
c011140c:	c7 04 24 b4 90 11 c0 	movl   $0xc01190b4,(%esp)
c0111413:	e8 ec e4 ff ff       	call   c010f904 <vfs_add_dev>
c0111418:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011141b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011141f:	74 23                	je     c0111444 <dev_init_stdout+0xbf>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c0111421:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111424:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111428:	c7 44 24 08 bb 90 11 	movl   $0xc01190bb,0x8(%esp)
c011142f:	c0 
c0111430:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
c0111437:	00 
c0111438:	c7 04 24 52 90 11 c0 	movl   $0xc0119052,(%esp)
c011143f:	e8 84 fa fe ff       	call   c0100ec8 <__panic>
    }
}
c0111444:	c9                   	leave  
c0111445:	c3                   	ret    

c0111446 <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0111446:	55                   	push   %ebp
c0111447:	89 e5                	mov    %esp,%ebp
c0111449:	56                   	push   %esi
c011144a:	53                   	push   %ebx
c011144b:	83 ec 30             	sub    $0x30,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c011144e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0111452:	74 0b                	je     c011145f <bitmap_create+0x19>
c0111454:	8b 45 08             	mov    0x8(%ebp),%eax
c0111457:	83 c0 20             	add    $0x20,%eax
c011145a:	3b 45 08             	cmp    0x8(%ebp),%eax
c011145d:	77 24                	ja     c0111483 <bitmap_create+0x3d>
c011145f:	c7 44 24 0c d8 90 11 	movl   $0xc01190d8,0xc(%esp)
c0111466:	c0 
c0111467:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c011146e:	c0 
c011146f:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0111476:	00 
c0111477:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c011147e:	e8 45 fa fe ff       	call   c0100ec8 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0111483:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c011148a:	e8 32 38 ff ff       	call   c0104cc1 <kmalloc>
c011148f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111492:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111496:	75 0a                	jne    c01114a2 <bitmap_create+0x5c>
        return NULL;
c0111498:	b8 00 00 00 00       	mov    $0x0,%eax
c011149d:	e9 43 01 00 00       	jmp    c01115e5 <bitmap_create+0x19f>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c01114a2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c01114a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01114ac:	8b 55 08             	mov    0x8(%ebp),%edx
c01114af:	01 d0                	add    %edx,%eax
c01114b1:	83 e8 01             	sub    $0x1,%eax
c01114b4:	ba 00 00 00 00       	mov    $0x0,%edx
c01114b9:	f7 75 ec             	divl   -0x14(%ebp)
c01114bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c01114bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114c2:	c1 e0 02             	shl    $0x2,%eax
c01114c5:	89 04 24             	mov    %eax,(%esp)
c01114c8:	e8 f4 37 ff ff       	call   c0104cc1 <kmalloc>
c01114cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01114d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01114d4:	75 15                	jne    c01114eb <bitmap_create+0xa5>
        kfree(bitmap);
c01114d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114d9:	89 04 24             	mov    %eax,(%esp)
c01114dc:	e8 fb 37 ff ff       	call   c0104cdc <kfree>
        return NULL;
c01114e1:	b8 00 00 00 00       	mov    $0x0,%eax
c01114e6:	e9 fa 00 00 00       	jmp    c01115e5 <bitmap_create+0x19f>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c01114eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01114f1:	89 10                	mov    %edx,(%eax)
c01114f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01114f6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01114f9:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c01114fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114ff:	c1 e0 02             	shl    $0x2,%eax
c0111502:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111506:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
c011150d:	ff 
c011150e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111511:	89 04 24             	mov    %eax,(%esp)
c0111514:	e8 60 3f 00 00       	call   c0115479 <memset>
c0111519:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011151c:	89 42 08             	mov    %eax,0x8(%edx)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c011151f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111522:	c1 e0 05             	shl    $0x5,%eax
c0111525:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111528:	0f 84 b4 00 00 00    	je     c01115e2 <bitmap_create+0x19c>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c011152e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111531:	83 e8 01             	sub    $0x1,%eax
c0111534:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111537:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011153a:	c1 e0 05             	shl    $0x5,%eax
c011153d:	89 c2                	mov    %eax,%edx
c011153f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111542:	29 d0                	sub    %edx,%eax
c0111544:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111547:	8b 45 08             	mov    0x8(%ebp),%eax
c011154a:	c1 e8 05             	shr    $0x5,%eax
c011154d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111550:	74 24                	je     c0111576 <bitmap_create+0x130>
c0111552:	c7 44 24 0c 2a 91 11 	movl   $0xc011912a,0xc(%esp)
c0111559:	c0 
c011155a:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c0111561:	c0 
c0111562:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
c0111569:	00 
c011156a:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c0111571:	e8 52 f9 fe ff       	call   c0100ec8 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111576:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011157a:	74 06                	je     c0111582 <bitmap_create+0x13c>
c011157c:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111580:	76 24                	jbe    c01115a6 <bitmap_create+0x160>
c0111582:	c7 44 24 0c 44 91 11 	movl   $0xc0119144,0xc(%esp)
c0111589:	c0 
c011158a:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c0111591:	c0 
c0111592:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
c0111599:	00 
c011159a:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c01115a1:	e8 22 f9 fe ff       	call   c0100ec8 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
c01115a6:	eb 34                	jmp    c01115dc <bitmap_create+0x196>
            bitmap->map[ix] ^= (1 << overbits);
c01115a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115ab:	8b 40 08             	mov    0x8(%eax),%eax
c01115ae:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01115b1:	c1 e2 02             	shl    $0x2,%edx
c01115b4:	01 c2                	add    %eax,%edx
c01115b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01115b9:	8b 40 08             	mov    0x8(%eax),%eax
c01115bc:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01115bf:	c1 e1 02             	shl    $0x2,%ecx
c01115c2:	01 c8                	add    %ecx,%eax
c01115c4:	8b 18                	mov    (%eax),%ebx
c01115c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01115c9:	be 01 00 00 00       	mov    $0x1,%esi
c01115ce:	89 c1                	mov    %eax,%ecx
c01115d0:	d3 e6                	shl    %cl,%esi
c01115d2:	89 f0                	mov    %esi,%eax
c01115d4:	31 d8                	xor    %ebx,%eax
c01115d6:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c01115d8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01115dc:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01115e0:	76 c6                	jbe    c01115a8 <bitmap_create+0x162>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c01115e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01115e5:	83 c4 30             	add    $0x30,%esp
c01115e8:	5b                   	pop    %ebx
c01115e9:	5e                   	pop    %esi
c01115ea:	5d                   	pop    %ebp
c01115eb:	c3                   	ret    

c01115ec <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c01115ec:	55                   	push   %ebp
c01115ed:	89 e5                	mov    %esp,%ebp
c01115ef:	83 ec 38             	sub    $0x38,%esp
    WORD_TYPE *map = bitmap->map;
c01115f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01115f5:	8b 40 08             	mov    0x8(%eax),%eax
c01115f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c01115fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01115fe:	8b 40 04             	mov    0x4(%eax),%eax
c0111601:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0111604:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011160b:	e9 bb 00 00 00       	jmp    c01116cb <bitmap_alloc+0xdf>
        if (map[ix] != 0) {
c0111610:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111613:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011161a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011161d:	01 d0                	add    %edx,%eax
c011161f:	8b 00                	mov    (%eax),%eax
c0111621:	85 c0                	test   %eax,%eax
c0111623:	0f 84 9e 00 00 00    	je     c01116c7 <bitmap_alloc+0xdb>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111629:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111630:	eb 6b                	jmp    c011169d <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0111632:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111635:	ba 01 00 00 00       	mov    $0x1,%edx
c011163a:	89 c1                	mov    %eax,%ecx
c011163c:	d3 e2                	shl    %cl,%edx
c011163e:	89 d0                	mov    %edx,%eax
c0111640:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111643:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011164d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111650:	01 d0                	add    %edx,%eax
c0111652:	8b 00                	mov    (%eax),%eax
c0111654:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111657:	85 c0                	test   %eax,%eax
c0111659:	74 3e                	je     c0111699 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c011165b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011165e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111665:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111668:	01 c2                	add    %eax,%edx
c011166a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011166d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111674:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111677:	01 c8                	add    %ecx,%eax
c0111679:	8b 00                	mov    (%eax),%eax
c011167b:	33 45 e4             	xor    -0x1c(%ebp),%eax
c011167e:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111680:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111683:	c1 e0 05             	shl    $0x5,%eax
c0111686:	89 c2                	mov    %eax,%edx
c0111688:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011168b:	01 c2                	add    %eax,%edx
c011168d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111690:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111692:	b8 00 00 00 00       	mov    $0x0,%eax
c0111697:	eb 43                	jmp    c01116dc <bitmap_alloc+0xf0>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111699:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c011169d:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01116a1:	76 8f                	jbe    c0111632 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c01116a3:	c7 44 24 0c 69 91 11 	movl   $0xc0119169,0xc(%esp)
c01116aa:	c0 
c01116ab:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c01116b2:	c0 
c01116b3:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
c01116ba:	00 
c01116bb:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c01116c2:	e8 01 f8 fe ff       	call   c0100ec8 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c01116c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01116cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116ce:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01116d1:	0f 82 39 ff ff ff    	jb     c0111610 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c01116d7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01116dc:	c9                   	leave  
c01116dd:	c3                   	ret    

c01116de <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c01116de:	55                   	push   %ebp
c01116df:	89 e5                	mov    %esp,%ebp
c01116e1:	83 ec 28             	sub    $0x28,%esp
    assert(index < bitmap->nbits);
c01116e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01116e7:	8b 00                	mov    (%eax),%eax
c01116e9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01116ec:	77 24                	ja     c0111712 <bitmap_translate+0x34>
c01116ee:	c7 44 24 0c 6b 91 11 	movl   $0xc011916b,0xc(%esp)
c01116f5:	c0 
c01116f6:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c01116fd:	c0 
c01116fe:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0111705:	00 
c0111706:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c011170d:	e8 b6 f7 fe ff       	call   c0100ec8 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0111712:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111715:	c1 e8 05             	shr    $0x5,%eax
c0111718:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011171b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011171e:	83 e0 1f             	and    $0x1f,%eax
c0111721:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111724:	8b 45 08             	mov    0x8(%ebp),%eax
c0111727:	8b 40 08             	mov    0x8(%eax),%eax
c011172a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011172d:	c1 e2 02             	shl    $0x2,%edx
c0111730:	01 c2                	add    %eax,%edx
c0111732:	8b 45 10             	mov    0x10(%ebp),%eax
c0111735:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0111737:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011173a:	ba 01 00 00 00       	mov    $0x1,%edx
c011173f:	89 c1                	mov    %eax,%ecx
c0111741:	d3 e2                	shl    %cl,%edx
c0111743:	89 d0                	mov    %edx,%eax
c0111745:	89 c2                	mov    %eax,%edx
c0111747:	8b 45 14             	mov    0x14(%ebp),%eax
c011174a:	89 10                	mov    %edx,(%eax)
}
c011174c:	c9                   	leave  
c011174d:	c3                   	ret    

c011174e <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c011174e:	55                   	push   %ebp
c011174f:	89 e5                	mov    %esp,%ebp
c0111751:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111754:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111757:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011175b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011175e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111762:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111765:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111769:	8b 45 08             	mov    0x8(%ebp),%eax
c011176c:	89 04 24             	mov    %eax,(%esp)
c011176f:	e8 6a ff ff ff       	call   c01116de <bitmap_translate>
    return (*word & mask);
c0111774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111777:	8b 10                	mov    (%eax),%edx
c0111779:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011177c:	21 d0                	and    %edx,%eax
}
c011177e:	c9                   	leave  
c011177f:	c3                   	ret    

c0111780 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111780:	55                   	push   %ebp
c0111781:	89 e5                	mov    %esp,%ebp
c0111783:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111786:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111789:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011178d:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111790:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111794:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111797:	89 44 24 04          	mov    %eax,0x4(%esp)
c011179b:	8b 45 08             	mov    0x8(%ebp),%eax
c011179e:	89 04 24             	mov    %eax,(%esp)
c01117a1:	e8 38 ff ff ff       	call   c01116de <bitmap_translate>
    assert(!(*word & mask));
c01117a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117a9:	8b 10                	mov    (%eax),%edx
c01117ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117ae:	21 d0                	and    %edx,%eax
c01117b0:	85 c0                	test   %eax,%eax
c01117b2:	74 24                	je     c01117d8 <bitmap_free+0x58>
c01117b4:	c7 44 24 0c 81 91 11 	movl   $0xc0119181,0xc(%esp)
c01117bb:	c0 
c01117bc:	c7 44 24 08 00 91 11 	movl   $0xc0119100,0x8(%esp)
c01117c3:	c0 
c01117c4:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01117cb:	00 
c01117cc:	c7 04 24 15 91 11 c0 	movl   $0xc0119115,(%esp)
c01117d3:	e8 f0 f6 fe ff       	call   c0100ec8 <__panic>
    *word |= mask;
c01117d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117db:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01117de:	8b 0a                	mov    (%edx),%ecx
c01117e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01117e3:	09 ca                	or     %ecx,%edx
c01117e5:	89 10                	mov    %edx,(%eax)
}
c01117e7:	c9                   	leave  
c01117e8:	c3                   	ret    

c01117e9 <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c01117e9:	55                   	push   %ebp
c01117ea:	89 e5                	mov    %esp,%ebp
c01117ec:	83 ec 18             	sub    $0x18,%esp
    kfree(bitmap->map);
c01117ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01117f2:	8b 40 08             	mov    0x8(%eax),%eax
c01117f5:	89 04 24             	mov    %eax,(%esp)
c01117f8:	e8 df 34 ff ff       	call   c0104cdc <kfree>
    kfree(bitmap);
c01117fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0111800:	89 04 24             	mov    %eax,(%esp)
c0111803:	e8 d4 34 ff ff       	call   c0104cdc <kfree>
}
c0111808:	c9                   	leave  
c0111809:	c3                   	ret    

c011180a <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c011180a:	55                   	push   %ebp
c011180b:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c011180d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111811:	74 12                	je     c0111825 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111813:	8b 45 08             	mov    0x8(%ebp),%eax
c0111816:	8b 40 04             	mov    0x4(%eax),%eax
c0111819:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111820:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111823:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111825:	8b 45 08             	mov    0x8(%ebp),%eax
c0111828:	8b 40 08             	mov    0x8(%eax),%eax
}
c011182b:	5d                   	pop    %ebp
c011182c:	c3                   	ret    

c011182d <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c011182d:	55                   	push   %ebp
c011182e:	89 e5                	mov    %esp,%ebp
c0111830:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0111833:	c7 04 24 91 91 11 c0 	movl   $0xc0119191,(%esp)
c011183a:	e8 d6 08 00 00       	call   c0112115 <sfs_mount>
c011183f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111842:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111846:	74 23                	je     c011186b <sfs_init+0x3e>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c0111848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011184b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011184f:	c7 44 24 08 97 91 11 	movl   $0xc0119197,0x8(%esp)
c0111856:	c0 
c0111857:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c011185e:	00 
c011185f:	c7 04 24 b4 91 11 c0 	movl   $0xc01191b4,(%esp)
c0111866:	e8 5d f6 fe ff       	call   c0100ec8 <__panic>
    }
}
c011186b:	c9                   	leave  
c011186c:	c3                   	ret    

c011186d <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c011186d:	55                   	push   %ebp
c011186e:	89 e5                	mov    %esp,%ebp
c0111870:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111873:	8b 45 08             	mov    0x8(%ebp),%eax
c0111876:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111879:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011187d:	74 0a                	je     c0111889 <sfs_sync+0x1c>
c011187f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111882:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111885:	85 c0                	test   %eax,%eax
c0111887:	74 24                	je     c01118ad <sfs_sync+0x40>
c0111889:	c7 44 24 0c c8 91 11 	movl   $0xc01191c8,0xc(%esp)
c0111890:	c0 
c0111891:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111898:	c0 
c0111899:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c01118a0:	00 
c01118a1:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c01118a8:	e8 1b f6 fe ff       	call   c0100ec8 <__panic>
c01118ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01118b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c01118b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01118b6:	89 04 24             	mov    %eax,(%esp)
c01118b9:	e8 09 30 00 00       	call   c01148c7 <lock_sfs_fs>
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c01118be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01118c1:	83 c0 60             	add    $0x60,%eax
c01118c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01118c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01118cd:	eb 74                	jmp    c0111943 <sfs_sync+0xd6>
            struct sfs_inode *sin = le2sin(le, inode_link);
c01118cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01118d2:	83 e8 1c             	sub    $0x1c,%eax
c01118d5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c01118d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01118db:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01118de:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01118e2:	74 17                	je     c01118fb <sfs_sync+0x8e>
c01118e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118e7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118ea:	85 c0                	test   %eax,%eax
c01118ec:	74 0d                	je     c01118fb <sfs_sync+0x8e>
c01118ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01118f1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01118f4:	8b 40 18             	mov    0x18(%eax),%eax
c01118f7:	85 c0                	test   %eax,%eax
c01118f9:	75 24                	jne    c011191f <sfs_sync+0xb2>
c01118fb:	c7 44 24 0c 1c 92 11 	movl   $0xc011921c,0xc(%esp)
c0111902:	c0 
c0111903:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c011190a:	c0 
c011190b:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c0111912:	00 
c0111913:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c011191a:	e8 a9 f5 fe ff       	call   c0100ec8 <__panic>
c011191f:	c7 44 24 04 6a 92 11 	movl   $0xc011926a,0x4(%esp)
c0111926:	c0 
c0111927:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011192a:	89 04 24             	mov    %eax,(%esp)
c011192d:	e8 db d8 ff ff       	call   c010f20d <inode_check>
c0111932:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111935:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111938:	8b 40 18             	mov    0x18(%eax),%eax
c011193b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011193e:	89 14 24             	mov    %edx,(%esp)
c0111941:	ff d0                	call   *%eax
c0111943:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111946:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111949:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011194c:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c011194f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111952:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111955:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111958:	0f 85 71 ff ff ff    	jne    c01118cf <sfs_sync+0x62>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c011195e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111961:	89 04 24             	mov    %eax,(%esp)
c0111964:	e8 8a 2f 00 00       	call   c01148f3 <unlock_sfs_fs>

    int ret;
    if (sfs->super_dirty) {
c0111969:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011196c:	8b 40 34             	mov    0x34(%eax),%eax
c011196f:	85 c0                	test   %eax,%eax
c0111971:	74 50                	je     c01119c3 <sfs_sync+0x156>
        sfs->super_dirty = 0;
c0111973:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111976:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c011197d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111980:	89 04 24             	mov    %eax,(%esp)
c0111983:	e8 d1 2d 00 00       	call   c0114759 <sfs_sync_super>
c0111988:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011198b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011198f:	74 0f                	je     c01119a0 <sfs_sync+0x133>
            sfs->super_dirty = 1;
c0111991:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111994:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011199b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011199e:	eb 28                	jmp    c01119c8 <sfs_sync+0x15b>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c01119a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01119a3:	89 04 24             	mov    %eax,(%esp)
c01119a6:	e8 3a 2e 00 00       	call   c01147e5 <sfs_sync_freemap>
c01119ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01119ae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01119b2:	74 0f                	je     c01119c3 <sfs_sync+0x156>
            sfs->super_dirty = 1;
c01119b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01119b7:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c01119be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01119c1:	eb 05                	jmp    c01119c8 <sfs_sync+0x15b>
        }
    }
    return 0;
c01119c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01119c8:	c9                   	leave  
c01119c9:	c3                   	ret    

c01119ca <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c01119ca:	55                   	push   %ebp
c01119cb:	89 e5                	mov    %esp,%ebp
c01119cd:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c01119d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01119d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01119d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01119da:	74 0a                	je     c01119e6 <sfs_get_root+0x1c>
c01119dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119df:	8b 40 6c             	mov    0x6c(%eax),%eax
c01119e2:	85 c0                	test   %eax,%eax
c01119e4:	74 24                	je     c0111a0a <sfs_get_root+0x40>
c01119e6:	c7 44 24 0c c8 91 11 	movl   $0xc01191c8,0xc(%esp)
c01119ed:	c0 
c01119ee:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c01119f5:	c0 
c01119f6:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
c01119fd:	00 
c01119fe:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111a05:	e8 be f4 fe ff       	call   c0100ec8 <__panic>
c0111a0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a0d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0111a14:	00 
c0111a15:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0111a18:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111a1c:	89 04 24             	mov    %eax,(%esp)
c0111a1f:	e8 e1 0b 00 00       	call   c0112605 <sfs_load_inode>
c0111a24:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111a27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111a2b:	74 23                	je     c0111a50 <sfs_get_root+0x86>
        panic("load sfs root failed: %e", ret);
c0111a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a30:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111a34:	c7 44 24 08 70 92 11 	movl   $0xc0119270,0x8(%esp)
c0111a3b:	c0 
c0111a3c:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
c0111a43:	00 
c0111a44:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111a4b:	e8 78 f4 fe ff       	call   c0100ec8 <__panic>
    }
    return node;
c0111a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c0111a53:	c9                   	leave  
c0111a54:	c3                   	ret    

c0111a55 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111a55:	55                   	push   %ebp
c0111a56:	89 e5                	mov    %esp,%ebp
c0111a58:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111a61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a65:	74 0a                	je     c0111a71 <sfs_unmount+0x1c>
c0111a67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a6a:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111a6d:	85 c0                	test   %eax,%eax
c0111a6f:	74 24                	je     c0111a95 <sfs_unmount+0x40>
c0111a71:	c7 44 24 0c c8 91 11 	movl   $0xc01191c8,0xc(%esp)
c0111a78:	c0 
c0111a79:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111a80:	c0 
c0111a81:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0111a88:	00 
c0111a89:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111a90:	e8 33 f4 fe ff       	call   c0100ec8 <__panic>
c0111a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a98:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a9e:	83 c0 60             	add    $0x60,%eax
c0111aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111aa7:	8b 40 04             	mov    0x4(%eax),%eax
c0111aaa:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0111aad:	0f 94 c0             	sete   %al
c0111ab0:	0f b6 c0             	movzbl %al,%eax
c0111ab3:	85 c0                	test   %eax,%eax
c0111ab5:	75 07                	jne    c0111abe <sfs_unmount+0x69>
        return -E_BUSY;
c0111ab7:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111abc:	eb 68                	jmp    c0111b26 <sfs_unmount+0xd1>
    }
    assert(!sfs->super_dirty);
c0111abe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ac1:	8b 40 34             	mov    0x34(%eax),%eax
c0111ac4:	85 c0                	test   %eax,%eax
c0111ac6:	74 24                	je     c0111aec <sfs_unmount+0x97>
c0111ac8:	c7 44 24 0c 89 92 11 	movl   $0xc0119289,0xc(%esp)
c0111acf:	c0 
c0111ad0:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111ad7:	c0 
c0111ad8:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
c0111adf:	00 
c0111ae0:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111ae7:	e8 dc f3 fe ff       	call   c0100ec8 <__panic>
    bitmap_destroy(sfs->freemap);
c0111aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aef:	8b 40 30             	mov    0x30(%eax),%eax
c0111af2:	89 04 24             	mov    %eax,(%esp)
c0111af5:	e8 ef fc ff ff       	call   c01117e9 <bitmap_destroy>
    kfree(sfs->sfs_buffer);
c0111afa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111afd:	8b 40 38             	mov    0x38(%eax),%eax
c0111b00:	89 04 24             	mov    %eax,(%esp)
c0111b03:	e8 d4 31 ff ff       	call   c0104cdc <kfree>
    kfree(sfs->hash_list);
c0111b08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b0b:	8b 40 68             	mov    0x68(%eax),%eax
c0111b0e:	89 04 24             	mov    %eax,(%esp)
c0111b11:	e8 c6 31 ff ff       	call   c0104cdc <kfree>
    kfree(sfs);
c0111b16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b19:	89 04 24             	mov    %eax,(%esp)
c0111b1c:	e8 bb 31 ff ff       	call   c0104cdc <kfree>
    return 0;
c0111b21:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111b26:	c9                   	leave  
c0111b27:	c3                   	ret    

c0111b28 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0111b28:	55                   	push   %ebp
c0111b29:	89 e5                	mov    %esp,%ebp
c0111b2b:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111b2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111b31:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111b34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111b38:	74 0a                	je     c0111b44 <sfs_cleanup+0x1c>
c0111b3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b3d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111b40:	85 c0                	test   %eax,%eax
c0111b42:	74 24                	je     c0111b68 <sfs_cleanup+0x40>
c0111b44:	c7 44 24 0c c8 91 11 	movl   $0xc01191c8,0xc(%esp)
c0111b4b:	c0 
c0111b4c:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111b53:	c0 
c0111b54:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0111b5b:	00 
c0111b5c:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111b63:	e8 60 f3 fe ff       	call   c0100ec8 <__panic>
c0111b68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0111b6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b71:	8b 40 04             	mov    0x4(%eax),%eax
c0111b74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111b77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b7a:	8b 40 08             	mov    0x8(%eax),%eax
c0111b7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111b80:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b83:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111b86:	89 d1                	mov    %edx,%ecx
c0111b88:	29 c1                	sub    %eax,%ecx
c0111b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111b8d:	8d 50 0c             	lea    0xc(%eax),%edx
c0111b90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111b93:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111b97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111b9a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111b9e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0111ba2:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111ba6:	c7 04 24 9c 92 11 c0 	movl   $0xc011929c,(%esp)
c0111bad:	e8 b3 e7 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111bb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111bb9:	eb 1d                	jmp    c0111bd8 <sfs_cleanup+0xb0>
        if ((ret = fsop_sync(fs)) == 0) {
c0111bbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0111bbe:	8b 40 70             	mov    0x70(%eax),%eax
c0111bc1:	8b 55 08             	mov    0x8(%ebp),%edx
c0111bc4:	89 14 24             	mov    %edx,(%esp)
c0111bc7:	ff d0                	call   *%eax
c0111bc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111bcc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111bd0:	75 02                	jne    c0111bd4 <sfs_cleanup+0xac>
            break;
c0111bd2:	eb 0a                	jmp    c0111bde <sfs_cleanup+0xb6>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111bd4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111bd8:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111bdc:	7e dd                	jle    c0111bbb <sfs_cleanup+0x93>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
        }
    }
    if (ret != 0) {
c0111bde:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111be2:	74 2d                	je     c0111c11 <sfs_cleanup+0xe9>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0111be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111be7:	8d 50 0c             	lea    0xc(%eax),%edx
c0111bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bed:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111bf1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0111bf5:	c7 44 24 08 bb 92 11 	movl   $0xc01192bb,0x8(%esp)
c0111bfc:	c0 
c0111bfd:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0111c04:	00 
c0111c05:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111c0c:	e8 23 f3 fe ff       	call   c0100f34 <__warn>
    }
}
c0111c11:	c9                   	leave  
c0111c12:	c3                   	ret    

c0111c13 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0111c13:	55                   	push   %ebp
c0111c14:	89 e5                	mov    %esp,%ebp
c0111c16:	83 ec 38             	sub    $0x38,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111c19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c1c:	c1 e0 0c             	shl    $0xc,%eax
c0111c1f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111c23:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0111c2a:	00 
c0111c2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0111c2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c32:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111c35:	89 04 24             	mov    %eax,(%esp)
c0111c38:	e8 87 96 ff ff       	call   c010b2c4 <iobuf_init>
c0111c3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0111c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c43:	8b 40 10             	mov    0x10(%eax),%eax
c0111c46:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0111c4d:	00 
c0111c4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111c51:	89 54 24 04          	mov    %edx,0x4(%esp)
c0111c55:	8b 55 08             	mov    0x8(%ebp),%edx
c0111c58:	89 14 24             	mov    %edx,(%esp)
c0111c5b:	ff d0                	call   *%eax
}
c0111c5d:	c9                   	leave  
c0111c5e:	c3                   	ret    

c0111c5f <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0111c5f:	55                   	push   %ebp
c0111c60:	89 e5                	mov    %esp,%ebp
c0111c62:	83 ec 28             	sub    $0x28,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0111c65:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0111c68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111c6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c6f:	89 04 24             	mov    %eax,(%esp)
c0111c72:	e8 93 fb ff ff       	call   c011180a <bitmap_getdata>
c0111c77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0111c7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111c7e:	74 0f                	je     c0111c8f <sfs_init_freemap+0x30>
c0111c80:	8b 45 14             	mov    0x14(%ebp),%eax
c0111c83:	c1 e0 0c             	shl    $0xc,%eax
c0111c86:	89 c2                	mov    %eax,%edx
c0111c88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111c8b:	39 c2                	cmp    %eax,%edx
c0111c8d:	74 24                	je     c0111cb3 <sfs_init_freemap+0x54>
c0111c8f:	c7 44 24 0c d8 92 11 	movl   $0xc01192d8,0xc(%esp)
c0111c96:	c0 
c0111c97:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111c9e:	c0 
c0111c9f:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
c0111ca6:	00 
c0111ca7:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111cae:	e8 15 f2 fe ff       	call   c0100ec8 <__panic>
    while (nblks != 0) {
c0111cb3:	eb 36                	jmp    c0111ceb <sfs_init_freemap+0x8c>
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111cb8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111cbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0111cbf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111cc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cc6:	89 04 24             	mov    %eax,(%esp)
c0111cc9:	e8 45 ff ff ff       	call   c0111c13 <sfs_init_read>
c0111cce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111cd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111cd5:	74 05                	je     c0111cdc <sfs_init_freemap+0x7d>
            return ret;
c0111cd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111cda:	eb 1a                	jmp    c0111cf6 <sfs_init_freemap+0x97>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111cdc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111ce0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0111ce4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111ceb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111cef:	75 c4                	jne    c0111cb5 <sfs_init_freemap+0x56>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0111cf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111cf6:	c9                   	leave  
c0111cf7:	c3                   	ret    

c0111cf8 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111cf8:	55                   	push   %ebp
c0111cf9:	89 e5                	mov    %esp,%ebp
c0111cfb:	83 ec 78             	sub    $0x78,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111cfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d01:	8b 40 04             	mov    0x4(%eax),%eax
c0111d04:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111d09:	74 0a                	je     c0111d15 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111d0b:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111d10:	e9 fe 03 00 00       	jmp    c0112113 <sfs_do_mount+0x41b>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0111d15:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0111d1c:	e8 df d5 ff ff       	call   c010f300 <__alloc_fs>
c0111d21:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111d24:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111d28:	75 0a                	jne    c0111d34 <sfs_do_mount+0x3c>
        return -E_NO_MEM;
c0111d2a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111d2f:	e9 df 03 00 00       	jmp    c0112113 <sfs_do_mount+0x41b>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111d34:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111d37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111d3a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111d3e:	74 0a                	je     c0111d4a <sfs_do_mount+0x52>
c0111d40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d43:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111d46:	85 c0                	test   %eax,%eax
c0111d48:	74 24                	je     c0111d6e <sfs_do_mount+0x76>
c0111d4a:	c7 44 24 0c c8 91 11 	movl   $0xc01191c8,0xc(%esp)
c0111d51:	c0 
c0111d52:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0111d59:	c0 
c0111d5a:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c0111d61:	00 
c0111d62:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0111d69:	e8 5a f1 fe ff       	call   c0100ec8 <__panic>
c0111d6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111d71:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0111d74:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d77:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d7a:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0111d7d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0111d84:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0111d8b:	e8 31 2f ff ff       	call   c0104cc1 <kmalloc>
c0111d90:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111d93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d96:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0111d99:	89 50 38             	mov    %edx,0x38(%eax)
c0111d9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111d9f:	8b 40 38             	mov    0x38(%eax),%eax
c0111da2:	85 c0                	test   %eax,%eax
c0111da4:	75 05                	jne    c0111dab <sfs_do_mount+0xb3>
        goto failed_cleanup_fs;
c0111da6:	e9 5a 03 00 00       	jmp    c0112105 <sfs_do_mount+0x40d>
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0111dab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111dae:	89 44 24 08          	mov    %eax,0x8(%esp)
c0111db2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0111db9:	00 
c0111dba:	8b 45 08             	mov    0x8(%ebp),%eax
c0111dbd:	89 04 24             	mov    %eax,(%esp)
c0111dc0:	e8 4e fe ff ff       	call   c0111c13 <sfs_init_read>
c0111dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111dc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111dcc:	74 05                	je     c0111dd3 <sfs_do_mount+0xdb>
        goto failed_cleanup_sfs_buffer;
c0111dce:	e9 27 03 00 00       	jmp    c01120fa <sfs_do_mount+0x402>
    }

    ret = -E_INVAL;
c0111dd3:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111dda:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111ddd:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0111de0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111de3:	8b 00                	mov    (%eax),%eax
c0111de5:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111dea:	74 22                	je     c0111e0e <sfs_do_mount+0x116>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111dec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111def:	8b 00                	mov    (%eax),%eax
c0111df1:	c7 44 24 08 2a be 8d 	movl   $0x2f8dbe2a,0x8(%esp)
c0111df8:	2f 
c0111df9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111dfd:	c7 04 24 04 93 11 c0 	movl   $0xc0119304,(%esp)
c0111e04:	e8 5c e5 fe ff       	call   c0100365 <cprintf>
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111e09:	e9 ec 02 00 00       	jmp    c01120fa <sfs_do_mount+0x402>
    }
    if (super->blocks > dev->d_blocks) {
c0111e0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111e11:	8b 50 04             	mov    0x4(%eax),%edx
c0111e14:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e17:	8b 00                	mov    (%eax),%eax
c0111e19:	39 c2                	cmp    %eax,%edx
c0111e1b:	76 24                	jbe    c0111e41 <sfs_do_mount+0x149>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e20:	8b 10                	mov    (%eax),%edx
c0111e22:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111e25:	8b 40 04             	mov    0x4(%eax),%eax
c0111e28:	89 54 24 08          	mov    %edx,0x8(%esp)
c0111e2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111e30:	c7 04 24 3c 93 11 c0 	movl   $0xc011933c,(%esp)
c0111e37:	e8 29 e5 fe ff       	call   c0100365 <cprintf>
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0111e3c:	e9 b9 02 00 00       	jmp    c01120fa <sfs_do_mount+0x402>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0111e41:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111e44:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0111e48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111e4b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111e4e:	8b 0a                	mov    (%edx),%ecx
c0111e50:	89 08                	mov    %ecx,(%eax)
c0111e52:	8b 4a 04             	mov    0x4(%edx),%ecx
c0111e55:	89 48 04             	mov    %ecx,0x4(%eax)
c0111e58:	8b 4a 08             	mov    0x8(%edx),%ecx
c0111e5b:	89 48 08             	mov    %ecx,0x8(%eax)
c0111e5e:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0111e61:	89 48 0c             	mov    %ecx,0xc(%eax)
c0111e64:	8b 4a 10             	mov    0x10(%edx),%ecx
c0111e67:	89 48 10             	mov    %ecx,0x10(%eax)
c0111e6a:	8b 4a 14             	mov    0x14(%edx),%ecx
c0111e6d:	89 48 14             	mov    %ecx,0x14(%eax)
c0111e70:	8b 4a 18             	mov    0x18(%edx),%ecx
c0111e73:	89 48 18             	mov    %ecx,0x18(%eax)
c0111e76:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0111e79:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0111e7c:	8b 4a 20             	mov    0x20(%edx),%ecx
c0111e7f:	89 48 20             	mov    %ecx,0x20(%eax)
c0111e82:	8b 4a 24             	mov    0x24(%edx),%ecx
c0111e85:	89 48 24             	mov    %ecx,0x24(%eax)
c0111e88:	8b 52 28             	mov    0x28(%edx),%edx
c0111e8b:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0111e8e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0111e95:	c7 04 24 00 20 00 00 	movl   $0x2000,(%esp)
c0111e9c:	e8 20 2e ff ff       	call   c0104cc1 <kmalloc>
c0111ea1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0111ea4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ea7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111eaa:	89 50 68             	mov    %edx,0x68(%eax)
c0111ead:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111eb0:	8b 40 68             	mov    0x68(%eax),%eax
c0111eb3:	85 c0                	test   %eax,%eax
c0111eb5:	75 05                	jne    c0111ebc <sfs_do_mount+0x1c4>
        goto failed_cleanup_sfs_buffer;
c0111eb7:	e9 3e 02 00 00       	jmp    c01120fa <sfs_do_mount+0x402>
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111ebc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111ec3:	eb 2a                	jmp    c0111eef <sfs_do_mount+0x1f7>
        list_init(hash_list + i);
c0111ec5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111ec8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111ecf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0111ed2:	01 d0                	add    %edx,%eax
c0111ed4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111ed7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111eda:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0111edd:	89 50 04             	mov    %edx,0x4(%eax)
c0111ee0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111ee3:	8b 50 04             	mov    0x4(%eax),%edx
c0111ee6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0111ee9:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111eeb:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111eef:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0111ef6:	76 cd                	jbe    c0111ec5 <sfs_do_mount+0x1cd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111ef8:	c7 45 d0 00 80 00 00 	movl   $0x8000,-0x30(%ebp)
c0111eff:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f02:	8b 50 04             	mov    0x4(%eax),%edx
c0111f05:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0111f08:	01 d0                	add    %edx,%eax
c0111f0a:	83 e8 01             	sub    $0x1,%eax
c0111f0d:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0111f10:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111f13:	ba 00 00 00 00       	mov    $0x0,%edx
c0111f18:	f7 75 d0             	divl   -0x30(%ebp)
c0111f1b:	89 d0                	mov    %edx,%eax
c0111f1d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0111f20:	29 c2                	sub    %eax,%edx
c0111f22:	89 d0                	mov    %edx,%eax
c0111f24:	89 45 c8             	mov    %eax,-0x38(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0111f27:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111f2a:	89 04 24             	mov    %eax,(%esp)
c0111f2d:	e8 14 f5 ff ff       	call   c0111446 <bitmap_create>
c0111f32:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0111f35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f38:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111f3b:	89 50 30             	mov    %edx,0x30(%eax)
c0111f3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111f41:	8b 40 30             	mov    0x30(%eax),%eax
c0111f44:	85 c0                	test   %eax,%eax
c0111f46:	75 05                	jne    c0111f4d <sfs_do_mount+0x255>
        goto failed_cleanup_hash_list;
c0111f48:	e9 a2 01 00 00       	jmp    c01120ef <sfs_do_mount+0x3f7>
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0111f4d:	c7 45 c0 00 80 00 00 	movl   $0x8000,-0x40(%ebp)
c0111f54:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f57:	8b 50 04             	mov    0x4(%eax),%edx
c0111f5a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0111f5d:	01 d0                	add    %edx,%eax
c0111f5f:	83 e8 01             	sub    $0x1,%eax
c0111f62:	ba 00 00 00 00       	mov    $0x0,%edx
c0111f67:	f7 75 c0             	divl   -0x40(%ebp)
c0111f6a:	89 45 bc             	mov    %eax,-0x44(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0111f6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111f70:	89 44 24 10          	mov    %eax,0x10(%esp)
c0111f74:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0111f77:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0111f7b:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0111f82:	00 
c0111f83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111f86:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f8d:	89 04 24             	mov    %eax,(%esp)
c0111f90:	e8 ca fc ff ff       	call   c0111c5f <sfs_init_freemap>
c0111f95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f9c:	74 11                	je     c0111faf <sfs_do_mount+0x2b7>
        goto failed_cleanup_freemap;
c0111f9e:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0111f9f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111fa2:	89 04 24             	mov    %eax,(%esp)
c0111fa5:	e8 3f f8 ff ff       	call   c01117e9 <bitmap_destroy>
c0111faa:	e9 40 01 00 00       	jmp    c01120ef <sfs_do_mount+0x3f7>
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0111faf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111fb2:	8b 40 04             	mov    0x4(%eax),%eax
c0111fb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0111fb8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111fbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111fc6:	eb 1e                	jmp    c0111fe6 <sfs_do_mount+0x2ee>
        if (bitmap_test(freemap, i)) {
c0111fc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fcb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0111fcf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0111fd2:	89 04 24             	mov    %eax,(%esp)
c0111fd5:	e8 74 f7 ff ff       	call   c011174e <bitmap_test>
c0111fda:	85 c0                	test   %eax,%eax
c0111fdc:	74 04                	je     c0111fe2 <sfs_do_mount+0x2ea>
            unused_blocks ++;
c0111fde:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0111fe2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111fe6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111fe9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0111fec:	72 da                	jb     c0111fc8 <sfs_do_mount+0x2d0>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0111fee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111ff1:	8b 40 08             	mov    0x8(%eax),%eax
c0111ff4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111ff7:	74 24                	je     c011201d <sfs_do_mount+0x325>
c0111ff9:	c7 44 24 0c 6c 93 11 	movl   $0xc011936c,0xc(%esp)
c0112000:	c0 
c0112001:	c7 44 24 08 f1 91 11 	movl   $0xc01191f1,0x8(%esp)
c0112008:	c0 
c0112009:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c0112010:	00 
c0112011:	c7 04 24 06 92 11 c0 	movl   $0xc0119206,(%esp)
c0112018:	e8 ab ee fe ff       	call   c0100ec8 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c011201d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112020:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0112027:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011202a:	83 c0 3c             	add    $0x3c,%eax
c011202d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112034:	00 
c0112035:	89 04 24             	mov    %eax,(%esp)
c0112038:	e8 b2 7a ff ff       	call   c0109aef <sem_init>
    sem_init(&(sfs->io_sem), 1);
c011203d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112040:	83 c0 48             	add    $0x48,%eax
c0112043:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c011204a:	00 
c011204b:	89 04 24             	mov    %eax,(%esp)
c011204e:	e8 9c 7a ff ff       	call   c0109aef <sem_init>
    sem_init(&(sfs->mutex_sem), 1);
c0112053:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112056:	83 c0 54             	add    $0x54,%eax
c0112059:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112060:	00 
c0112061:	89 04 24             	mov    %eax,(%esp)
c0112064:	e8 86 7a ff ff       	call   c0109aef <sem_init>
    list_init(&(sfs->inode_list));
c0112069:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011206c:	83 c0 60             	add    $0x60,%eax
c011206f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0112072:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112075:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0112078:	89 50 04             	mov    %edx,0x4(%eax)
c011207b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011207e:	8b 50 04             	mov    0x4(%eax),%edx
c0112081:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0112084:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0112086:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112089:	8b 55 b8             	mov    -0x48(%ebp),%edx
c011208c:	89 d1                	mov    %edx,%ecx
c011208e:	29 c1                	sub    %eax,%ecx
c0112090:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112093:	8d 50 0c             	lea    0xc(%eax),%edx
c0112096:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0112099:	89 44 24 10          	mov    %eax,0x10(%esp)
c011209d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01120a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01120a4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01120a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01120ac:	c7 04 24 96 93 11 c0 	movl   $0xc0119396,(%esp)
c01120b3:	e8 ad e2 fe ff       	call   c0100365 <cprintf>
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c01120b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120bb:	c7 40 70 6d 18 11 c0 	movl   $0xc011186d,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01120c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120c5:	c7 40 74 ca 19 11 c0 	movl   $0xc01119ca,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01120cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120cf:	c7 40 78 55 1a 11 c0 	movl   $0xc0111a55,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01120d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01120d9:	c7 40 7c 28 1b 11 c0 	movl   $0xc0111b28,0x7c(%eax)
    *fs_store = fs;
c01120e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01120e3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01120e6:	89 10                	mov    %edx,(%eax)
    return 0;
c01120e8:	b8 00 00 00 00       	mov    $0x0,%eax
c01120ed:	eb 24                	jmp    c0112113 <sfs_do_mount+0x41b>

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c01120ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01120f2:	89 04 24             	mov    %eax,(%esp)
c01120f5:	e8 e2 2b ff ff       	call   c0104cdc <kfree>
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c01120fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01120fd:	89 04 24             	mov    %eax,(%esp)
c0112100:	e8 d7 2b ff ff       	call   c0104cdc <kfree>
failed_cleanup_fs:
    kfree(fs);
c0112105:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112108:	89 04 24             	mov    %eax,(%esp)
c011210b:	e8 cc 2b ff ff       	call   c0104cdc <kfree>
    return ret;
c0112110:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112113:	c9                   	leave  
c0112114:	c3                   	ret    

c0112115 <sfs_mount>:

int
sfs_mount(const char *devname) {
c0112115:	55                   	push   %ebp
c0112116:	89 e5                	mov    %esp,%ebp
c0112118:	83 ec 18             	sub    $0x18,%esp
    return vfs_mount(devname, sfs_do_mount);
c011211b:	c7 44 24 04 f8 1c 11 	movl   $0xc0111cf8,0x4(%esp)
c0112122:	c0 
c0112123:	8b 45 08             	mov    0x8(%ebp),%eax
c0112126:	89 04 24             	mov    %eax,(%esp)
c0112129:	e8 96 d8 ff ff       	call   c010f9c4 <vfs_mount>
}
c011212e:	c9                   	leave  
c011212f:	c3                   	ret    

c0112130 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c0112130:	55                   	push   %ebp
c0112131:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0112133:	8b 45 08             	mov    0x8(%ebp),%eax
c0112136:	8b 40 30             	mov    0x30(%eax),%eax
}
c0112139:	5d                   	pop    %ebp
c011213a:	c3                   	ret    

c011213b <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c011213b:	55                   	push   %ebp
c011213c:	89 e5                	mov    %esp,%ebp
c011213e:	83 ec 18             	sub    $0x18,%esp
    down(&(sin->sem));
c0112141:	8b 45 08             	mov    0x8(%ebp),%eax
c0112144:	83 c0 10             	add    $0x10,%eax
c0112147:	89 04 24             	mov    %eax,(%esp)
c011214a:	e8 2e 7b ff ff       	call   c0109c7d <down>
}
c011214f:	c9                   	leave  
c0112150:	c3                   	ret    

c0112151 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c0112151:	55                   	push   %ebp
c0112152:	89 e5                	mov    %esp,%ebp
c0112154:	83 ec 18             	sub    $0x18,%esp
    up(&(sin->sem));
c0112157:	8b 45 08             	mov    0x8(%ebp),%eax
c011215a:	83 c0 10             	add    $0x10,%eax
c011215d:	89 04 24             	mov    %eax,(%esp)
c0112160:	e8 fd 7a ff ff       	call   c0109c62 <up>
}
c0112165:	c9                   	leave  
c0112166:	c3                   	ret    

c0112167 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0112167:	55                   	push   %ebp
c0112168:	89 e5                	mov    %esp,%ebp
c011216a:	83 ec 28             	sub    $0x28,%esp
c011216d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112170:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0112174:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112178:	83 f8 01             	cmp    $0x1,%eax
c011217b:	74 0c                	je     c0112189 <sfs_get_ops+0x22>
c011217d:	83 f8 02             	cmp    $0x2,%eax
c0112180:	75 0e                	jne    c0112190 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0112182:	b8 c0 93 11 c0       	mov    $0xc01193c0,%eax
c0112187:	eb 2b                	jmp    c01121b4 <sfs_get_ops+0x4d>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0112189:	b8 00 94 11 c0       	mov    $0xc0119400,%eax
c011218e:	eb 24                	jmp    c01121b4 <sfs_get_ops+0x4d>
    }
    panic("invalid file type %d.\n", type);
c0112190:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0112194:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112198:	c7 44 24 08 40 94 11 	movl   $0xc0119440,0x8(%esp)
c011219f:	c0 
c01121a0:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
c01121a7:	00 
c01121a8:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01121af:	e8 14 ed fe ff       	call   c0100ec8 <__panic>
}
c01121b4:	c9                   	leave  
c01121b5:	c3                   	ret    

c01121b6 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c01121b6:	55                   	push   %ebp
c01121b7:	89 e5                	mov    %esp,%ebp
c01121b9:	53                   	push   %ebx
c01121ba:	83 ec 14             	sub    $0x14,%esp
    return sfs->hash_list + sin_hashfn(ino);
c01121bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01121c0:	8b 58 68             	mov    0x68(%eax),%ebx
c01121c3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c01121ca:	00 
c01121cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121ce:	89 04 24             	mov    %eax,(%esp)
c01121d1:	e8 49 27 00 00       	call   c011491f <hash32>
c01121d6:	c1 e0 03             	shl    $0x3,%eax
c01121d9:	01 d8                	add    %ebx,%eax
}
c01121db:	83 c4 14             	add    $0x14,%esp
c01121de:	5b                   	pop    %ebx
c01121df:	5d                   	pop    %ebp
c01121e0:	c3                   	ret    

c01121e1 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01121e1:	55                   	push   %ebp
c01121e2:	89 e5                	mov    %esp,%ebp
c01121e4:	53                   	push   %ebx
c01121e5:	83 ec 54             	sub    $0x54,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01121e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121eb:	83 c0 1c             	add    $0x1c,%eax
c01121ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01121f1:	83 c2 60             	add    $0x60,%edx
c01121f4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01121f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01121fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01121fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112200:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112203:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0112206:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112209:	8b 40 04             	mov    0x4(%eax),%eax
c011220c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011220f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0112212:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112215:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0112218:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011221b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011221e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112221:	89 10                	mov    %edx,(%eax)
c0112223:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112226:	8b 10                	mov    (%eax),%edx
c0112228:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011222b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c011222e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112231:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0112234:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0112237:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011223a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011223d:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c011223f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112242:	8d 58 24             	lea    0x24(%eax),%ebx
c0112245:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112248:	8b 40 04             	mov    0x4(%eax),%eax
c011224b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011224f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112252:	89 04 24             	mov    %eax,(%esp)
c0112255:	e8 5c ff ff ff       	call   c01121b6 <sfs_hash_list>
c011225a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011225d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c0112260:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112263:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0112266:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112269:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c011226c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011226f:	8b 40 04             	mov    0x4(%eax),%eax
c0112272:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0112275:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0112278:	8b 55 d0             	mov    -0x30(%ebp),%edx
c011227b:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c011227e:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0112281:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0112284:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0112287:	89 10                	mov    %edx,(%eax)
c0112289:	8b 45 c0             	mov    -0x40(%ebp),%eax
c011228c:	8b 10                	mov    (%eax),%edx
c011228e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0112291:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0112294:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112297:	8b 55 c0             	mov    -0x40(%ebp),%edx
c011229a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c011229d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01122a0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01122a3:	89 10                	mov    %edx,(%eax)
}
c01122a5:	83 c4 54             	add    $0x54,%esp
c01122a8:	5b                   	pop    %ebx
c01122a9:	5d                   	pop    %ebp
c01122aa:	c3                   	ret    

c01122ab <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c01122ab:	55                   	push   %ebp
c01122ac:	89 e5                	mov    %esp,%ebp
c01122ae:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c01122b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01122b4:	83 c0 1c             	add    $0x1c,%eax
c01122b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01122ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01122bd:	8b 40 04             	mov    0x4(%eax),%eax
c01122c0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01122c3:	8b 12                	mov    (%edx),%edx
c01122c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01122c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01122cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01122ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01122d1:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01122d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122d7:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01122da:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c01122dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01122df:	83 c0 24             	add    $0x24,%eax
c01122e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01122e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01122e8:	8b 40 04             	mov    0x4(%eax),%eax
c01122eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01122ee:	8b 12                	mov    (%edx),%edx
c01122f0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01122f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01122f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01122f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01122fc:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01122ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112302:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112305:	89 10                	mov    %edx,(%eax)
}
c0112307:	c9                   	leave  
c0112308:	c3                   	ret    

c0112309 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c0112309:	55                   	push   %ebp
c011230a:	89 e5                	mov    %esp,%ebp
c011230c:	83 ec 28             	sub    $0x28,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c011230f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0112313:	74 2a                	je     c011233f <sfs_block_inuse+0x36>
c0112315:	8b 45 08             	mov    0x8(%ebp),%eax
c0112318:	8b 40 04             	mov    0x4(%eax),%eax
c011231b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011231e:	76 1f                	jbe    c011233f <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c0112320:	8b 45 08             	mov    0x8(%ebp),%eax
c0112323:	8b 40 30             	mov    0x30(%eax),%eax
c0112326:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112329:	89 54 24 04          	mov    %edx,0x4(%esp)
c011232d:	89 04 24             	mov    %eax,(%esp)
c0112330:	e8 19 f4 ff ff       	call   c011174e <bitmap_test>
c0112335:	85 c0                	test   %eax,%eax
c0112337:	0f 94 c0             	sete   %al
c011233a:	0f b6 c0             	movzbl %al,%eax
c011233d:	eb 2d                	jmp    c011236c <sfs_block_inuse+0x63>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c011233f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112342:	8b 40 04             	mov    0x4(%eax),%eax
c0112345:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112348:	89 54 24 10          	mov    %edx,0x10(%esp)
c011234c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112350:	c7 44 24 08 70 94 11 	movl   $0xc0119470,0x8(%esp)
c0112357:	c0 
c0112358:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
c011235f:	00 
c0112360:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112367:	e8 5c eb fe ff       	call   c0100ec8 <__panic>
}
c011236c:	c9                   	leave  
c011236d:	c3                   	ret    

c011236e <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011236e:	55                   	push   %ebp
c011236f:	89 e5                	mov    %esp,%ebp
c0112371:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0112374:	8b 45 08             	mov    0x8(%ebp),%eax
c0112377:	8b 40 30             	mov    0x30(%eax),%eax
c011237a:	8b 55 0c             	mov    0xc(%ebp),%edx
c011237d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112381:	89 04 24             	mov    %eax,(%esp)
c0112384:	e8 63 f2 ff ff       	call   c01115ec <bitmap_alloc>
c0112389:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011238c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112390:	74 08                	je     c011239a <sfs_block_alloc+0x2c>
        return ret;
c0112392:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112395:	e9 9f 00 00 00       	jmp    c0112439 <sfs_block_alloc+0xcb>
    }
    assert(sfs->super.unused_blocks > 0);
c011239a:	8b 45 08             	mov    0x8(%ebp),%eax
c011239d:	8b 40 08             	mov    0x8(%eax),%eax
c01123a0:	85 c0                	test   %eax,%eax
c01123a2:	75 24                	jne    c01123c8 <sfs_block_alloc+0x5a>
c01123a4:	c7 44 24 0c a2 94 11 	movl   $0xc01194a2,0xc(%esp)
c01123ab:	c0 
c01123ac:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01123b3:	c0 
c01123b4:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c01123bb:	00 
c01123bc:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01123c3:	e8 00 eb fe ff       	call   c0100ec8 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c01123c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01123cb:	8b 40 08             	mov    0x8(%eax),%eax
c01123ce:	8d 50 ff             	lea    -0x1(%eax),%edx
c01123d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01123d4:	89 50 08             	mov    %edx,0x8(%eax)
c01123d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01123da:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c01123e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123e4:	8b 00                	mov    (%eax),%eax
c01123e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01123ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01123ed:	89 04 24             	mov    %eax,(%esp)
c01123f0:	e8 14 ff ff ff       	call   c0112309 <sfs_block_inuse>
c01123f5:	85 c0                	test   %eax,%eax
c01123f7:	75 24                	jne    c011241d <sfs_block_alloc+0xaf>
c01123f9:	c7 44 24 0c d4 94 11 	movl   $0xc01194d4,0xc(%esp)
c0112400:	c0 
c0112401:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112408:	c0 
c0112409:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0112410:	00 
c0112411:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112418:	e8 ab ea fe ff       	call   c0100ec8 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c011241d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112420:	8b 00                	mov    (%eax),%eax
c0112422:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0112429:	00 
c011242a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011242e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112431:	89 04 24             	mov    %eax,(%esp)
c0112434:	e8 08 24 00 00       	call   c0114841 <sfs_clear_block>
}
c0112439:	c9                   	leave  
c011243a:	c3                   	ret    

c011243b <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c011243b:	55                   	push   %ebp
c011243c:	89 e5                	mov    %esp,%ebp
c011243e:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ino));
c0112441:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112444:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112448:	8b 45 08             	mov    0x8(%ebp),%eax
c011244b:	89 04 24             	mov    %eax,(%esp)
c011244e:	e8 b6 fe ff ff       	call   c0112309 <sfs_block_inuse>
c0112453:	85 c0                	test   %eax,%eax
c0112455:	75 24                	jne    c011247b <sfs_block_free+0x40>
c0112457:	c7 44 24 0c f5 94 11 	movl   $0xc01194f5,0xc(%esp)
c011245e:	c0 
c011245f:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112466:	c0 
c0112467:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c011246e:	00 
c011246f:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112476:	e8 4d ea fe ff       	call   c0100ec8 <__panic>
    bitmap_free(sfs->freemap, ino);
c011247b:	8b 45 08             	mov    0x8(%ebp),%eax
c011247e:	8b 40 30             	mov    0x30(%eax),%eax
c0112481:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112484:	89 54 24 04          	mov    %edx,0x4(%esp)
c0112488:	89 04 24             	mov    %eax,(%esp)
c011248b:	e8 f0 f2 ff ff       	call   c0111780 <bitmap_free>
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c0112490:	8b 45 08             	mov    0x8(%ebp),%eax
c0112493:	8b 40 08             	mov    0x8(%eax),%eax
c0112496:	8d 50 01             	lea    0x1(%eax),%edx
c0112499:	8b 45 08             	mov    0x8(%ebp),%eax
c011249c:	89 50 08             	mov    %edx,0x8(%eax)
c011249f:	8b 45 08             	mov    0x8(%ebp),%eax
c01124a2:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c01124a9:	c9                   	leave  
c01124aa:	c3                   	ret    

c01124ab <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c01124ab:	55                   	push   %ebp
c01124ac:	89 e5                	mov    %esp,%ebp
c01124ae:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c01124b1:	c7 04 24 35 12 00 00 	movl   $0x1235,(%esp)
c01124b8:	e8 6d ca ff ff       	call   c010ef2a <__alloc_inode>
c01124bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01124c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01124c4:	0f 84 b5 00 00 00    	je     c011257f <sfs_create_inode+0xd4>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c01124ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124cd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01124d1:	0f b7 c0             	movzwl %ax,%eax
c01124d4:	89 04 24             	mov    %eax,(%esp)
c01124d7:	e8 8b fc ff ff       	call   c0112167 <sfs_get_ops>
c01124dc:	8b 55 08             	mov    0x8(%ebp),%edx
c01124df:	89 54 24 08          	mov    %edx,0x8(%esp)
c01124e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01124e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124ea:	89 04 24             	mov    %eax,(%esp)
c01124ed:	e8 61 ca ff ff       	call   c010ef53 <inode_init>
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c01124f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01124f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01124fc:	74 0d                	je     c011250b <sfs_create_inode+0x60>
c01124fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112501:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112504:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112509:	74 24                	je     c011252f <sfs_create_inode+0x84>
c011250b:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0112512:	c0 
c0112513:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011251a:	c0 
c011251b:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
c0112522:	00 
c0112523:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011252a:	e8 99 e9 fe ff       	call   c0100ec8 <__panic>
c011252f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112532:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c0112535:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112538:	8b 55 0c             	mov    0xc(%ebp),%edx
c011253b:	89 10                	mov    %edx,(%eax)
c011253d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112540:	8b 55 10             	mov    0x10(%ebp),%edx
c0112543:	89 50 04             	mov    %edx,0x4(%eax)
c0112546:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112549:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0112550:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112553:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c011255a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011255d:	83 c0 10             	add    $0x10,%eax
c0112560:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0112567:	00 
c0112568:	89 04 24             	mov    %eax,(%esp)
c011256b:	e8 7f 75 ff ff       	call   c0109aef <sem_init>
        *node_store = node;
c0112570:	8b 45 14             	mov    0x14(%ebp),%eax
c0112573:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0112576:	89 10                	mov    %edx,(%eax)
        return 0;
c0112578:	b8 00 00 00 00       	mov    $0x0,%eax
c011257d:	eb 05                	jmp    c0112584 <sfs_create_inode+0xd9>
    }
    return -E_NO_MEM;
c011257f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0112584:	c9                   	leave  
c0112585:	c3                   	ret    

c0112586 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0112586:	55                   	push   %ebp
c0112587:	89 e5                	mov    %esp,%ebp
c0112589:	83 ec 38             	sub    $0x38,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011258c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011258f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112593:	8b 45 08             	mov    0x8(%ebp),%eax
c0112596:	89 04 24             	mov    %eax,(%esp)
c0112599:	e8 18 fc ff ff       	call   c01121b6 <sfs_hash_list>
c011259e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c01125a7:	eb 3e                	jmp    c01125e7 <lookup_sfs_nolock+0x61>
        struct sfs_inode *sin = le2sin(le, hash_link);
c01125a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125ac:	83 e8 24             	sub    $0x24,%eax
c01125af:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c01125b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125b5:	8b 40 04             	mov    0x4(%eax),%eax
c01125b8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01125bb:	75 2a                	jne    c01125e7 <lookup_sfs_nolock+0x61>
            node = info2node(sin, sfs_inode);
c01125bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c01125c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125c6:	89 04 24             	mov    %eax,(%esp)
c01125c9:	e8 37 ca ff ff       	call   c010f005 <inode_ref_inc>
c01125ce:	83 f8 01             	cmp    $0x1,%eax
c01125d1:	75 0f                	jne    c01125e2 <lookup_sfs_nolock+0x5c>
                sin->reclaim_count ++;
c01125d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125d6:	8b 40 0c             	mov    0xc(%eax),%eax
c01125d9:	8d 50 01             	lea    0x1(%eax),%edx
c01125dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125df:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c01125e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125e5:	eb 1c                	jmp    c0112603 <lookup_sfs_nolock+0x7d>
c01125e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01125ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01125f0:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c01125f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01125f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01125fc:	75 ab                	jne    c01125a9 <lookup_sfs_nolock+0x23>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c01125fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112603:	c9                   	leave  
c0112604:	c3                   	ret    

c0112605 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0112605:	55                   	push   %ebp
c0112606:	89 e5                	mov    %esp,%ebp
c0112608:	83 ec 38             	sub    $0x38,%esp
    lock_sfs_fs(sfs);
c011260b:	8b 45 08             	mov    0x8(%ebp),%eax
c011260e:	89 04 24             	mov    %eax,(%esp)
c0112611:	e8 b1 22 00 00       	call   c01148c7 <lock_sfs_fs>
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c0112616:	8b 45 10             	mov    0x10(%ebp),%eax
c0112619:	89 44 24 04          	mov    %eax,0x4(%esp)
c011261d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112620:	89 04 24             	mov    %eax,(%esp)
c0112623:	e8 5e ff ff ff       	call   c0112586 <lookup_sfs_nolock>
c0112628:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011262b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011262e:	85 c0                	test   %eax,%eax
c0112630:	74 05                	je     c0112637 <sfs_load_inode+0x32>
        goto out_unlock;
c0112632:	e9 3c 01 00 00       	jmp    c0112773 <sfs_load_inode+0x16e>
    }

    int ret = -E_NO_MEM;
c0112637:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c011263e:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
c0112645:	e8 77 26 ff ff       	call   c0104cc1 <kmalloc>
c011264a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011264d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112651:	75 05                	jne    c0112658 <sfs_load_inode+0x53>
        goto failed_unlock;
c0112653:	e9 40 01 00 00       	jmp    c0112798 <sfs_load_inode+0x193>
    }

    assert(sfs_block_inuse(sfs, ino));
c0112658:	8b 45 10             	mov    0x10(%ebp),%eax
c011265b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011265f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112662:	89 04 24             	mov    %eax,(%esp)
c0112665:	e8 9f fc ff ff       	call   c0112309 <sfs_block_inuse>
c011266a:	85 c0                	test   %eax,%eax
c011266c:	75 24                	jne    c0112692 <sfs_load_inode+0x8d>
c011266e:	c7 44 24 0c f5 94 11 	movl   $0xc01194f5,0xc(%esp)
c0112675:	c0 
c0112676:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011267d:	c0 
c011267e:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
c0112685:	00 
c0112686:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011268d:	e8 36 e8 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0112692:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112699:	00 
c011269a:	8b 45 10             	mov    0x10(%ebp),%eax
c011269d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01126a1:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01126a8:	00 
c01126a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c01126b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01126b3:	89 04 24             	mov    %eax,(%esp)
c01126b6:	e8 fd 1e 00 00       	call   c01145b8 <sfs_rbuf>
c01126bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01126be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01126c2:	74 05                	je     c01126c9 <sfs_load_inode+0xc4>
        goto failed_cleanup_din;
c01126c4:	e9 c4 00 00 00       	jmp    c011278d <sfs_load_inode+0x188>
    }

    assert(din->nlinks != 0);
c01126c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01126cc:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01126d0:	66 85 c0             	test   %ax,%ax
c01126d3:	75 24                	jne    c01126f9 <sfs_load_inode+0xf4>
c01126d5:	c7 44 24 0c 46 95 11 	movl   $0xc0119546,0xc(%esp)
c01126dc:	c0 
c01126dd:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01126e4:	c0 
c01126e5:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c01126ec:	00 
c01126ed:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01126f4:	e8 cf e7 fe ff       	call   c0100ec8 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c01126f9:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01126fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112700:	8b 45 10             	mov    0x10(%ebp),%eax
c0112703:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011270a:	89 44 24 04          	mov    %eax,0x4(%esp)
c011270e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112711:	89 04 24             	mov    %eax,(%esp)
c0112714:	e8 92 fd ff ff       	call   c01124ab <sfs_create_inode>
c0112719:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011271c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112720:	74 02                	je     c0112724 <sfs_load_inode+0x11f>
        goto failed_cleanup_din;
c0112722:	eb 69                	jmp    c011278d <sfs_load_inode+0x188>
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0112724:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112727:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011272a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011272e:	74 0d                	je     c011273d <sfs_load_inode+0x138>
c0112730:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112733:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112736:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011273b:	74 24                	je     c0112761 <sfs_load_inode+0x15c>
c011273d:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0112744:	c0 
c0112745:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011274c:	c0 
c011274d:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0112754:	00 
c0112755:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011275c:	e8 67 e7 fe ff       	call   c0100ec8 <__panic>
c0112761:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112764:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112768:	8b 45 08             	mov    0x8(%ebp),%eax
c011276b:	89 04 24             	mov    %eax,(%esp)
c011276e:	e8 6e fa ff ff       	call   c01121e1 <sfs_set_links>

out_unlock:
    unlock_sfs_fs(sfs);
c0112773:	8b 45 08             	mov    0x8(%ebp),%eax
c0112776:	89 04 24             	mov    %eax,(%esp)
c0112779:	e8 75 21 00 00       	call   c01148f3 <unlock_sfs_fs>
    *node_store = node;
c011277e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112781:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112784:	89 10                	mov    %edx,(%eax)
    return 0;
c0112786:	b8 00 00 00 00       	mov    $0x0,%eax
c011278b:	eb 19                	jmp    c01127a6 <sfs_load_inode+0x1a1>

failed_cleanup_din:
    kfree(din);
c011278d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112790:	89 04 24             	mov    %eax,(%esp)
c0112793:	e8 44 25 ff ff       	call   c0104cdc <kfree>
failed_unlock:
    unlock_sfs_fs(sfs);
c0112798:	8b 45 08             	mov    0x8(%ebp),%eax
c011279b:	89 04 24             	mov    %eax,(%esp)
c011279e:	e8 50 21 00 00       	call   c01148f3 <unlock_sfs_fs>
    return ret;
c01127a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01127a6:	c9                   	leave  
c01127a7:	c3                   	ret    

c01127a8 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c01127a8:	55                   	push   %ebp
c01127a9:	89 e5                	mov    %esp,%ebp
c01127ab:	83 ec 38             	sub    $0x38,%esp
    assert(index < SFS_BLK_NENTRY);
c01127ae:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01127b5:	76 24                	jbe    c01127db <sfs_bmap_get_sub_nolock+0x33>
c01127b7:	c7 44 24 0c 57 95 11 	movl   $0xc0119557,0xc(%esp)
c01127be:	c0 
c01127bf:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01127c6:	c0 
c01127c7:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c01127ce:	00 
c01127cf:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01127d6:	e8 ed e6 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c01127db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c01127e2:	8b 45 10             	mov    0x10(%ebp),%eax
c01127e5:	c1 e0 02             	shl    $0x2,%eax
c01127e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c01127eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01127ee:	8b 00                	mov    (%eax),%eax
c01127f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01127f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127f6:	85 c0                	test   %eax,%eax
c01127f8:	74 50                	je     c011284a <sfs_bmap_get_sub_nolock+0xa2>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01127fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112800:	89 54 24 10          	mov    %edx,0x10(%esp)
c0112804:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112808:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c011280f:	00 
c0112810:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112813:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112817:	8b 45 08             	mov    0x8(%ebp),%eax
c011281a:	89 04 24             	mov    %eax,(%esp)
c011281d:	e8 96 1d 00 00       	call   c01145b8 <sfs_rbuf>
c0112822:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112825:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112829:	74 08                	je     c0112833 <sfs_bmap_get_sub_nolock+0x8b>
            return ret;
c011282b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011282e:	e9 eb 00 00 00       	jmp    c011291e <sfs_bmap_get_sub_nolock+0x176>
        }
        if (ino != 0 || !create) {
c0112833:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112836:	85 c0                	test   %eax,%eax
c0112838:	0f 85 9c 00 00 00    	jne    c01128da <sfs_bmap_get_sub_nolock+0x132>
c011283e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112842:	0f 84 92 00 00 00    	je     c01128da <sfs_bmap_get_sub_nolock+0x132>
c0112848:	eb 2e                	jmp    c0112878 <sfs_bmap_get_sub_nolock+0xd0>
            goto out;
        }
    }
    else {
        if (!create) {
c011284a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011284e:	75 05                	jne    c0112855 <sfs_bmap_get_sub_nolock+0xad>
            goto out;
c0112850:	e9 85 00 00 00       	jmp    c01128da <sfs_bmap_get_sub_nolock+0x132>
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0112855:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112858:	89 44 24 04          	mov    %eax,0x4(%esp)
c011285c:	8b 45 08             	mov    0x8(%ebp),%eax
c011285f:	89 04 24             	mov    %eax,(%esp)
c0112862:	e8 07 fb ff ff       	call   c011236e <sfs_block_alloc>
c0112867:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011286a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011286e:	74 08                	je     c0112878 <sfs_bmap_get_sub_nolock+0xd0>
            return ret;
c0112870:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112873:	e9 a6 00 00 00       	jmp    c011291e <sfs_bmap_get_sub_nolock+0x176>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c0112878:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011287b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011287f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112882:	89 04 24             	mov    %eax,(%esp)
c0112885:	e8 e4 fa ff ff       	call   c011236e <sfs_block_alloc>
c011288a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011288d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112891:	74 02                	je     c0112895 <sfs_bmap_get_sub_nolock+0xed>
        goto failed_cleanup;
c0112893:	eb 68                	jmp    c01128fd <sfs_bmap_get_sub_nolock+0x155>
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112895:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112898:	8b 55 f0             	mov    -0x10(%ebp),%edx
c011289b:	89 54 24 10          	mov    %edx,0x10(%esp)
c011289f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01128a3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c01128aa:	00 
c01128ab:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01128ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01128b5:	89 04 24             	mov    %eax,(%esp)
c01128b8:	e8 b4 1d 00 00       	call   c0114671 <sfs_wbuf>
c01128bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01128c4:	74 14                	je     c01128da <sfs_bmap_get_sub_nolock+0x132>
        sfs_block_free(sfs, ino);
c01128c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01128c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01128cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01128d0:	89 04 24             	mov    %eax,(%esp)
c01128d3:	e8 63 fb ff ff       	call   c011243b <sfs_block_free>
        goto failed_cleanup;
c01128d8:	eb 23                	jmp    c01128fd <sfs_bmap_get_sub_nolock+0x155>
    }

out:
    if (ent != *entp) {
c01128da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128dd:	8b 10                	mov    (%eax),%edx
c01128df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01128e2:	39 c2                	cmp    %eax,%edx
c01128e4:	74 08                	je     c01128ee <sfs_bmap_get_sub_nolock+0x146>
        *entp = ent;
c01128e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01128e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01128ec:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c01128ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01128f1:	8b 45 18             	mov    0x18(%ebp),%eax
c01128f4:	89 10                	mov    %edx,(%eax)
    return 0;
c01128f6:	b8 00 00 00 00       	mov    $0x0,%eax
c01128fb:	eb 21                	jmp    c011291e <sfs_bmap_get_sub_nolock+0x176>

failed_cleanup:
    if (ent != *entp) {
c01128fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112900:	8b 10                	mov    (%eax),%edx
c0112902:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112905:	39 c2                	cmp    %eax,%edx
c0112907:	74 12                	je     c011291b <sfs_bmap_get_sub_nolock+0x173>
        sfs_block_free(sfs, ent);
c0112909:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011290c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112910:	8b 45 08             	mov    0x8(%ebp),%eax
c0112913:	89 04 24             	mov    %eax,(%esp)
c0112916:	e8 20 fb ff ff       	call   c011243b <sfs_block_free>
    }
    return ret;
c011291b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011291e:	c9                   	leave  
c011291f:	c3                   	ret    

c0112920 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0112920:	55                   	push   %ebp
c0112921:	89 e5                	mov    %esp,%ebp
c0112923:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112926:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112929:	8b 00                	mov    (%eax),%eax
c011292b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c011292e:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112932:	77 5e                	ja     c0112992 <sfs_bmap_get_nolock+0x72>
        if ((ino = din->direct[index]) == 0 && create) {
c0112934:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112937:	8b 55 10             	mov    0x10(%ebp),%edx
c011293a:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011293e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112941:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112944:	85 c0                	test   %eax,%eax
c0112946:	75 45                	jne    c011298d <sfs_bmap_get_nolock+0x6d>
c0112948:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011294c:	74 3f                	je     c011298d <sfs_bmap_get_nolock+0x6d>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011294e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112951:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112955:	8b 45 08             	mov    0x8(%ebp),%eax
c0112958:	89 04 24             	mov    %eax,(%esp)
c011295b:	e8 0e fa ff ff       	call   c011236e <sfs_block_alloc>
c0112960:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112963:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112967:	74 08                	je     c0112971 <sfs_bmap_get_nolock+0x51>
                return ret;
c0112969:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011296c:	e9 2f 01 00 00       	jmp    c0112aa0 <sfs_bmap_get_nolock+0x180>
            }
            din->direct[index] = ino;
c0112971:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0112974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112977:	8b 55 10             	mov    0x10(%ebp),%edx
c011297a:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c011297e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112981:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112988:	e9 c5 00 00 00       	jmp    c0112a52 <sfs_bmap_get_nolock+0x132>
c011298d:	e9 c0 00 00 00       	jmp    c0112a52 <sfs_bmap_get_nolock+0x132>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c0112992:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112996:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c011299d:	0f 87 93 00 00 00    	ja     c0112a36 <sfs_bmap_get_nolock+0x116>
        ent = din->indirect;
c01129a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01129a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c01129ac:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01129af:	89 44 24 10          	mov    %eax,0x10(%esp)
c01129b3:	8b 45 14             	mov    0x14(%ebp),%eax
c01129b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01129ba:	8b 45 10             	mov    0x10(%ebp),%eax
c01129bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01129c1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01129c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01129c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01129cb:	89 04 24             	mov    %eax,(%esp)
c01129ce:	e8 d5 fd ff ff       	call   c01127a8 <sfs_bmap_get_sub_nolock>
c01129d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01129d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01129da:	74 08                	je     c01129e4 <sfs_bmap_get_nolock+0xc4>
            return ret;
c01129dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129df:	e9 bc 00 00 00       	jmp    c0112aa0 <sfs_bmap_get_nolock+0x180>
        }
        if (ent != din->indirect) {
c01129e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129e7:	8b 50 3c             	mov    0x3c(%eax),%edx
c01129ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01129ed:	39 c2                	cmp    %eax,%edx
c01129ef:	74 43                	je     c0112a34 <sfs_bmap_get_nolock+0x114>
            assert(din->indirect == 0);
c01129f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01129f4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01129f7:	85 c0                	test   %eax,%eax
c01129f9:	74 24                	je     c0112a1f <sfs_bmap_get_nolock+0xff>
c01129fb:	c7 44 24 0c 6e 95 11 	movl   $0xc011956e,0xc(%esp)
c0112a02:	c0 
c0112a03:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112a0a:	c0 
c0112a0b:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0112a12:	00 
c0112a13:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112a1a:	e8 a9 e4 fe ff       	call   c0100ec8 <__panic>
            din->indirect = ent;
c0112a1f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112a25:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0112a28:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112a2b:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0112a32:	eb 1e                	jmp    c0112a52 <sfs_bmap_get_nolock+0x132>
c0112a34:	eb 1c                	jmp    c0112a52 <sfs_bmap_get_nolock+0x132>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0112a36:	c7 44 24 08 84 95 11 	movl   $0xc0119584,0x8(%esp)
c0112a3d:	c0 
c0112a3e:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
c0112a45:	00 
c0112a46:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112a4d:	e8 76 e4 fe ff       	call   c0100ec8 <__panic>
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c0112a52:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a55:	85 c0                	test   %eax,%eax
c0112a57:	74 3a                	je     c0112a93 <sfs_bmap_get_nolock+0x173>
c0112a59:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112a5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112a60:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a63:	89 04 24             	mov    %eax,(%esp)
c0112a66:	e8 9e f8 ff ff       	call   c0112309 <sfs_block_inuse>
c0112a6b:	85 c0                	test   %eax,%eax
c0112a6d:	75 24                	jne    c0112a93 <sfs_bmap_get_nolock+0x173>
c0112a6f:	c7 44 24 0c b0 95 11 	movl   $0xc01195b0,0xc(%esp)
c0112a76:	c0 
c0112a77:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112a7e:	c0 
c0112a7f:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0112a86:	00 
c0112a87:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112a8e:	e8 35 e4 fe ff       	call   c0100ec8 <__panic>
    *ino_store = ino;
c0112a93:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112a96:	8b 45 18             	mov    0x18(%ebp),%eax
c0112a99:	89 10                	mov    %edx,(%eax)
    return 0;
c0112a9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112aa0:	c9                   	leave  
c0112aa1:	c3                   	ret    

c0112aa2 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c0112aa2:	55                   	push   %ebp
c0112aa3:	89 e5                	mov    %esp,%ebp
c0112aa5:	83 ec 38             	sub    $0x38,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c0112aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ab2:	89 04 24             	mov    %eax,(%esp)
c0112ab5:	e8 4f f8 ff ff       	call   c0112309 <sfs_block_inuse>
c0112aba:	85 c0                	test   %eax,%eax
c0112abc:	74 09                	je     c0112ac7 <sfs_bmap_free_sub_nolock+0x25>
c0112abe:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112ac5:	76 24                	jbe    c0112aeb <sfs_bmap_free_sub_nolock+0x49>
c0112ac7:	c7 44 24 0c d8 95 11 	movl   $0xc01195d8,0xc(%esp)
c0112ace:	c0 
c0112acf:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112ad6:	c0 
c0112ad7:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
c0112ade:	00 
c0112adf:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112ae6:	e8 dd e3 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c0112aeb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c0112af2:	8b 45 10             	mov    0x10(%ebp),%eax
c0112af5:	c1 e0 02             	shl    $0x2,%eax
c0112af8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0112afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112afe:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112b02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b05:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b09:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b10:	00 
c0112b11:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112b14:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b18:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b1b:	89 04 24             	mov    %eax,(%esp)
c0112b1e:	e8 95 1a 00 00       	call   c01145b8 <sfs_rbuf>
c0112b23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b2a:	74 05                	je     c0112b31 <sfs_bmap_free_sub_nolock+0x8f>
        return ret;
c0112b2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b2f:	eb 54                	jmp    c0112b85 <sfs_bmap_free_sub_nolock+0xe3>
    }
    if (ino != 0) {
c0112b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b34:	85 c0                	test   %eax,%eax
c0112b36:	74 48                	je     c0112b80 <sfs_bmap_free_sub_nolock+0xde>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c0112b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b3b:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b42:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112b46:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c0112b4d:	00 
c0112b4e:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112b51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b55:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b58:	89 04 24             	mov    %eax,(%esp)
c0112b5b:	e8 11 1b 00 00       	call   c0114671 <sfs_wbuf>
c0112b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112b67:	74 05                	je     c0112b6e <sfs_bmap_free_sub_nolock+0xcc>
            return ret;
c0112b69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b6c:	eb 17                	jmp    c0112b85 <sfs_bmap_free_sub_nolock+0xe3>
        }
        sfs_block_free(sfs, ino);
c0112b6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112b71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112b75:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b78:	89 04 24             	mov    %eax,(%esp)
c0112b7b:	e8 bb f8 ff ff       	call   c011243b <sfs_block_free>
    }
    return 0;
c0112b80:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112b85:	c9                   	leave  
c0112b86:	c3                   	ret    

c0112b87 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0112b87:	55                   	push   %ebp
c0112b88:	89 e5                	mov    %esp,%ebp
c0112b8a:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b90:	8b 00                	mov    (%eax),%eax
c0112b92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c0112b95:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0112b99:	77 44                	ja     c0112bdf <sfs_bmap_free_nolock+0x58>
        if ((ino = din->direct[index]) != 0) {
c0112b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b9e:	8b 55 10             	mov    0x10(%ebp),%edx
c0112ba1:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0112ba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112ba8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112bac:	74 2a                	je     c0112bd8 <sfs_bmap_free_nolock+0x51>
			// free the block
            sfs_block_free(sfs, ino);
c0112bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112bb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0112bb8:	89 04 24             	mov    %eax,(%esp)
c0112bbb:	e8 7b f8 ff ff       	call   c011243b <sfs_block_free>
            din->direct[index] = 0;
c0112bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bc3:	8b 55 10             	mov    0x10(%ebp),%edx
c0112bc6:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c0112bcd:	00 
            sin->dirty = 1;
c0112bce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bd1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c0112bd8:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bdd:	eb 4f                	jmp    c0112c2e <sfs_bmap_free_nolock+0xa7>
    }

    index -= SFS_NDIRECT;
c0112bdf:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c0112be3:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0112bea:	77 3d                	ja     c0112c29 <sfs_bmap_free_nolock+0xa2>
        if ((ent = din->indirect) != 0) {
c0112bec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bef:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112bf5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112bf9:	74 27                	je     c0112c22 <sfs_bmap_free_nolock+0x9b>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c0112bfb:	8b 45 10             	mov    0x10(%ebp),%eax
c0112bfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c09:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c0c:	89 04 24             	mov    %eax,(%esp)
c0112c0f:	e8 8e fe ff ff       	call   c0112aa2 <sfs_bmap_free_sub_nolock>
c0112c14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112c17:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112c1b:	74 05                	je     c0112c22 <sfs_bmap_free_nolock+0x9b>
                return ret;
c0112c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c20:	eb 0c                	jmp    c0112c2e <sfs_bmap_free_nolock+0xa7>
            }
        }
        return 0;
c0112c22:	b8 00 00 00 00       	mov    $0x0,%eax
c0112c27:	eb 05                	jmp    c0112c2e <sfs_bmap_free_nolock+0xa7>
    }
    return 0;
c0112c29:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112c2e:	c9                   	leave  
c0112c2f:	c3                   	ret    

c0112c30 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0112c30:	55                   	push   %ebp
c0112c31:	89 e5                	mov    %esp,%ebp
c0112c33:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0112c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c39:	8b 00                	mov    (%eax),%eax
c0112c3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0112c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c41:	8b 40 08             	mov    0x8(%eax),%eax
c0112c44:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112c47:	73 24                	jae    c0112c6d <sfs_bmap_load_nolock+0x3d>
c0112c49:	c7 44 24 0c 0c 96 11 	movl   $0xc011960c,0xc(%esp)
c0112c50:	c0 
c0112c51:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112c58:	c0 
c0112c59:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
c0112c60:	00 
c0112c61:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112c68:	e8 5b e2 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0112c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c70:	8b 40 08             	mov    0x8(%eax),%eax
c0112c73:	3b 45 10             	cmp    0x10(%ebp),%eax
c0112c76:	0f 94 c0             	sete   %al
c0112c79:	0f b6 c0             	movzbl %al,%eax
c0112c7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0112c7f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0112c82:	89 44 24 10          	mov    %eax,0x10(%esp)
c0112c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c89:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112c8d:	8b 45 10             	mov    0x10(%ebp),%eax
c0112c90:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112c94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c9e:	89 04 24             	mov    %eax,(%esp)
c0112ca1:	e8 7a fc ff ff       	call   c0112920 <sfs_bmap_get_nolock>
c0112ca6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112ca9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112cad:	74 05                	je     c0112cb4 <sfs_bmap_load_nolock+0x84>
        return ret;
c0112caf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112cb2:	eb 62                	jmp    c0112d16 <sfs_bmap_load_nolock+0xe6>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112cb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cbe:	89 04 24             	mov    %eax,(%esp)
c0112cc1:	e8 43 f6 ff ff       	call   c0112309 <sfs_block_inuse>
c0112cc6:	85 c0                	test   %eax,%eax
c0112cc8:	75 24                	jne    c0112cee <sfs_bmap_load_nolock+0xbe>
c0112cca:	c7 44 24 0c f5 94 11 	movl   $0xc01194f5,0xc(%esp)
c0112cd1:	c0 
c0112cd2:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112cd9:	c0 
c0112cda:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0112ce1:	00 
c0112ce2:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112ce9:	e8 da e1 fe ff       	call   c0100ec8 <__panic>
    if (create) {
c0112cee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112cf2:	74 0f                	je     c0112d03 <sfs_bmap_load_nolock+0xd3>
        din->blocks ++;
c0112cf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112cf7:	8b 40 08             	mov    0x8(%eax),%eax
c0112cfa:	8d 50 01             	lea    0x1(%eax),%edx
c0112cfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d00:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0112d03:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112d07:	74 08                	je     c0112d11 <sfs_bmap_load_nolock+0xe1>
        *ino_store = ino;
c0112d09:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112d0c:	8b 45 14             	mov    0x14(%ebp),%eax
c0112d0f:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0112d11:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d16:	c9                   	leave  
c0112d17:	c3                   	ret    

c0112d18 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0112d18:	55                   	push   %ebp
c0112d19:	89 e5                	mov    %esp,%ebp
c0112d1b:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c0112d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d21:	8b 00                	mov    (%eax),%eax
c0112d23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0112d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d29:	8b 40 08             	mov    0x8(%eax),%eax
c0112d2c:	85 c0                	test   %eax,%eax
c0112d2e:	75 24                	jne    c0112d54 <sfs_bmap_truncate_nolock+0x3c>
c0112d30:	c7 44 24 0c 21 96 11 	movl   $0xc0119621,0xc(%esp)
c0112d37:	c0 
c0112d38:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112d3f:	c0 
c0112d40:	c7 44 24 04 7b 01 00 	movl   $0x17b,0x4(%esp)
c0112d47:	00 
c0112d48:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112d4f:	e8 74 e1 fe ff       	call   c0100ec8 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0112d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d57:	8b 40 08             	mov    0x8(%eax),%eax
c0112d5a:	83 e8 01             	sub    $0x1,%eax
c0112d5d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112d61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d64:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112d68:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d6b:	89 04 24             	mov    %eax,(%esp)
c0112d6e:	e8 14 fe ff ff       	call   c0112b87 <sfs_bmap_free_nolock>
c0112d73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112d76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112d7a:	74 05                	je     c0112d81 <sfs_bmap_truncate_nolock+0x69>
        return ret;
c0112d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112d7f:	eb 1e                	jmp    c0112d9f <sfs_bmap_truncate_nolock+0x87>
    }
    din->blocks --;
c0112d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d84:	8b 40 08             	mov    0x8(%eax),%eax
c0112d87:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112d8d:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0112d90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d93:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0112d9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112d9f:	c9                   	leave  
c0112da0:	c3                   	ret    

c0112da1 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0112da1:	55                   	push   %ebp
c0112da2:	89 e5                	mov    %esp,%ebp
c0112da4:	83 ec 38             	sub    $0x38,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0112da7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112daa:	8b 00                	mov    (%eax),%eax
c0112dac:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112db0:	66 83 f8 02          	cmp    $0x2,%ax
c0112db4:	75 15                	jne    c0112dcb <sfs_dirent_read_nolock+0x2a>
c0112db6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112dba:	78 0f                	js     c0112dcb <sfs_dirent_read_nolock+0x2a>
c0112dbc:	8b 55 10             	mov    0x10(%ebp),%edx
c0112dbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112dc2:	8b 00                	mov    (%eax),%eax
c0112dc4:	8b 40 08             	mov    0x8(%eax),%eax
c0112dc7:	39 c2                	cmp    %eax,%edx
c0112dc9:	72 24                	jb     c0112def <sfs_dirent_read_nolock+0x4e>
c0112dcb:	c7 44 24 0c 34 96 11 	movl   $0xc0119634,0xc(%esp)
c0112dd2:	c0 
c0112dd3:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112dda:	c0 
c0112ddb:	c7 44 24 04 8e 01 00 	movl   $0x18e,0x4(%esp)
c0112de2:	00 
c0112de3:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112dea:	e8 d9 e0 fe ff       	call   c0100ec8 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0112def:	8b 45 10             	mov    0x10(%ebp),%eax
c0112df2:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0112df5:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0112df9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112dfd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112e00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e04:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e07:	89 04 24             	mov    %eax,(%esp)
c0112e0a:	e8 21 fe ff ff       	call   c0112c30 <sfs_bmap_load_nolock>
c0112e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e16:	74 08                	je     c0112e20 <sfs_dirent_read_nolock+0x7f>
        return ret;
c0112e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e1b:	e9 80 00 00 00       	jmp    c0112ea0 <sfs_dirent_read_nolock+0xff>
    }
    assert(sfs_block_inuse(sfs, ino));
c0112e20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e23:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e27:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e2a:	89 04 24             	mov    %eax,(%esp)
c0112e2d:	e8 d7 f4 ff ff       	call   c0112309 <sfs_block_inuse>
c0112e32:	85 c0                	test   %eax,%eax
c0112e34:	75 24                	jne    c0112e5a <sfs_dirent_read_nolock+0xb9>
c0112e36:	c7 44 24 0c f5 94 11 	movl   $0xc01194f5,0xc(%esp)
c0112e3d:	c0 
c0112e3e:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112e45:	c0 
c0112e46:	c7 44 24 04 95 01 00 	movl   $0x195,0x4(%esp)
c0112e4d:	00 
c0112e4e:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112e55:	e8 6e e0 fe ff       	call   c0100ec8 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0112e5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e5d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0112e64:	00 
c0112e65:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112e69:	c7 44 24 08 04 01 00 	movl   $0x104,0x8(%esp)
c0112e70:	00 
c0112e71:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e74:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0112e7b:	89 04 24             	mov    %eax,(%esp)
c0112e7e:	e8 35 17 00 00       	call   c01145b8 <sfs_rbuf>
c0112e83:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e8a:	74 05                	je     c0112e91 <sfs_dirent_read_nolock+0xf0>
        return ret;
c0112e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112e8f:	eb 0f                	jmp    c0112ea0 <sfs_dirent_read_nolock+0xff>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0112e91:	8b 45 14             	mov    0x14(%ebp),%eax
c0112e94:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0112e9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112ea0:	c9                   	leave  
c0112ea1:	c3                   	ret    

c0112ea2 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0112ea2:	55                   	push   %ebp
c0112ea3:	89 e5                	mov    %esp,%ebp
c0112ea5:	83 ec 28             	sub    $0x28,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0112ea8:	8b 45 10             	mov    0x10(%ebp),%eax
c0112eab:	89 04 24             	mov    %eax,(%esp)
c0112eae:	e8 70 22 00 00       	call   c0115123 <strlen>
c0112eb3:	3d ff 00 00 00       	cmp    $0xff,%eax
c0112eb8:	76 24                	jbe    c0112ede <sfs_dirent_search_nolock+0x3c>
c0112eba:	c7 44 24 0c 80 96 11 	movl   $0xc0119680,0xc(%esp)
c0112ec1:	c0 
c0112ec2:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0112ec9:	c0 
c0112eca:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0112ed1:	00 
c0112ed2:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0112ed9:	e8 ea df fe ff       	call   c0100ec8 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0112ede:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0112ee5:	e8 d7 1d ff ff       	call   c0104cc1 <kmalloc>
c0112eea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112eed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112ef1:	75 0a                	jne    c0112efd <sfs_dirent_search_nolock+0x5b>
        return -E_NO_MEM;
c0112ef3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112ef8:	e9 cb 00 00 00       	jmp    c0112fc8 <sfs_dirent_search_nolock+0x126>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0112efd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f00:	8b 00                	mov    (%eax),%eax
c0112f02:	8b 40 08             	mov    0x8(%eax),%eax
c0112f05:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0112f08:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112f0c:	74 08                	je     c0112f16 <sfs_dirent_search_nolock+0x74>
c0112f0e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112f11:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112f14:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0112f16:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0112f1d:	e9 85 00 00 00       	jmp    c0112fa7 <sfs_dirent_search_nolock+0x105>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112f22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f25:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112f29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112f2c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112f30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112f33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f37:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f3a:	89 04 24             	mov    %eax,(%esp)
c0112f3d:	e8 5f fe ff ff       	call   c0112da1 <sfs_dirent_read_nolock>
c0112f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112f45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112f49:	74 02                	je     c0112f4d <sfs_dirent_search_nolock+0xab>
            goto out;
c0112f4b:	eb 6d                	jmp    c0112fba <sfs_dirent_search_nolock+0x118>
        }
        if (entry->ino == 0) {
c0112f4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f50:	8b 00                	mov    (%eax),%eax
c0112f52:	85 c0                	test   %eax,%eax
c0112f54:	75 12                	jne    c0112f68 <sfs_dirent_search_nolock+0xc6>
            set_pvalue(empty_slot, i);
c0112f56:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0112f5a:	74 0a                	je     c0112f66 <sfs_dirent_search_nolock+0xc4>
c0112f5c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0112f5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112f62:	89 10                	mov    %edx,(%eax)
            continue ;
c0112f64:	eb 3d                	jmp    c0112fa3 <sfs_dirent_search_nolock+0x101>
c0112f66:	eb 3b                	jmp    c0112fa3 <sfs_dirent_search_nolock+0x101>
        }
        if (strcmp(name, entry->name) == 0) {
c0112f68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f6b:	83 c0 04             	add    $0x4,%eax
c0112f6e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112f72:	8b 45 10             	mov    0x10(%ebp),%eax
c0112f75:	89 04 24             	mov    %eax,(%esp)
c0112f78:	e8 9e 22 00 00       	call   c011521b <strcmp>
c0112f7d:	85 c0                	test   %eax,%eax
c0112f7f:	75 22                	jne    c0112fa3 <sfs_dirent_search_nolock+0x101>
            set_pvalue(slot, i);
c0112f81:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0112f85:	74 08                	je     c0112f8f <sfs_dirent_search_nolock+0xed>
c0112f87:	8b 45 18             	mov    0x18(%ebp),%eax
c0112f8a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112f8d:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0112f8f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0112f93:	74 0c                	je     c0112fa1 <sfs_dirent_search_nolock+0xff>
c0112f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f98:	8b 10                	mov    (%eax),%edx
c0112f9a:	8b 45 14             	mov    0x14(%ebp),%eax
c0112f9d:	89 10                	mov    %edx,(%eax)
            goto out;
c0112f9f:	eb 19                	jmp    c0112fba <sfs_dirent_search_nolock+0x118>
c0112fa1:	eb 17                	jmp    c0112fba <sfs_dirent_search_nolock+0x118>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0112fa3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0112fa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112faa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0112fad:	0f 8c 6f ff ff ff    	jl     c0112f22 <sfs_dirent_search_nolock+0x80>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0112fb3:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
out:
    kfree(entry);
c0112fba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112fbd:	89 04 24             	mov    %eax,(%esp)
c0112fc0:	e8 17 1d ff ff       	call   c0104cdc <kfree>
    return ret;
c0112fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112fc8:	c9                   	leave  
c0112fc9:	c3                   	ret    

c0112fca <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0112fca:	55                   	push   %ebp
c0112fcb:	89 e5                	mov    %esp,%ebp
c0112fcd:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0112fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112fd3:	8b 00                	mov    (%eax),%eax
c0112fd5:	8b 40 08             	mov    0x8(%eax),%eax
c0112fd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0112fdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112fe2:	eb 43                	jmp    c0113027 <sfs_dirent_findino_nolock+0x5d>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112fe4:	8b 45 14             	mov    0x14(%ebp),%eax
c0112fe7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0112feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112fee:	89 44 24 08          	mov    %eax,0x8(%esp)
c0112ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ff5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0112ff9:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ffc:	89 04 24             	mov    %eax,(%esp)
c0112fff:	e8 9d fd ff ff       	call   c0112da1 <sfs_dirent_read_nolock>
c0113004:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113007:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011300b:	74 05                	je     c0113012 <sfs_dirent_findino_nolock+0x48>
            return ret;
c011300d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113010:	eb 22                	jmp    c0113034 <sfs_dirent_findino_nolock+0x6a>
        }
        if (entry->ino == ino) {
c0113012:	8b 45 14             	mov    0x14(%ebp),%eax
c0113015:	8b 00                	mov    (%eax),%eax
c0113017:	3b 45 10             	cmp    0x10(%ebp),%eax
c011301a:	75 07                	jne    c0113023 <sfs_dirent_findino_nolock+0x59>
            return 0;
c011301c:	b8 00 00 00 00       	mov    $0x0,%eax
c0113021:	eb 11                	jmp    c0113034 <sfs_dirent_findino_nolock+0x6a>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113023:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113027:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011302a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011302d:	7c b5                	jl     c0112fe4 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011302f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113034:	c9                   	leave  
c0113035:	c3                   	ret    

c0113036 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0113036:	55                   	push   %ebp
c0113037:	89 e5                	mov    %esp,%ebp
c0113039:	83 ec 38             	sub    $0x38,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c011303c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011303f:	89 04 24             	mov    %eax,(%esp)
c0113042:	e8 f4 f0 ff ff       	call   c011213b <lock_sin>
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0113047:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
c011304e:	00 
c011304f:	8b 45 18             	mov    0x18(%ebp),%eax
c0113052:	89 44 24 10          	mov    %eax,0x10(%esp)
c0113056:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0113059:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011305d:	8b 45 10             	mov    0x10(%ebp),%eax
c0113060:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113064:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113067:	89 44 24 04          	mov    %eax,0x4(%esp)
c011306b:	8b 45 08             	mov    0x8(%ebp),%eax
c011306e:	89 04 24             	mov    %eax,(%esp)
c0113071:	e8 2c fe ff ff       	call   c0112ea2 <sfs_dirent_search_nolock>
c0113076:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0113079:	8b 45 0c             	mov    0xc(%ebp),%eax
c011307c:	89 04 24             	mov    %eax,(%esp)
c011307f:	e8 cd f0 ff ff       	call   c0112151 <unlock_sin>
    if (ret == 0) {
c0113084:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113088:	75 1c                	jne    c01130a6 <sfs_lookup_once+0x70>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c011308a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011308d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113091:	8b 45 14             	mov    0x14(%ebp),%eax
c0113094:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113098:	8b 45 08             	mov    0x8(%ebp),%eax
c011309b:	89 04 24             	mov    %eax,(%esp)
c011309e:	e8 62 f5 ff ff       	call   c0112605 <sfs_load_inode>
c01130a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c01130a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01130a9:	c9                   	leave  
c01130aa:	c3                   	ret    

c01130ab <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c01130ab:	55                   	push   %ebp
c01130ac:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c01130ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130b1:	83 e0 03             	and    $0x3,%eax
c01130b4:	85 c0                	test   %eax,%eax
c01130b6:	74 07                	je     c01130bf <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c01130b8:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01130bd:	eb 17                	jmp    c01130d6 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c01130bf:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c01130c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01130c3:	83 e0 20             	and    $0x20,%eax
c01130c6:	85 c0                	test   %eax,%eax
c01130c8:	74 07                	je     c01130d1 <sfs_opendir+0x26>
        return -E_ISDIR;
c01130ca:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c01130cf:	eb 05                	jmp    c01130d6 <sfs_opendir+0x2b>
    }
    return 0;
c01130d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01130d6:	5d                   	pop    %ebp
c01130d7:	c3                   	ret    

c01130d8 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c01130d8:	55                   	push   %ebp
c01130d9:	89 e5                	mov    %esp,%ebp
    return 0;
c01130db:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01130e0:	5d                   	pop    %ebp
c01130e1:	c3                   	ret    

c01130e2 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c01130e2:	55                   	push   %ebp
c01130e3:	89 e5                	mov    %esp,%ebp
c01130e5:	83 ec 28             	sub    $0x28,%esp
    return vop_fsync(node);
c01130e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01130eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01130ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01130f2:	74 17                	je     c011310b <sfs_close+0x29>
c01130f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01130f7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01130fa:	85 c0                	test   %eax,%eax
c01130fc:	74 0d                	je     c011310b <sfs_close+0x29>
c01130fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113101:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113104:	8b 40 18             	mov    0x18(%eax),%eax
c0113107:	85 c0                	test   %eax,%eax
c0113109:	75 24                	jne    c011312f <sfs_close+0x4d>
c011310b:	c7 44 24 0c a4 96 11 	movl   $0xc01196a4,0xc(%esp)
c0113112:	c0 
c0113113:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011311a:	c0 
c011311b:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c0113122:	00 
c0113123:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011312a:	e8 99 dd fe ff       	call   c0100ec8 <__panic>
c011312f:	c7 44 24 04 f2 96 11 	movl   $0xc01196f2,0x4(%esp)
c0113136:	c0 
c0113137:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011313a:	89 04 24             	mov    %eax,(%esp)
c011313d:	e8 cb c0 ff ff       	call   c010f20d <inode_check>
c0113142:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113145:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113148:	8b 40 18             	mov    0x18(%eax),%eax
c011314b:	8b 55 08             	mov    0x8(%ebp),%edx
c011314e:	89 14 24             	mov    %edx,(%esp)
c0113151:	ff d0                	call   *%eax
}
c0113153:	c9                   	leave  
c0113154:	c3                   	ret    

c0113155 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0113155:	55                   	push   %ebp
c0113156:	89 e5                	mov    %esp,%ebp
c0113158:	83 ec 68             	sub    $0x68,%esp
    struct sfs_disk_inode *din = sin->din;
c011315b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011315e:	8b 00                	mov    (%eax),%eax
c0113160:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0113163:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113166:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c011316a:	66 83 f8 02          	cmp    $0x2,%ax
c011316e:	75 24                	jne    c0113194 <sfs_io_nolock+0x3f>
c0113170:	c7 44 24 0c f8 96 11 	movl   $0xc01196f8,0xc(%esp)
c0113177:	c0 
c0113178:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011317f:	c0 
c0113180:	c7 44 24 04 2b 02 00 	movl   $0x22b,0x4(%esp)
c0113187:	00 
c0113188:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011318f:	e8 34 dd fe ff       	call   c0100ec8 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0113194:	8b 45 18             	mov    0x18(%ebp),%eax
c0113197:	8b 10                	mov    (%eax),%edx
c0113199:	8b 45 14             	mov    0x14(%ebp),%eax
c011319c:	01 d0                	add    %edx,%eax
c011319e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c01131a1:	8b 45 18             	mov    0x18(%ebp),%eax
c01131a4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c01131aa:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01131ae:	78 12                	js     c01131c2 <sfs_io_nolock+0x6d>
c01131b0:	8b 45 14             	mov    0x14(%ebp),%eax
c01131b3:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01131b8:	77 08                	ja     c01131c2 <sfs_io_nolock+0x6d>
c01131ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01131bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01131c0:	7e 0a                	jle    c01131cc <sfs_io_nolock+0x77>
        return -E_INVAL;
c01131c2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01131c7:	e9 b4 02 00 00       	jmp    c0113480 <sfs_io_nolock+0x32b>
    }
    if (offset == endpos) {
c01131cc:	8b 45 14             	mov    0x14(%ebp),%eax
c01131cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01131d2:	75 0a                	jne    c01131de <sfs_io_nolock+0x89>
        return 0;
c01131d4:	b8 00 00 00 00       	mov    $0x0,%eax
c01131d9:	e9 a2 02 00 00       	jmp    c0113480 <sfs_io_nolock+0x32b>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c01131de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131e1:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c01131e6:	76 07                	jbe    c01131ef <sfs_io_nolock+0x9a>
        endpos = SFS_MAX_FILE_SIZE;
c01131e8:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c01131ef:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01131f3:	75 2a                	jne    c011321f <sfs_io_nolock+0xca>
        if (offset >= din->size) {
c01131f5:	8b 55 14             	mov    0x14(%ebp),%edx
c01131f8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01131fb:	8b 00                	mov    (%eax),%eax
c01131fd:	39 c2                	cmp    %eax,%edx
c01131ff:	72 0a                	jb     c011320b <sfs_io_nolock+0xb6>
            return 0;
c0113201:	b8 00 00 00 00       	mov    $0x0,%eax
c0113206:	e9 75 02 00 00       	jmp    c0113480 <sfs_io_nolock+0x32b>
        }
        if (endpos > din->size) {
c011320b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011320e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113211:	8b 00                	mov    (%eax),%eax
c0113213:	39 c2                	cmp    %eax,%edx
c0113215:	76 08                	jbe    c011321f <sfs_io_nolock+0xca>
            endpos = din->size;
c0113217:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011321a:	8b 00                	mov    (%eax),%eax
c011321c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c011321f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0113223:	74 10                	je     c0113235 <sfs_io_nolock+0xe0>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0113225:	c7 45 f0 71 46 11 c0 	movl   $0xc0114671,-0x10(%ebp)
c011322c:	c7 45 ec 88 45 11 c0 	movl   $0xc0114588,-0x14(%ebp)
c0113233:	eb 0e                	jmp    c0113243 <sfs_io_nolock+0xee>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0113235:	c7 45 f0 b8 45 11 c0 	movl   $0xc01145b8,-0x10(%ebp)
c011323c:	c7 45 ec 58 45 11 c0 	movl   $0xc0114558,-0x14(%ebp)
    }

    int ret = 0;
c0113243:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c011324a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0113251:	8b 45 14             	mov    0x14(%ebp),%eax
c0113254:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011325a:	85 c0                	test   %eax,%eax
c011325c:	0f 48 c2             	cmovs  %edx,%eax
c011325f:	c1 f8 0c             	sar    $0xc,%eax
c0113262:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0113265:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113268:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c011326e:	85 c0                	test   %eax,%eax
c0113270:	0f 48 c2             	cmovs  %edx,%eax
c0113273:	c1 f8 0c             	sar    $0xc,%eax
c0113276:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0113279:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    //cprintf("here!!!%d %d %d %d\n", blkno, nblks, offset, endpos);
    if (offset % SFS_BLKSIZE != 0)
c011327c:	8b 45 14             	mov    0x14(%ebp),%eax
c011327f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0113284:	85 c0                	test   %eax,%eax
c0113286:	0f 84 b2 00 00 00    	je     c011333e <sfs_io_nolock+0x1e9>
    {
    	blkoff = offset % SFS_BLKSIZE;
c011328c:	8b 45 14             	mov    0x14(%ebp),%eax
c011328f:	99                   	cltd   
c0113290:	c1 ea 14             	shr    $0x14,%edx
c0113293:	01 d0                	add    %edx,%eax
c0113295:	25 ff 0f 00 00       	and    $0xfff,%eax
c011329a:	29 d0                	sub    %edx,%eax
c011329c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    	uint32_t size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c011329f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01132a3:	74 0a                	je     c01132af <sfs_io_nolock+0x15a>
c01132a5:	b8 00 10 00 00       	mov    $0x1000,%eax
c01132aa:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01132ad:	eb 0a                	jmp    c01132b9 <sfs_io_nolock+0x164>
c01132af:	8b 45 14             	mov    0x14(%ebp),%eax
c01132b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01132b5:	29 c2                	sub    %eax,%edx
c01132b7:	89 d0                	mov    %edx,%eax
c01132b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01132bc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c01132bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01132c6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c01132cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01132d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01132d4:	89 04 24             	mov    %eax,(%esp)
c01132d7:	e8 54 f9 ff ff       	call   c0112c30 <sfs_bmap_load_nolock>
c01132dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01132df:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01132e3:	74 05                	je     c01132ea <sfs_io_nolock+0x195>
            goto out;
c01132e5:	e9 5f 01 00 00       	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c01132ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01132ed:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01132f0:	89 54 24 10          	mov    %edx,0x10(%esp)
c01132f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01132f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01132fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01132ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0113302:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113306:	8b 45 08             	mov    0x8(%ebp),%eax
c0113309:	89 04 24             	mov    %eax,(%esp)
c011330c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011330f:	ff d0                	call   *%eax
c0113311:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113314:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113318:	74 05                	je     c011331f <sfs_io_nolock+0x1ca>
            goto out;
c011331a:	e9 2a 01 00 00       	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        alen += size;
c011331f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0113322:	01 45 e4             	add    %eax,-0x1c(%ebp)
        if (nblks == 0) {
c0113325:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113329:	75 05                	jne    c0113330 <sfs_io_nolock+0x1db>
            goto out;
c011332b:	e9 19 01 00 00       	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
    	--nblks;
c0113330:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    	++blkno;
c0113334:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
    	buf += size;
c0113338:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011333b:	01 45 10             	add    %eax,0x10(%ebp)
    }
    int i;
    for (i = 0; i < nblks; ++i)
c011333e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
c0113345:	eb 77                	jmp    c01133be <sfs_io_nolock+0x269>
    {
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0113347:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c011334a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011334e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113351:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113355:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113358:	89 44 24 04          	mov    %eax,0x4(%esp)
c011335c:	8b 45 08             	mov    0x8(%ebp),%eax
c011335f:	89 04 24             	mov    %eax,(%esp)
c0113362:	e8 c9 f8 ff ff       	call   c0112c30 <sfs_bmap_load_nolock>
c0113367:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011336a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011336e:	74 05                	je     c0113375 <sfs_io_nolock+0x220>
            goto out;
c0113370:	e9 d4 00 00 00       	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0113375:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0113378:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011337f:	00 
c0113380:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113384:	8b 45 10             	mov    0x10(%ebp),%eax
c0113387:	89 44 24 04          	mov    %eax,0x4(%esp)
c011338b:	8b 45 08             	mov    0x8(%ebp),%eax
c011338e:	89 04 24             	mov    %eax,(%esp)
c0113391:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113394:	ff d0                	call   *%eax
c0113396:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113399:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011339d:	74 05                	je     c01133a4 <sfs_io_nolock+0x24f>
            goto out;
c011339f:	e9 a5 00 00 00       	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        alen += SFS_BLKSIZE, buf += SFS_BLKSIZE, blkno ++, nblks --;
c01133a4:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
c01133ab:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
c01133b2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
c01133b6:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    	--nblks;
    	++blkno;
    	buf += size;
    }
    int i;
    for (i = 0; i < nblks; ++i)
c01133ba:	83 45 d8 01          	addl   $0x1,-0x28(%ebp)
c01133be:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01133c1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01133c4:	72 81                	jb     c0113347 <sfs_io_nolock+0x1f2>
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
            goto out;
        }
        alen += SFS_BLKSIZE, buf += SFS_BLKSIZE, blkno ++, nblks --;
    }
    if (endpos % SFS_BLKSIZE != 0)
c01133c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133c9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01133ce:	85 c0                	test   %eax,%eax
c01133d0:	74 77                	je     c0113449 <sfs_io_nolock+0x2f4>
    {
    	uint32_t size = endpos % SFS_BLKSIZE;
c01133d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01133d5:	99                   	cltd   
c01133d6:	c1 ea 14             	shr    $0x14,%edx
c01133d9:	01 d0                	add    %edx,%eax
c01133db:	25 ff 0f 00 00       	and    $0xfff,%eax
c01133e0:	29 d0                	sub    %edx,%eax
c01133e2:	89 45 c8             	mov    %eax,-0x38(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01133e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
c01133e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01133ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01133ef:	89 44 24 08          	mov    %eax,0x8(%esp)
c01133f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01133f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01133fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01133fd:	89 04 24             	mov    %eax,(%esp)
c0113400:	e8 2b f8 ff ff       	call   c0112c30 <sfs_bmap_load_nolock>
c0113405:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113408:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011340c:	74 02                	je     c0113410 <sfs_io_nolock+0x2bb>
            goto out;
c011340e:	eb 39                	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c0113410:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0113413:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c011341a:	00 
c011341b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011341f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113422:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113426:	8b 45 10             	mov    0x10(%ebp),%eax
c0113429:	89 44 24 04          	mov    %eax,0x4(%esp)
c011342d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113430:	89 04 24             	mov    %eax,(%esp)
c0113433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113436:	ff d0                	call   *%eax
c0113438:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011343b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011343f:	74 02                	je     c0113443 <sfs_io_nolock+0x2ee>
            goto out;
c0113441:	eb 06                	jmp    c0113449 <sfs_io_nolock+0x2f4>
        }
        alen += size;
c0113443:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113446:	01 45 e4             	add    %eax,-0x1c(%ebp)
    }
    //ret = alen;
out:
    *alenp = alen;
c0113449:	8b 45 18             	mov    0x18(%ebp),%eax
c011344c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011344f:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c0113451:	8b 55 14             	mov    0x14(%ebp),%edx
c0113454:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113457:	01 c2                	add    %eax,%edx
c0113459:	8b 45 0c             	mov    0xc(%ebp),%eax
c011345c:	8b 00                	mov    (%eax),%eax
c011345e:	8b 00                	mov    (%eax),%eax
c0113460:	39 c2                	cmp    %eax,%edx
c0113462:	76 19                	jbe    c011347d <sfs_io_nolock+0x328>
        sin->din->size = offset + alen;
c0113464:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113467:	8b 00                	mov    (%eax),%eax
c0113469:	8b 4d 14             	mov    0x14(%ebp),%ecx
c011346c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011346f:	01 ca                	add    %ecx,%edx
c0113471:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c0113473:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113476:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c011347d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0113480:	c9                   	leave  
c0113481:	c3                   	ret    

c0113482 <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c0113482:	55                   	push   %ebp
c0113483:	89 e5                	mov    %esp,%ebp
c0113485:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113488:	8b 45 08             	mov    0x8(%ebp),%eax
c011348b:	8b 40 38             	mov    0x38(%eax),%eax
c011348e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113491:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113495:	74 0a                	je     c01134a1 <sfs_io+0x1f>
c0113497:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011349a:	8b 40 6c             	mov    0x6c(%eax),%eax
c011349d:	85 c0                	test   %eax,%eax
c011349f:	74 24                	je     c01134c5 <sfs_io+0x43>
c01134a1:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c01134a8:	c0 
c01134a9:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01134b0:	c0 
c01134b1:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c01134b8:	00 
c01134b9:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01134c0:	e8 03 da fe ff       	call   c0100ec8 <__panic>
c01134c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01134c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01134cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01134ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01134d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01134d5:	74 0d                	je     c01134e4 <sfs_io+0x62>
c01134d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01134da:	8b 40 2c             	mov    0x2c(%eax),%eax
c01134dd:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01134e2:	74 24                	je     c0113508 <sfs_io+0x86>
c01134e4:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c01134eb:	c0 
c01134ec:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01134f3:	c0 
c01134f4:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01134fb:	00 
c01134fc:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113503:	e8 c0 d9 fe ff       	call   c0100ec8 <__panic>
c0113508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011350b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c011350e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113511:	89 04 24             	mov    %eax,(%esp)
c0113514:	e8 22 ec ff ff       	call   c011213b <lock_sin>
    {
        size_t alen = iob->io_resid;
c0113519:	8b 45 0c             	mov    0xc(%ebp),%eax
c011351c:	8b 40 0c             	mov    0xc(%eax),%eax
c011351f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c0113522:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113525:	8b 50 04             	mov    0x4(%eax),%edx
c0113528:	8b 45 0c             	mov    0xc(%ebp),%eax
c011352b:	8b 00                	mov    (%eax),%eax
c011352d:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0113530:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0113534:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0113537:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c011353b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c011353f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113543:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113546:	89 44 24 04          	mov    %eax,0x4(%esp)
c011354a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011354d:	89 04 24             	mov    %eax,(%esp)
c0113550:	e8 00 fc ff ff       	call   c0113155 <sfs_io_nolock>
c0113555:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0113558:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011355b:	85 c0                	test   %eax,%eax
c011355d:	74 12                	je     c0113571 <sfs_io+0xef>
            iobuf_skip(iob, alen);
c011355f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113562:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113566:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113569:	89 04 24             	mov    %eax,(%esp)
c011356c:	e8 96 7e ff ff       	call   c010b407 <iobuf_skip>
        }
    }
    unlock_sin(sin);
c0113571:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113574:	89 04 24             	mov    %eax,(%esp)
c0113577:	e8 d5 eb ff ff       	call   c0112151 <unlock_sin>
    return ret;
c011357c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011357f:	c9                   	leave  
c0113580:	c3                   	ret    

c0113581 <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c0113581:	55                   	push   %ebp
c0113582:	89 e5                	mov    %esp,%ebp
c0113584:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 0);
c0113587:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c011358e:	00 
c011358f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113592:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113596:	8b 45 08             	mov    0x8(%ebp),%eax
c0113599:	89 04 24             	mov    %eax,(%esp)
c011359c:	e8 e1 fe ff ff       	call   c0113482 <sfs_io>
}
c01135a1:	c9                   	leave  
c01135a2:	c3                   	ret    

c01135a3 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c01135a3:	55                   	push   %ebp
c01135a4:	89 e5                	mov    %esp,%ebp
c01135a6:	83 ec 18             	sub    $0x18,%esp
    return sfs_io(node, iob, 1);
c01135a9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01135b0:	00 
c01135b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01135b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01135bb:	89 04 24             	mov    %eax,(%esp)
c01135be:	e8 bf fe ff ff       	call   c0113482 <sfs_io>
}
c01135c3:	c9                   	leave  
c01135c4:	c3                   	ret    

c01135c5 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c01135c5:	55                   	push   %ebp
c01135c6:	89 e5                	mov    %esp,%ebp
c01135c8:	83 ec 28             	sub    $0x28,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c01135cb:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01135d2:	00 
c01135d3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01135da:	00 
c01135db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01135de:	89 04 24             	mov    %eax,(%esp)
c01135e1:	e8 93 1e 00 00       	call   c0115479 <memset>
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c01135e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01135e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01135ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01135f0:	74 17                	je     c0113609 <sfs_fstat+0x44>
c01135f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135f5:	8b 40 3c             	mov    0x3c(%eax),%eax
c01135f8:	85 c0                	test   %eax,%eax
c01135fa:	74 0d                	je     c0113609 <sfs_fstat+0x44>
c01135fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01135ff:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113602:	8b 40 28             	mov    0x28(%eax),%eax
c0113605:	85 c0                	test   %eax,%eax
c0113607:	75 24                	jne    c011362d <sfs_fstat+0x68>
c0113609:	c7 44 24 0c 40 97 11 	movl   $0xc0119740,0xc(%esp)
c0113610:	c0 
c0113611:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113618:	c0 
c0113619:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c0113620:	00 
c0113621:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113628:	e8 9b d8 fe ff       	call   c0100ec8 <__panic>
c011362d:	c7 44 24 04 90 97 11 	movl   $0xc0119790,0x4(%esp)
c0113634:	c0 
c0113635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113638:	89 04 24             	mov    %eax,(%esp)
c011363b:	e8 cd bb ff ff       	call   c010f20d <inode_check>
c0113640:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113643:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113646:	8b 40 28             	mov    0x28(%eax),%eax
c0113649:	8b 55 0c             	mov    0xc(%ebp),%edx
c011364c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0113650:	8b 55 08             	mov    0x8(%ebp),%edx
c0113653:	89 14 24             	mov    %edx,(%esp)
c0113656:	ff d0                	call   *%eax
c0113658:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011365b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011365f:	74 05                	je     c0113666 <sfs_fstat+0xa1>
        return ret;
c0113661:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113664:	eb 71                	jmp    c01136d7 <sfs_fstat+0x112>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113666:	8b 45 08             	mov    0x8(%ebp),%eax
c0113669:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011366c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113670:	74 0d                	je     c011367f <sfs_fstat+0xba>
c0113672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113675:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113678:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011367d:	74 24                	je     c01136a3 <sfs_fstat+0xde>
c011367f:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113686:	c0 
c0113687:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011368e:	c0 
c011368f:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0113696:	00 
c0113697:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011369e:	e8 25 d8 fe ff       	call   c0100ec8 <__panic>
c01136a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01136a6:	8b 00                	mov    (%eax),%eax
c01136a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c01136ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136ae:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01136b2:	0f b7 d0             	movzwl %ax,%edx
c01136b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136b8:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c01136bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136be:	8b 50 08             	mov    0x8(%eax),%edx
c01136c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136c4:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c01136c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01136ca:	8b 10                	mov    (%eax),%edx
c01136cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01136cf:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01136d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01136d7:	c9                   	leave  
c01136d8:	c3                   	ret    

c01136d9 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c01136d9:	55                   	push   %ebp
c01136da:	89 e5                	mov    %esp,%ebp
c01136dc:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01136df:	8b 45 08             	mov    0x8(%ebp),%eax
c01136e2:	8b 40 38             	mov    0x38(%eax),%eax
c01136e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01136e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01136ec:	74 0a                	je     c01136f8 <sfs_fsync+0x1f>
c01136ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01136f1:	8b 40 6c             	mov    0x6c(%eax),%eax
c01136f4:	85 c0                	test   %eax,%eax
c01136f6:	74 24                	je     c011371c <sfs_fsync+0x43>
c01136f8:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c01136ff:	c0 
c0113700:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113707:	c0 
c0113708:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c011370f:	00 
c0113710:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113717:	e8 ac d7 fe ff       	call   c0100ec8 <__panic>
c011371c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011371f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113722:	8b 45 08             	mov    0x8(%ebp),%eax
c0113725:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113728:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011372c:	74 0d                	je     c011373b <sfs_fsync+0x62>
c011372e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113731:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113734:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113739:	74 24                	je     c011375f <sfs_fsync+0x86>
c011373b:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113742:	c0 
c0113743:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011374a:	c0 
c011374b:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c0113752:	00 
c0113753:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011375a:	e8 69 d7 fe ff       	call   c0100ec8 <__panic>
c011375f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113762:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c0113765:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c011376c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011376f:	8b 40 08             	mov    0x8(%eax),%eax
c0113772:	85 c0                	test   %eax,%eax
c0113774:	74 6b                	je     c01137e1 <sfs_fsync+0x108>
        lock_sin(sin);
c0113776:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113779:	89 04 24             	mov    %eax,(%esp)
c011377c:	e8 ba e9 ff ff       	call   c011213b <lock_sin>
        {
            if (sin->dirty) {
c0113781:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113784:	8b 40 08             	mov    0x8(%eax),%eax
c0113787:	85 c0                	test   %eax,%eax
c0113789:	74 4b                	je     c01137d6 <sfs_fsync+0xfd>
                sin->dirty = 0;
c011378b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011378e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0113795:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113798:	8b 50 04             	mov    0x4(%eax),%edx
c011379b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011379e:	8b 00                	mov    (%eax),%eax
c01137a0:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01137a7:	00 
c01137a8:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01137ac:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
c01137b3:	00 
c01137b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01137b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01137bb:	89 04 24             	mov    %eax,(%esp)
c01137be:	e8 ae 0e 00 00       	call   c0114671 <sfs_wbuf>
c01137c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01137c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01137ca:	74 0a                	je     c01137d6 <sfs_fsync+0xfd>
                    sin->dirty = 1;
c01137cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137cf:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c01137d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01137d9:	89 04 24             	mov    %eax,(%esp)
c01137dc:	e8 70 e9 ff ff       	call   c0112151 <unlock_sin>
    }
    return ret;
c01137e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01137e4:	c9                   	leave  
c01137e5:	c3                   	ret    

c01137e6 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c01137e6:	55                   	push   %ebp
c01137e7:	89 e5                	mov    %esp,%ebp
c01137e9:	83 ec 58             	sub    $0x58,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01137ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137ef:	8b 40 0c             	mov    0xc(%eax),%eax
c01137f2:	83 f8 02             	cmp    $0x2,%eax
c01137f5:	76 15                	jbe    c011380c <sfs_namefile+0x26>
c01137f7:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c01137fe:	e8 be 14 ff ff       	call   c0104cc1 <kmalloc>
c0113803:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113806:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011380a:	75 0a                	jne    c0113816 <sfs_namefile+0x30>
        return -E_NO_MEM;
c011380c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113811:	e9 bd 02 00 00       	jmp    c0113ad3 <sfs_namefile+0x2ed>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113816:	8b 45 08             	mov    0x8(%ebp),%eax
c0113819:	8b 40 38             	mov    0x38(%eax),%eax
c011381c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c011381f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113823:	74 0a                	je     c011382f <sfs_namefile+0x49>
c0113825:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113828:	8b 40 6c             	mov    0x6c(%eax),%eax
c011382b:	85 c0                	test   %eax,%eax
c011382d:	74 24                	je     c0113853 <sfs_namefile+0x6d>
c011382f:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c0113836:	c0 
c0113837:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011383e:	c0 
c011383f:	c7 44 24 04 e1 02 00 	movl   $0x2e1,0x4(%esp)
c0113846:	00 
c0113847:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011384e:	e8 75 d6 fe ff       	call   c0100ec8 <__panic>
c0113853:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113856:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113859:	8b 45 08             	mov    0x8(%ebp),%eax
c011385c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c011385f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113863:	74 0d                	je     c0113872 <sfs_namefile+0x8c>
c0113865:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113868:	8b 40 2c             	mov    0x2c(%eax),%eax
c011386b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113870:	74 24                	je     c0113896 <sfs_namefile+0xb0>
c0113872:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113879:	c0 
c011387a:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113881:	c0 
c0113882:	c7 44 24 04 e2 02 00 	movl   $0x2e2,0x4(%esp)
c0113889:	00 
c011388a:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113891:	e8 32 d6 fe ff       	call   c0100ec8 <__panic>
c0113896:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113899:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c011389c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011389f:	8b 10                	mov    (%eax),%edx
c01138a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138a4:	8b 40 0c             	mov    0xc(%eax),%eax
c01138a7:	01 d0                	add    %edx,%eax
c01138a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c01138ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138af:	8b 40 0c             	mov    0xc(%eax),%eax
c01138b2:	83 e8 02             	sub    $0x2,%eax
c01138b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c01138b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01138bb:	89 04 24             	mov    %eax,(%esp)
c01138be:	e8 42 b7 ff ff       	call   c010f005 <inode_ref_inc>
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c01138c3:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01138ca:	00 
c01138cb:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01138ce:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01138d2:	c7 44 24 08 98 97 11 	movl   $0xc0119798,0x8(%esp)
c01138d9:	c0 
c01138da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138dd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01138e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01138e4:	89 04 24             	mov    %eax,(%esp)
c01138e7:	e8 4a f7 ff ff       	call   c0113036 <sfs_lookup_once>
c01138ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01138ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01138f3:	74 05                	je     c01138fa <sfs_namefile+0x114>
            goto failed;
c01138f5:	e9 c0 01 00 00       	jmp    c0113aba <sfs_namefile+0x2d4>
        }

        uint32_t ino = sin->ino;
c01138fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01138fd:	8b 40 04             	mov    0x4(%eax),%eax
c0113900:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0113903:	8b 45 08             	mov    0x8(%ebp),%eax
c0113906:	89 04 24             	mov    %eax,(%esp)
c0113909:	e8 11 b7 ff ff       	call   c010f01f <inode_ref_dec>
        if (node == parent) {
c011390e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0113911:	39 45 08             	cmp    %eax,0x8(%ebp)
c0113914:	75 76                	jne    c011398c <sfs_namefile+0x1a6>
            vop_ref_dec(node);
c0113916:	8b 45 08             	mov    0x8(%ebp),%eax
c0113919:	89 04 24             	mov    %eax,(%esp)
c011391c:	e8 fe b6 ff ff       	call   c010f01f <inode_ref_dec>
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c0113921:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113924:	8b 40 0c             	mov    0xc(%eax),%eax
c0113927:	2b 45 e8             	sub    -0x18(%ebp),%eax
c011392a:	83 e8 02             	sub    $0x2,%eax
c011392d:	89 45 d0             	mov    %eax,-0x30(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c0113930:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113933:	8b 00                	mov    (%eax),%eax
c0113935:	8d 50 01             	lea    0x1(%eax),%edx
c0113938:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011393b:	89 44 24 08          	mov    %eax,0x8(%esp)
c011393f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113942:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113946:	89 14 24             	mov    %edx,(%esp)
c0113949:	e8 6a 1b 00 00       	call   c01154b8 <memmove>
c011394e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0113951:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113954:	83 e8 01             	sub    $0x1,%eax
c0113957:	c6 00 2f             	movb   $0x2f,(%eax)
c011395a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011395d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113960:	01 d0                	add    %edx,%eax
c0113962:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c0113965:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113968:	89 44 24 04          	mov    %eax,0x4(%esp)
c011396c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011396f:	89 04 24             	mov    %eax,(%esp)
c0113972:	e8 90 7a ff ff       	call   c010b407 <iobuf_skip>
    kfree(entry);
c0113977:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011397a:	89 04 24             	mov    %eax,(%esp)
c011397d:	e8 5a 13 ff ff       	call   c0104cdc <kfree>
    return 0;
c0113982:	b8 00 00 00 00       	mov    $0x0,%eax
c0113987:	e9 47 01 00 00       	jmp    c0113ad3 <sfs_namefile+0x2ed>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c011398c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011398f:	89 45 08             	mov    %eax,0x8(%ebp)
c0113992:	8b 45 08             	mov    0x8(%ebp),%eax
c0113995:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0113998:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c011399c:	74 0d                	je     c01139ab <sfs_namefile+0x1c5>
c011399e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01139a1:	8b 40 2c             	mov    0x2c(%eax),%eax
c01139a4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01139a9:	74 24                	je     c01139cf <sfs_namefile+0x1e9>
c01139ab:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c01139b2:	c0 
c01139b3:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01139ba:	c0 
c01139bb:	c7 44 24 04 f5 02 00 	movl   $0x2f5,0x4(%esp)
c01139c2:	00 
c01139c3:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01139ca:	e8 f9 d4 fe ff       	call   c0100ec8 <__panic>
c01139cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01139d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c01139d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139d8:	8b 40 04             	mov    0x4(%eax),%eax
c01139db:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01139de:	74 0f                	je     c01139ef <sfs_namefile+0x209>
c01139e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01139e3:	8b 00                	mov    (%eax),%eax
c01139e5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01139e9:	66 83 f8 02          	cmp    $0x2,%ax
c01139ed:	74 24                	je     c0113a13 <sfs_namefile+0x22d>
c01139ef:	c7 44 24 0c 9c 97 11 	movl   $0xc011979c,0xc(%esp)
c01139f6:	c0 
c01139f7:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01139fe:	c0 
c01139ff:	c7 44 24 04 f6 02 00 	movl   $0x2f6,0x4(%esp)
c0113a06:	00 
c0113a07:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113a0e:	e8 b5 d4 fe ff       	call   c0100ec8 <__panic>

        lock_sin(sin);
c0113a13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a16:	89 04 24             	mov    %eax,(%esp)
c0113a19:	e8 1d e7 ff ff       	call   c011213b <lock_sin>
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0113a1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a21:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113a25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0113a28:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113a2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a2f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a33:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113a36:	89 04 24             	mov    %eax,(%esp)
c0113a39:	e8 8c f5 ff ff       	call   c0112fca <sfs_dirent_findino_nolock>
c0113a3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c0113a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a44:	89 04 24             	mov    %eax,(%esp)
c0113a47:	e8 05 e7 ff ff       	call   c0112151 <unlock_sin>

        if (ret != 0) {
c0113a4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113a50:	74 03                	je     c0113a55 <sfs_namefile+0x26f>
            goto failed;
c0113a52:	90                   	nop
c0113a53:	eb 65                	jmp    c0113aba <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c0113a55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a58:	83 c0 04             	add    $0x4,%eax
c0113a5b:	89 04 24             	mov    %eax,(%esp)
c0113a5e:	e8 c0 16 00 00       	call   c0115123 <strlen>
c0113a63:	83 c0 01             	add    $0x1,%eax
c0113a66:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113a69:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a6c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113a6f:	76 09                	jbe    c0113a7a <sfs_namefile+0x294>
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c0113a71:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0113a78:	eb 40                	jmp    c0113aba <sfs_namefile+0x2d4>
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c0113a7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a7d:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0113a80:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a83:	f7 d8                	neg    %eax
c0113a85:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c0113a88:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113a8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113a91:	83 c0 04             	add    $0x4,%eax
c0113a94:	89 54 24 08          	mov    %edx,0x8(%esp)
c0113a98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113a9f:	89 04 24             	mov    %eax,(%esp)
c0113aa2:	e8 b4 1a 00 00       	call   c011555b <memcpy>
        ptr[alen - 1] = '/';
c0113aa7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113aaa:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113aad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ab0:	01 d0                	add    %edx,%eax
c0113ab2:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0113ab5:	e9 09 fe ff ff       	jmp    c01138c3 <sfs_namefile+0xdd>
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0113aba:	8b 45 08             	mov    0x8(%ebp),%eax
c0113abd:	89 04 24             	mov    %eax,(%esp)
c0113ac0:	e8 5a b5 ff ff       	call   c010f01f <inode_ref_dec>
    kfree(entry);
c0113ac5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ac8:	89 04 24             	mov    %eax,(%esp)
c0113acb:	e8 0c 12 ff ff       	call   c0104cdc <kfree>
    return ret;
c0113ad0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113ad3:	c9                   	leave  
c0113ad4:	c3                   	ret    

c0113ad5 <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0113ad5:	55                   	push   %ebp
c0113ad6:	89 e5                	mov    %esp,%ebp
c0113ad8:	83 ec 28             	sub    $0x28,%esp
    int ret, i, nslots = sin->din->blocks;
c0113adb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ade:	8b 00                	mov    (%eax),%eax
c0113ae0:	8b 40 08             	mov    0x8(%eax),%eax
c0113ae3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0113ae6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113aed:	eb 4c                	jmp    c0113b3b <sfs_getdirentry_sub_nolock+0x66>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0113aef:	8b 45 14             	mov    0x14(%ebp),%eax
c0113af2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113af9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113afd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113b04:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b07:	89 04 24             	mov    %eax,(%esp)
c0113b0a:	e8 92 f2 ff ff       	call   c0112da1 <sfs_dirent_read_nolock>
c0113b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113b12:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113b16:	74 05                	je     c0113b1d <sfs_getdirentry_sub_nolock+0x48>
            return ret;
c0113b18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b1b:	eb 2b                	jmp    c0113b48 <sfs_getdirentry_sub_nolock+0x73>
        }
        if (entry->ino != 0) {
c0113b1d:	8b 45 14             	mov    0x14(%ebp),%eax
c0113b20:	8b 00                	mov    (%eax),%eax
c0113b22:	85 c0                	test   %eax,%eax
c0113b24:	74 11                	je     c0113b37 <sfs_getdirentry_sub_nolock+0x62>
            if (slot == 0) {
c0113b26:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113b2a:	75 07                	jne    c0113b33 <sfs_getdirentry_sub_nolock+0x5e>
                return 0;
c0113b2c:	b8 00 00 00 00       	mov    $0x0,%eax
c0113b31:	eb 15                	jmp    c0113b48 <sfs_getdirentry_sub_nolock+0x73>
            }
            slot --;
c0113b33:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0113b37:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0113b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113b3e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0113b41:	7c ac                	jl     c0113aef <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c0113b43:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0113b48:	c9                   	leave  
c0113b49:	c3                   	ret    

c0113b4a <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0113b4a:	55                   	push   %ebp
c0113b4b:	89 e5                	mov    %esp,%ebp
c0113b4d:	83 ec 48             	sub    $0x48,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0113b50:	c7 04 24 04 01 00 00 	movl   $0x104,(%esp)
c0113b57:	e8 65 11 ff ff       	call   c0104cc1 <kmalloc>
c0113b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113b63:	75 0a                	jne    c0113b6f <sfs_getdirentry+0x25>
        return -E_NO_MEM;
c0113b65:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0113b6a:	e9 6b 01 00 00       	jmp    c0113cda <sfs_getdirentry+0x190>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b72:	8b 40 38             	mov    0x38(%eax),%eax
c0113b75:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113b78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0113b7c:	74 0a                	je     c0113b88 <sfs_getdirentry+0x3e>
c0113b7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b81:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113b84:	85 c0                	test   %eax,%eax
c0113b86:	74 24                	je     c0113bac <sfs_getdirentry+0x62>
c0113b88:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c0113b8f:	c0 
c0113b90:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113b97:	c0 
c0113b98:	c7 44 24 04 37 03 00 	movl   $0x337,0x4(%esp)
c0113b9f:	00 
c0113ba0:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113ba7:	e8 1c d3 fe ff       	call   c0100ec8 <__panic>
c0113bac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113baf:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0113bb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113bb8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113bbc:	74 0d                	je     c0113bcb <sfs_getdirentry+0x81>
c0113bbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113bc1:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113bc4:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113bc9:	74 24                	je     c0113bef <sfs_getdirentry+0xa5>
c0113bcb:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113bd2:	c0 
c0113bd3:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113bda:	c0 
c0113bdb:	c7 44 24 04 38 03 00 	movl   $0x338,0x4(%esp)
c0113be2:	00 
c0113be3:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113bea:	e8 d9 d2 fe ff       	call   c0100ec8 <__panic>
c0113bef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113bf2:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c0113bf5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113bf8:	8b 40 04             	mov    0x4(%eax),%eax
c0113bfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0113bfe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113c02:	78 0a                	js     c0113c0e <sfs_getdirentry+0xc4>
c0113c04:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c07:	0f b6 c0             	movzbl %al,%eax
c0113c0a:	85 c0                	test   %eax,%eax
c0113c0c:	74 15                	je     c0113c23 <sfs_getdirentry+0xd9>
        kfree(entry);
c0113c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c11:	89 04 24             	mov    %eax,(%esp)
c0113c14:	e8 c3 10 ff ff       	call   c0104cdc <kfree>
        return -E_INVAL;
c0113c19:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0113c1e:	e9 b7 00 00 00       	jmp    c0113cda <sfs_getdirentry+0x190>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c0113c23:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c26:	c1 e8 08             	shr    $0x8,%eax
c0113c29:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113c2c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0113c2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c32:	8b 00                	mov    (%eax),%eax
c0113c34:	8b 40 08             	mov    0x8(%eax),%eax
c0113c37:	39 c2                	cmp    %eax,%edx
c0113c39:	76 15                	jbe    c0113c50 <sfs_getdirentry+0x106>
        kfree(entry);
c0113c3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c3e:	89 04 24             	mov    %eax,(%esp)
c0113c41:	e8 96 10 ff ff       	call   c0104cdc <kfree>
        return -E_NOENT;
c0113c46:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0113c4b:	e9 8a 00 00 00       	jmp    c0113cda <sfs_getdirentry+0x190>
    }
    lock_sin(sin);
c0113c50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c53:	89 04 24             	mov    %eax,(%esp)
c0113c56:	e8 e0 e4 ff ff       	call   c011213b <lock_sin>
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0113c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c5e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0113c62:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113c65:	89 44 24 08          	mov    %eax,0x8(%esp)
c0113c69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113c70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113c73:	89 04 24             	mov    %eax,(%esp)
c0113c76:	e8 5a fe ff ff       	call   c0113ad5 <sfs_getdirentry_sub_nolock>
c0113c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113c7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113c82:	74 0d                	je     c0113c91 <sfs_getdirentry+0x147>
        unlock_sin(sin);
c0113c84:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c87:	89 04 24             	mov    %eax,(%esp)
c0113c8a:	e8 c2 e4 ff ff       	call   c0112151 <unlock_sin>
        goto out;
c0113c8f:	eb 3b                	jmp    c0113ccc <sfs_getdirentry+0x182>
    }
    unlock_sin(sin);
c0113c91:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c94:	89 04 24             	mov    %eax,(%esp)
c0113c97:	e8 b5 e4 ff ff       	call   c0112151 <unlock_sin>
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0113c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c9f:	83 c0 04             	add    $0x4,%eax
c0113ca2:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0113ca9:	00 
c0113caa:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0113cb1:	00 
c0113cb2:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0113cb9:	00 
c0113cba:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113cc1:	89 04 24             	mov    %eax,(%esp)
c0113cc4:	e8 29 76 ff ff       	call   c010b2f2 <iobuf_move>
c0113cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0113ccc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ccf:	89 04 24             	mov    %eax,(%esp)
c0113cd2:	e8 05 10 ff ff       	call   c0104cdc <kfree>
    return ret;
c0113cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113cda:	c9                   	leave  
c0113cdb:	c3                   	ret    

c0113cdc <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0113cdc:	55                   	push   %ebp
c0113cdd:	89 e5                	mov    %esp,%ebp
c0113cdf:	83 ec 38             	sub    $0x38,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0113ce2:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ce5:	8b 40 38             	mov    0x38(%eax),%eax
c0113ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113cef:	74 0a                	je     c0113cfb <sfs_reclaim+0x1f>
c0113cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113cf4:	8b 40 6c             	mov    0x6c(%eax),%eax
c0113cf7:	85 c0                	test   %eax,%eax
c0113cf9:	74 24                	je     c0113d1f <sfs_reclaim+0x43>
c0113cfb:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c0113d02:	c0 
c0113d03:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113d0a:	c0 
c0113d0b:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
c0113d12:	00 
c0113d13:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113d1a:	e8 a9 d1 fe ff       	call   c0100ec8 <__panic>
c0113d1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113d22:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0113d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d28:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113d2b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113d2f:	74 0d                	je     c0113d3e <sfs_reclaim+0x62>
c0113d31:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d34:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113d37:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113d3c:	74 24                	je     c0113d62 <sfs_reclaim+0x86>
c0113d3e:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113d45:	c0 
c0113d46:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113d4d:	c0 
c0113d4e:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
c0113d55:	00 
c0113d56:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113d5d:	e8 66 d1 fe ff       	call   c0100ec8 <__panic>
c0113d62:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113d65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0113d68:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0113d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113d72:	89 04 24             	mov    %eax,(%esp)
c0113d75:	e8 4d 0b 00 00       	call   c01148c7 <lock_sfs_fs>
    assert(sin->reclaim_count > 0);
c0113d7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113d7d:	8b 40 0c             	mov    0xc(%eax),%eax
c0113d80:	85 c0                	test   %eax,%eax
c0113d82:	7f 24                	jg     c0113da8 <sfs_reclaim+0xcc>
c0113d84:	c7 44 24 0c ce 97 11 	movl   $0xc01197ce,0xc(%esp)
c0113d8b:	c0 
c0113d8c:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113d93:	c0 
c0113d94:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c0113d9b:	00 
c0113d9c:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113da3:	e8 20 d1 fe ff       	call   c0100ec8 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0113da8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113dab:	8b 40 0c             	mov    0xc(%eax),%eax
c0113dae:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113db1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113db4:	89 50 0c             	mov    %edx,0xc(%eax)
c0113db7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113dba:	8b 40 0c             	mov    0xc(%eax),%eax
c0113dbd:	85 c0                	test   %eax,%eax
c0113dbf:	0f 85 a1 01 00 00    	jne    c0113f66 <sfs_reclaim+0x28a>
c0113dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dc8:	89 04 24             	mov    %eax,(%esp)
c0113dcb:	e8 60 e3 ff ff       	call   c0112130 <inode_ref_count>
c0113dd0:	85 c0                	test   %eax,%eax
c0113dd2:	0f 85 8e 01 00 00    	jne    c0113f66 <sfs_reclaim+0x28a>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0113dd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113ddb:	8b 00                	mov    (%eax),%eax
c0113ddd:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113de1:	66 85 c0             	test   %ax,%ax
c0113de4:	0f 85 81 00 00 00    	jne    c0113e6b <sfs_reclaim+0x18f>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0113dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ded:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113df0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0113df4:	74 17                	je     c0113e0d <sfs_reclaim+0x131>
c0113df6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113df9:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113dfc:	85 c0                	test   %eax,%eax
c0113dfe:	74 0d                	je     c0113e0d <sfs_reclaim+0x131>
c0113e00:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e03:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e06:	8b 40 30             	mov    0x30(%eax),%eax
c0113e09:	85 c0                	test   %eax,%eax
c0113e0b:	75 24                	jne    c0113e31 <sfs_reclaim+0x155>
c0113e0d:	c7 44 24 0c e8 97 11 	movl   $0xc01197e8,0xc(%esp)
c0113e14:	c0 
c0113e15:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113e1c:	c0 
c0113e1d:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c0113e24:	00 
c0113e25:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113e2c:	e8 97 d0 fe ff       	call   c0100ec8 <__panic>
c0113e31:	c7 44 24 04 39 98 11 	movl   $0xc0119839,0x4(%esp)
c0113e38:	c0 
c0113e39:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e3c:	89 04 24             	mov    %eax,(%esp)
c0113e3f:	e8 c9 b3 ff ff       	call   c010f20d <inode_check>
c0113e44:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113e47:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e4a:	8b 40 30             	mov    0x30(%eax),%eax
c0113e4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0113e54:	00 
c0113e55:	8b 55 08             	mov    0x8(%ebp),%edx
c0113e58:	89 14 24             	mov    %edx,(%esp)
c0113e5b:	ff d0                	call   *%eax
c0113e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113e60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113e64:	74 05                	je     c0113e6b <sfs_reclaim+0x18f>
            goto failed_unlock;
c0113e66:	e9 fb 00 00 00       	jmp    c0113f66 <sfs_reclaim+0x28a>
        }
    }
    if (sin->dirty) {
c0113e6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e6e:	8b 40 08             	mov    0x8(%eax),%eax
c0113e71:	85 c0                	test   %eax,%eax
c0113e73:	74 76                	je     c0113eeb <sfs_reclaim+0x20f>
        if ((ret = vop_fsync(node)) != 0) {
c0113e75:	8b 45 08             	mov    0x8(%ebp),%eax
c0113e78:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0113e7b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113e7f:	74 17                	je     c0113e98 <sfs_reclaim+0x1bc>
c0113e81:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e84:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e87:	85 c0                	test   %eax,%eax
c0113e89:	74 0d                	je     c0113e98 <sfs_reclaim+0x1bc>
c0113e8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113e8e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113e91:	8b 40 18             	mov    0x18(%eax),%eax
c0113e94:	85 c0                	test   %eax,%eax
c0113e96:	75 24                	jne    c0113ebc <sfs_reclaim+0x1e0>
c0113e98:	c7 44 24 0c a4 96 11 	movl   $0xc01196a4,0xc(%esp)
c0113e9f:	c0 
c0113ea0:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113ea7:	c0 
c0113ea8:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
c0113eaf:	00 
c0113eb0:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113eb7:	e8 0c d0 fe ff       	call   c0100ec8 <__panic>
c0113ebc:	c7 44 24 04 f2 96 11 	movl   $0xc01196f2,0x4(%esp)
c0113ec3:	c0 
c0113ec4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ec7:	89 04 24             	mov    %eax,(%esp)
c0113eca:	e8 3e b3 ff ff       	call   c010f20d <inode_check>
c0113ecf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ed2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113ed5:	8b 40 18             	mov    0x18(%eax),%eax
c0113ed8:	8b 55 08             	mov    0x8(%ebp),%edx
c0113edb:	89 14 24             	mov    %edx,(%esp)
c0113ede:	ff d0                	call   *%eax
c0113ee0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113ee3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113ee7:	74 02                	je     c0113eeb <sfs_reclaim+0x20f>
            goto failed_unlock;
c0113ee9:	eb 7b                	jmp    c0113f66 <sfs_reclaim+0x28a>
        }
    }
    sfs_remove_links(sin);
c0113eeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113eee:	89 04 24             	mov    %eax,(%esp)
c0113ef1:	e8 b5 e3 ff ff       	call   c01122ab <sfs_remove_links>
    unlock_sfs_fs(sfs);
c0113ef6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ef9:	89 04 24             	mov    %eax,(%esp)
c0113efc:	e8 f2 09 00 00       	call   c01148f3 <unlock_sfs_fs>

    if (sin->din->nlinks == 0) {
c0113f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f04:	8b 00                	mov    (%eax),%eax
c0113f06:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0113f0a:	66 85 c0             	test   %ax,%ax
c0113f0d:	75 38                	jne    c0113f47 <sfs_reclaim+0x26b>
        sfs_block_free(sfs, sin->ino);
c0113f0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f12:	8b 40 04             	mov    0x4(%eax),%eax
c0113f15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f1c:	89 04 24             	mov    %eax,(%esp)
c0113f1f:	e8 17 e5 ff ff       	call   c011243b <sfs_block_free>
        if ((ent = sin->din->indirect) != 0) {
c0113f24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f27:	8b 00                	mov    (%eax),%eax
c0113f29:	8b 40 3c             	mov    0x3c(%eax),%eax
c0113f2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0113f2f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0113f33:	74 12                	je     c0113f47 <sfs_reclaim+0x26b>
            sfs_block_free(sfs, ent);
c0113f35:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113f38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0113f3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f3f:	89 04 24             	mov    %eax,(%esp)
c0113f42:	e8 f4 e4 ff ff       	call   c011243b <sfs_block_free>
        }
    }
    kfree(sin->din);
c0113f47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f4a:	8b 00                	mov    (%eax),%eax
c0113f4c:	89 04 24             	mov    %eax,(%esp)
c0113f4f:	e8 88 0d ff ff       	call   c0104cdc <kfree>
    vop_kill(node);
c0113f54:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f57:	89 04 24             	mov    %eax,(%esp)
c0113f5a:	e8 2d b0 ff ff       	call   c010ef8c <inode_kill>
    return 0;
c0113f5f:	b8 00 00 00 00       	mov    $0x0,%eax
c0113f64:	eb 0e                	jmp    c0113f74 <sfs_reclaim+0x298>

failed_unlock:
    unlock_sfs_fs(sfs);
c0113f66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113f69:	89 04 24             	mov    %eax,(%esp)
c0113f6c:	e8 82 09 00 00       	call   c01148f3 <unlock_sfs_fs>
    return ret;
c0113f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113f74:	c9                   	leave  
c0113f75:	c3                   	ret    

c0113f76 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0113f76:	55                   	push   %ebp
c0113f77:	89 e5                	mov    %esp,%ebp
c0113f79:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0113f7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113f82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113f86:	74 0d                	je     c0113f95 <sfs_gettype+0x1f>
c0113f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113f8b:	8b 40 2c             	mov    0x2c(%eax),%eax
c0113f8e:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0113f93:	74 24                	je     c0113fb9 <sfs_gettype+0x43>
c0113f95:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0113f9c:	c0 
c0113f9d:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0113fa4:	c0 
c0113fa5:	c7 44 24 04 80 03 00 	movl   $0x380,0x4(%esp)
c0113fac:	00 
c0113fad:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0113fb4:	e8 0f cf fe ff       	call   c0100ec8 <__panic>
c0113fb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113fbc:	8b 00                	mov    (%eax),%eax
c0113fbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0113fc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113fc4:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0113fc8:	0f b7 c0             	movzwl %ax,%eax
c0113fcb:	83 f8 02             	cmp    $0x2,%eax
c0113fce:	74 0c                	je     c0113fdc <sfs_gettype+0x66>
c0113fd0:	83 f8 03             	cmp    $0x3,%eax
c0113fd3:	74 27                	je     c0113ffc <sfs_gettype+0x86>
c0113fd5:	83 f8 01             	cmp    $0x1,%eax
c0113fd8:	74 12                	je     c0113fec <sfs_gettype+0x76>
c0113fda:	eb 30                	jmp    c011400c <sfs_gettype+0x96>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0113fdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fdf:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0113fe5:	b8 00 00 00 00       	mov    $0x0,%eax
c0113fea:	eb 4a                	jmp    c0114036 <sfs_gettype+0xc0>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0113fec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fef:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0113ff5:	b8 00 00 00 00       	mov    $0x0,%eax
c0113ffa:	eb 3a                	jmp    c0114036 <sfs_gettype+0xc0>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0113ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113fff:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0114005:	b8 00 00 00 00       	mov    $0x0,%eax
c011400a:	eb 2a                	jmp    c0114036 <sfs_gettype+0xc0>
    }
    panic("invalid file type %d.\n", din->type);
c011400c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011400f:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0114013:	0f b7 c0             	movzwl %ax,%eax
c0114016:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011401a:	c7 44 24 08 40 94 11 	movl   $0xc0119440,0x8(%esp)
c0114021:	c0 
c0114022:	c7 44 24 04 8c 03 00 	movl   $0x38c,0x4(%esp)
c0114029:	00 
c011402a:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0114031:	e8 92 ce fe ff       	call   c0100ec8 <__panic>
}
c0114036:	c9                   	leave  
c0114037:	c3                   	ret    

c0114038 <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0114038:	55                   	push   %ebp
c0114039:	89 e5                	mov    %esp,%ebp
c011403b:	83 ec 28             	sub    $0x28,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c011403e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114042:	78 0a                	js     c011404e <sfs_tryseek+0x16>
c0114044:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114047:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c011404c:	76 0a                	jbe    c0114058 <sfs_tryseek+0x20>
        return -E_INVAL;
c011404e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114053:	e9 ca 00 00 00       	jmp    c0114122 <sfs_tryseek+0xea>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114058:	8b 45 08             	mov    0x8(%ebp),%eax
c011405b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011405e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114062:	74 0d                	je     c0114071 <sfs_tryseek+0x39>
c0114064:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114067:	8b 40 2c             	mov    0x2c(%eax),%eax
c011406a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011406f:	74 24                	je     c0114095 <sfs_tryseek+0x5d>
c0114071:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c0114078:	c0 
c0114079:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0114080:	c0 
c0114081:	c7 44 24 04 97 03 00 	movl   $0x397,0x4(%esp)
c0114088:	00 
c0114089:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0114090:	e8 33 ce fe ff       	call   c0100ec8 <__panic>
c0114095:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114098:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c011409b:	8b 55 0c             	mov    0xc(%ebp),%edx
c011409e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01140a1:	8b 00                	mov    (%eax),%eax
c01140a3:	8b 00                	mov    (%eax),%eax
c01140a5:	39 c2                	cmp    %eax,%edx
c01140a7:	76 74                	jbe    c011411d <sfs_tryseek+0xe5>
        return vop_truncate(node, pos);
c01140a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01140ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01140af:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01140b3:	74 17                	je     c01140cc <sfs_tryseek+0x94>
c01140b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140b8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140bb:	85 c0                	test   %eax,%eax
c01140bd:	74 0d                	je     c01140cc <sfs_tryseek+0x94>
c01140bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140c2:	8b 40 3c             	mov    0x3c(%eax),%eax
c01140c5:	8b 40 30             	mov    0x30(%eax),%eax
c01140c8:	85 c0                	test   %eax,%eax
c01140ca:	75 24                	jne    c01140f0 <sfs_tryseek+0xb8>
c01140cc:	c7 44 24 0c e8 97 11 	movl   $0xc01197e8,0xc(%esp)
c01140d3:	c0 
c01140d4:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01140db:	c0 
c01140dc:	c7 44 24 04 99 03 00 	movl   $0x399,0x4(%esp)
c01140e3:	00 
c01140e4:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01140eb:	e8 d8 cd fe ff       	call   c0100ec8 <__panic>
c01140f0:	c7 44 24 04 39 98 11 	movl   $0xc0119839,0x4(%esp)
c01140f7:	c0 
c01140f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01140fb:	89 04 24             	mov    %eax,(%esp)
c01140fe:	e8 0a b1 ff ff       	call   c010f20d <inode_check>
c0114103:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114106:	8b 40 3c             	mov    0x3c(%eax),%eax
c0114109:	8b 40 30             	mov    0x30(%eax),%eax
c011410c:	8b 55 0c             	mov    0xc(%ebp),%edx
c011410f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114113:	8b 55 08             	mov    0x8(%ebp),%edx
c0114116:	89 14 24             	mov    %edx,(%esp)
c0114119:	ff d0                	call   *%eax
c011411b:	eb 05                	jmp    c0114122 <sfs_tryseek+0xea>
    }
    return 0;
c011411d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114122:	c9                   	leave  
c0114123:	c3                   	ret    

c0114124 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0114124:	55                   	push   %ebp
c0114125:	89 e5                	mov    %esp,%ebp
c0114127:	83 ec 48             	sub    $0x48,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c011412a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011412e:	78 0a                	js     c011413a <sfs_truncfile+0x16>
c0114130:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114133:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0114138:	76 0a                	jbe    c0114144 <sfs_truncfile+0x20>
        return -E_INVAL;
c011413a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c011413f:	e9 d4 01 00 00       	jmp    c0114318 <sfs_truncfile+0x1f4>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0114144:	8b 45 08             	mov    0x8(%ebp),%eax
c0114147:	8b 40 38             	mov    0x38(%eax),%eax
c011414a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011414d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0114151:	74 0a                	je     c011415d <sfs_truncfile+0x39>
c0114153:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114156:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114159:	85 c0                	test   %eax,%eax
c011415b:	74 24                	je     c0114181 <sfs_truncfile+0x5d>
c011415d:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c0114164:	c0 
c0114165:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011416c:	c0 
c011416d:	c7 44 24 04 a6 03 00 	movl   $0x3a6,0x4(%esp)
c0114174:	00 
c0114175:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011417c:	e8 47 cd fe ff       	call   c0100ec8 <__panic>
c0114181:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114184:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0114187:	8b 45 08             	mov    0x8(%ebp),%eax
c011418a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011418d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114191:	74 0d                	je     c01141a0 <sfs_truncfile+0x7c>
c0114193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114196:	8b 40 2c             	mov    0x2c(%eax),%eax
c0114199:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011419e:	74 24                	je     c01141c4 <sfs_truncfile+0xa0>
c01141a0:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c01141a7:	c0 
c01141a8:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01141af:	c0 
c01141b0:	c7 44 24 04 a7 03 00 	movl   $0x3a7,0x4(%esp)
c01141b7:	00 
c01141b8:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01141bf:	e8 04 cd fe ff       	call   c0100ec8 <__panic>
c01141c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01141c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c01141ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01141cd:	8b 00                	mov    (%eax),%eax
c01141cf:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c01141d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c01141d9:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c01141e0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01141e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01141e6:	01 d0                	add    %edx,%eax
c01141e8:	83 e8 01             	sub    $0x1,%eax
c01141eb:	ba 00 00 00 00       	mov    $0x0,%edx
c01141f0:	f7 75 d8             	divl   -0x28(%ebp)
c01141f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c01141f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01141f9:	8b 10                	mov    (%eax),%edx
c01141fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141fe:	39 c2                	cmp    %eax,%edx
c0114200:	75 39                	jne    c011423b <sfs_truncfile+0x117>
        assert(tblks == din->blocks);
c0114202:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114205:	8b 40 08             	mov    0x8(%eax),%eax
c0114208:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011420b:	74 24                	je     c0114231 <sfs_truncfile+0x10d>
c011420d:	c7 44 24 0c 42 98 11 	movl   $0xc0119842,0xc(%esp)
c0114214:	c0 
c0114215:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c011421c:	c0 
c011421d:	c7 44 24 04 ae 03 00 	movl   $0x3ae,0x4(%esp)
c0114224:	00 
c0114225:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c011422c:	e8 97 cc fe ff       	call   c0100ec8 <__panic>
        return 0;
c0114231:	b8 00 00 00 00       	mov    $0x0,%eax
c0114236:	e9 dd 00 00 00       	jmp    c0114318 <sfs_truncfile+0x1f4>
    }

    lock_sin(sin);
c011423b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011423e:	89 04 24             	mov    %eax,(%esp)
c0114241:	e8 f5 de ff ff       	call   c011213b <lock_sin>
	// old number of disk blocks of file
    nblks = din->blocks;
c0114246:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114249:	8b 40 08             	mov    0x8(%eax),%eax
c011424c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c011424f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114252:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114255:	73 3f                	jae    c0114296 <sfs_truncfile+0x172>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0114257:	eb 33                	jmp    c011428c <sfs_truncfile+0x168>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0114259:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114260:	00 
c0114261:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114264:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114268:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011426b:	89 44 24 04          	mov    %eax,0x4(%esp)
c011426f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114272:	89 04 24             	mov    %eax,(%esp)
c0114275:	e8 b6 e9 ff ff       	call   c0112c30 <sfs_bmap_load_nolock>
c011427a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011427d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0114281:	74 05                	je     c0114288 <sfs_truncfile+0x164>
                goto out_unlock;
c0114283:	e9 82 00 00 00       	jmp    c011430a <sfs_truncfile+0x1e6>
            }
            nblks ++;
c0114288:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c011428c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011428f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0114292:	75 c5                	jne    c0114259 <sfs_truncfile+0x135>
c0114294:	eb 33                	jmp    c01142c9 <sfs_truncfile+0x1a5>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0114296:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0114299:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011429c:	73 2b                	jae    c01142c9 <sfs_truncfile+0x1a5>
		// try to reduce the file size 
        while (tblks != nblks) {
c011429e:	eb 21                	jmp    c01142c1 <sfs_truncfile+0x19d>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c01142a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01142a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01142a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01142aa:	89 04 24             	mov    %eax,(%esp)
c01142ad:	e8 66 ea ff ff       	call   c0112d18 <sfs_bmap_truncate_nolock>
c01142b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01142b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01142b9:	74 02                	je     c01142bd <sfs_truncfile+0x199>
                goto out_unlock;
c01142bb:	eb 4d                	jmp    c011430a <sfs_truncfile+0x1e6>
            }
            nblks --;
c01142bd:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c01142c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01142c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01142c7:	75 d7                	jne    c01142a0 <sfs_truncfile+0x17c>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c01142c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01142cc:	8b 40 08             	mov    0x8(%eax),%eax
c01142cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01142d2:	74 24                	je     c01142f8 <sfs_truncfile+0x1d4>
c01142d4:	c7 44 24 0c 57 98 11 	movl   $0xc0119857,0xc(%esp)
c01142db:	c0 
c01142dc:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01142e3:	c0 
c01142e4:	c7 44 24 04 c7 03 00 	movl   $0x3c7,0x4(%esp)
c01142eb:	00 
c01142ec:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01142f3:	e8 d0 cb fe ff       	call   c0100ec8 <__panic>
    din->size = len;
c01142f8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01142fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01142fe:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0114300:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114303:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)

out_unlock:
    unlock_sin(sin);
c011430a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011430d:	89 04 24             	mov    %eax,(%esp)
c0114310:	e8 3c de ff ff       	call   c0112151 <unlock_sin>
    return ret;
c0114315:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114318:	c9                   	leave  
c0114319:	c3                   	ret    

c011431a <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c011431a:	55                   	push   %ebp
c011431b:	89 e5                	mov    %esp,%ebp
c011431d:	83 ec 48             	sub    $0x48,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0114320:	8b 45 08             	mov    0x8(%ebp),%eax
c0114323:	8b 40 38             	mov    0x38(%eax),%eax
c0114326:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0114329:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011432d:	74 0a                	je     c0114339 <sfs_lookup+0x1f>
c011432f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114332:	8b 40 6c             	mov    0x6c(%eax),%eax
c0114335:	85 c0                	test   %eax,%eax
c0114337:	74 24                	je     c011435d <sfs_lookup+0x43>
c0114339:	c7 44 24 0c 14 97 11 	movl   $0xc0119714,0xc(%esp)
c0114340:	c0 
c0114341:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0114348:	c0 
c0114349:	c7 44 24 04 d7 03 00 	movl   $0x3d7,0x4(%esp)
c0114350:	00 
c0114351:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0114358:	e8 6b cb fe ff       	call   c0100ec8 <__panic>
c011435d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114360:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0114363:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114366:	0f b6 00             	movzbl (%eax),%eax
c0114369:	84 c0                	test   %al,%al
c011436b:	74 0a                	je     c0114377 <sfs_lookup+0x5d>
c011436d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114370:	0f b6 00             	movzbl (%eax),%eax
c0114373:	3c 2f                	cmp    $0x2f,%al
c0114375:	75 24                	jne    c011439b <sfs_lookup+0x81>
c0114377:	c7 44 24 0c 6c 98 11 	movl   $0xc011986c,0xc(%esp)
c011437e:	c0 
c011437f:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c0114386:	c0 
c0114387:	c7 44 24 04 d8 03 00 	movl   $0x3d8,0x4(%esp)
c011438e:	00 
c011438f:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c0114396:	e8 2d cb fe ff       	call   c0100ec8 <__panic>
    vop_ref_inc(node);
c011439b:	8b 45 08             	mov    0x8(%ebp),%eax
c011439e:	89 04 24             	mov    %eax,(%esp)
c01143a1:	e8 5f ac ff ff       	call   c010f005 <inode_ref_inc>
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01143a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01143a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01143ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01143b0:	74 0d                	je     c01143bf <sfs_lookup+0xa5>
c01143b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143b5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01143b8:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01143bd:	74 24                	je     c01143e3 <sfs_lookup+0xc9>
c01143bf:	c7 44 24 0c 10 95 11 	movl   $0xc0119510,0xc(%esp)
c01143c6:	c0 
c01143c7:	c7 44 24 08 bf 94 11 	movl   $0xc01194bf,0x8(%esp)
c01143ce:	c0 
c01143cf:	c7 44 24 04 da 03 00 	movl   $0x3da,0x4(%esp)
c01143d6:	00 
c01143d7:	c7 04 24 57 94 11 c0 	movl   $0xc0119457,(%esp)
c01143de:	e8 e5 ca fe ff       	call   c0100ec8 <__panic>
c01143e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01143e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01143e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01143ec:	8b 00                	mov    (%eax),%eax
c01143ee:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01143f2:	66 83 f8 02          	cmp    $0x2,%ax
c01143f6:	74 12                	je     c011440a <sfs_lookup+0xf0>
        vop_ref_dec(node);
c01143f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01143fb:	89 04 24             	mov    %eax,(%esp)
c01143fe:	e8 1c ac ff ff       	call   c010f01f <inode_ref_dec>
        return -E_NOTDIR;
c0114403:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0114408:	eb 4e                	jmp    c0114458 <sfs_lookup+0x13e>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c011440a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114411:	00 
c0114412:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0114415:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114419:	8b 45 0c             	mov    0xc(%ebp),%eax
c011441c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114420:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0114423:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114427:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011442a:	89 04 24             	mov    %eax,(%esp)
c011442d:	e8 04 ec ff ff       	call   c0113036 <sfs_lookup_once>
c0114432:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0114435:	8b 45 08             	mov    0x8(%ebp),%eax
c0114438:	89 04 24             	mov    %eax,(%esp)
c011443b:	e8 df ab ff ff       	call   c010f01f <inode_ref_dec>
    if (ret != 0) {
c0114440:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114444:	74 05                	je     c011444b <sfs_lookup+0x131>
        return ret;
c0114446:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114449:	eb 0d                	jmp    c0114458 <sfs_lookup+0x13e>
    }
    *node_store = subnode;
c011444b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011444e:	8b 45 10             	mov    0x10(%ebp),%eax
c0114451:	89 10                	mov    %edx,(%eax)
    return 0;
c0114453:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0114458:	c9                   	leave  
c0114459:	c3                   	ret    

c011445a <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c011445a:	55                   	push   %ebp
c011445b:	89 e5                	mov    %esp,%ebp
c011445d:	83 ec 38             	sub    $0x38,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c0114460:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0114464:	75 06                	jne    c011446c <sfs_rwblock_nolock+0x12>
c0114466:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011446a:	75 0b                	jne    c0114477 <sfs_rwblock_nolock+0x1d>
c011446c:	8b 45 08             	mov    0x8(%ebp),%eax
c011446f:	8b 40 04             	mov    0x4(%eax),%eax
c0114472:	3b 45 10             	cmp    0x10(%ebp),%eax
c0114475:	77 24                	ja     c011449b <sfs_rwblock_nolock+0x41>
c0114477:	c7 44 24 0c 8c 98 11 	movl   $0xc011988c,0xc(%esp)
c011447e:	c0 
c011447f:	c7 44 24 08 c0 98 11 	movl   $0xc01198c0,0x8(%esp)
c0114486:	c0 
c0114487:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c011448e:	00 
c011448f:	c7 04 24 d5 98 11 c0 	movl   $0xc01198d5,(%esp)
c0114496:	e8 2d ca fe ff       	call   c0100ec8 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c011449b:	8b 45 10             	mov    0x10(%ebp),%eax
c011449e:	c1 e0 0c             	shl    $0xc,%eax
c01144a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01144a5:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01144ac:	00 
c01144ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01144b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01144b4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01144b7:	89 04 24             	mov    %eax,(%esp)
c01144ba:	e8 05 6e ff ff       	call   c010b2c4 <iobuf_init>
c01144bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c01144c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01144c5:	8b 40 2c             	mov    0x2c(%eax),%eax
c01144c8:	8b 40 10             	mov    0x10(%eax),%eax
c01144cb:	8b 55 08             	mov    0x8(%ebp),%edx
c01144ce:	8b 52 2c             	mov    0x2c(%edx),%edx
c01144d1:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01144d4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01144d8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c01144db:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01144df:	89 14 24             	mov    %edx,(%esp)
c01144e2:	ff d0                	call   *%eax
}
c01144e4:	c9                   	leave  
c01144e5:	c3                   	ret    

c01144e6 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c01144e6:	55                   	push   %ebp
c01144e7:	89 e5                	mov    %esp,%ebp
c01144e9:	83 ec 38             	sub    $0x38,%esp
    int ret = 0;
c01144ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01144f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01144f6:	89 04 24             	mov    %eax,(%esp)
c01144f9:	e8 df 03 00 00       	call   c01148dd <lock_sfs_io>
    {
        while (nblks != 0) {
c01144fe:	eb 42                	jmp    c0114542 <sfs_rwblock+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0114500:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114507:	00 
c0114508:	8b 45 18             	mov    0x18(%ebp),%eax
c011450b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011450f:	8b 45 10             	mov    0x10(%ebp),%eax
c0114512:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114516:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114519:	89 44 24 04          	mov    %eax,0x4(%esp)
c011451d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114520:	89 04 24             	mov    %eax,(%esp)
c0114523:	e8 32 ff ff ff       	call   c011445a <sfs_rwblock_nolock>
c0114528:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011452b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011452f:	74 02                	je     c0114533 <sfs_rwblock+0x4d>
                break;
c0114531:	eb 15                	jmp    c0114548 <sfs_rwblock+0x62>
            }
            blkno ++, nblks --;
c0114533:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0114537:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c011453b:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0114542:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0114546:	75 b8                	jne    c0114500 <sfs_rwblock+0x1a>
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0114548:	8b 45 08             	mov    0x8(%ebp),%eax
c011454b:	89 04 24             	mov    %eax,(%esp)
c011454e:	e8 b6 03 00 00       	call   c0114909 <unlock_sfs_io>
    return ret;
c0114553:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114556:	c9                   	leave  
c0114557:	c3                   	ret    

c0114558 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114558:	55                   	push   %ebp
c0114559:	89 e5                	mov    %esp,%ebp
c011455b:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c011455e:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c0114565:	00 
c0114566:	8b 45 14             	mov    0x14(%ebp),%eax
c0114569:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011456d:	8b 45 10             	mov    0x10(%ebp),%eax
c0114570:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114574:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114577:	89 44 24 04          	mov    %eax,0x4(%esp)
c011457b:	8b 45 08             	mov    0x8(%ebp),%eax
c011457e:	89 04 24             	mov    %eax,(%esp)
c0114581:	e8 60 ff ff ff       	call   c01144e6 <sfs_rwblock>
}
c0114586:	c9                   	leave  
c0114587:	c3                   	ret    

c0114588 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0114588:	55                   	push   %ebp
c0114589:	89 e5                	mov    %esp,%ebp
c011458b:	83 ec 28             	sub    $0x28,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c011458e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114595:	00 
c0114596:	8b 45 14             	mov    0x14(%ebp),%eax
c0114599:	89 44 24 0c          	mov    %eax,0xc(%esp)
c011459d:	8b 45 10             	mov    0x10(%ebp),%eax
c01145a0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01145a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01145a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01145ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01145ae:	89 04 24             	mov    %eax,(%esp)
c01145b1:	e8 30 ff ff ff       	call   c01144e6 <sfs_rwblock>
}
c01145b6:	c9                   	leave  
c01145b7:	c3                   	ret    

c01145b8 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c01145b8:	55                   	push   %ebp
c01145b9:	89 e5                	mov    %esp,%ebp
c01145bb:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c01145be:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01145c2:	78 18                	js     c01145dc <sfs_rbuf+0x24>
c01145c4:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c01145cb:	7f 0f                	jg     c01145dc <sfs_rbuf+0x24>
c01145cd:	8b 55 18             	mov    0x18(%ebp),%edx
c01145d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01145d3:	01 d0                	add    %edx,%eax
c01145d5:	3d 00 10 00 00       	cmp    $0x1000,%eax
c01145da:	76 24                	jbe    c0114600 <sfs_rbuf+0x48>
c01145dc:	c7 44 24 0c ec 98 11 	movl   $0xc01198ec,0xc(%esp)
c01145e3:	c0 
c01145e4:	c7 44 24 08 c0 98 11 	movl   $0xc01198c0,0x8(%esp)
c01145eb:	c0 
c01145ec:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01145f3:	00 
c01145f4:	c7 04 24 d5 98 11 c0 	movl   $0xc01198d5,(%esp)
c01145fb:	e8 c8 c8 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0114600:	8b 45 08             	mov    0x8(%ebp),%eax
c0114603:	89 04 24             	mov    %eax,(%esp)
c0114606:	e8 d2 02 00 00       	call   c01148dd <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c011460b:	8b 45 08             	mov    0x8(%ebp),%eax
c011460e:	8b 40 38             	mov    0x38(%eax),%eax
c0114611:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114618:	00 
c0114619:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0114620:	00 
c0114621:	8b 55 14             	mov    0x14(%ebp),%edx
c0114624:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114628:	89 44 24 04          	mov    %eax,0x4(%esp)
c011462c:	8b 45 08             	mov    0x8(%ebp),%eax
c011462f:	89 04 24             	mov    %eax,(%esp)
c0114632:	e8 23 fe ff ff       	call   c011445a <sfs_rwblock_nolock>
c0114637:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011463a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011463e:	75 21                	jne    c0114661 <sfs_rbuf+0xa9>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c0114640:	8b 45 08             	mov    0x8(%ebp),%eax
c0114643:	8b 50 38             	mov    0x38(%eax),%edx
c0114646:	8b 45 18             	mov    0x18(%ebp),%eax
c0114649:	01 c2                	add    %eax,%edx
c011464b:	8b 45 10             	mov    0x10(%ebp),%eax
c011464e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114652:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114656:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114659:	89 04 24             	mov    %eax,(%esp)
c011465c:	e8 fa 0e 00 00       	call   c011555b <memcpy>
        }
    }
    unlock_sfs_io(sfs);
c0114661:	8b 45 08             	mov    0x8(%ebp),%eax
c0114664:	89 04 24             	mov    %eax,(%esp)
c0114667:	e8 9d 02 00 00       	call   c0114909 <unlock_sfs_io>
    return ret;
c011466c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011466f:	c9                   	leave  
c0114670:	c3                   	ret    

c0114671 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0114671:	55                   	push   %ebp
c0114672:	89 e5                	mov    %esp,%ebp
c0114674:	83 ec 38             	sub    $0x38,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0114677:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011467b:	78 18                	js     c0114695 <sfs_wbuf+0x24>
c011467d:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0114684:	7f 0f                	jg     c0114695 <sfs_wbuf+0x24>
c0114686:	8b 55 18             	mov    0x18(%ebp),%edx
c0114689:	8b 45 10             	mov    0x10(%ebp),%eax
c011468c:	01 d0                	add    %edx,%eax
c011468e:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0114693:	76 24                	jbe    c01146b9 <sfs_wbuf+0x48>
c0114695:	c7 44 24 0c ec 98 11 	movl   $0xc01198ec,0xc(%esp)
c011469c:	c0 
c011469d:	c7 44 24 08 c0 98 11 	movl   $0xc01198c0,0x8(%esp)
c01146a4:	c0 
c01146a5:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01146ac:	00 
c01146ad:	c7 04 24 d5 98 11 c0 	movl   $0xc01198d5,(%esp)
c01146b4:	e8 0f c8 fe ff       	call   c0100ec8 <__panic>
    int ret;
    lock_sfs_io(sfs);
c01146b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01146bc:	89 04 24             	mov    %eax,(%esp)
c01146bf:	e8 19 02 00 00       	call   c01148dd <lock_sfs_io>
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01146c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01146c7:	8b 40 38             	mov    0x38(%eax),%eax
c01146ca:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c01146d1:	00 
c01146d2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01146d9:	00 
c01146da:	8b 55 14             	mov    0x14(%ebp),%edx
c01146dd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01146e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01146e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01146e8:	89 04 24             	mov    %eax,(%esp)
c01146eb:	e8 6a fd ff ff       	call   c011445a <sfs_rwblock_nolock>
c01146f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01146f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01146f7:	75 50                	jne    c0114749 <sfs_wbuf+0xd8>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c01146f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01146fc:	8b 50 38             	mov    0x38(%eax),%edx
c01146ff:	8b 45 18             	mov    0x18(%ebp),%eax
c0114702:	01 c2                	add    %eax,%edx
c0114704:	8b 45 10             	mov    0x10(%ebp),%eax
c0114707:	89 44 24 08          	mov    %eax,0x8(%esp)
c011470b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011470e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114712:	89 14 24             	mov    %edx,(%esp)
c0114715:	e8 41 0e 00 00       	call   c011555b <memcpy>
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c011471a:	8b 45 08             	mov    0x8(%ebp),%eax
c011471d:	8b 40 38             	mov    0x38(%eax),%eax
c0114720:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c0114727:	00 
c0114728:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c011472f:	00 
c0114730:	8b 55 14             	mov    0x14(%ebp),%edx
c0114733:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114737:	89 44 24 04          	mov    %eax,0x4(%esp)
c011473b:	8b 45 08             	mov    0x8(%ebp),%eax
c011473e:	89 04 24             	mov    %eax,(%esp)
c0114741:	e8 14 fd ff ff       	call   c011445a <sfs_rwblock_nolock>
c0114746:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0114749:	8b 45 08             	mov    0x8(%ebp),%eax
c011474c:	89 04 24             	mov    %eax,(%esp)
c011474f:	e8 b5 01 00 00       	call   c0114909 <unlock_sfs_io>
    return ret;
c0114754:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114757:	c9                   	leave  
c0114758:	c3                   	ret    

c0114759 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0114759:	55                   	push   %ebp
c011475a:	89 e5                	mov    %esp,%ebp
c011475c:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c011475f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114762:	89 04 24             	mov    %eax,(%esp)
c0114765:	e8 73 01 00 00       	call   c01148dd <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c011476a:	8b 45 08             	mov    0x8(%ebp),%eax
c011476d:	8b 40 38             	mov    0x38(%eax),%eax
c0114770:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0114777:	00 
c0114778:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c011477f:	00 
c0114780:	89 04 24             	mov    %eax,(%esp)
c0114783:	e8 f1 0c 00 00       	call   c0115479 <memset>
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0114788:	8b 55 08             	mov    0x8(%ebp),%edx
c011478b:	8b 45 08             	mov    0x8(%ebp),%eax
c011478e:	8b 40 38             	mov    0x38(%eax),%eax
c0114791:	c7 44 24 08 2c 00 00 	movl   $0x2c,0x8(%esp)
c0114798:	00 
c0114799:	89 54 24 04          	mov    %edx,0x4(%esp)
c011479d:	89 04 24             	mov    %eax,(%esp)
c01147a0:	e8 b6 0d 00 00       	call   c011555b <memcpy>
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c01147a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01147a8:	8b 40 38             	mov    0x38(%eax),%eax
c01147ab:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c01147b2:	00 
c01147b3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01147ba:	00 
c01147bb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01147c2:	00 
c01147c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01147c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01147ca:	89 04 24             	mov    %eax,(%esp)
c01147cd:	e8 88 fc ff ff       	call   c011445a <sfs_rwblock_nolock>
c01147d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c01147d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01147d8:	89 04 24             	mov    %eax,(%esp)
c01147db:	e8 29 01 00 00       	call   c0114909 <unlock_sfs_io>
    return ret;
c01147e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01147e3:	c9                   	leave  
c01147e4:	c3                   	ret    

c01147e5 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c01147e5:	55                   	push   %ebp
c01147e6:	89 e5                	mov    %esp,%ebp
c01147e8:	83 ec 28             	sub    $0x28,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c01147eb:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c01147f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01147f5:	8b 50 04             	mov    0x4(%eax),%edx
c01147f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01147fb:	01 d0                	add    %edx,%eax
c01147fd:	83 e8 01             	sub    $0x1,%eax
c0114800:	ba 00 00 00 00       	mov    $0x0,%edx
c0114805:	f7 75 f4             	divl   -0xc(%ebp)
c0114808:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c011480b:	8b 45 08             	mov    0x8(%ebp),%eax
c011480e:	8b 40 30             	mov    0x30(%eax),%eax
c0114811:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114818:	00 
c0114819:	89 04 24             	mov    %eax,(%esp)
c011481c:	e8 e9 cf ff ff       	call   c011180a <bitmap_getdata>
c0114821:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0114824:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0114828:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c011482f:	00 
c0114830:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114834:	8b 45 08             	mov    0x8(%ebp),%eax
c0114837:	89 04 24             	mov    %eax,(%esp)
c011483a:	e8 49 fd ff ff       	call   c0114588 <sfs_wblock>
}
c011483f:	c9                   	leave  
c0114840:	c3                   	ret    

c0114841 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0114841:	55                   	push   %ebp
c0114842:	89 e5                	mov    %esp,%ebp
c0114844:	83 ec 38             	sub    $0x38,%esp
    int ret;
    lock_sfs_io(sfs);
c0114847:	8b 45 08             	mov    0x8(%ebp),%eax
c011484a:	89 04 24             	mov    %eax,(%esp)
c011484d:	e8 8b 00 00 00       	call   c01148dd <lock_sfs_io>
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0114852:	8b 45 08             	mov    0x8(%ebp),%eax
c0114855:	8b 40 38             	mov    0x38(%eax),%eax
c0114858:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c011485f:	00 
c0114860:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0114867:	00 
c0114868:	89 04 24             	mov    %eax,(%esp)
c011486b:	e8 09 0c 00 00       	call   c0115479 <memset>
        while (nblks != 0) {
c0114870:	eb 3f                	jmp    c01148b1 <sfs_clear_block+0x70>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0114872:	8b 45 08             	mov    0x8(%ebp),%eax
c0114875:	8b 40 38             	mov    0x38(%eax),%eax
c0114878:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
c011487f:	00 
c0114880:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0114887:	00 
c0114888:	8b 55 0c             	mov    0xc(%ebp),%edx
c011488b:	89 54 24 08          	mov    %edx,0x8(%esp)
c011488f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114893:	8b 45 08             	mov    0x8(%ebp),%eax
c0114896:	89 04 24             	mov    %eax,(%esp)
c0114899:	e8 bc fb ff ff       	call   c011445a <sfs_rwblock_nolock>
c011489e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01148a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01148a5:	74 02                	je     c01148a9 <sfs_clear_block+0x68>
                break;
c01148a7:	eb 0e                	jmp    c01148b7 <sfs_clear_block+0x76>
            }
            blkno ++, nblks --;
c01148a9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01148ad:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c01148b1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01148b5:	75 bb                	jne    c0114872 <sfs_clear_block+0x31>
                break;
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c01148b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01148ba:	89 04 24             	mov    %eax,(%esp)
c01148bd:	e8 47 00 00 00       	call   c0114909 <unlock_sfs_io>
    return ret;
c01148c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01148c5:	c9                   	leave  
c01148c6:	c3                   	ret    

c01148c7 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c01148c7:	55                   	push   %ebp
c01148c8:	89 e5                	mov    %esp,%ebp
c01148ca:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->fs_sem));
c01148cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01148d0:	83 c0 3c             	add    $0x3c,%eax
c01148d3:	89 04 24             	mov    %eax,(%esp)
c01148d6:	e8 a2 53 ff ff       	call   c0109c7d <down>
}
c01148db:	c9                   	leave  
c01148dc:	c3                   	ret    

c01148dd <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c01148dd:	55                   	push   %ebp
c01148de:	89 e5                	mov    %esp,%ebp
c01148e0:	83 ec 18             	sub    $0x18,%esp
    down(&(sfs->io_sem));
c01148e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01148e6:	83 c0 48             	add    $0x48,%eax
c01148e9:	89 04 24             	mov    %eax,(%esp)
c01148ec:	e8 8c 53 ff ff       	call   c0109c7d <down>
}
c01148f1:	c9                   	leave  
c01148f2:	c3                   	ret    

c01148f3 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c01148f3:	55                   	push   %ebp
c01148f4:	89 e5                	mov    %esp,%ebp
c01148f6:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->fs_sem));
c01148f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01148fc:	83 c0 3c             	add    $0x3c,%eax
c01148ff:	89 04 24             	mov    %eax,(%esp)
c0114902:	e8 5b 53 ff ff       	call   c0109c62 <up>
}
c0114907:	c9                   	leave  
c0114908:	c3                   	ret    

c0114909 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c0114909:	55                   	push   %ebp
c011490a:	89 e5                	mov    %esp,%ebp
c011490c:	83 ec 18             	sub    $0x18,%esp
    up(&(sfs->io_sem));
c011490f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114912:	83 c0 48             	add    $0x48,%eax
c0114915:	89 04 24             	mov    %eax,(%esp)
c0114918:	e8 45 53 ff ff       	call   c0109c62 <up>
}
c011491d:	c9                   	leave  
c011491e:	c3                   	ret    

c011491f <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c011491f:	55                   	push   %ebp
c0114920:	89 e5                	mov    %esp,%ebp
c0114922:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114925:	8b 45 08             	mov    0x8(%ebp),%eax
c0114928:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c011492e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0114931:	b8 20 00 00 00       	mov    $0x20,%eax
c0114936:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114939:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011493c:	89 c1                	mov    %eax,%ecx
c011493e:	d3 ea                	shr    %cl,%edx
c0114940:	89 d0                	mov    %edx,%eax
}
c0114942:	c9                   	leave  
c0114943:	c3                   	ret    

c0114944 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0114944:	55                   	push   %ebp
c0114945:	89 e5                	mov    %esp,%ebp
c0114947:	83 ec 58             	sub    $0x58,%esp
c011494a:	8b 45 14             	mov    0x14(%ebp),%eax
c011494d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0114950:	8b 45 18             	mov    0x18(%ebp),%eax
c0114953:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0114956:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0114959:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c011495c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011495f:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0114962:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0114965:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0114968:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011496b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011496e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114971:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0114974:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114977:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011497a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011497e:	74 1c                	je     c011499c <printnum+0x58>
c0114980:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114983:	ba 00 00 00 00       	mov    $0x0,%edx
c0114988:	f7 75 e4             	divl   -0x1c(%ebp)
c011498b:	89 55 f4             	mov    %edx,-0xc(%ebp)
c011498e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114991:	ba 00 00 00 00       	mov    $0x0,%edx
c0114996:	f7 75 e4             	divl   -0x1c(%ebp)
c0114999:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011499c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011499f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01149a2:	f7 75 e4             	divl   -0x1c(%ebp)
c01149a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01149a8:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01149ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01149ae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01149b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01149b4:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01149b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01149ba:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c01149bd:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01149c0:	ba 00 00 00 00       	mov    $0x0,%edx
c01149c5:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01149c8:	77 64                	ja     c0114a2e <printnum+0xea>
c01149ca:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01149cd:	72 05                	jb     c01149d4 <printnum+0x90>
c01149cf:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01149d2:	77 5a                	ja     c0114a2e <printnum+0xea>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c01149d4:	8b 45 20             	mov    0x20(%ebp),%eax
c01149d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01149da:	8b 45 24             	mov    0x24(%ebp),%eax
c01149dd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01149e1:	89 54 24 18          	mov    %edx,0x18(%esp)
c01149e5:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01149e8:	89 44 24 14          	mov    %eax,0x14(%esp)
c01149ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01149ef:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01149f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01149f6:	89 54 24 10          	mov    %edx,0x10(%esp)
c01149fa:	8b 45 10             	mov    0x10(%ebp),%eax
c01149fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a08:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a0b:	89 04 24             	mov    %eax,(%esp)
c0114a0e:	e8 31 ff ff ff       	call   c0114944 <printnum>
c0114a13:	eb 23                	jmp    c0114a38 <printnum+0xf4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0114a15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114a18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114a1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0114a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114a23:	8b 45 24             	mov    0x24(%ebp),%eax
c0114a26:	89 04 24             	mov    %eax,(%esp)
c0114a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a2c:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0114a2e:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0114a32:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0114a36:	7f dd                	jg     c0114a15 <printnum+0xd1>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0114a38:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0114a3b:	05 44 9b 11 c0       	add    $0xc0119b44,%eax
c0114a40:	0f b6 00             	movzbl (%eax),%eax
c0114a43:	0f be c0             	movsbl %al,%eax
c0114a46:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114a49:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114a4d:	8b 55 10             	mov    0x10(%ebp),%edx
c0114a50:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114a54:	89 04 24             	mov    %eax,(%esp)
c0114a57:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a5a:	ff d0                	call   *%eax
}
c0114a5c:	c9                   	leave  
c0114a5d:	c3                   	ret    

c0114a5e <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0114a5e:	55                   	push   %ebp
c0114a5f:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114a61:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114a65:	7e 14                	jle    c0114a7b <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0114a67:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a6a:	8b 00                	mov    (%eax),%eax
c0114a6c:	8d 48 08             	lea    0x8(%eax),%ecx
c0114a6f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a72:	89 0a                	mov    %ecx,(%edx)
c0114a74:	8b 50 04             	mov    0x4(%eax),%edx
c0114a77:	8b 00                	mov    (%eax),%eax
c0114a79:	eb 30                	jmp    c0114aab <getuint+0x4d>
    }
    else if (lflag) {
c0114a7b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114a7f:	74 16                	je     c0114a97 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0114a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a84:	8b 00                	mov    (%eax),%eax
c0114a86:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a89:	8b 55 08             	mov    0x8(%ebp),%edx
c0114a8c:	89 0a                	mov    %ecx,(%edx)
c0114a8e:	8b 00                	mov    (%eax),%eax
c0114a90:	ba 00 00 00 00       	mov    $0x0,%edx
c0114a95:	eb 14                	jmp    c0114aab <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0114a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0114a9a:	8b 00                	mov    (%eax),%eax
c0114a9c:	8d 48 04             	lea    0x4(%eax),%ecx
c0114a9f:	8b 55 08             	mov    0x8(%ebp),%edx
c0114aa2:	89 0a                	mov    %ecx,(%edx)
c0114aa4:	8b 00                	mov    (%eax),%eax
c0114aa6:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0114aab:	5d                   	pop    %ebp
c0114aac:	c3                   	ret    

c0114aad <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0114aad:	55                   	push   %ebp
c0114aae:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0114ab0:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0114ab4:	7e 14                	jle    c0114aca <getint+0x1d>
        return va_arg(*ap, long long);
c0114ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ab9:	8b 00                	mov    (%eax),%eax
c0114abb:	8d 48 08             	lea    0x8(%eax),%ecx
c0114abe:	8b 55 08             	mov    0x8(%ebp),%edx
c0114ac1:	89 0a                	mov    %ecx,(%edx)
c0114ac3:	8b 50 04             	mov    0x4(%eax),%edx
c0114ac6:	8b 00                	mov    (%eax),%eax
c0114ac8:	eb 28                	jmp    c0114af2 <getint+0x45>
    }
    else if (lflag) {
c0114aca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0114ace:	74 12                	je     c0114ae2 <getint+0x35>
        return va_arg(*ap, long);
c0114ad0:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ad3:	8b 00                	mov    (%eax),%eax
c0114ad5:	8d 48 04             	lea    0x4(%eax),%ecx
c0114ad8:	8b 55 08             	mov    0x8(%ebp),%edx
c0114adb:	89 0a                	mov    %ecx,(%edx)
c0114add:	8b 00                	mov    (%eax),%eax
c0114adf:	99                   	cltd   
c0114ae0:	eb 10                	jmp    c0114af2 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0114ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ae5:	8b 00                	mov    (%eax),%eax
c0114ae7:	8d 48 04             	lea    0x4(%eax),%ecx
c0114aea:	8b 55 08             	mov    0x8(%ebp),%edx
c0114aed:	89 0a                	mov    %ecx,(%edx)
c0114aef:	8b 00                	mov    (%eax),%eax
c0114af1:	99                   	cltd   
    }
}
c0114af2:	5d                   	pop    %ebp
c0114af3:	c3                   	ret    

c0114af4 <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0114af4:	55                   	push   %ebp
c0114af5:	89 e5                	mov    %esp,%ebp
c0114af7:	83 ec 38             	sub    $0x38,%esp
    va_list ap;

    va_start(ap, fmt);
c0114afa:	8d 45 18             	lea    0x18(%ebp),%eax
c0114afd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0114b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0114b03:	89 44 24 10          	mov    %eax,0x10(%esp)
c0114b07:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b0a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114b0e:	8b 45 10             	mov    0x10(%ebp),%eax
c0114b11:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114b15:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114b18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b1f:	89 04 24             	mov    %eax,(%esp)
c0114b22:	e8 02 00 00 00       	call   c0114b29 <vprintfmt>
    va_end(ap);
}
c0114b27:	c9                   	leave  
c0114b28:	c3                   	ret    

c0114b29 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0114b29:	55                   	push   %ebp
c0114b2a:	89 e5                	mov    %esp,%ebp
c0114b2c:	56                   	push   %esi
c0114b2d:	53                   	push   %ebx
c0114b2e:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114b31:	eb 1f                	jmp    c0114b52 <vprintfmt+0x29>
            if (ch == '\0') {
c0114b33:	85 db                	test   %ebx,%ebx
c0114b35:	75 05                	jne    c0114b3c <vprintfmt+0x13>
                return;
c0114b37:	e9 33 04 00 00       	jmp    c0114f6f <vprintfmt+0x446>
            }
            putch(ch, putdat, fd);
c0114b3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114b3f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114b43:	8b 45 10             	mov    0x10(%ebp),%eax
c0114b46:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114b4a:	89 1c 24             	mov    %ebx,(%esp)
c0114b4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0114b50:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114b52:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b55:	8d 50 01             	lea    0x1(%eax),%edx
c0114b58:	89 55 14             	mov    %edx,0x14(%ebp)
c0114b5b:	0f b6 00             	movzbl (%eax),%eax
c0114b5e:	0f b6 d8             	movzbl %al,%ebx
c0114b61:	83 fb 25             	cmp    $0x25,%ebx
c0114b64:	75 cd                	jne    c0114b33 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0114b66:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0114b6a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0114b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114b74:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0114b77:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0114b7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0114b81:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0114b84:	8b 45 14             	mov    0x14(%ebp),%eax
c0114b87:	8d 50 01             	lea    0x1(%eax),%edx
c0114b8a:	89 55 14             	mov    %edx,0x14(%ebp)
c0114b8d:	0f b6 00             	movzbl (%eax),%eax
c0114b90:	0f b6 d8             	movzbl %al,%ebx
c0114b93:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0114b96:	83 f8 55             	cmp    $0x55,%eax
c0114b99:	0f 87 98 03 00 00    	ja     c0114f37 <vprintfmt+0x40e>
c0114b9f:	8b 04 85 68 9b 11 c0 	mov    -0x3fee6498(,%eax,4),%eax
c0114ba6:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0114ba8:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0114bac:	eb d6                	jmp    c0114b84 <vprintfmt+0x5b>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0114bae:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0114bb2:	eb d0                	jmp    c0114b84 <vprintfmt+0x5b>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114bb4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0114bbb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0114bbe:	89 d0                	mov    %edx,%eax
c0114bc0:	c1 e0 02             	shl    $0x2,%eax
c0114bc3:	01 d0                	add    %edx,%eax
c0114bc5:	01 c0                	add    %eax,%eax
c0114bc7:	01 d8                	add    %ebx,%eax
c0114bc9:	83 e8 30             	sub    $0x30,%eax
c0114bcc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0114bcf:	8b 45 14             	mov    0x14(%ebp),%eax
c0114bd2:	0f b6 00             	movzbl (%eax),%eax
c0114bd5:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0114bd8:	83 fb 2f             	cmp    $0x2f,%ebx
c0114bdb:	7e 0b                	jle    c0114be8 <vprintfmt+0xbf>
c0114bdd:	83 fb 39             	cmp    $0x39,%ebx
c0114be0:	7f 06                	jg     c0114be8 <vprintfmt+0xbf>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0114be2:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0114be6:	eb d3                	jmp    c0114bbb <vprintfmt+0x92>
            goto process_precision;
c0114be8:	eb 33                	jmp    c0114c1d <vprintfmt+0xf4>

        case '*':
            precision = va_arg(ap, int);
c0114bea:	8b 45 18             	mov    0x18(%ebp),%eax
c0114bed:	8d 50 04             	lea    0x4(%eax),%edx
c0114bf0:	89 55 18             	mov    %edx,0x18(%ebp)
c0114bf3:	8b 00                	mov    (%eax),%eax
c0114bf5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0114bf8:	eb 23                	jmp    c0114c1d <vprintfmt+0xf4>

        case '.':
            if (width < 0)
c0114bfa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114bfe:	79 0c                	jns    c0114c0c <vprintfmt+0xe3>
                width = 0;
c0114c00:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0114c07:	e9 78 ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>
c0114c0c:	e9 73 ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>

        case '#':
            altflag = 1;
c0114c11:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0114c18:	e9 67 ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>

        process_precision:
            if (width < 0)
c0114c1d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114c21:	79 12                	jns    c0114c35 <vprintfmt+0x10c>
                width = precision, precision = -1;
c0114c23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114c26:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114c29:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0114c30:	e9 4f ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>
c0114c35:	e9 4a ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0114c3a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0114c3e:	e9 41 ff ff ff       	jmp    c0114b84 <vprintfmt+0x5b>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0114c43:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c46:	8d 50 04             	lea    0x4(%eax),%edx
c0114c49:	89 55 18             	mov    %edx,0x18(%ebp)
c0114c4c:	8b 00                	mov    (%eax),%eax
c0114c4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114c51:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114c55:	8b 55 10             	mov    0x10(%ebp),%edx
c0114c58:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114c5c:	89 04 24             	mov    %eax,(%esp)
c0114c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114c62:	ff d0                	call   *%eax
            break;
c0114c64:	e9 00 03 00 00       	jmp    c0114f69 <vprintfmt+0x440>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0114c69:	8b 45 18             	mov    0x18(%ebp),%eax
c0114c6c:	8d 50 04             	lea    0x4(%eax),%edx
c0114c6f:	89 55 18             	mov    %edx,0x18(%ebp)
c0114c72:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0114c74:	85 db                	test   %ebx,%ebx
c0114c76:	79 02                	jns    c0114c7a <vprintfmt+0x151>
                err = -err;
c0114c78:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0114c7a:	83 fb 18             	cmp    $0x18,%ebx
c0114c7d:	7f 0b                	jg     c0114c8a <vprintfmt+0x161>
c0114c7f:	8b 34 9d e0 9a 11 c0 	mov    -0x3fee6520(,%ebx,4),%esi
c0114c86:	85 f6                	test   %esi,%esi
c0114c88:	75 2a                	jne    c0114cb4 <vprintfmt+0x18b>
                printfmt(putch, fd, putdat, "error %d", err);
c0114c8a:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c0114c8e:	c7 44 24 0c 55 9b 11 	movl   $0xc0119b55,0xc(%esp)
c0114c95:	c0 
c0114c96:	8b 45 10             	mov    0x10(%ebp),%eax
c0114c99:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114c9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114ca0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ca7:	89 04 24             	mov    %eax,(%esp)
c0114caa:	e8 45 fe ff ff       	call   c0114af4 <printfmt>
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0114caf:	e9 b5 02 00 00       	jmp    c0114f69 <vprintfmt+0x440>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0114cb4:	89 74 24 10          	mov    %esi,0x10(%esp)
c0114cb8:	c7 44 24 0c 5e 9b 11 	movl   $0xc0119b5e,0xc(%esp)
c0114cbf:	c0 
c0114cc0:	8b 45 10             	mov    0x10(%ebp),%eax
c0114cc3:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114cca:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114cce:	8b 45 08             	mov    0x8(%ebp),%eax
c0114cd1:	89 04 24             	mov    %eax,(%esp)
c0114cd4:	e8 1b fe ff ff       	call   c0114af4 <printfmt>
            }
            break;
c0114cd9:	e9 8b 02 00 00       	jmp    c0114f69 <vprintfmt+0x440>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0114cde:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ce1:	8d 50 04             	lea    0x4(%eax),%edx
c0114ce4:	89 55 18             	mov    %edx,0x18(%ebp)
c0114ce7:	8b 30                	mov    (%eax),%esi
c0114ce9:	85 f6                	test   %esi,%esi
c0114ceb:	75 05                	jne    c0114cf2 <vprintfmt+0x1c9>
                p = "(null)";
c0114ced:	be 61 9b 11 c0       	mov    $0xc0119b61,%esi
            }
            if (width > 0 && padc != '-') {
c0114cf2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114cf6:	7e 45                	jle    c0114d3d <vprintfmt+0x214>
c0114cf8:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0114cfc:	74 3f                	je     c0114d3d <vprintfmt+0x214>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114cfe:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c0114d01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0114d04:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d08:	89 34 24             	mov    %esi,(%esp)
c0114d0b:	e8 3b 04 00 00       	call   c011514b <strnlen>
c0114d10:	29 c3                	sub    %eax,%ebx
c0114d12:	89 d8                	mov    %ebx,%eax
c0114d14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0114d17:	eb 1e                	jmp    c0114d37 <vprintfmt+0x20e>
                    putch(padc, putdat, fd);
c0114d19:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0114d1d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114d20:	89 54 24 08          	mov    %edx,0x8(%esp)
c0114d24:	8b 55 10             	mov    0x10(%ebp),%edx
c0114d27:	89 54 24 04          	mov    %edx,0x4(%esp)
c0114d2b:	89 04 24             	mov    %eax,(%esp)
c0114d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d31:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0114d33:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d37:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114d3b:	7f dc                	jg     c0114d19 <vprintfmt+0x1f0>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114d3d:	eb 46                	jmp    c0114d85 <vprintfmt+0x25c>
                if (altflag && (ch < ' ' || ch > '~')) {
c0114d3f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0114d43:	74 26                	je     c0114d6b <vprintfmt+0x242>
c0114d45:	83 fb 1f             	cmp    $0x1f,%ebx
c0114d48:	7e 05                	jle    c0114d4f <vprintfmt+0x226>
c0114d4a:	83 fb 7e             	cmp    $0x7e,%ebx
c0114d4d:	7e 1c                	jle    c0114d6b <vprintfmt+0x242>
                    putch('?', putdat, fd);
c0114d4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d56:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d5d:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c0114d64:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d67:	ff d0                	call   *%eax
c0114d69:	eb 16                	jmp    c0114d81 <vprintfmt+0x258>
                }
                else {
                    putch(ch, putdat, fd);
c0114d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114d6e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114d72:	8b 45 10             	mov    0x10(%ebp),%eax
c0114d75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114d79:	89 1c 24             	mov    %ebx,(%esp)
c0114d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114d7f:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0114d81:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114d85:	89 f0                	mov    %esi,%eax
c0114d87:	8d 70 01             	lea    0x1(%eax),%esi
c0114d8a:	0f b6 00             	movzbl (%eax),%eax
c0114d8d:	0f be d8             	movsbl %al,%ebx
c0114d90:	85 db                	test   %ebx,%ebx
c0114d92:	74 10                	je     c0114da4 <vprintfmt+0x27b>
c0114d94:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114d98:	78 a5                	js     c0114d3f <vprintfmt+0x216>
c0114d9a:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0114d9e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0114da2:	79 9b                	jns    c0114d3f <vprintfmt+0x216>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114da4:	eb 1e                	jmp    c0114dc4 <vprintfmt+0x29b>
                putch(' ', putdat, fd);
c0114da6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114da9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114dad:	8b 45 10             	mov    0x10(%ebp),%eax
c0114db0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114db4:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0114dbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0114dbe:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114dc0:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114dc4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114dc8:	7f dc                	jg     c0114da6 <vprintfmt+0x27d>
                putch(' ', putdat, fd);
            }
            break;
c0114dca:	e9 9a 01 00 00       	jmp    c0114f69 <vprintfmt+0x440>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c0114dcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114dd2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dd6:	8d 45 18             	lea    0x18(%ebp),%eax
c0114dd9:	89 04 24             	mov    %eax,(%esp)
c0114ddc:	e8 cc fc ff ff       	call   c0114aad <getint>
c0114de1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114de4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114dea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114ded:	85 d2                	test   %edx,%edx
c0114def:	79 2d                	jns    c0114e1e <vprintfmt+0x2f5>
                putch('-', putdat, fd);
c0114df1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114df4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114df8:	8b 45 10             	mov    0x10(%ebp),%eax
c0114dfb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114dff:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c0114e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e09:	ff d0                	call   *%eax
                num = -(long long)num;
c0114e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114e0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114e11:	f7 d8                	neg    %eax
c0114e13:	83 d2 00             	adc    $0x0,%edx
c0114e16:	f7 da                	neg    %edx
c0114e18:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e1b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114e1e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114e25:	e9 b6 00 00 00       	jmp    c0114ee0 <vprintfmt+0x3b7>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114e2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e31:	8d 45 18             	lea    0x18(%ebp),%eax
c0114e34:	89 04 24             	mov    %eax,(%esp)
c0114e37:	e8 22 fc ff ff       	call   c0114a5e <getuint>
c0114e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e3f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0114e42:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114e49:	e9 92 00 00 00       	jmp    c0114ee0 <vprintfmt+0x3b7>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114e4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114e51:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e55:	8d 45 18             	lea    0x18(%ebp),%eax
c0114e58:	89 04 24             	mov    %eax,(%esp)
c0114e5b:	e8 fe fb ff ff       	call   c0114a5e <getuint>
c0114e60:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114e63:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0114e66:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0114e6d:	eb 71                	jmp    c0114ee0 <vprintfmt+0x3b7>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0114e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e72:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e76:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e7d:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c0114e84:	8b 45 08             	mov    0x8(%ebp),%eax
c0114e87:	ff d0                	call   *%eax
            putch('x', putdat, fd);
c0114e89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114e8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114e90:	8b 45 10             	mov    0x10(%ebp),%eax
c0114e93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114e97:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c0114e9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ea1:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0114ea3:	8b 45 18             	mov    0x18(%ebp),%eax
c0114ea6:	8d 50 04             	lea    0x4(%eax),%edx
c0114ea9:	89 55 18             	mov    %edx,0x18(%ebp)
c0114eac:	8b 00                	mov    (%eax),%eax
c0114eae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114eb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0114eb8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0114ebf:	eb 1f                	jmp    c0114ee0 <vprintfmt+0x3b7>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0114ec1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0114ec4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114ec8:	8d 45 18             	lea    0x18(%ebp),%eax
c0114ecb:	89 04 24             	mov    %eax,(%esp)
c0114ece:	e8 8b fb ff ff       	call   c0114a5e <getuint>
c0114ed3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114ed6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0114ed9:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0114ee0:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0114ee4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114ee7:	89 54 24 1c          	mov    %edx,0x1c(%esp)
c0114eeb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114eee:	89 54 24 18          	mov    %edx,0x18(%esp)
c0114ef2:	89 44 24 14          	mov    %eax,0x14(%esp)
c0114ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114ef9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0114efc:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114f00:	89 54 24 10          	mov    %edx,0x10(%esp)
c0114f04:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f07:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f0e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f15:	89 04 24             	mov    %eax,(%esp)
c0114f18:	e8 27 fa ff ff       	call   c0114944 <printnum>
            break;
c0114f1d:	eb 4a                	jmp    c0114f69 <vprintfmt+0x440>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0114f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f22:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f26:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f29:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f2d:	89 1c 24             	mov    %ebx,(%esp)
c0114f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f33:	ff d0                	call   *%eax
            break;
c0114f35:	eb 32                	jmp    c0114f69 <vprintfmt+0x440>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0114f37:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f3a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114f3e:	8b 45 10             	mov    0x10(%ebp),%eax
c0114f41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114f45:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c0114f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0114f4f:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114f51:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114f55:	eb 04                	jmp    c0114f5b <vprintfmt+0x432>
c0114f57:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114f5b:	8b 45 14             	mov    0x14(%ebp),%eax
c0114f5e:	83 e8 01             	sub    $0x1,%eax
c0114f61:	0f b6 00             	movzbl (%eax),%eax
c0114f64:	3c 25                	cmp    $0x25,%al
c0114f66:	75 ef                	jne    c0114f57 <vprintfmt+0x42e>
                /* do nothing */;
            break;
c0114f68:	90                   	nop
        }
    }
c0114f69:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0114f6a:	e9 e3 fb ff ff       	jmp    c0114b52 <vprintfmt+0x29>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114f6f:	83 c4 40             	add    $0x40,%esp
c0114f72:	5b                   	pop    %ebx
c0114f73:	5e                   	pop    %esi
c0114f74:	5d                   	pop    %ebp
c0114f75:	c3                   	ret    

c0114f76 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0114f76:	55                   	push   %ebp
c0114f77:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0114f79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f7c:	8b 40 08             	mov    0x8(%eax),%eax
c0114f7f:	8d 50 01             	lea    0x1(%eax),%edx
c0114f82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f85:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0114f88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f8b:	8b 10                	mov    (%eax),%edx
c0114f8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f90:	8b 40 04             	mov    0x4(%eax),%eax
c0114f93:	39 c2                	cmp    %eax,%edx
c0114f95:	73 12                	jae    c0114fa9 <sprintputch+0x33>
        *b->buf ++ = ch;
c0114f97:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114f9a:	8b 00                	mov    (%eax),%eax
c0114f9c:	8d 48 01             	lea    0x1(%eax),%ecx
c0114f9f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0114fa2:	89 0a                	mov    %ecx,(%edx)
c0114fa4:	8b 55 08             	mov    0x8(%ebp),%edx
c0114fa7:	88 10                	mov    %dl,(%eax)
    }
}
c0114fa9:	5d                   	pop    %ebp
c0114faa:	c3                   	ret    

c0114fab <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0114fab:	55                   	push   %ebp
c0114fac:	89 e5                	mov    %esp,%ebp
c0114fae:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0114fb1:	8d 45 14             	lea    0x14(%ebp),%eax
c0114fb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0114fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114fba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0114fbe:	8b 45 10             	mov    0x10(%ebp),%eax
c0114fc1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0114fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fc8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0114fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fcf:	89 04 24             	mov    %eax,(%esp)
c0114fd2:	e8 08 00 00 00       	call   c0114fdf <vsnprintf>
c0114fd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0114fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0114fdd:	c9                   	leave  
c0114fde:	c3                   	ret    

c0114fdf <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0114fdf:	55                   	push   %ebp
c0114fe0:	89 e5                	mov    %esp,%ebp
c0114fe2:	83 ec 38             	sub    $0x38,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0114fe5:	8b 45 08             	mov    0x8(%ebp),%eax
c0114fe8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0114feb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114fee:	8d 50 ff             	lea    -0x1(%eax),%edx
c0114ff1:	8b 45 08             	mov    0x8(%ebp),%eax
c0114ff4:	01 d0                	add    %edx,%eax
c0114ff6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114ff9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0115000:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0115004:	74 0a                	je     c0115010 <vsnprintf+0x31>
c0115006:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0115009:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011500c:	39 c2                	cmp    %eax,%edx
c011500e:	76 07                	jbe    c0115017 <vsnprintf+0x38>
        return -E_INVAL;
c0115010:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0115015:	eb 32                	jmp    c0115049 <vsnprintf+0x6a>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0115017:	8b 45 14             	mov    0x14(%ebp),%eax
c011501a:	89 44 24 10          	mov    %eax,0x10(%esp)
c011501e:	8b 45 10             	mov    0x10(%ebp),%eax
c0115021:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0115025:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0115028:	89 44 24 08          	mov    %eax,0x8(%esp)
c011502c:	c7 44 24 04 d9 6a ff 	movl   $0xffff6ad9,0x4(%esp)
c0115033:	ff 
c0115034:	c7 04 24 76 4f 11 c0 	movl   $0xc0114f76,(%esp)
c011503b:	e8 e9 fa ff ff       	call   c0114b29 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c0115040:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115043:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0115046:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0115049:	c9                   	leave  
c011504a:	c3                   	ret    

c011504b <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c011504b:	55                   	push   %ebp
c011504c:	89 e5                	mov    %esp,%ebp
c011504e:	57                   	push   %edi
c011504f:	56                   	push   %esi
c0115050:	53                   	push   %ebx
c0115051:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0115054:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115059:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c011505f:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0115065:	6b f0 05             	imul   $0x5,%eax,%esi
c0115068:	01 f7                	add    %esi,%edi
c011506a:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c011506f:	f7 e6                	mul    %esi
c0115071:	8d 34 17             	lea    (%edi,%edx,1),%esi
c0115074:	89 f2                	mov    %esi,%edx
c0115076:	83 c0 0b             	add    $0xb,%eax
c0115079:	83 d2 00             	adc    $0x0,%edx
c011507c:	89 c7                	mov    %eax,%edi
c011507e:	83 e7 ff             	and    $0xffffffff,%edi
c0115081:	89 f9                	mov    %edi,%ecx
c0115083:	0f b7 da             	movzwl %dx,%ebx
c0115086:	89 0d c8 ee 14 c0    	mov    %ecx,0xc014eec8
c011508c:	89 1d cc ee 14 c0    	mov    %ebx,0xc014eecc
    unsigned long long result = (next >> 12);
c0115092:	a1 c8 ee 14 c0       	mov    0xc014eec8,%eax
c0115097:	8b 15 cc ee 14 c0    	mov    0xc014eecc,%edx
c011509d:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01150a1:	c1 ea 0c             	shr    $0xc,%edx
c01150a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01150a7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c01150aa:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c01150b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01150b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01150b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01150ba:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01150bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01150c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01150c3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01150c7:	74 1c                	je     c01150e5 <rand+0x9a>
c01150c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01150cc:	ba 00 00 00 00       	mov    $0x0,%edx
c01150d1:	f7 75 dc             	divl   -0x24(%ebp)
c01150d4:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01150d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01150da:	ba 00 00 00 00       	mov    $0x0,%edx
c01150df:	f7 75 dc             	divl   -0x24(%ebp)
c01150e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01150e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01150e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01150eb:	f7 75 dc             	divl   -0x24(%ebp)
c01150ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01150f1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01150f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01150f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01150fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01150fd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0115100:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0115103:	83 c4 24             	add    $0x24,%esp
c0115106:	5b                   	pop    %ebx
c0115107:	5e                   	pop    %esi
c0115108:	5f                   	pop    %edi
c0115109:	5d                   	pop    %ebp
c011510a:	c3                   	ret    

c011510b <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c011510b:	55                   	push   %ebp
c011510c:	89 e5                	mov    %esp,%ebp
    next = seed;
c011510e:	8b 45 08             	mov    0x8(%ebp),%eax
c0115111:	ba 00 00 00 00       	mov    $0x0,%edx
c0115116:	a3 c8 ee 14 c0       	mov    %eax,0xc014eec8
c011511b:	89 15 cc ee 14 c0    	mov    %edx,0xc014eecc
}
c0115121:	5d                   	pop    %ebp
c0115122:	c3                   	ret    

c0115123 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0115123:	55                   	push   %ebp
c0115124:	89 e5                	mov    %esp,%ebp
c0115126:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115129:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0115130:	eb 04                	jmp    c0115136 <strlen+0x13>
        cnt ++;
c0115132:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c0115136:	8b 45 08             	mov    0x8(%ebp),%eax
c0115139:	8d 50 01             	lea    0x1(%eax),%edx
c011513c:	89 55 08             	mov    %edx,0x8(%ebp)
c011513f:	0f b6 00             	movzbl (%eax),%eax
c0115142:	84 c0                	test   %al,%al
c0115144:	75 ec                	jne    c0115132 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c0115146:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115149:	c9                   	leave  
c011514a:	c3                   	ret    

c011514b <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c011514b:	55                   	push   %ebp
c011514c:	89 e5                	mov    %esp,%ebp
c011514e:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0115151:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c0115158:	eb 04                	jmp    c011515e <strnlen+0x13>
        cnt ++;
c011515a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c011515e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0115161:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0115164:	73 10                	jae    c0115176 <strnlen+0x2b>
c0115166:	8b 45 08             	mov    0x8(%ebp),%eax
c0115169:	8d 50 01             	lea    0x1(%eax),%edx
c011516c:	89 55 08             	mov    %edx,0x8(%ebp)
c011516f:	0f b6 00             	movzbl (%eax),%eax
c0115172:	84 c0                	test   %al,%al
c0115174:	75 e4                	jne    c011515a <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c0115176:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0115179:	c9                   	leave  
c011517a:	c3                   	ret    

c011517b <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c011517b:	55                   	push   %ebp
c011517c:	89 e5                	mov    %esp,%ebp
c011517e:	83 ec 18             	sub    $0x18,%esp
    return strcpy(dst + strlen(dst), src);
c0115181:	8b 45 08             	mov    0x8(%ebp),%eax
c0115184:	89 04 24             	mov    %eax,(%esp)
c0115187:	e8 97 ff ff ff       	call   c0115123 <strlen>
c011518c:	8b 55 08             	mov    0x8(%ebp),%edx
c011518f:	01 c2                	add    %eax,%edx
c0115191:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115194:	89 44 24 04          	mov    %eax,0x4(%esp)
c0115198:	89 14 24             	mov    %edx,(%esp)
c011519b:	e8 02 00 00 00       	call   c01151a2 <strcpy>
}
c01151a0:	c9                   	leave  
c01151a1:	c3                   	ret    

c01151a2 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c01151a2:	55                   	push   %ebp
c01151a3:	89 e5                	mov    %esp,%ebp
c01151a5:	57                   	push   %edi
c01151a6:	56                   	push   %esi
c01151a7:	83 ec 20             	sub    $0x20,%esp
c01151aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01151ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01151b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c01151b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01151b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01151bc:	89 d1                	mov    %edx,%ecx
c01151be:	89 c2                	mov    %eax,%edx
c01151c0:	89 ce                	mov    %ecx,%esi
c01151c2:	89 d7                	mov    %edx,%edi
c01151c4:	ac                   	lods   %ds:(%esi),%al
c01151c5:	aa                   	stos   %al,%es:(%edi)
c01151c6:	84 c0                	test   %al,%al
c01151c8:	75 fa                	jne    c01151c4 <strcpy+0x22>
c01151ca:	89 fa                	mov    %edi,%edx
c01151cc:	89 f1                	mov    %esi,%ecx
c01151ce:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01151d1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01151d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01151d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01151da:	83 c4 20             	add    $0x20,%esp
c01151dd:	5e                   	pop    %esi
c01151de:	5f                   	pop    %edi
c01151df:	5d                   	pop    %ebp
c01151e0:	c3                   	ret    

c01151e1 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01151e1:	55                   	push   %ebp
c01151e2:	89 e5                	mov    %esp,%ebp
c01151e4:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01151e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01151ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01151ed:	eb 21                	jmp    c0115210 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01151ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01151f2:	0f b6 10             	movzbl (%eax),%edx
c01151f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01151f8:	88 10                	mov    %dl,(%eax)
c01151fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01151fd:	0f b6 00             	movzbl (%eax),%eax
c0115200:	84 c0                	test   %al,%al
c0115202:	74 04                	je     c0115208 <strncpy+0x27>
            src ++;
c0115204:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0115208:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c011520c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c0115210:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115214:	75 d9                	jne    c01151ef <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c0115216:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115219:	c9                   	leave  
c011521a:	c3                   	ret    

c011521b <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c011521b:	55                   	push   %ebp
c011521c:	89 e5                	mov    %esp,%ebp
c011521e:	57                   	push   %edi
c011521f:	56                   	push   %esi
c0115220:	83 ec 20             	sub    $0x20,%esp
c0115223:	8b 45 08             	mov    0x8(%ebp),%eax
c0115226:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115229:	8b 45 0c             	mov    0xc(%ebp),%eax
c011522c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c011522f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115232:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115235:	89 d1                	mov    %edx,%ecx
c0115237:	89 c2                	mov    %eax,%edx
c0115239:	89 ce                	mov    %ecx,%esi
c011523b:	89 d7                	mov    %edx,%edi
c011523d:	ac                   	lods   %ds:(%esi),%al
c011523e:	ae                   	scas   %es:(%edi),%al
c011523f:	75 08                	jne    c0115249 <strcmp+0x2e>
c0115241:	84 c0                	test   %al,%al
c0115243:	75 f8                	jne    c011523d <strcmp+0x22>
c0115245:	31 c0                	xor    %eax,%eax
c0115247:	eb 04                	jmp    c011524d <strcmp+0x32>
c0115249:	19 c0                	sbb    %eax,%eax
c011524b:	0c 01                	or     $0x1,%al
c011524d:	89 fa                	mov    %edi,%edx
c011524f:	89 f1                	mov    %esi,%ecx
c0115251:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0115254:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0115257:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c011525a:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c011525d:	83 c4 20             	add    $0x20,%esp
c0115260:	5e                   	pop    %esi
c0115261:	5f                   	pop    %edi
c0115262:	5d                   	pop    %ebp
c0115263:	c3                   	ret    

c0115264 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c0115264:	55                   	push   %ebp
c0115265:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115267:	eb 0c                	jmp    c0115275 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0115269:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c011526d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115271:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0115275:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115279:	74 1a                	je     c0115295 <strncmp+0x31>
c011527b:	8b 45 08             	mov    0x8(%ebp),%eax
c011527e:	0f b6 00             	movzbl (%eax),%eax
c0115281:	84 c0                	test   %al,%al
c0115283:	74 10                	je     c0115295 <strncmp+0x31>
c0115285:	8b 45 08             	mov    0x8(%ebp),%eax
c0115288:	0f b6 10             	movzbl (%eax),%edx
c011528b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011528e:	0f b6 00             	movzbl (%eax),%eax
c0115291:	38 c2                	cmp    %al,%dl
c0115293:	74 d4                	je     c0115269 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0115295:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115299:	74 18                	je     c01152b3 <strncmp+0x4f>
c011529b:	8b 45 08             	mov    0x8(%ebp),%eax
c011529e:	0f b6 00             	movzbl (%eax),%eax
c01152a1:	0f b6 d0             	movzbl %al,%edx
c01152a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152a7:	0f b6 00             	movzbl (%eax),%eax
c01152aa:	0f b6 c0             	movzbl %al,%eax
c01152ad:	29 c2                	sub    %eax,%edx
c01152af:	89 d0                	mov    %edx,%eax
c01152b1:	eb 05                	jmp    c01152b8 <strncmp+0x54>
c01152b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01152b8:	5d                   	pop    %ebp
c01152b9:	c3                   	ret    

c01152ba <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c01152ba:	55                   	push   %ebp
c01152bb:	89 e5                	mov    %esp,%ebp
c01152bd:	83 ec 04             	sub    $0x4,%esp
c01152c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152c3:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01152c6:	eb 14                	jmp    c01152dc <strchr+0x22>
        if (*s == c) {
c01152c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01152cb:	0f b6 00             	movzbl (%eax),%eax
c01152ce:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01152d1:	75 05                	jne    c01152d8 <strchr+0x1e>
            return (char *)s;
c01152d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01152d6:	eb 13                	jmp    c01152eb <strchr+0x31>
        }
        s ++;
c01152d8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01152dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01152df:	0f b6 00             	movzbl (%eax),%eax
c01152e2:	84 c0                	test   %al,%al
c01152e4:	75 e2                	jne    c01152c8 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01152e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01152eb:	c9                   	leave  
c01152ec:	c3                   	ret    

c01152ed <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01152ed:	55                   	push   %ebp
c01152ee:	89 e5                	mov    %esp,%ebp
c01152f0:	83 ec 04             	sub    $0x4,%esp
c01152f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01152f6:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01152f9:	eb 11                	jmp    c011530c <strfind+0x1f>
        if (*s == c) {
c01152fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01152fe:	0f b6 00             	movzbl (%eax),%eax
c0115301:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0115304:	75 02                	jne    c0115308 <strfind+0x1b>
            break;
c0115306:	eb 0e                	jmp    c0115316 <strfind+0x29>
        }
        s ++;
c0115308:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c011530c:	8b 45 08             	mov    0x8(%ebp),%eax
c011530f:	0f b6 00             	movzbl (%eax),%eax
c0115312:	84 c0                	test   %al,%al
c0115314:	75 e5                	jne    c01152fb <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c0115316:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0115319:	c9                   	leave  
c011531a:	c3                   	ret    

c011531b <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c011531b:	55                   	push   %ebp
c011531c:	89 e5                	mov    %esp,%ebp
c011531e:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c0115321:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0115328:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c011532f:	eb 04                	jmp    c0115335 <strtol+0x1a>
        s ++;
c0115331:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0115335:	8b 45 08             	mov    0x8(%ebp),%eax
c0115338:	0f b6 00             	movzbl (%eax),%eax
c011533b:	3c 20                	cmp    $0x20,%al
c011533d:	74 f2                	je     c0115331 <strtol+0x16>
c011533f:	8b 45 08             	mov    0x8(%ebp),%eax
c0115342:	0f b6 00             	movzbl (%eax),%eax
c0115345:	3c 09                	cmp    $0x9,%al
c0115347:	74 e8                	je     c0115331 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0115349:	8b 45 08             	mov    0x8(%ebp),%eax
c011534c:	0f b6 00             	movzbl (%eax),%eax
c011534f:	3c 2b                	cmp    $0x2b,%al
c0115351:	75 06                	jne    c0115359 <strtol+0x3e>
        s ++;
c0115353:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115357:	eb 15                	jmp    c011536e <strtol+0x53>
    }
    else if (*s == '-') {
c0115359:	8b 45 08             	mov    0x8(%ebp),%eax
c011535c:	0f b6 00             	movzbl (%eax),%eax
c011535f:	3c 2d                	cmp    $0x2d,%al
c0115361:	75 0b                	jne    c011536e <strtol+0x53>
        s ++, neg = 1;
c0115363:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115367:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c011536e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0115372:	74 06                	je     c011537a <strtol+0x5f>
c0115374:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0115378:	75 24                	jne    c011539e <strtol+0x83>
c011537a:	8b 45 08             	mov    0x8(%ebp),%eax
c011537d:	0f b6 00             	movzbl (%eax),%eax
c0115380:	3c 30                	cmp    $0x30,%al
c0115382:	75 1a                	jne    c011539e <strtol+0x83>
c0115384:	8b 45 08             	mov    0x8(%ebp),%eax
c0115387:	83 c0 01             	add    $0x1,%eax
c011538a:	0f b6 00             	movzbl (%eax),%eax
c011538d:	3c 78                	cmp    $0x78,%al
c011538f:	75 0d                	jne    c011539e <strtol+0x83>
        s += 2, base = 16;
c0115391:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0115395:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c011539c:	eb 2a                	jmp    c01153c8 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011539e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01153a2:	75 17                	jne    c01153bb <strtol+0xa0>
c01153a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01153a7:	0f b6 00             	movzbl (%eax),%eax
c01153aa:	3c 30                	cmp    $0x30,%al
c01153ac:	75 0d                	jne    c01153bb <strtol+0xa0>
        s ++, base = 8;
c01153ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01153b2:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c01153b9:	eb 0d                	jmp    c01153c8 <strtol+0xad>
    }
    else if (base == 0) {
c01153bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01153bf:	75 07                	jne    c01153c8 <strtol+0xad>
        base = 10;
c01153c1:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c01153c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01153cb:	0f b6 00             	movzbl (%eax),%eax
c01153ce:	3c 2f                	cmp    $0x2f,%al
c01153d0:	7e 1b                	jle    c01153ed <strtol+0xd2>
c01153d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01153d5:	0f b6 00             	movzbl (%eax),%eax
c01153d8:	3c 39                	cmp    $0x39,%al
c01153da:	7f 11                	jg     c01153ed <strtol+0xd2>
            dig = *s - '0';
c01153dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01153df:	0f b6 00             	movzbl (%eax),%eax
c01153e2:	0f be c0             	movsbl %al,%eax
c01153e5:	83 e8 30             	sub    $0x30,%eax
c01153e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01153eb:	eb 48                	jmp    c0115435 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01153ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01153f0:	0f b6 00             	movzbl (%eax),%eax
c01153f3:	3c 60                	cmp    $0x60,%al
c01153f5:	7e 1b                	jle    c0115412 <strtol+0xf7>
c01153f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01153fa:	0f b6 00             	movzbl (%eax),%eax
c01153fd:	3c 7a                	cmp    $0x7a,%al
c01153ff:	7f 11                	jg     c0115412 <strtol+0xf7>
            dig = *s - 'a' + 10;
c0115401:	8b 45 08             	mov    0x8(%ebp),%eax
c0115404:	0f b6 00             	movzbl (%eax),%eax
c0115407:	0f be c0             	movsbl %al,%eax
c011540a:	83 e8 57             	sub    $0x57,%eax
c011540d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115410:	eb 23                	jmp    c0115435 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c0115412:	8b 45 08             	mov    0x8(%ebp),%eax
c0115415:	0f b6 00             	movzbl (%eax),%eax
c0115418:	3c 40                	cmp    $0x40,%al
c011541a:	7e 3d                	jle    c0115459 <strtol+0x13e>
c011541c:	8b 45 08             	mov    0x8(%ebp),%eax
c011541f:	0f b6 00             	movzbl (%eax),%eax
c0115422:	3c 5a                	cmp    $0x5a,%al
c0115424:	7f 33                	jg     c0115459 <strtol+0x13e>
            dig = *s - 'A' + 10;
c0115426:	8b 45 08             	mov    0x8(%ebp),%eax
c0115429:	0f b6 00             	movzbl (%eax),%eax
c011542c:	0f be c0             	movsbl %al,%eax
c011542f:	83 e8 37             	sub    $0x37,%eax
c0115432:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0115435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0115438:	3b 45 10             	cmp    0x10(%ebp),%eax
c011543b:	7c 02                	jl     c011543f <strtol+0x124>
            break;
c011543d:	eb 1a                	jmp    c0115459 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c011543f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0115443:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115446:	0f af 45 10          	imul   0x10(%ebp),%eax
c011544a:	89 c2                	mov    %eax,%edx
c011544c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011544f:	01 d0                	add    %edx,%eax
c0115451:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0115454:	e9 6f ff ff ff       	jmp    c01153c8 <strtol+0xad>

    if (endptr) {
c0115459:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011545d:	74 08                	je     c0115467 <strtol+0x14c>
        *endptr = (char *) s;
c011545f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115462:	8b 55 08             	mov    0x8(%ebp),%edx
c0115465:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0115467:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c011546b:	74 07                	je     c0115474 <strtol+0x159>
c011546d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0115470:	f7 d8                	neg    %eax
c0115472:	eb 03                	jmp    c0115477 <strtol+0x15c>
c0115474:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0115477:	c9                   	leave  
c0115478:	c3                   	ret    

c0115479 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0115479:	55                   	push   %ebp
c011547a:	89 e5                	mov    %esp,%ebp
c011547c:	57                   	push   %edi
c011547d:	83 ec 24             	sub    $0x24,%esp
c0115480:	8b 45 0c             	mov    0xc(%ebp),%eax
c0115483:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0115486:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c011548a:	8b 55 08             	mov    0x8(%ebp),%edx
c011548d:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0115490:	88 45 f7             	mov    %al,-0x9(%ebp)
c0115493:	8b 45 10             	mov    0x10(%ebp),%eax
c0115496:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0115499:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c011549c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c01154a0:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01154a3:	89 d7                	mov    %edx,%edi
c01154a5:	f3 aa                	rep stos %al,%es:(%edi)
c01154a7:	89 fa                	mov    %edi,%edx
c01154a9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01154ac:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c01154af:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c01154b2:	83 c4 24             	add    $0x24,%esp
c01154b5:	5f                   	pop    %edi
c01154b6:	5d                   	pop    %ebp
c01154b7:	c3                   	ret    

c01154b8 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c01154b8:	55                   	push   %ebp
c01154b9:	89 e5                	mov    %esp,%ebp
c01154bb:	57                   	push   %edi
c01154bc:	56                   	push   %esi
c01154bd:	53                   	push   %ebx
c01154be:	83 ec 30             	sub    $0x30,%esp
c01154c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01154c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01154c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01154ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01154cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01154d0:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c01154d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01154d9:	73 42                	jae    c011551d <memmove+0x65>
c01154db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01154de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01154e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01154e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01154e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01154ea:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c01154ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01154f0:	c1 e8 02             	shr    $0x2,%eax
c01154f3:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c01154f5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01154f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01154fb:	89 d7                	mov    %edx,%edi
c01154fd:	89 c6                	mov    %eax,%esi
c01154ff:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115501:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0115504:	83 e1 03             	and    $0x3,%ecx
c0115507:	74 02                	je     c011550b <memmove+0x53>
c0115509:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c011550b:	89 f0                	mov    %esi,%eax
c011550d:	89 fa                	mov    %edi,%edx
c011550f:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0115512:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0115515:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0115518:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011551b:	eb 36                	jmp    c0115553 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c011551d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115520:	8d 50 ff             	lea    -0x1(%eax),%edx
c0115523:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115526:	01 c2                	add    %eax,%edx
c0115528:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011552b:	8d 48 ff             	lea    -0x1(%eax),%ecx
c011552e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115531:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0115534:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0115537:	89 c1                	mov    %eax,%ecx
c0115539:	89 d8                	mov    %ebx,%eax
c011553b:	89 d6                	mov    %edx,%esi
c011553d:	89 c7                	mov    %eax,%edi
c011553f:	fd                   	std    
c0115540:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115542:	fc                   	cld    
c0115543:	89 f8                	mov    %edi,%eax
c0115545:	89 f2                	mov    %esi,%edx
c0115547:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c011554a:	89 55 c8             	mov    %edx,-0x38(%ebp)
c011554d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0115550:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0115553:	83 c4 30             	add    $0x30,%esp
c0115556:	5b                   	pop    %ebx
c0115557:	5e                   	pop    %esi
c0115558:	5f                   	pop    %edi
c0115559:	5d                   	pop    %ebp
c011555a:	c3                   	ret    

c011555b <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c011555b:	55                   	push   %ebp
c011555c:	89 e5                	mov    %esp,%ebp
c011555e:	57                   	push   %edi
c011555f:	56                   	push   %esi
c0115560:	83 ec 20             	sub    $0x20,%esp
c0115563:	8b 45 08             	mov    0x8(%ebp),%eax
c0115566:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0115569:	8b 45 0c             	mov    0xc(%ebp),%eax
c011556c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011556f:	8b 45 10             	mov    0x10(%ebp),%eax
c0115572:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0115575:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0115578:	c1 e8 02             	shr    $0x2,%eax
c011557b:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c011557d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0115580:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0115583:	89 d7                	mov    %edx,%edi
c0115585:	89 c6                	mov    %eax,%esi
c0115587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0115589:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c011558c:	83 e1 03             	and    $0x3,%ecx
c011558f:	74 02                	je     c0115593 <memcpy+0x38>
c0115591:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0115593:	89 f0                	mov    %esi,%eax
c0115595:	89 fa                	mov    %edi,%edx
c0115597:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c011559a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011559d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01155a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c01155a3:	83 c4 20             	add    $0x20,%esp
c01155a6:	5e                   	pop    %esi
c01155a7:	5f                   	pop    %edi
c01155a8:	5d                   	pop    %ebp
c01155a9:	c3                   	ret    

c01155aa <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c01155aa:	55                   	push   %ebp
c01155ab:	89 e5                	mov    %esp,%ebp
c01155ad:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c01155b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01155b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c01155b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01155b9:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c01155bc:	eb 30                	jmp    c01155ee <memcmp+0x44>
        if (*s1 != *s2) {
c01155be:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01155c1:	0f b6 10             	movzbl (%eax),%edx
c01155c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01155c7:	0f b6 00             	movzbl (%eax),%eax
c01155ca:	38 c2                	cmp    %al,%dl
c01155cc:	74 18                	je     c01155e6 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c01155ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01155d1:	0f b6 00             	movzbl (%eax),%eax
c01155d4:	0f b6 d0             	movzbl %al,%edx
c01155d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01155da:	0f b6 00             	movzbl (%eax),%eax
c01155dd:	0f b6 c0             	movzbl %al,%eax
c01155e0:	29 c2                	sub    %eax,%edx
c01155e2:	89 d0                	mov    %edx,%eax
c01155e4:	eb 1a                	jmp    c0115600 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c01155e6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01155ea:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c01155ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01155f1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01155f4:	89 55 10             	mov    %edx,0x10(%ebp)
c01155f7:	85 c0                	test   %eax,%eax
c01155f9:	75 c3                	jne    c01155be <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c01155fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0115600:	c9                   	leave  
c0115601:	c3                   	ret    
