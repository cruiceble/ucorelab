
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba c4 56 1c c0       	mov    $0xc01c56c4,%edx
c0100035:	b8 f9 23 1c c0       	mov    $0xc01c23f9,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 f9 23 1c c0 	movl   $0xc01c23f9,(%esp)
c0100051:	e8 e9 d4 00 00       	call   c010d53f <memset>

    cons_init();                // init the console
c0100056:	e8 85 16 00 00       	call   c01016e0 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 e0 d6 10 c0 	movl   $0xc010d6e0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 fc d6 10 c0 	movl   $0xc010d6fc,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 29 56 00 00       	call   c01056ad <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 35 20 00 00       	call   c01020be <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 ad 21 00 00       	call   c010223b <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 1f 85 00 00       	call   c01085b2 <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 e5 c2 00 00       	call   c010c37d <sched_init>
    proc_init();                // init process table
c0100098:	e8 d5 bb 00 00       	call   c010bc72 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 6f 17 00 00       	call   c0101811 <ide_init>
    swap_init();                // init swap
c01000a2:	e8 af 6c 00 00       	call   c0106d56 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 ea 0d 00 00       	call   c0100e96 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 7b 1f 00 00       	call   c010202c <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 7b bd 00 00       	call   c010be31 <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 f0 0c 00 00       	call   c0100dc8 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 01 d7 10 c0 	movl   $0xc010d701,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 0f d7 10 c0 	movl   $0xc010d70f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 1d d7 10 c0 	movl   $0xc010d71d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 2b d7 10 c0 	movl   $0xc010d72b,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 39 d7 10 c0 	movl   $0xc010d739,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 00 24 1c c0       	mov    %eax,0xc01c2400
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 48 d7 10 c0 	movl   $0xc010d748,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 68 d7 10 c0 	movl   $0xc010d768,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 87 d7 10 c0 	movl   $0xc010d787,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 20 24 1c c0    	mov    %dl,-0x3fe3dbe0(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 20 24 1c c0       	add    $0xc01c2420,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 20 24 1c c0       	mov    $0xc01c2420,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 f6 13 00 00       	call   c010170c <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 2d c9 00 00       	call   c010cc80 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 7d 13 00 00       	call   c010170c <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 5d 13 00 00       	call   c0101748 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 8c d7 10 c0    	movl   $0xc010d78c,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 8c d7 10 c0 	movl   $0xc010d78c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 60 04 11 c0 	movl   $0xc0110460,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 b8 77 12 c0 	movl   $0xc01277b8,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec b9 77 12 c0 	movl   $0xc01277b9,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 63 e6 12 c0 	movl   $0xc012e663,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 0b 89 00 00       	call   c0108f11 <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 b4 88 00 00       	call   c0108f11 <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 7c 88 00 00       	call   c0108f11 <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 b3 cb 00 00       	call   c010d3b3 <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 96 d7 10 c0 	movl   $0xc010d796,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 af d7 10 c0 	movl   $0xc010d7af,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 c8 d6 10 	movl   $0xc010d6c8,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 c7 d7 10 c0 	movl   $0xc010d7c7,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 f9 23 1c 	movl   $0xc01c23f9,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 df d7 10 c0 	movl   $0xc010d7df,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 c4 56 1c 	movl   $0xc01c56c4,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 f7 d7 10 c0 	movl   $0xc010d7f7,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 10 d8 10 c0 	movl   $0xc010d810,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 3a d8 10 c0 	movl   $0xc010d83a,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 56 d8 10 c0 	movl   $0xc010d856,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return ebp;
c0100ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100aee:	e9 88 00 00 00       	jmp    c0100b7b <print_stackframe+0xad>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 68 d8 10 c0 	movl   $0xc010d868,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>
        uint32_t *args = (uint32_t *)ebp + 2;
c0100b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b10:	83 c0 08             	add    $0x8,%eax
c0100b13:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for (j = 0; j < 4; j ++) {
c0100b16:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1d:	eb 25                	jmp    c0100b44 <print_stackframe+0x76>
            cprintf("0x%08x ", args[j]);
c0100b1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b22:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100b2c:	01 d0                	add    %edx,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 84 d8 10 c0 	movl   $0xc010d884,(%esp)
c0100b3b:	e8 18 f8 ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        uint32_t *args = (uint32_t *)ebp + 2;
        for (j = 0; j < 4; j ++) {
c0100b40:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b44:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b48:	7e d5                	jle    c0100b1f <print_stackframe+0x51>
            cprintf("0x%08x ", args[j]);
        }
        cprintf("\n");
c0100b4a:	c7 04 24 8c d8 10 c0 	movl   $0xc010d88c,(%esp)
c0100b51:	e8 02 f8 ff ff       	call   c0100358 <cprintf>
        print_debuginfo(eip - 1);
c0100b56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b59:	83 e8 01             	sub    $0x1,%eax
c0100b5c:	89 04 24             	mov    %eax,(%esp)
c0100b5f:	e8 b6 fe ff ff       	call   c0100a1a <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b67:	83 c0 04             	add    $0x4,%eax
c0100b6a:	8b 00                	mov    (%eax),%eax
c0100b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b72:	8b 00                	mov    (%eax),%eax
c0100b74:	89 45 f4             	mov    %eax,-0xc(%ebp)
      *                   the calling funciton's ebp = ss:[ebp]
      */
    uint32_t ebp = read_ebp(), eip = read_eip();

    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i ++) {
c0100b77:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b7f:	74 0a                	je     c0100b8b <print_stackframe+0xbd>
c0100b81:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b85:	0f 8e 68 ff ff ff    	jle    c0100af3 <print_stackframe+0x25>
        cprintf("\n");
        print_debuginfo(eip - 1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100b8b:	c9                   	leave  
c0100b8c:	c3                   	ret    

c0100b8d <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b8d:	55                   	push   %ebp
c0100b8e:	89 e5                	mov    %esp,%ebp
c0100b90:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b9a:	eb 0c                	jmp    c0100ba8 <parse+0x1b>
            *buf ++ = '\0';
c0100b9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b9f:	8d 50 01             	lea    0x1(%eax),%edx
c0100ba2:	89 55 08             	mov    %edx,0x8(%ebp)
c0100ba5:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bab:	0f b6 00             	movzbl (%eax),%eax
c0100bae:	84 c0                	test   %al,%al
c0100bb0:	74 1d                	je     c0100bcf <parse+0x42>
c0100bb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb5:	0f b6 00             	movzbl (%eax),%eax
c0100bb8:	0f be c0             	movsbl %al,%eax
c0100bbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bbf:	c7 04 24 10 d9 10 c0 	movl   $0xc010d910,(%esp)
c0100bc6:	e8 b5 c7 00 00       	call   c010d380 <strchr>
c0100bcb:	85 c0                	test   %eax,%eax
c0100bcd:	75 cd                	jne    c0100b9c <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bd2:	0f b6 00             	movzbl (%eax),%eax
c0100bd5:	84 c0                	test   %al,%al
c0100bd7:	75 02                	jne    c0100bdb <parse+0x4e>
            break;
c0100bd9:	eb 67                	jmp    c0100c42 <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bdb:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bdf:	75 14                	jne    c0100bf5 <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100be1:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be8:	00 
c0100be9:	c7 04 24 15 d9 10 c0 	movl   $0xc010d915,(%esp)
c0100bf0:	e8 63 f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf8:	8d 50 01             	lea    0x1(%eax),%edx
c0100bfb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bfe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c08:	01 c2                	add    %eax,%edx
c0100c0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c0d:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0f:	eb 04                	jmp    c0100c15 <parse+0x88>
            buf ++;
c0100c11:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c15:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c18:	0f b6 00             	movzbl (%eax),%eax
c0100c1b:	84 c0                	test   %al,%al
c0100c1d:	74 1d                	je     c0100c3c <parse+0xaf>
c0100c1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c22:	0f b6 00             	movzbl (%eax),%eax
c0100c25:	0f be c0             	movsbl %al,%eax
c0100c28:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c2c:	c7 04 24 10 d9 10 c0 	movl   $0xc010d910,(%esp)
c0100c33:	e8 48 c7 00 00       	call   c010d380 <strchr>
c0100c38:	85 c0                	test   %eax,%eax
c0100c3a:	74 d5                	je     c0100c11 <parse+0x84>
            buf ++;
        }
    }
c0100c3c:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3d:	e9 66 ff ff ff       	jmp    c0100ba8 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c45:	c9                   	leave  
c0100c46:	c3                   	ret    

c0100c47 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c47:	55                   	push   %ebp
c0100c48:	89 e5                	mov    %esp,%ebp
c0100c4a:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c57:	89 04 24             	mov    %eax,(%esp)
c0100c5a:	e8 2e ff ff ff       	call   c0100b8d <parse>
c0100c5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c66:	75 0a                	jne    c0100c72 <runcmd+0x2b>
        return 0;
c0100c68:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c6d:	e9 85 00 00 00       	jmp    c0100cf7 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c79:	eb 5c                	jmp    c0100cd7 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c7b:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c81:	89 d0                	mov    %edx,%eax
c0100c83:	01 c0                	add    %eax,%eax
c0100c85:	01 d0                	add    %edx,%eax
c0100c87:	c1 e0 02             	shl    $0x2,%eax
c0100c8a:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100c8f:	8b 00                	mov    (%eax),%eax
c0100c91:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c95:	89 04 24             	mov    %eax,(%esp)
c0100c98:	e8 44 c6 00 00       	call   c010d2e1 <strcmp>
c0100c9d:	85 c0                	test   %eax,%eax
c0100c9f:	75 32                	jne    c0100cd3 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100ca1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100ca4:	89 d0                	mov    %edx,%eax
c0100ca6:	01 c0                	add    %eax,%eax
c0100ca8:	01 d0                	add    %edx,%eax
c0100caa:	c1 e0 02             	shl    $0x2,%eax
c0100cad:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100cb2:	8b 40 08             	mov    0x8(%eax),%eax
c0100cb5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb8:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cbe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cc2:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cc5:	83 c2 04             	add    $0x4,%edx
c0100cc8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ccc:	89 0c 24             	mov    %ecx,(%esp)
c0100ccf:	ff d0                	call   *%eax
c0100cd1:	eb 24                	jmp    c0100cf7 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cda:	83 f8 02             	cmp    $0x2,%eax
c0100cdd:	76 9c                	jbe    c0100c7b <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ce2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ce6:	c7 04 24 33 d9 10 c0 	movl   $0xc010d933,(%esp)
c0100ced:	e8 66 f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100cf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf7:	c9                   	leave  
c0100cf8:	c3                   	ret    

c0100cf9 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf9:	55                   	push   %ebp
c0100cfa:	89 e5                	mov    %esp,%ebp
c0100cfc:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cff:	c7 04 24 4c d9 10 c0 	movl   $0xc010d94c,(%esp)
c0100d06:	e8 4d f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d0b:	c7 04 24 74 d9 10 c0 	movl   $0xc010d974,(%esp)
c0100d12:	e8 41 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d1b:	74 0b                	je     c0100d28 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d20:	89 04 24             	mov    %eax,(%esp)
c0100d23:	e8 c8 16 00 00       	call   c01023f0 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d28:	c7 04 24 99 d9 10 c0 	movl   $0xc010d999,(%esp)
c0100d2f:	e8 1b f5 ff ff       	call   c010024f <readline>
c0100d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d3b:	74 18                	je     c0100d55 <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d40:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d47:	89 04 24             	mov    %eax,(%esp)
c0100d4a:	e8 f8 fe ff ff       	call   c0100c47 <runcmd>
c0100d4f:	85 c0                	test   %eax,%eax
c0100d51:	79 02                	jns    c0100d55 <kmonitor+0x5c>
                break;
c0100d53:	eb 02                	jmp    c0100d57 <kmonitor+0x5e>
            }
        }
    }
c0100d55:	eb d1                	jmp    c0100d28 <kmonitor+0x2f>
}
c0100d57:	c9                   	leave  
c0100d58:	c3                   	ret    

c0100d59 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d59:	55                   	push   %ebp
c0100d5a:	89 e5                	mov    %esp,%ebp
c0100d5c:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d66:	eb 3f                	jmp    c0100da7 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d6b:	89 d0                	mov    %edx,%eax
c0100d6d:	01 c0                	add    %eax,%eax
c0100d6f:	01 d0                	add    %edx,%eax
c0100d71:	c1 e0 02             	shl    $0x2,%eax
c0100d74:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d79:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7f:	89 d0                	mov    %edx,%eax
c0100d81:	01 c0                	add    %eax,%eax
c0100d83:	01 d0                	add    %edx,%eax
c0100d85:	c1 e0 02             	shl    $0x2,%eax
c0100d88:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d8d:	8b 00                	mov    (%eax),%eax
c0100d8f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d93:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d97:	c7 04 24 9d d9 10 c0 	movl   $0xc010d99d,(%esp)
c0100d9e:	e8 b5 f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100da3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100daa:	83 f8 02             	cmp    $0x2,%eax
c0100dad:	76 b9                	jbe    c0100d68 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100daf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100db4:	c9                   	leave  
c0100db5:	c3                   	ret    

c0100db6 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100db6:	55                   	push   %ebp
c0100db7:	89 e5                	mov    %esp,%ebp
c0100db9:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dbc:	e8 c3 fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc6:	c9                   	leave  
c0100dc7:	c3                   	ret    

c0100dc8 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc8:	55                   	push   %ebp
c0100dc9:	89 e5                	mov    %esp,%ebp
c0100dcb:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dce:	e8 fb fc ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd8:	c9                   	leave  
c0100dd9:	c3                   	ret    

c0100dda <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dda:	55                   	push   %ebp
c0100ddb:	89 e5                	mov    %esp,%ebp
c0100ddd:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100de0:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
c0100de5:	85 c0                	test   %eax,%eax
c0100de7:	74 02                	je     c0100deb <__panic+0x11>
        goto panic_dead;
c0100de9:	eb 48                	jmp    c0100e33 <__panic+0x59>
    }
    is_panic = 1;
c0100deb:	c7 05 20 28 1c c0 01 	movl   $0x1,0xc01c2820
c0100df2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100df5:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100dfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100dfe:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e02:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e05:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e09:	c7 04 24 a6 d9 10 c0 	movl   $0xc010d9a6,(%esp)
c0100e10:	e8 43 f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e18:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e1f:	89 04 24             	mov    %eax,(%esp)
c0100e22:	e8 fe f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e27:	c7 04 24 c2 d9 10 c0 	movl   $0xc010d9c2,(%esp)
c0100e2e:	e8 25 f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e33:	e8 fa 11 00 00       	call   c0102032 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e38:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e3f:	e8 b5 fe ff ff       	call   c0100cf9 <kmonitor>
    }
c0100e44:	eb f2                	jmp    c0100e38 <__panic+0x5e>

c0100e46 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e46:	55                   	push   %ebp
c0100e47:	89 e5                	mov    %esp,%ebp
c0100e49:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e4c:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e52:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e55:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e59:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e60:	c7 04 24 c4 d9 10 c0 	movl   $0xc010d9c4,(%esp)
c0100e67:	e8 ec f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e73:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e76:	89 04 24             	mov    %eax,(%esp)
c0100e79:	e8 a7 f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e7e:	c7 04 24 c2 d9 10 c0 	movl   $0xc010d9c2,(%esp)
c0100e85:	e8 ce f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e8a:	c9                   	leave  
c0100e8b:	c3                   	ret    

c0100e8c <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e8c:	55                   	push   %ebp
c0100e8d:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e8f:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
}
c0100e94:	5d                   	pop    %ebp
c0100e95:	c3                   	ret    

c0100e96 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e96:	55                   	push   %ebp
c0100e97:	89 e5                	mov    %esp,%ebp
c0100e99:	83 ec 28             	sub    $0x28,%esp
c0100e9c:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100ea2:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ea6:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100eaa:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100eae:	ee                   	out    %al,(%dx)
c0100eaf:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eb5:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ebd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100ec1:	ee                   	out    %al,(%dx)
c0100ec2:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec8:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ecc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ed0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ed4:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ed5:	c7 05 d8 54 1c c0 00 	movl   $0x0,0xc01c54d8
c0100edc:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100edf:	c7 04 24 e2 d9 10 c0 	movl   $0xc010d9e2,(%esp)
c0100ee6:	e8 6d f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100eeb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100ef2:	e8 99 11 00 00       	call   c0102090 <pic_enable>
}
c0100ef7:	c9                   	leave  
c0100ef8:	c3                   	ret    

c0100ef9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef9:	55                   	push   %ebp
c0100efa:	89 e5                	mov    %esp,%ebp
c0100efc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eff:	9c                   	pushf  
c0100f00:	58                   	pop    %eax
c0100f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f07:	25 00 02 00 00       	and    $0x200,%eax
c0100f0c:	85 c0                	test   %eax,%eax
c0100f0e:	74 0c                	je     c0100f1c <__intr_save+0x23>
        intr_disable();
c0100f10:	e8 1d 11 00 00       	call   c0102032 <intr_disable>
        return 1;
c0100f15:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f1a:	eb 05                	jmp    c0100f21 <__intr_save+0x28>
    }
    return 0;
c0100f1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f21:	c9                   	leave  
c0100f22:	c3                   	ret    

c0100f23 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f23:	55                   	push   %ebp
c0100f24:	89 e5                	mov    %esp,%ebp
c0100f26:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f2d:	74 05                	je     c0100f34 <__intr_restore+0x11>
        intr_enable();
c0100f2f:	e8 f8 10 00 00       	call   c010202c <intr_enable>
    }
}
c0100f34:	c9                   	leave  
c0100f35:	c3                   	ret    

c0100f36 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f36:	55                   	push   %ebp
c0100f37:	89 e5                	mov    %esp,%ebp
c0100f39:	83 ec 10             	sub    $0x10,%esp
c0100f3c:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f42:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f46:	89 c2                	mov    %eax,%edx
c0100f48:	ec                   	in     (%dx),%al
c0100f49:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f4c:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f52:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f56:	89 c2                	mov    %eax,%edx
c0100f58:	ec                   	in     (%dx),%al
c0100f59:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f5c:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f62:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f66:	89 c2                	mov    %eax,%edx
c0100f68:	ec                   	in     (%dx),%al
c0100f69:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f6c:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f72:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f76:	89 c2                	mov    %eax,%edx
c0100f78:	ec                   	in     (%dx),%al
c0100f79:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f7c:	c9                   	leave  
c0100f7d:	c3                   	ret    

c0100f7e <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f7e:	55                   	push   %ebp
c0100f7f:	89 e5                	mov    %esp,%ebp
c0100f81:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f84:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f8e:	0f b7 00             	movzwl (%eax),%eax
c0100f91:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f98:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fa0:	0f b7 00             	movzwl (%eax),%eax
c0100fa3:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa7:	74 12                	je     c0100fbb <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa9:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fb0:	66 c7 05 46 28 1c c0 	movw   $0x3b4,0xc01c2846
c0100fb7:	b4 03 
c0100fb9:	eb 13                	jmp    c0100fce <cga_init+0x50>
    } else {
        *cp = was;
c0100fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fbe:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fc2:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fc5:	66 c7 05 46 28 1c c0 	movw   $0x3d4,0xc01c2846
c0100fcc:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fce:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100fd5:	0f b7 c0             	movzwl %ax,%eax
c0100fd8:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fdc:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fe0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fe4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe8:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe9:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100ff0:	83 c0 01             	add    $0x1,%eax
c0100ff3:	0f b7 c0             	movzwl %ax,%eax
c0100ff6:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ffa:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ffe:	89 c2                	mov    %eax,%edx
c0101000:	ec                   	in     (%dx),%al
c0101001:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101004:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101008:	0f b6 c0             	movzbl %al,%eax
c010100b:	c1 e0 08             	shl    $0x8,%eax
c010100e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101011:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101018:	0f b7 c0             	movzwl %ax,%eax
c010101b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010101f:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101023:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101027:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010102b:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010102c:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101033:	83 c0 01             	add    $0x1,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010103d:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101041:	89 c2                	mov    %eax,%edx
c0101043:	ec                   	in     (%dx),%al
c0101044:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101047:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010104b:	0f b6 c0             	movzbl %al,%eax
c010104e:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101051:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101054:	a3 40 28 1c c0       	mov    %eax,0xc01c2840
    crt_pos = pos;
c0101059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010105c:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
}
c0101062:	c9                   	leave  
c0101063:	c3                   	ret    

c0101064 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101064:	55                   	push   %ebp
c0101065:	89 e5                	mov    %esp,%ebp
c0101067:	83 ec 48             	sub    $0x48,%esp
c010106a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101070:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101074:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101078:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010107c:	ee                   	out    %al,(%dx)
c010107d:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c0101083:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101087:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010108b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010108f:	ee                   	out    %al,(%dx)
c0101090:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c0101096:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c010109a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010109e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010a2:	ee                   	out    %al,(%dx)
c01010a3:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a9:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010ad:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010b1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010b5:	ee                   	out    %al,(%dx)
c01010b6:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010bc:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010c0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010c4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c8:	ee                   	out    %al,(%dx)
c01010c9:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010cf:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010d3:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d7:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010db:	ee                   	out    %al,(%dx)
c01010dc:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010e2:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010e6:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010ea:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010ee:	ee                   	out    %al,(%dx)
c01010ef:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f9:	89 c2                	mov    %eax,%edx
c01010fb:	ec                   	in     (%dx),%al
c01010fc:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010ff:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101103:	3c ff                	cmp    $0xff,%al
c0101105:	0f 95 c0             	setne  %al
c0101108:	0f b6 c0             	movzbl %al,%eax
c010110b:	a3 48 28 1c c0       	mov    %eax,0xc01c2848
c0101110:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101116:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c010111a:	89 c2                	mov    %eax,%edx
c010111c:	ec                   	in     (%dx),%al
c010111d:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101120:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c0101126:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010112a:	89 c2                	mov    %eax,%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101130:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c0101135:	85 c0                	test   %eax,%eax
c0101137:	74 0c                	je     c0101145 <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101139:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101140:	e8 4b 0f 00 00       	call   c0102090 <pic_enable>
    }
}
c0101145:	c9                   	leave  
c0101146:	c3                   	ret    

c0101147 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101147:	55                   	push   %ebp
c0101148:	89 e5                	mov    %esp,%ebp
c010114a:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010114d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101154:	eb 09                	jmp    c010115f <lpt_putc_sub+0x18>
        delay();
c0101156:	e8 db fd ff ff       	call   c0100f36 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010115b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010115f:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c0101165:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101169:	89 c2                	mov    %eax,%edx
c010116b:	ec                   	in     (%dx),%al
c010116c:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c010116f:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0101173:	84 c0                	test   %al,%al
c0101175:	78 09                	js     c0101180 <lpt_putc_sub+0x39>
c0101177:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010117e:	7e d6                	jle    c0101156 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101180:	8b 45 08             	mov    0x8(%ebp),%eax
c0101183:	0f b6 c0             	movzbl %al,%eax
c0101186:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c010118c:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010118f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101193:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101197:	ee                   	out    %al,(%dx)
c0101198:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c010119e:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01011a2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011a6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011aa:	ee                   	out    %al,(%dx)
c01011ab:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011b1:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011b5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011bd:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011be:	c9                   	leave  
c01011bf:	c3                   	ret    

c01011c0 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011c0:	55                   	push   %ebp
c01011c1:	89 e5                	mov    %esp,%ebp
c01011c3:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011c6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011ca:	74 0d                	je     c01011d9 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01011cf:	89 04 24             	mov    %eax,(%esp)
c01011d2:	e8 70 ff ff ff       	call   c0101147 <lpt_putc_sub>
c01011d7:	eb 24                	jmp    c01011fd <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d9:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011e0:	e8 62 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011e5:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011ec:	e8 56 ff ff ff       	call   c0101147 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011f1:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f8:	e8 4a ff ff ff       	call   c0101147 <lpt_putc_sub>
    }
}
c01011fd:	c9                   	leave  
c01011fe:	c3                   	ret    

c01011ff <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011ff:	55                   	push   %ebp
c0101200:	89 e5                	mov    %esp,%ebp
c0101202:	53                   	push   %ebx
c0101203:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101206:	8b 45 08             	mov    0x8(%ebp),%eax
c0101209:	b0 00                	mov    $0x0,%al
c010120b:	85 c0                	test   %eax,%eax
c010120d:	75 07                	jne    c0101216 <cga_putc+0x17>
        c |= 0x0700;
c010120f:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101216:	8b 45 08             	mov    0x8(%ebp),%eax
c0101219:	0f b6 c0             	movzbl %al,%eax
c010121c:	83 f8 0a             	cmp    $0xa,%eax
c010121f:	74 4c                	je     c010126d <cga_putc+0x6e>
c0101221:	83 f8 0d             	cmp    $0xd,%eax
c0101224:	74 57                	je     c010127d <cga_putc+0x7e>
c0101226:	83 f8 08             	cmp    $0x8,%eax
c0101229:	0f 85 88 00 00 00    	jne    c01012b7 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c010122f:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101236:	66 85 c0             	test   %ax,%ax
c0101239:	74 30                	je     c010126b <cga_putc+0x6c>
            crt_pos --;
c010123b:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101242:	83 e8 01             	sub    $0x1,%eax
c0101245:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c010124b:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c0101250:	0f b7 15 44 28 1c c0 	movzwl 0xc01c2844,%edx
c0101257:	0f b7 d2             	movzwl %dx,%edx
c010125a:	01 d2                	add    %edx,%edx
c010125c:	01 c2                	add    %eax,%edx
c010125e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101261:	b0 00                	mov    $0x0,%al
c0101263:	83 c8 20             	or     $0x20,%eax
c0101266:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101269:	eb 72                	jmp    c01012dd <cga_putc+0xde>
c010126b:	eb 70                	jmp    c01012dd <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c010126d:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101274:	83 c0 50             	add    $0x50,%eax
c0101277:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c010127d:	0f b7 1d 44 28 1c c0 	movzwl 0xc01c2844,%ebx
c0101284:	0f b7 0d 44 28 1c c0 	movzwl 0xc01c2844,%ecx
c010128b:	0f b7 c1             	movzwl %cx,%eax
c010128e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101294:	c1 e8 10             	shr    $0x10,%eax
c0101297:	89 c2                	mov    %eax,%edx
c0101299:	66 c1 ea 06          	shr    $0x6,%dx
c010129d:	89 d0                	mov    %edx,%eax
c010129f:	c1 e0 02             	shl    $0x2,%eax
c01012a2:	01 d0                	add    %edx,%eax
c01012a4:	c1 e0 04             	shl    $0x4,%eax
c01012a7:	29 c1                	sub    %eax,%ecx
c01012a9:	89 ca                	mov    %ecx,%edx
c01012ab:	89 d8                	mov    %ebx,%eax
c01012ad:	29 d0                	sub    %edx,%eax
c01012af:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
        break;
c01012b5:	eb 26                	jmp    c01012dd <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b7:	8b 0d 40 28 1c c0    	mov    0xc01c2840,%ecx
c01012bd:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012c4:	8d 50 01             	lea    0x1(%eax),%edx
c01012c7:	66 89 15 44 28 1c c0 	mov    %dx,0xc01c2844
c01012ce:	0f b7 c0             	movzwl %ax,%eax
c01012d1:	01 c0                	add    %eax,%eax
c01012d3:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d9:	66 89 02             	mov    %ax,(%edx)
        break;
c01012dc:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012dd:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012e4:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e8:	76 5b                	jbe    c0101345 <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012ea:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012ef:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012f5:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012fa:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c0101301:	00 
c0101302:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101306:	89 04 24             	mov    %eax,(%esp)
c0101309:	e8 70 c2 00 00       	call   c010d57e <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010130e:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101315:	eb 15                	jmp    c010132c <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101317:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c010131c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010131f:	01 d2                	add    %edx,%edx
c0101321:	01 d0                	add    %edx,%eax
c0101323:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101328:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010132c:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101333:	7e e2                	jle    c0101317 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101335:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c010133c:	83 e8 50             	sub    $0x50,%eax
c010133f:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101345:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c010134c:	0f b7 c0             	movzwl %ax,%eax
c010134f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101353:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101357:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010135b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135f:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101360:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101367:	66 c1 e8 08          	shr    $0x8,%ax
c010136b:	0f b6 c0             	movzbl %al,%eax
c010136e:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c0101375:	83 c2 01             	add    $0x1,%edx
c0101378:	0f b7 d2             	movzwl %dx,%edx
c010137b:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c010137f:	88 45 ed             	mov    %al,-0x13(%ebp)
c0101382:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101386:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010138a:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c010138b:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101392:	0f b7 c0             	movzwl %ax,%eax
c0101395:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101399:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c010139d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013a1:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013a5:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c01013a6:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01013ad:	0f b6 c0             	movzbl %al,%eax
c01013b0:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c01013b7:	83 c2 01             	add    $0x1,%edx
c01013ba:	0f b7 d2             	movzwl %dx,%edx
c01013bd:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013c1:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013c4:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c8:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013cc:	ee                   	out    %al,(%dx)
}
c01013cd:	83 c4 34             	add    $0x34,%esp
c01013d0:	5b                   	pop    %ebx
c01013d1:	5d                   	pop    %ebp
c01013d2:	c3                   	ret    

c01013d3 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013d3:	55                   	push   %ebp
c01013d4:	89 e5                	mov    %esp,%ebp
c01013d6:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013e0:	eb 09                	jmp    c01013eb <serial_putc_sub+0x18>
        delay();
c01013e2:	e8 4f fb ff ff       	call   c0100f36 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013eb:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013f1:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013f5:	89 c2                	mov    %eax,%edx
c01013f7:	ec                   	in     (%dx),%al
c01013f8:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013fb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013ff:	0f b6 c0             	movzbl %al,%eax
c0101402:	83 e0 20             	and    $0x20,%eax
c0101405:	85 c0                	test   %eax,%eax
c0101407:	75 09                	jne    c0101412 <serial_putc_sub+0x3f>
c0101409:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101410:	7e d0                	jle    c01013e2 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101412:	8b 45 08             	mov    0x8(%ebp),%eax
c0101415:	0f b6 c0             	movzbl %al,%eax
c0101418:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010141e:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101421:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101425:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101429:	ee                   	out    %al,(%dx)
}
c010142a:	c9                   	leave  
c010142b:	c3                   	ret    

c010142c <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010142c:	55                   	push   %ebp
c010142d:	89 e5                	mov    %esp,%ebp
c010142f:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101432:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101436:	74 0d                	je     c0101445 <serial_putc+0x19>
        serial_putc_sub(c);
c0101438:	8b 45 08             	mov    0x8(%ebp),%eax
c010143b:	89 04 24             	mov    %eax,(%esp)
c010143e:	e8 90 ff ff ff       	call   c01013d3 <serial_putc_sub>
c0101443:	eb 24                	jmp    c0101469 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c0101445:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010144c:	e8 82 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub(' ');
c0101451:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101458:	e8 76 ff ff ff       	call   c01013d3 <serial_putc_sub>
        serial_putc_sub('\b');
c010145d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101464:	e8 6a ff ff ff       	call   c01013d3 <serial_putc_sub>
    }
}
c0101469:	c9                   	leave  
c010146a:	c3                   	ret    

c010146b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c010146b:	55                   	push   %ebp
c010146c:	89 e5                	mov    %esp,%ebp
c010146e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101471:	eb 33                	jmp    c01014a6 <cons_intr+0x3b>
        if (c != 0) {
c0101473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101477:	74 2d                	je     c01014a6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101479:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c010147e:	8d 50 01             	lea    0x1(%eax),%edx
c0101481:	89 15 64 2a 1c c0    	mov    %edx,0xc01c2a64
c0101487:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010148a:	88 90 60 28 1c c0    	mov    %dl,-0x3fe3d7a0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101490:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c0101495:	3d 00 02 00 00       	cmp    $0x200,%eax
c010149a:	75 0a                	jne    c01014a6 <cons_intr+0x3b>
                cons.wpos = 0;
c010149c:	c7 05 64 2a 1c c0 00 	movl   $0x0,0xc01c2a64
c01014a3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c01014a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a9:	ff d0                	call   *%eax
c01014ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014ae:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014b2:	75 bf                	jne    c0101473 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014b4:	c9                   	leave  
c01014b5:	c3                   	ret    

c01014b6 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014b6:	55                   	push   %ebp
c01014b7:	89 e5                	mov    %esp,%ebp
c01014b9:	83 ec 10             	sub    $0x10,%esp
c01014bc:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014c2:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014c6:	89 c2                	mov    %eax,%edx
c01014c8:	ec                   	in     (%dx),%al
c01014c9:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014cc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014d0:	0f b6 c0             	movzbl %al,%eax
c01014d3:	83 e0 01             	and    $0x1,%eax
c01014d6:	85 c0                	test   %eax,%eax
c01014d8:	75 07                	jne    c01014e1 <serial_proc_data+0x2b>
        return -1;
c01014da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014df:	eb 2a                	jmp    c010150b <serial_proc_data+0x55>
c01014e1:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014eb:	89 c2                	mov    %eax,%edx
c01014ed:	ec                   	in     (%dx),%al
c01014ee:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014f1:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014f5:	0f b6 c0             	movzbl %al,%eax
c01014f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014fb:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014ff:	75 07                	jne    c0101508 <serial_proc_data+0x52>
        c = '\b';
c0101501:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101508:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010150b:	c9                   	leave  
c010150c:	c3                   	ret    

c010150d <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c010150d:	55                   	push   %ebp
c010150e:	89 e5                	mov    %esp,%ebp
c0101510:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c0101513:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c0101518:	85 c0                	test   %eax,%eax
c010151a:	74 0c                	je     c0101528 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c010151c:	c7 04 24 b6 14 10 c0 	movl   $0xc01014b6,(%esp)
c0101523:	e8 43 ff ff ff       	call   c010146b <cons_intr>
    }
}
c0101528:	c9                   	leave  
c0101529:	c3                   	ret    

c010152a <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c010152a:	55                   	push   %ebp
c010152b:	89 e5                	mov    %esp,%ebp
c010152d:	83 ec 38             	sub    $0x38,%esp
c0101530:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101536:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010153a:	89 c2                	mov    %eax,%edx
c010153c:	ec                   	in     (%dx),%al
c010153d:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101540:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101544:	0f b6 c0             	movzbl %al,%eax
c0101547:	83 e0 01             	and    $0x1,%eax
c010154a:	85 c0                	test   %eax,%eax
c010154c:	75 0a                	jne    c0101558 <kbd_proc_data+0x2e>
        return -1;
c010154e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101553:	e9 59 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
c0101558:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010155e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101562:	89 c2                	mov    %eax,%edx
c0101564:	ec                   	in     (%dx),%al
c0101565:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101568:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c010156c:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c010156f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101573:	75 17                	jne    c010158c <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101575:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010157a:	83 c8 40             	or     $0x40,%eax
c010157d:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c0101582:	b8 00 00 00 00       	mov    $0x0,%eax
c0101587:	e9 25 01 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c010158c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101590:	84 c0                	test   %al,%al
c0101592:	79 47                	jns    c01015db <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101594:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101599:	83 e0 40             	and    $0x40,%eax
c010159c:	85 c0                	test   %eax,%eax
c010159e:	75 09                	jne    c01015a9 <kbd_proc_data+0x7f>
c01015a0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a4:	83 e0 7f             	and    $0x7f,%eax
c01015a7:	eb 04                	jmp    c01015ad <kbd_proc_data+0x83>
c01015a9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ad:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015b4:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c01015bb:	83 c8 40             	or     $0x40,%eax
c01015be:	0f b6 c0             	movzbl %al,%eax
c01015c1:	f7 d0                	not    %eax
c01015c3:	89 c2                	mov    %eax,%edx
c01015c5:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015ca:	21 d0                	and    %edx,%eax
c01015cc:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c01015d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01015d6:	e9 d6 00 00 00       	jmp    c01016b1 <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015db:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015e0:	83 e0 40             	and    $0x40,%eax
c01015e3:	85 c0                	test   %eax,%eax
c01015e5:	74 11                	je     c01015f8 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e7:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015eb:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015f0:	83 e0 bf             	and    $0xffffffbf,%eax
c01015f3:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    }

    shift |= shiftcode[data];
c01015f8:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015fc:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c0101603:	0f b6 d0             	movzbl %al,%edx
c0101606:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010160b:	09 d0                	or     %edx,%eax
c010160d:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    shift ^= togglecode[data];
c0101612:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101616:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
c010161d:	0f b6 d0             	movzbl %al,%edx
c0101620:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101625:	31 d0                	xor    %edx,%eax
c0101627:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68

    c = charcode[shift & (CTL | SHIFT)][data];
c010162c:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101631:	83 e0 03             	and    $0x3,%eax
c0101634:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
c010163b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010163f:	01 d0                	add    %edx,%eax
c0101641:	0f b6 00             	movzbl (%eax),%eax
c0101644:	0f b6 c0             	movzbl %al,%eax
c0101647:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c010164a:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010164f:	83 e0 08             	and    $0x8,%eax
c0101652:	85 c0                	test   %eax,%eax
c0101654:	74 22                	je     c0101678 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101656:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c010165a:	7e 0c                	jle    c0101668 <kbd_proc_data+0x13e>
c010165c:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101660:	7f 06                	jg     c0101668 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101662:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101666:	eb 10                	jmp    c0101678 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101668:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c010166c:	7e 0a                	jle    c0101678 <kbd_proc_data+0x14e>
c010166e:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101672:	7f 04                	jg     c0101678 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101674:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101678:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010167d:	f7 d0                	not    %eax
c010167f:	83 e0 06             	and    $0x6,%eax
c0101682:	85 c0                	test   %eax,%eax
c0101684:	75 28                	jne    c01016ae <kbd_proc_data+0x184>
c0101686:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c010168d:	75 1f                	jne    c01016ae <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c010168f:	c7 04 24 fd d9 10 c0 	movl   $0xc010d9fd,(%esp)
c0101696:	e8 bd ec ff ff       	call   c0100358 <cprintf>
c010169b:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c01016a1:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016a5:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a9:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016ad:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016b1:	c9                   	leave  
c01016b2:	c3                   	ret    

c01016b3 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016b3:	55                   	push   %ebp
c01016b4:	89 e5                	mov    %esp,%ebp
c01016b6:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b9:	c7 04 24 2a 15 10 c0 	movl   $0xc010152a,(%esp)
c01016c0:	e8 a6 fd ff ff       	call   c010146b <cons_intr>
}
c01016c5:	c9                   	leave  
c01016c6:	c3                   	ret    

c01016c7 <kbd_init>:

static void
kbd_init(void) {
c01016c7:	55                   	push   %ebp
c01016c8:	89 e5                	mov    %esp,%ebp
c01016ca:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016cd:	e8 e1 ff ff ff       	call   c01016b3 <kbd_intr>
    pic_enable(IRQ_KBD);
c01016d2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d9:	e8 b2 09 00 00       	call   c0102090 <pic_enable>
}
c01016de:	c9                   	leave  
c01016df:	c3                   	ret    

c01016e0 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016e0:	55                   	push   %ebp
c01016e1:	89 e5                	mov    %esp,%ebp
c01016e3:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016e6:	e8 93 f8 ff ff       	call   c0100f7e <cga_init>
    serial_init();
c01016eb:	e8 74 f9 ff ff       	call   c0101064 <serial_init>
    kbd_init();
c01016f0:	e8 d2 ff ff ff       	call   c01016c7 <kbd_init>
    if (!serial_exists) {
c01016f5:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c01016fa:	85 c0                	test   %eax,%eax
c01016fc:	75 0c                	jne    c010170a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016fe:	c7 04 24 09 da 10 c0 	movl   $0xc010da09,(%esp)
c0101705:	e8 4e ec ff ff       	call   c0100358 <cprintf>
    }
}
c010170a:	c9                   	leave  
c010170b:	c3                   	ret    

c010170c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010170c:	55                   	push   %ebp
c010170d:	89 e5                	mov    %esp,%ebp
c010170f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101712:	e8 e2 f7 ff ff       	call   c0100ef9 <__intr_save>
c0101717:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010171a:	8b 45 08             	mov    0x8(%ebp),%eax
c010171d:	89 04 24             	mov    %eax,(%esp)
c0101720:	e8 9b fa ff ff       	call   c01011c0 <lpt_putc>
        cga_putc(c);
c0101725:	8b 45 08             	mov    0x8(%ebp),%eax
c0101728:	89 04 24             	mov    %eax,(%esp)
c010172b:	e8 cf fa ff ff       	call   c01011ff <cga_putc>
        serial_putc(c);
c0101730:	8b 45 08             	mov    0x8(%ebp),%eax
c0101733:	89 04 24             	mov    %eax,(%esp)
c0101736:	e8 f1 fc ff ff       	call   c010142c <serial_putc>
    }
    local_intr_restore(intr_flag);
c010173b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010173e:	89 04 24             	mov    %eax,(%esp)
c0101741:	e8 dd f7 ff ff       	call   c0100f23 <__intr_restore>
}
c0101746:	c9                   	leave  
c0101747:	c3                   	ret    

c0101748 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101748:	55                   	push   %ebp
c0101749:	89 e5                	mov    %esp,%ebp
c010174b:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c010174e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101755:	e8 9f f7 ff ff       	call   c0100ef9 <__intr_save>
c010175a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010175d:	e8 ab fd ff ff       	call   c010150d <serial_intr>
        kbd_intr();
c0101762:	e8 4c ff ff ff       	call   c01016b3 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101767:	8b 15 60 2a 1c c0    	mov    0xc01c2a60,%edx
c010176d:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c0101772:	39 c2                	cmp    %eax,%edx
c0101774:	74 31                	je     c01017a7 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101776:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c010177b:	8d 50 01             	lea    0x1(%eax),%edx
c010177e:	89 15 60 2a 1c c0    	mov    %edx,0xc01c2a60
c0101784:	0f b6 80 60 28 1c c0 	movzbl -0x3fe3d7a0(%eax),%eax
c010178b:	0f b6 c0             	movzbl %al,%eax
c010178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101791:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c0101796:	3d 00 02 00 00       	cmp    $0x200,%eax
c010179b:	75 0a                	jne    c01017a7 <cons_getc+0x5f>
                cons.rpos = 0;
c010179d:	c7 05 60 2a 1c c0 00 	movl   $0x0,0xc01c2a60
c01017a4:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017aa:	89 04 24             	mov    %eax,(%esp)
c01017ad:	e8 71 f7 ff ff       	call   c0100f23 <__intr_restore>
    return c;
c01017b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017b5:	c9                   	leave  
c01017b6:	c3                   	ret    

c01017b7 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b7:	55                   	push   %ebp
c01017b8:	89 e5                	mov    %esp,%ebp
c01017ba:	83 ec 14             	sub    $0x14,%esp
c01017bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017c4:	90                   	nop
c01017c5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c9:	83 c0 07             	add    $0x7,%eax
c01017cc:	0f b7 c0             	movzwl %ax,%eax
c01017cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017d3:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d7:	89 c2                	mov    %eax,%edx
c01017d9:	ec                   	in     (%dx),%al
c01017da:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017dd:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017e1:	0f b6 c0             	movzbl %al,%eax
c01017e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ea:	25 80 00 00 00       	and    $0x80,%eax
c01017ef:	85 c0                	test   %eax,%eax
c01017f1:	75 d2                	jne    c01017c5 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f7:	74 11                	je     c010180a <ide_wait_ready+0x53>
c01017f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017fc:	83 e0 21             	and    $0x21,%eax
c01017ff:	85 c0                	test   %eax,%eax
c0101801:	74 07                	je     c010180a <ide_wait_ready+0x53>
        return -1;
c0101803:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101808:	eb 05                	jmp    c010180f <ide_wait_ready+0x58>
    }
    return 0;
c010180a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010180f:	c9                   	leave  
c0101810:	c3                   	ret    

c0101811 <ide_init>:

void
ide_init(void) {
c0101811:	55                   	push   %ebp
c0101812:	89 e5                	mov    %esp,%ebp
c0101814:	57                   	push   %edi
c0101815:	53                   	push   %ebx
c0101816:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010181c:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0101822:	e9 d6 02 00 00       	jmp    c0101afd <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101827:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010182b:	c1 e0 03             	shl    $0x3,%eax
c010182e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101835:	29 c2                	sub    %eax,%edx
c0101837:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c010183d:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101840:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101844:	66 d1 e8             	shr    %ax
c0101847:	0f b7 c0             	movzwl %ax,%eax
c010184a:	0f b7 04 85 28 da 10 	movzwl -0x3fef25d8(,%eax,4),%eax
c0101851:	c0 
c0101852:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0101856:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010185a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101861:	00 
c0101862:	89 04 24             	mov    %eax,(%esp)
c0101865:	e8 4d ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010186a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010186e:	83 e0 01             	and    $0x1,%eax
c0101871:	c1 e0 04             	shl    $0x4,%eax
c0101874:	83 c8 e0             	or     $0xffffffe0,%eax
c0101877:	0f b6 c0             	movzbl %al,%eax
c010187a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010187e:	83 c2 06             	add    $0x6,%edx
c0101881:	0f b7 d2             	movzwl %dx,%edx
c0101884:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101888:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188b:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010188f:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101893:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101894:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101898:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010189f:	00 
c01018a0:	89 04 24             	mov    %eax,(%esp)
c01018a3:	e8 0f ff ff ff       	call   c01017b7 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a8:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ac:	83 c0 07             	add    $0x7,%eax
c01018af:	0f b7 c0             	movzwl %ax,%eax
c01018b2:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018b6:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018ba:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018be:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018c3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018ce:	00 
c01018cf:	89 04 24             	mov    %eax,(%esp)
c01018d2:	e8 e0 fe ff ff       	call   c01017b7 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018db:	83 c0 07             	add    $0x7,%eax
c01018de:	0f b7 c0             	movzwl %ax,%eax
c01018e1:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018e5:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e9:	89 c2                	mov    %eax,%edx
c01018eb:	ec                   	in     (%dx),%al
c01018ec:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018ef:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018f3:	84 c0                	test   %al,%al
c01018f5:	0f 84 f7 01 00 00    	je     c0101af2 <ide_init+0x2e1>
c01018fb:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018ff:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101906:	00 
c0101907:	89 04 24             	mov    %eax,(%esp)
c010190a:	e8 a8 fe ff ff       	call   c01017b7 <ide_wait_ready>
c010190f:	85 c0                	test   %eax,%eax
c0101911:	0f 85 db 01 00 00    	jne    c0101af2 <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101917:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010191b:	c1 e0 03             	shl    $0x3,%eax
c010191e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101925:	29 c2                	sub    %eax,%edx
c0101927:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c010192d:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101930:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101934:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101937:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010193d:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101940:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101947:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010194a:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010194d:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101950:	89 cb                	mov    %ecx,%ebx
c0101952:	89 df                	mov    %ebx,%edi
c0101954:	89 c1                	mov    %eax,%ecx
c0101956:	fc                   	cld    
c0101957:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101959:	89 c8                	mov    %ecx,%eax
c010195b:	89 fb                	mov    %edi,%ebx
c010195d:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101960:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101963:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101969:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010196c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010196f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101975:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101978:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010197b:	25 00 00 00 04       	and    $0x4000000,%eax
c0101980:	85 c0                	test   %eax,%eax
c0101982:	74 0e                	je     c0101992 <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101984:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101987:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010198d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101990:	eb 09                	jmp    c010199b <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101992:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101995:	8b 40 78             	mov    0x78(%eax),%eax
c0101998:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010199b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010199f:	c1 e0 03             	shl    $0x3,%eax
c01019a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a9:	29 c2                	sub    %eax,%edx
c01019ab:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019b1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019b4:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019bb:	c1 e0 03             	shl    $0x3,%eax
c01019be:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019c5:	29 c2                	sub    %eax,%edx
c01019c7:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019d0:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019d6:	83 c0 62             	add    $0x62,%eax
c01019d9:	0f b7 00             	movzwl (%eax),%eax
c01019dc:	0f b7 c0             	movzwl %ax,%eax
c01019df:	25 00 02 00 00       	and    $0x200,%eax
c01019e4:	85 c0                	test   %eax,%eax
c01019e6:	75 24                	jne    c0101a0c <ide_init+0x1fb>
c01019e8:	c7 44 24 0c 30 da 10 	movl   $0xc010da30,0xc(%esp)
c01019ef:	c0 
c01019f0:	c7 44 24 08 73 da 10 	movl   $0xc010da73,0x8(%esp)
c01019f7:	c0 
c01019f8:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019ff:	00 
c0101a00:	c7 04 24 88 da 10 c0 	movl   $0xc010da88,(%esp)
c0101a07:	e8 ce f3 ff ff       	call   c0100dda <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a0c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a10:	c1 e0 03             	shl    $0x3,%eax
c0101a13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a1a:	29 c2                	sub    %eax,%edx
c0101a1c:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101a22:	83 c0 0c             	add    $0xc,%eax
c0101a25:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a2b:	83 c0 36             	add    $0x36,%eax
c0101a2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a31:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a3f:	eb 34                	jmp    c0101a75 <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a41:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a44:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a47:	01 c2                	add    %eax,%edx
c0101a49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a4c:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a4f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a52:	01 c8                	add    %ecx,%eax
c0101a54:	0f b6 00             	movzbl (%eax),%eax
c0101a57:	88 02                	mov    %al,(%edx)
c0101a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a5c:	8d 50 01             	lea    0x1(%eax),%edx
c0101a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a62:	01 c2                	add    %eax,%edx
c0101a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a67:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a6a:	01 c8                	add    %ecx,%eax
c0101a6c:	0f b6 00             	movzbl (%eax),%eax
c0101a6f:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a71:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a78:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a7b:	72 c4                	jb     c0101a41 <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a80:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a83:	01 d0                	add    %edx,%eax
c0101a85:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a8b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a8e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a91:	85 c0                	test   %eax,%eax
c0101a93:	74 0f                	je     c0101aa4 <ide_init+0x293>
c0101a95:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a9b:	01 d0                	add    %edx,%eax
c0101a9d:	0f b6 00             	movzbl (%eax),%eax
c0101aa0:	3c 20                	cmp    $0x20,%al
c0101aa2:	74 d9                	je     c0101a7d <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101aa4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa8:	c1 e0 03             	shl    $0x3,%eax
c0101aab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ab2:	29 c2                	sub    %eax,%edx
c0101ab4:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101aba:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101abd:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101ad3:	8b 50 08             	mov    0x8(%eax),%edx
c0101ad6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ada:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ade:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101ae2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101ae6:	c7 04 24 9a da 10 c0 	movl   $0xc010da9a,(%esp)
c0101aed:	e8 66 e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101af2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101af6:	83 c0 01             	add    $0x1,%eax
c0101af9:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101afd:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101b02:	0f 86 1f fd ff ff    	jbe    c0101827 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b08:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b0f:	e8 7c 05 00 00       	call   c0102090 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b14:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b1b:	e8 70 05 00 00       	call   c0102090 <pic_enable>
}
c0101b20:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b26:	5b                   	pop    %ebx
c0101b27:	5f                   	pop    %edi
c0101b28:	5d                   	pop    %ebp
c0101b29:	c3                   	ret    

c0101b2a <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b2a:	55                   	push   %ebp
c0101b2b:	89 e5                	mov    %esp,%ebp
c0101b2d:	83 ec 04             	sub    $0x4,%esp
c0101b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b33:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b37:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b3c:	77 24                	ja     c0101b62 <ide_device_valid+0x38>
c0101b3e:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b42:	c1 e0 03             	shl    $0x3,%eax
c0101b45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b4c:	29 c2                	sub    %eax,%edx
c0101b4e:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b54:	0f b6 00             	movzbl (%eax),%eax
c0101b57:	84 c0                	test   %al,%al
c0101b59:	74 07                	je     c0101b62 <ide_device_valid+0x38>
c0101b5b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b60:	eb 05                	jmp    c0101b67 <ide_device_valid+0x3d>
c0101b62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b67:	c9                   	leave  
c0101b68:	c3                   	ret    

c0101b69 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b69:	55                   	push   %ebp
c0101b6a:	89 e5                	mov    %esp,%ebp
c0101b6c:	83 ec 08             	sub    $0x8,%esp
c0101b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b72:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b76:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b7a:	89 04 24             	mov    %eax,(%esp)
c0101b7d:	e8 a8 ff ff ff       	call   c0101b2a <ide_device_valid>
c0101b82:	85 c0                	test   %eax,%eax
c0101b84:	74 1b                	je     c0101ba1 <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b86:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b8a:	c1 e0 03             	shl    $0x3,%eax
c0101b8d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b94:	29 c2                	sub    %eax,%edx
c0101b96:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b9c:	8b 40 08             	mov    0x8(%eax),%eax
c0101b9f:	eb 05                	jmp    c0101ba6 <ide_device_size+0x3d>
    }
    return 0;
c0101ba1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101ba6:	c9                   	leave  
c0101ba7:	c3                   	ret    

c0101ba8 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba8:	55                   	push   %ebp
c0101ba9:	89 e5                	mov    %esp,%ebp
c0101bab:	57                   	push   %edi
c0101bac:	53                   	push   %ebx
c0101bad:	83 ec 50             	sub    $0x50,%esp
c0101bb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bb3:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb7:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bbe:	77 24                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc0:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bc5:	77 1d                	ja     c0101be4 <ide_read_secs+0x3c>
c0101bc7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bcb:	c1 e0 03             	shl    $0x3,%eax
c0101bce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bd5:	29 c2                	sub    %eax,%edx
c0101bd7:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101bdd:	0f b6 00             	movzbl (%eax),%eax
c0101be0:	84 c0                	test   %al,%al
c0101be2:	75 24                	jne    c0101c08 <ide_read_secs+0x60>
c0101be4:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
c0101beb:	c0 
c0101bec:	c7 44 24 08 73 da 10 	movl   $0xc010da73,0x8(%esp)
c0101bf3:	c0 
c0101bf4:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bfb:	00 
c0101bfc:	c7 04 24 88 da 10 c0 	movl   $0xc010da88,(%esp)
c0101c03:	e8 d2 f1 ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c08:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c0f:	77 0f                	ja     c0101c20 <ide_read_secs+0x78>
c0101c11:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c14:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c17:	01 d0                	add    %edx,%eax
c0101c19:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c1e:	76 24                	jbe    c0101c44 <ide_read_secs+0x9c>
c0101c20:	c7 44 24 0c e0 da 10 	movl   $0xc010dae0,0xc(%esp)
c0101c27:	c0 
c0101c28:	c7 44 24 08 73 da 10 	movl   $0xc010da73,0x8(%esp)
c0101c2f:	c0 
c0101c30:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c37:	00 
c0101c38:	c7 04 24 88 da 10 c0 	movl   $0xc010da88,(%esp)
c0101c3f:	e8 96 f1 ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c44:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c48:	66 d1 e8             	shr    %ax
c0101c4b:	0f b7 c0             	movzwl %ax,%eax
c0101c4e:	0f b7 04 85 28 da 10 	movzwl -0x3fef25d8(,%eax,4),%eax
c0101c55:	c0 
c0101c56:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c5a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c5e:	66 d1 e8             	shr    %ax
c0101c61:	0f b7 c0             	movzwl %ax,%eax
c0101c64:	0f b7 04 85 2a da 10 	movzwl -0x3fef25d6(,%eax,4),%eax
c0101c6b:	c0 
c0101c6c:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c70:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c74:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c7b:	00 
c0101c7c:	89 04 24             	mov    %eax,(%esp)
c0101c7f:	e8 33 fb ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c84:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c88:	83 c0 02             	add    $0x2,%eax
c0101c8b:	0f b7 c0             	movzwl %ax,%eax
c0101c8e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c92:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c96:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c9a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c9e:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c9f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ca2:	0f b6 c0             	movzbl %al,%eax
c0101ca5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca9:	83 c2 02             	add    $0x2,%edx
c0101cac:	0f b7 d2             	movzwl %dx,%edx
c0101caf:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cb3:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101cb6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cba:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cbe:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cc2:	0f b6 c0             	movzbl %al,%eax
c0101cc5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc9:	83 c2 03             	add    $0x3,%edx
c0101ccc:	0f b7 d2             	movzwl %dx,%edx
c0101ccf:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101cd3:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101cd6:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cda:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cde:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ce2:	c1 e8 08             	shr    $0x8,%eax
c0101ce5:	0f b6 c0             	movzbl %al,%eax
c0101ce8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cec:	83 c2 04             	add    $0x4,%edx
c0101cef:	0f b7 d2             	movzwl %dx,%edx
c0101cf2:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cf6:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf9:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cfd:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d01:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d05:	c1 e8 10             	shr    $0x10,%eax
c0101d08:	0f b6 c0             	movzbl %al,%eax
c0101d0b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d0f:	83 c2 05             	add    $0x5,%edx
c0101d12:	0f b7 d2             	movzwl %dx,%edx
c0101d15:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d19:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d1c:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d20:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d24:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d25:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d29:	83 e0 01             	and    $0x1,%eax
c0101d2c:	c1 e0 04             	shl    $0x4,%eax
c0101d2f:	89 c2                	mov    %eax,%edx
c0101d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d34:	c1 e8 18             	shr    $0x18,%eax
c0101d37:	83 e0 0f             	and    $0xf,%eax
c0101d3a:	09 d0                	or     %edx,%eax
c0101d3c:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d3f:	0f b6 c0             	movzbl %al,%eax
c0101d42:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d46:	83 c2 06             	add    $0x6,%edx
c0101d49:	0f b7 d2             	movzwl %dx,%edx
c0101d4c:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d50:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d53:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d57:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d5b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d5c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d60:	83 c0 07             	add    $0x7,%eax
c0101d63:	0f b7 c0             	movzwl %ax,%eax
c0101d66:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d6a:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d6e:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d72:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d76:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d7e:	eb 5a                	jmp    c0101dda <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d80:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d8b:	00 
c0101d8c:	89 04 24             	mov    %eax,(%esp)
c0101d8f:	e8 23 fa ff ff       	call   c01017b7 <ide_wait_ready>
c0101d94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d9b:	74 02                	je     c0101d9f <ide_read_secs+0x1f7>
            goto out;
c0101d9d:	eb 41                	jmp    c0101de0 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d9f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101da3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101da6:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da9:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101dac:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101db3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101db6:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101dbc:	89 cb                	mov    %ecx,%ebx
c0101dbe:	89 df                	mov    %ebx,%edi
c0101dc0:	89 c1                	mov    %eax,%ecx
c0101dc2:	fc                   	cld    
c0101dc3:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dc5:	89 c8                	mov    %ecx,%eax
c0101dc7:	89 fb                	mov    %edi,%ebx
c0101dc9:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dcc:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dcf:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dd3:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dde:	75 a0                	jne    c0101d80 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101de3:	83 c4 50             	add    $0x50,%esp
c0101de6:	5b                   	pop    %ebx
c0101de7:	5f                   	pop    %edi
c0101de8:	5d                   	pop    %ebp
c0101de9:	c3                   	ret    

c0101dea <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101dea:	55                   	push   %ebp
c0101deb:	89 e5                	mov    %esp,%ebp
c0101ded:	56                   	push   %esi
c0101dee:	53                   	push   %ebx
c0101def:	83 ec 50             	sub    $0x50,%esp
c0101df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0101df5:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df9:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e00:	77 24                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e02:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e07:	77 1d                	ja     c0101e26 <ide_write_secs+0x3c>
c0101e09:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e0d:	c1 e0 03             	shl    $0x3,%eax
c0101e10:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e17:	29 c2                	sub    %eax,%edx
c0101e19:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101e1f:	0f b6 00             	movzbl (%eax),%eax
c0101e22:	84 c0                	test   %al,%al
c0101e24:	75 24                	jne    c0101e4a <ide_write_secs+0x60>
c0101e26:	c7 44 24 0c b8 da 10 	movl   $0xc010dab8,0xc(%esp)
c0101e2d:	c0 
c0101e2e:	c7 44 24 08 73 da 10 	movl   $0xc010da73,0x8(%esp)
c0101e35:	c0 
c0101e36:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e3d:	00 
c0101e3e:	c7 04 24 88 da 10 c0 	movl   $0xc010da88,(%esp)
c0101e45:	e8 90 ef ff ff       	call   c0100dda <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e4a:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e51:	77 0f                	ja     c0101e62 <ide_write_secs+0x78>
c0101e53:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e56:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e59:	01 d0                	add    %edx,%eax
c0101e5b:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e60:	76 24                	jbe    c0101e86 <ide_write_secs+0x9c>
c0101e62:	c7 44 24 0c e0 da 10 	movl   $0xc010dae0,0xc(%esp)
c0101e69:	c0 
c0101e6a:	c7 44 24 08 73 da 10 	movl   $0xc010da73,0x8(%esp)
c0101e71:	c0 
c0101e72:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e79:	00 
c0101e7a:	c7 04 24 88 da 10 c0 	movl   $0xc010da88,(%esp)
c0101e81:	e8 54 ef ff ff       	call   c0100dda <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e86:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e8a:	66 d1 e8             	shr    %ax
c0101e8d:	0f b7 c0             	movzwl %ax,%eax
c0101e90:	0f b7 04 85 28 da 10 	movzwl -0x3fef25d8(,%eax,4),%eax
c0101e97:	c0 
c0101e98:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e9c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ea0:	66 d1 e8             	shr    %ax
c0101ea3:	0f b7 c0             	movzwl %ax,%eax
c0101ea6:	0f b7 04 85 2a da 10 	movzwl -0x3fef25d6(,%eax,4),%eax
c0101ead:	c0 
c0101eae:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eb2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eb6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ebd:	00 
c0101ebe:	89 04 24             	mov    %eax,(%esp)
c0101ec1:	e8 f1 f8 ff ff       	call   c01017b7 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ec6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101eca:	83 c0 02             	add    $0x2,%eax
c0101ecd:	0f b7 c0             	movzwl %ax,%eax
c0101ed0:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ed4:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed8:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101edc:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ee0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101ee1:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ee4:	0f b6 c0             	movzbl %al,%eax
c0101ee7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101eeb:	83 c2 02             	add    $0x2,%edx
c0101eee:	0f b7 d2             	movzwl %dx,%edx
c0101ef1:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101ef5:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101efc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101f00:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f04:	0f b6 c0             	movzbl %al,%eax
c0101f07:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f0b:	83 c2 03             	add    $0x3,%edx
c0101f0e:	0f b7 d2             	movzwl %dx,%edx
c0101f11:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f15:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f18:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f1c:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f20:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f24:	c1 e8 08             	shr    $0x8,%eax
c0101f27:	0f b6 c0             	movzbl %al,%eax
c0101f2a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f2e:	83 c2 04             	add    $0x4,%edx
c0101f31:	0f b7 d2             	movzwl %dx,%edx
c0101f34:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f38:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f3b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f3f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f43:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f47:	c1 e8 10             	shr    $0x10,%eax
c0101f4a:	0f b6 c0             	movzbl %al,%eax
c0101f4d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f51:	83 c2 05             	add    $0x5,%edx
c0101f54:	0f b7 d2             	movzwl %dx,%edx
c0101f57:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f5b:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f5e:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f62:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f66:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f67:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f6b:	83 e0 01             	and    $0x1,%eax
c0101f6e:	c1 e0 04             	shl    $0x4,%eax
c0101f71:	89 c2                	mov    %eax,%edx
c0101f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f76:	c1 e8 18             	shr    $0x18,%eax
c0101f79:	83 e0 0f             	and    $0xf,%eax
c0101f7c:	09 d0                	or     %edx,%eax
c0101f7e:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f81:	0f b6 c0             	movzbl %al,%eax
c0101f84:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f88:	83 c2 06             	add    $0x6,%edx
c0101f8b:	0f b7 d2             	movzwl %dx,%edx
c0101f8e:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f92:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f95:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f99:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f9d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f9e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fa2:	83 c0 07             	add    $0x7,%eax
c0101fa5:	0f b7 c0             	movzwl %ax,%eax
c0101fa8:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fac:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fb0:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fb4:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb8:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fc0:	eb 5a                	jmp    c010201c <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fc2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fc6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fcd:	00 
c0101fce:	89 04 24             	mov    %eax,(%esp)
c0101fd1:	e8 e1 f7 ff ff       	call   c01017b7 <ide_wait_ready>
c0101fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fdd:	74 02                	je     c0101fe1 <ide_write_secs+0x1f7>
            goto out;
c0101fdf:	eb 41                	jmp    c0102022 <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fe1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fe5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe8:	8b 45 10             	mov    0x10(%ebp),%eax
c0101feb:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fee:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101ff5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff8:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ffe:	89 cb                	mov    %ecx,%ebx
c0102000:	89 de                	mov    %ebx,%esi
c0102002:	89 c1                	mov    %eax,%ecx
c0102004:	fc                   	cld    
c0102005:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102007:	89 c8                	mov    %ecx,%eax
c0102009:	89 f3                	mov    %esi,%ebx
c010200b:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010200e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102011:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0102015:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010201c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102020:	75 a0                	jne    c0101fc2 <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0102022:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102025:	83 c4 50             	add    $0x50,%esp
c0102028:	5b                   	pop    %ebx
c0102029:	5e                   	pop    %esi
c010202a:	5d                   	pop    %ebp
c010202b:	c3                   	ret    

c010202c <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010202c:	55                   	push   %ebp
c010202d:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c010202f:	fb                   	sti    
    sti();
}
c0102030:	5d                   	pop    %ebp
c0102031:	c3                   	ret    

c0102032 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c0102032:	55                   	push   %ebp
c0102033:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c0102035:	fa                   	cli    
    cli();
}
c0102036:	5d                   	pop    %ebp
c0102037:	c3                   	ret    

c0102038 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102038:	55                   	push   %ebp
c0102039:	89 e5                	mov    %esp,%ebp
c010203b:	83 ec 14             	sub    $0x14,%esp
c010203e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102041:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0102045:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102049:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
    if (did_init) {
c010204f:	a1 60 2b 1c c0       	mov    0xc01c2b60,%eax
c0102054:	85 c0                	test   %eax,%eax
c0102056:	74 36                	je     c010208e <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010205c:	0f b6 c0             	movzbl %al,%eax
c010205f:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102065:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102068:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010206c:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102070:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102071:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102075:	66 c1 e8 08          	shr    $0x8,%ax
c0102079:	0f b6 c0             	movzbl %al,%eax
c010207c:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c0102082:	88 45 f9             	mov    %al,-0x7(%ebp)
c0102085:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102089:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010208d:	ee                   	out    %al,(%dx)
    }
}
c010208e:	c9                   	leave  
c010208f:	c3                   	ret    

c0102090 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102090:	55                   	push   %ebp
c0102091:	89 e5                	mov    %esp,%ebp
c0102093:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102096:	8b 45 08             	mov    0x8(%ebp),%eax
c0102099:	ba 01 00 00 00       	mov    $0x1,%edx
c010209e:	89 c1                	mov    %eax,%ecx
c01020a0:	d3 e2                	shl    %cl,%edx
c01020a2:	89 d0                	mov    %edx,%eax
c01020a4:	f7 d0                	not    %eax
c01020a6:	89 c2                	mov    %eax,%edx
c01020a8:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01020af:	21 d0                	and    %edx,%eax
c01020b1:	0f b7 c0             	movzwl %ax,%eax
c01020b4:	89 04 24             	mov    %eax,(%esp)
c01020b7:	e8 7c ff ff ff       	call   c0102038 <pic_setmask>
}
c01020bc:	c9                   	leave  
c01020bd:	c3                   	ret    

c01020be <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020be:	55                   	push   %ebp
c01020bf:	89 e5                	mov    %esp,%ebp
c01020c1:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020c4:	c7 05 60 2b 1c c0 01 	movl   $0x1,0xc01c2b60
c01020cb:	00 00 00 
c01020ce:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020d4:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d8:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020dc:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020e0:	ee                   	out    %al,(%dx)
c01020e1:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e7:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020eb:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020ef:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020f3:	ee                   	out    %al,(%dx)
c01020f4:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020fa:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020fe:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0102102:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102106:	ee                   	out    %al,(%dx)
c0102107:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c010210d:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c0102111:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102115:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102119:	ee                   	out    %al,(%dx)
c010211a:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102120:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c0102124:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102128:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212c:	ee                   	out    %al,(%dx)
c010212d:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c0102133:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102137:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010213b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010213f:	ee                   	out    %al,(%dx)
c0102140:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102146:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c010214a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010214e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102152:	ee                   	out    %al,(%dx)
c0102153:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102159:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010215d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102161:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102165:	ee                   	out    %al,(%dx)
c0102166:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010216c:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102170:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102174:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102178:	ee                   	out    %al,(%dx)
c0102179:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010217f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102183:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102187:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010218b:	ee                   	out    %al,(%dx)
c010218c:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102192:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102196:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010219a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010219e:	ee                   	out    %al,(%dx)
c010219f:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c01021a5:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a9:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021ad:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021b1:	ee                   	out    %al,(%dx)
c01021b2:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b8:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021bc:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021c0:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021c4:	ee                   	out    %al,(%dx)
c01021c5:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021cb:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021cf:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021d3:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d7:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d8:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021df:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021e3:	74 12                	je     c01021f7 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021e5:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021ec:	0f b7 c0             	movzwl %ax,%eax
c01021ef:	89 04 24             	mov    %eax,(%esp)
c01021f2:	e8 41 fe ff ff       	call   c0102038 <pic_setmask>
    }
}
c01021f7:	c9                   	leave  
c01021f8:	c3                   	ret    

c01021f9 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f9:	55                   	push   %ebp
c01021fa:	89 e5                	mov    %esp,%ebp
c01021fc:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021ff:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102206:	00 
c0102207:	c7 04 24 20 db 10 c0 	movl   $0xc010db20,(%esp)
c010220e:	e8 45 e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c0102213:	c7 04 24 2a db 10 c0 	movl   $0xc010db2a,(%esp)
c010221a:	e8 39 e1 ff ff       	call   c0100358 <cprintf>
    panic("EOT: kernel seems ok.");
c010221f:	c7 44 24 08 38 db 10 	movl   $0xc010db38,0x8(%esp)
c0102226:	c0 
c0102227:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c010222e:	00 
c010222f:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c0102236:	e8 9f eb ff ff       	call   c0100dda <__panic>

c010223b <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010223b:	55                   	push   %ebp
c010223c:	89 e5                	mov    %esp,%ebp
c010223e:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c0102241:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102248:	e9 c3 00 00 00       	jmp    c0102310 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010224d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102250:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c0102257:	89 c2                	mov    %eax,%edx
c0102259:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225c:	66 89 14 c5 80 2b 1c 	mov    %dx,-0x3fe3d480(,%eax,8)
c0102263:	c0 
c0102264:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102267:	66 c7 04 c5 82 2b 1c 	movw   $0x8,-0x3fe3d47e(,%eax,8)
c010226e:	c0 08 00 
c0102271:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102274:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c010227b:	c0 
c010227c:	83 e2 e0             	and    $0xffffffe0,%edx
c010227f:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c0102286:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102289:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c0102290:	c0 
c0102291:	83 e2 1f             	and    $0x1f,%edx
c0102294:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c010229b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229e:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022a5:	c0 
c01022a6:	83 e2 f0             	and    $0xfffffff0,%edx
c01022a9:	83 ca 0e             	or     $0xe,%edx
c01022ac:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b6:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022bd:	c0 
c01022be:	83 e2 ef             	and    $0xffffffef,%edx
c01022c1:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022cb:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022d2:	c0 
c01022d3:	83 e2 9f             	and    $0xffffff9f,%edx
c01022d6:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022e0:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022e7:	c0 
c01022e8:	83 ca 80             	or     $0xffffff80,%edx
c01022eb:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f5:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c01022fc:	c1 e8 10             	shr    $0x10,%eax
c01022ff:	89 c2                	mov    %eax,%edx
c0102301:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102304:	66 89 14 c5 86 2b 1c 	mov    %dx,-0x3fe3d47a(,%eax,8)
c010230b:	c0 
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++) {
c010230c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102310:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102313:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102318:	0f 86 2f ff ff ff    	jbe    c010224d <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010231e:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c0102323:	66 a3 80 2f 1c c0    	mov    %ax,0xc01c2f80
c0102329:	66 c7 05 82 2f 1c c0 	movw   $0x8,0xc01c2f82
c0102330:	08 00 
c0102332:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102339:	83 e0 e0             	and    $0xffffffe0,%eax
c010233c:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c0102341:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102348:	83 e0 1f             	and    $0x1f,%eax
c010234b:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c0102350:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102357:	83 c8 0f             	or     $0xf,%eax
c010235a:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010235f:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102366:	83 e0 ef             	and    $0xffffffef,%eax
c0102369:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010236e:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102375:	83 c8 60             	or     $0x60,%eax
c0102378:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010237d:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102384:	83 c8 80             	or     $0xffffff80,%eax
c0102387:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010238c:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c0102391:	c1 e8 10             	shr    $0x10,%eax
c0102394:	66 a3 86 2f 1c c0    	mov    %ax,0xc01c2f86
c010239a:	c7 45 f8 80 15 13 c0 	movl   $0xc0131580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023a4:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c01023a7:	c9                   	leave  
c01023a8:	c3                   	ret    

c01023a9 <trapname>:

static const char *
trapname(int trapno) {
c01023a9:	55                   	push   %ebp
c01023aa:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01023af:	83 f8 13             	cmp    $0x13,%eax
c01023b2:	77 0c                	ja     c01023c0 <trapname+0x17>
        return excnames[trapno];
c01023b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01023b7:	8b 04 85 e0 df 10 c0 	mov    -0x3fef2020(,%eax,4),%eax
c01023be:	eb 18                	jmp    c01023d8 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023c0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023c4:	7e 0d                	jle    c01023d3 <trapname+0x2a>
c01023c6:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023ca:	7f 07                	jg     c01023d3 <trapname+0x2a>
        return "Hardware Interrupt";
c01023cc:	b8 5f db 10 c0       	mov    $0xc010db5f,%eax
c01023d1:	eb 05                	jmp    c01023d8 <trapname+0x2f>
    }
    return "(unknown trap)";
c01023d3:	b8 72 db 10 c0       	mov    $0xc010db72,%eax
}
c01023d8:	5d                   	pop    %ebp
c01023d9:	c3                   	ret    

c01023da <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023da:	55                   	push   %ebp
c01023db:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01023e0:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023e4:	66 83 f8 08          	cmp    $0x8,%ax
c01023e8:	0f 94 c0             	sete   %al
c01023eb:	0f b6 c0             	movzbl %al,%eax
}
c01023ee:	5d                   	pop    %ebp
c01023ef:	c3                   	ret    

c01023f0 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01023f0:	55                   	push   %ebp
c01023f1:	89 e5                	mov    %esp,%ebp
c01023f3:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01023f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023fd:	c7 04 24 b3 db 10 c0 	movl   $0xc010dbb3,(%esp)
c0102404:	e8 4f df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c0102409:	8b 45 08             	mov    0x8(%ebp),%eax
c010240c:	89 04 24             	mov    %eax,(%esp)
c010240f:	e8 a1 01 00 00       	call   c01025b5 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102414:	8b 45 08             	mov    0x8(%ebp),%eax
c0102417:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010241b:	0f b7 c0             	movzwl %ax,%eax
c010241e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102422:	c7 04 24 c4 db 10 c0 	movl   $0xc010dbc4,(%esp)
c0102429:	e8 2a df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010242e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102431:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102435:	0f b7 c0             	movzwl %ax,%eax
c0102438:	89 44 24 04          	mov    %eax,0x4(%esp)
c010243c:	c7 04 24 d7 db 10 c0 	movl   $0xc010dbd7,(%esp)
c0102443:	e8 10 df ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102448:	8b 45 08             	mov    0x8(%ebp),%eax
c010244b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010244f:	0f b7 c0             	movzwl %ax,%eax
c0102452:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102456:	c7 04 24 ea db 10 c0 	movl   $0xc010dbea,(%esp)
c010245d:	e8 f6 de ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102462:	8b 45 08             	mov    0x8(%ebp),%eax
c0102465:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102469:	0f b7 c0             	movzwl %ax,%eax
c010246c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102470:	c7 04 24 fd db 10 c0 	movl   $0xc010dbfd,(%esp)
c0102477:	e8 dc de ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010247c:	8b 45 08             	mov    0x8(%ebp),%eax
c010247f:	8b 40 30             	mov    0x30(%eax),%eax
c0102482:	89 04 24             	mov    %eax,(%esp)
c0102485:	e8 1f ff ff ff       	call   c01023a9 <trapname>
c010248a:	8b 55 08             	mov    0x8(%ebp),%edx
c010248d:	8b 52 30             	mov    0x30(%edx),%edx
c0102490:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102494:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102498:	c7 04 24 10 dc 10 c0 	movl   $0xc010dc10,(%esp)
c010249f:	e8 b4 de ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a7:	8b 40 34             	mov    0x34(%eax),%eax
c01024aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ae:	c7 04 24 22 dc 10 c0 	movl   $0xc010dc22,(%esp)
c01024b5:	e8 9e de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01024bd:	8b 40 38             	mov    0x38(%eax),%eax
c01024c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024c4:	c7 04 24 31 dc 10 c0 	movl   $0xc010dc31,(%esp)
c01024cb:	e8 88 de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d3:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024d7:	0f b7 c0             	movzwl %ax,%eax
c01024da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024de:	c7 04 24 40 dc 10 c0 	movl   $0xc010dc40,(%esp)
c01024e5:	e8 6e de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ed:	8b 40 40             	mov    0x40(%eax),%eax
c01024f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f4:	c7 04 24 53 dc 10 c0 	movl   $0xc010dc53,(%esp)
c01024fb:	e8 58 de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102500:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102507:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010250e:	eb 3e                	jmp    c010254e <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102510:	8b 45 08             	mov    0x8(%ebp),%eax
c0102513:	8b 50 40             	mov    0x40(%eax),%edx
c0102516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102519:	21 d0                	and    %edx,%eax
c010251b:	85 c0                	test   %eax,%eax
c010251d:	74 28                	je     c0102547 <print_trapframe+0x157>
c010251f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102522:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102529:	85 c0                	test   %eax,%eax
c010252b:	74 1a                	je     c0102547 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c010252d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102530:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102537:	89 44 24 04          	mov    %eax,0x4(%esp)
c010253b:	c7 04 24 62 dc 10 c0 	movl   $0xc010dc62,(%esp)
c0102542:	e8 11 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102547:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010254b:	d1 65 f0             	shll   -0x10(%ebp)
c010254e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102551:	83 f8 17             	cmp    $0x17,%eax
c0102554:	76 ba                	jbe    c0102510 <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102556:	8b 45 08             	mov    0x8(%ebp),%eax
c0102559:	8b 40 40             	mov    0x40(%eax),%eax
c010255c:	25 00 30 00 00       	and    $0x3000,%eax
c0102561:	c1 e8 0c             	shr    $0xc,%eax
c0102564:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102568:	c7 04 24 66 dc 10 c0 	movl   $0xc010dc66,(%esp)
c010256f:	e8 e4 dd ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102574:	8b 45 08             	mov    0x8(%ebp),%eax
c0102577:	89 04 24             	mov    %eax,(%esp)
c010257a:	e8 5b fe ff ff       	call   c01023da <trap_in_kernel>
c010257f:	85 c0                	test   %eax,%eax
c0102581:	75 30                	jne    c01025b3 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102583:	8b 45 08             	mov    0x8(%ebp),%eax
c0102586:	8b 40 44             	mov    0x44(%eax),%eax
c0102589:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258d:	c7 04 24 6f dc 10 c0 	movl   $0xc010dc6f,(%esp)
c0102594:	e8 bf dd ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102599:	8b 45 08             	mov    0x8(%ebp),%eax
c010259c:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025a0:	0f b7 c0             	movzwl %ax,%eax
c01025a3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a7:	c7 04 24 7e dc 10 c0 	movl   $0xc010dc7e,(%esp)
c01025ae:	e8 a5 dd ff ff       	call   c0100358 <cprintf>
    }
}
c01025b3:	c9                   	leave  
c01025b4:	c3                   	ret    

c01025b5 <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025b5:	55                   	push   %ebp
c01025b6:	89 e5                	mov    %esp,%ebp
c01025b8:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01025be:	8b 00                	mov    (%eax),%eax
c01025c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c4:	c7 04 24 91 dc 10 c0 	movl   $0xc010dc91,(%esp)
c01025cb:	e8 88 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d3:	8b 40 04             	mov    0x4(%eax),%eax
c01025d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025da:	c7 04 24 a0 dc 10 c0 	movl   $0xc010dca0,(%esp)
c01025e1:	e8 72 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e9:	8b 40 08             	mov    0x8(%eax),%eax
c01025ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f0:	c7 04 24 af dc 10 c0 	movl   $0xc010dcaf,(%esp)
c01025f7:	e8 5c dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01025fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ff:	8b 40 0c             	mov    0xc(%eax),%eax
c0102602:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102606:	c7 04 24 be dc 10 c0 	movl   $0xc010dcbe,(%esp)
c010260d:	e8 46 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102612:	8b 45 08             	mov    0x8(%ebp),%eax
c0102615:	8b 40 10             	mov    0x10(%eax),%eax
c0102618:	89 44 24 04          	mov    %eax,0x4(%esp)
c010261c:	c7 04 24 cd dc 10 c0 	movl   $0xc010dccd,(%esp)
c0102623:	e8 30 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102628:	8b 45 08             	mov    0x8(%ebp),%eax
c010262b:	8b 40 14             	mov    0x14(%eax),%eax
c010262e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102632:	c7 04 24 dc dc 10 c0 	movl   $0xc010dcdc,(%esp)
c0102639:	e8 1a dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010263e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102641:	8b 40 18             	mov    0x18(%eax),%eax
c0102644:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102648:	c7 04 24 eb dc 10 c0 	movl   $0xc010dceb,(%esp)
c010264f:	e8 04 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102654:	8b 45 08             	mov    0x8(%ebp),%eax
c0102657:	8b 40 1c             	mov    0x1c(%eax),%eax
c010265a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265e:	c7 04 24 fa dc 10 c0 	movl   $0xc010dcfa,(%esp)
c0102665:	e8 ee dc ff ff       	call   c0100358 <cprintf>
}
c010266a:	c9                   	leave  
c010266b:	c3                   	ret    

c010266c <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010266c:	55                   	push   %ebp
c010266d:	89 e5                	mov    %esp,%ebp
c010266f:	53                   	push   %ebx
c0102670:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102673:	8b 45 08             	mov    0x8(%ebp),%eax
c0102676:	8b 40 34             	mov    0x34(%eax),%eax
c0102679:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010267c:	85 c0                	test   %eax,%eax
c010267e:	74 07                	je     c0102687 <print_pgfault+0x1b>
c0102680:	b9 09 dd 10 c0       	mov    $0xc010dd09,%ecx
c0102685:	eb 05                	jmp    c010268c <print_pgfault+0x20>
c0102687:	b9 1a dd 10 c0       	mov    $0xc010dd1a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010268c:	8b 45 08             	mov    0x8(%ebp),%eax
c010268f:	8b 40 34             	mov    0x34(%eax),%eax
c0102692:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102695:	85 c0                	test   %eax,%eax
c0102697:	74 07                	je     c01026a0 <print_pgfault+0x34>
c0102699:	ba 57 00 00 00       	mov    $0x57,%edx
c010269e:	eb 05                	jmp    c01026a5 <print_pgfault+0x39>
c01026a0:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a8:	8b 40 34             	mov    0x34(%eax),%eax
c01026ab:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026ae:	85 c0                	test   %eax,%eax
c01026b0:	74 07                	je     c01026b9 <print_pgfault+0x4d>
c01026b2:	b8 55 00 00 00       	mov    $0x55,%eax
c01026b7:	eb 05                	jmp    c01026be <print_pgfault+0x52>
c01026b9:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026be:	0f 20 d3             	mov    %cr2,%ebx
c01026c1:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026c4:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026c7:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026cb:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026cf:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026d3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026d7:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c01026de:	e8 75 dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026e3:	83 c4 34             	add    $0x34,%esp
c01026e6:	5b                   	pop    %ebx
c01026e7:	5d                   	pop    %ebp
c01026e8:	c3                   	ret    

c01026e9 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026e9:	55                   	push   %ebp
c01026ea:	89 e5                	mov    %esp,%ebp
c01026ec:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01026ef:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01026f4:	85 c0                	test   %eax,%eax
c01026f6:	74 0b                	je     c0102703 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01026f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026fb:	89 04 24             	mov    %eax,(%esp)
c01026fe:	e8 69 ff ff ff       	call   c010266c <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102703:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0102708:	85 c0                	test   %eax,%eax
c010270a:	74 3d                	je     c0102749 <pgfault_handler+0x60>
        assert(current == idleproc);
c010270c:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c0102712:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c0102717:	39 c2                	cmp    %eax,%edx
c0102719:	74 24                	je     c010273f <pgfault_handler+0x56>
c010271b:	c7 44 24 0c 4b dd 10 	movl   $0xc010dd4b,0xc(%esp)
c0102722:	c0 
c0102723:	c7 44 24 08 5f dd 10 	movl   $0xc010dd5f,0x8(%esp)
c010272a:	c0 
c010272b:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c0102732:	00 
c0102733:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c010273a:	e8 9b e6 ff ff       	call   c0100dda <__panic>
        mm = check_mm_struct;
c010273f:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0102744:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102747:	eb 46                	jmp    c010278f <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102749:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010274e:	85 c0                	test   %eax,%eax
c0102750:	75 32                	jne    c0102784 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102752:	8b 45 08             	mov    0x8(%ebp),%eax
c0102755:	89 04 24             	mov    %eax,(%esp)
c0102758:	e8 93 fc ff ff       	call   c01023f0 <print_trapframe>
            print_pgfault(tf);
c010275d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102760:	89 04 24             	mov    %eax,(%esp)
c0102763:	e8 04 ff ff ff       	call   c010266c <print_pgfault>
            panic("unhandled page fault.\n");
c0102768:	c7 44 24 08 74 dd 10 	movl   $0xc010dd74,0x8(%esp)
c010276f:	c0 
c0102770:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102777:	00 
c0102778:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c010277f:	e8 56 e6 ff ff       	call   c0100dda <__panic>
        }
        mm = current->mm;
c0102784:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102789:	8b 40 18             	mov    0x18(%eax),%eax
c010278c:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010278f:	0f 20 d0             	mov    %cr2,%eax
c0102792:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102795:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102798:	89 c2                	mov    %eax,%edx
c010279a:	8b 45 08             	mov    0x8(%ebp),%eax
c010279d:	8b 40 34             	mov    0x34(%eax),%eax
c01027a0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027ab:	89 04 24             	mov    %eax,(%esp)
c01027ae:	e8 10 65 00 00       	call   c0108cc3 <do_pgfault>
}
c01027b3:	c9                   	leave  
c01027b4:	c3                   	ret    

c01027b5 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027b5:	55                   	push   %ebp
c01027b6:	89 e5                	mov    %esp,%ebp
c01027b8:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c5:	8b 40 30             	mov    0x30(%eax),%eax
c01027c8:	83 f8 2f             	cmp    $0x2f,%eax
c01027cb:	77 38                	ja     c0102805 <trap_dispatch+0x50>
c01027cd:	83 f8 2e             	cmp    $0x2e,%eax
c01027d0:	0f 83 07 02 00 00    	jae    c01029dd <trap_dispatch+0x228>
c01027d6:	83 f8 20             	cmp    $0x20,%eax
c01027d9:	0f 84 07 01 00 00    	je     c01028e6 <trap_dispatch+0x131>
c01027df:	83 f8 20             	cmp    $0x20,%eax
c01027e2:	77 0a                	ja     c01027ee <trap_dispatch+0x39>
c01027e4:	83 f8 0e             	cmp    $0xe,%eax
c01027e7:	74 3e                	je     c0102827 <trap_dispatch+0x72>
c01027e9:	e9 a7 01 00 00       	jmp    c0102995 <trap_dispatch+0x1e0>
c01027ee:	83 f8 21             	cmp    $0x21,%eax
c01027f1:	0f 84 5c 01 00 00    	je     c0102953 <trap_dispatch+0x19e>
c01027f7:	83 f8 24             	cmp    $0x24,%eax
c01027fa:	0f 84 2a 01 00 00    	je     c010292a <trap_dispatch+0x175>
c0102800:	e9 90 01 00 00       	jmp    c0102995 <trap_dispatch+0x1e0>
c0102805:	83 f8 78             	cmp    $0x78,%eax
c0102808:	0f 82 87 01 00 00    	jb     c0102995 <trap_dispatch+0x1e0>
c010280e:	83 f8 79             	cmp    $0x79,%eax
c0102811:	0f 86 62 01 00 00    	jbe    c0102979 <trap_dispatch+0x1c4>
c0102817:	3d 80 00 00 00       	cmp    $0x80,%eax
c010281c:	0f 84 ba 00 00 00    	je     c01028dc <trap_dispatch+0x127>
c0102822:	e9 6e 01 00 00       	jmp    c0102995 <trap_dispatch+0x1e0>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102827:	8b 45 08             	mov    0x8(%ebp),%eax
c010282a:	89 04 24             	mov    %eax,(%esp)
c010282d:	e8 b7 fe ff ff       	call   c01026e9 <pgfault_handler>
c0102832:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102835:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102839:	0f 84 98 00 00 00    	je     c01028d7 <trap_dispatch+0x122>
            print_trapframe(tf);
c010283f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102842:	89 04 24             	mov    %eax,(%esp)
c0102845:	e8 a6 fb ff ff       	call   c01023f0 <print_trapframe>
            if (current == NULL) {
c010284a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010284f:	85 c0                	test   %eax,%eax
c0102851:	75 23                	jne    c0102876 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102853:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102856:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010285a:	c7 44 24 08 8c dd 10 	movl   $0xc010dd8c,0x8(%esp)
c0102861:	c0 
c0102862:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0102869:	00 
c010286a:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c0102871:	e8 64 e5 ff ff       	call   c0100dda <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102876:	8b 45 08             	mov    0x8(%ebp),%eax
c0102879:	89 04 24             	mov    %eax,(%esp)
c010287c:	e8 59 fb ff ff       	call   c01023da <trap_in_kernel>
c0102881:	85 c0                	test   %eax,%eax
c0102883:	74 23                	je     c01028a8 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102888:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010288c:	c7 44 24 08 ac dd 10 	movl   $0xc010ddac,0x8(%esp)
c0102893:	c0 
c0102894:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010289b:	00 
c010289c:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c01028a3:	e8 32 e5 ff ff       	call   c0100dda <__panic>
                }
                cprintf("killed by kernel.\n");
c01028a8:	c7 04 24 da dd 10 c0 	movl   $0xc010ddda,(%esp)
c01028af:	e8 a4 da ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028bb:	c7 44 24 08 f0 dd 10 	movl   $0xc010ddf0,0x8(%esp)
c01028c2:	c0 
c01028c3:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c01028ca:	00 
c01028cb:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c01028d2:	e8 03 e5 ff ff       	call   c0100dda <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028d7:	e9 02 01 00 00       	jmp    c01029de <trap_dispatch+0x229>
    case T_SYSCALL:
        syscall();
c01028dc:	e8 e9 a0 00 00       	call   c010c9ca <syscall>
        break;
c01028e1:	e9 f8 00 00 00       	jmp    c01029de <trap_dispatch+0x229>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
		ticks ++;
c01028e6:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
c01028eb:	83 c0 01             	add    $0x1,%eax
c01028ee:	a3 d8 54 1c c0       	mov    %eax,0xc01c54d8
        assert(current != NULL);
c01028f3:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01028f8:	85 c0                	test   %eax,%eax
c01028fa:	75 24                	jne    c0102920 <trap_dispatch+0x16b>
c01028fc:	c7 44 24 0c 19 de 10 	movl   $0xc010de19,0xc(%esp)
c0102903:	c0 
c0102904:	c7 44 24 08 5f dd 10 	movl   $0xc010dd5f,0x8(%esp)
c010290b:	c0 
c010290c:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
c0102913:	00 
c0102914:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c010291b:	e8 ba e4 ff ff       	call   c0100dda <__panic>
        run_timer_list();
c0102920:	e8 ee 9d 00 00       	call   c010c713 <run_timer_list>
        break;
c0102925:	e9 b4 00 00 00       	jmp    c01029de <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c010292a:	e8 19 ee ff ff       	call   c0101748 <cons_getc>
c010292f:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102932:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102936:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010293a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010293e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102942:	c7 04 24 29 de 10 c0 	movl   $0xc010de29,(%esp)
c0102949:	e8 0a da ff ff       	call   c0100358 <cprintf>
        break;
c010294e:	e9 8b 00 00 00       	jmp    c01029de <trap_dispatch+0x229>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102953:	e8 f0 ed ff ff       	call   c0101748 <cons_getc>
c0102958:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c010295b:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c010295f:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102963:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102967:	89 44 24 04          	mov    %eax,0x4(%esp)
c010296b:	c7 04 24 3b de 10 c0 	movl   $0xc010de3b,(%esp)
c0102972:	e8 e1 d9 ff ff       	call   c0100358 <cprintf>
        break;
c0102977:	eb 65                	jmp    c01029de <trap_dispatch+0x229>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102979:	c7 44 24 08 4a de 10 	movl   $0xc010de4a,0x8(%esp)
c0102980:	c0 
c0102981:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c0102988:	00 
c0102989:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c0102990:	e8 45 e4 ff ff       	call   c0100dda <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102995:	8b 45 08             	mov    0x8(%ebp),%eax
c0102998:	89 04 24             	mov    %eax,(%esp)
c010299b:	e8 50 fa ff ff       	call   c01023f0 <print_trapframe>
        if (current != NULL) {
c01029a0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029a5:	85 c0                	test   %eax,%eax
c01029a7:	74 18                	je     c01029c1 <trap_dispatch+0x20c>
            cprintf("unhandled trap.\n");
c01029a9:	c7 04 24 5a de 10 c0 	movl   $0xc010de5a,(%esp)
c01029b0:	e8 a3 d9 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c01029b5:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029bc:	e8 d7 84 00 00       	call   c010ae98 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029c1:	c7 44 24 08 6b de 10 	movl   $0xc010de6b,0x8(%esp)
c01029c8:	c0 
c01029c9:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
c01029d0:	00 
c01029d1:	c7 04 24 4e db 10 c0 	movl   $0xc010db4e,(%esp)
c01029d8:	e8 fd e3 ff ff       	call   c0100dda <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01029dd:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01029de:	c9                   	leave  
c01029df:	c3                   	ret    

c01029e0 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01029e0:	55                   	push   %ebp
c01029e1:	89 e5                	mov    %esp,%ebp
c01029e3:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01029e6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029eb:	85 c0                	test   %eax,%eax
c01029ed:	75 0d                	jne    c01029fc <trap+0x1c>
        trap_dispatch(tf);
c01029ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01029f2:	89 04 24             	mov    %eax,(%esp)
c01029f5:	e8 bb fd ff ff       	call   c01027b5 <trap_dispatch>
c01029fa:	eb 6c                	jmp    c0102a68 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029fc:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a01:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a04:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a07:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a0f:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a12:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a15:	89 04 24             	mov    %eax,(%esp)
c0102a18:	e8 bd f9 ff ff       	call   c01023da <trap_in_kernel>
c0102a1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a20:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a23:	89 04 24             	mov    %eax,(%esp)
c0102a26:	e8 8a fd ff ff       	call   c01027b5 <trap_dispatch>
    
        current->tf = otf;
c0102a2b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a30:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a33:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a3a:	75 2c                	jne    c0102a68 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a3c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a41:	8b 40 44             	mov    0x44(%eax),%eax
c0102a44:	83 e0 01             	and    $0x1,%eax
c0102a47:	85 c0                	test   %eax,%eax
c0102a49:	74 0c                	je     c0102a57 <trap+0x77>
                do_exit(-E_KILLED);
c0102a4b:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a52:	e8 41 84 00 00       	call   c010ae98 <do_exit>
            }
            if (current->need_resched) {
c0102a57:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a5c:	8b 40 10             	mov    0x10(%eax),%eax
c0102a5f:	85 c0                	test   %eax,%eax
c0102a61:	74 05                	je     c0102a68 <trap+0x88>
                schedule();
c0102a63:	e8 1e 9a 00 00       	call   c010c486 <schedule>
            }
        }
    }
}
c0102a68:	c9                   	leave  
c0102a69:	c3                   	ret    

c0102a6a <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a6a:	1e                   	push   %ds
    pushl %es
c0102a6b:	06                   	push   %es
    pushl %fs
c0102a6c:	0f a0                	push   %fs
    pushl %gs
c0102a6e:	0f a8                	push   %gs
    pushal
c0102a70:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a71:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a76:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a78:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a7a:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a7b:	e8 60 ff ff ff       	call   c01029e0 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a80:	5c                   	pop    %esp

c0102a81 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a81:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a82:	0f a9                	pop    %gs
    popl %fs
c0102a84:	0f a1                	pop    %fs
    popl %es
c0102a86:	07                   	pop    %es
    popl %ds
c0102a87:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a88:	83 c4 08             	add    $0x8,%esp
    iret
c0102a8b:	cf                   	iret   

c0102a8c <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a8c:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a90:	e9 ec ff ff ff       	jmp    c0102a81 <__trapret>

c0102a95 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a95:	6a 00                	push   $0x0
  pushl $0
c0102a97:	6a 00                	push   $0x0
  jmp __alltraps
c0102a99:	e9 cc ff ff ff       	jmp    c0102a6a <__alltraps>

c0102a9e <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a9e:	6a 00                	push   $0x0
  pushl $1
c0102aa0:	6a 01                	push   $0x1
  jmp __alltraps
c0102aa2:	e9 c3 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102aa7 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102aa7:	6a 00                	push   $0x0
  pushl $2
c0102aa9:	6a 02                	push   $0x2
  jmp __alltraps
c0102aab:	e9 ba ff ff ff       	jmp    c0102a6a <__alltraps>

c0102ab0 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102ab0:	6a 00                	push   $0x0
  pushl $3
c0102ab2:	6a 03                	push   $0x3
  jmp __alltraps
c0102ab4:	e9 b1 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102ab9 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102ab9:	6a 00                	push   $0x0
  pushl $4
c0102abb:	6a 04                	push   $0x4
  jmp __alltraps
c0102abd:	e9 a8 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102ac2 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102ac2:	6a 00                	push   $0x0
  pushl $5
c0102ac4:	6a 05                	push   $0x5
  jmp __alltraps
c0102ac6:	e9 9f ff ff ff       	jmp    c0102a6a <__alltraps>

c0102acb <vector6>:
.globl vector6
vector6:
  pushl $0
c0102acb:	6a 00                	push   $0x0
  pushl $6
c0102acd:	6a 06                	push   $0x6
  jmp __alltraps
c0102acf:	e9 96 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102ad4 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ad4:	6a 00                	push   $0x0
  pushl $7
c0102ad6:	6a 07                	push   $0x7
  jmp __alltraps
c0102ad8:	e9 8d ff ff ff       	jmp    c0102a6a <__alltraps>

c0102add <vector8>:
.globl vector8
vector8:
  pushl $8
c0102add:	6a 08                	push   $0x8
  jmp __alltraps
c0102adf:	e9 86 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102ae4 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102ae4:	6a 09                	push   $0x9
  jmp __alltraps
c0102ae6:	e9 7f ff ff ff       	jmp    c0102a6a <__alltraps>

c0102aeb <vector10>:
.globl vector10
vector10:
  pushl $10
c0102aeb:	6a 0a                	push   $0xa
  jmp __alltraps
c0102aed:	e9 78 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102af2 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102af2:	6a 0b                	push   $0xb
  jmp __alltraps
c0102af4:	e9 71 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102af9 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102af9:	6a 0c                	push   $0xc
  jmp __alltraps
c0102afb:	e9 6a ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b00 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b00:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b02:	e9 63 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b07 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b07:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b09:	e9 5c ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b0e <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b0e:	6a 00                	push   $0x0
  pushl $15
c0102b10:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b12:	e9 53 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b17 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b17:	6a 00                	push   $0x0
  pushl $16
c0102b19:	6a 10                	push   $0x10
  jmp __alltraps
c0102b1b:	e9 4a ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b20 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b20:	6a 11                	push   $0x11
  jmp __alltraps
c0102b22:	e9 43 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b27 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b27:	6a 00                	push   $0x0
  pushl $18
c0102b29:	6a 12                	push   $0x12
  jmp __alltraps
c0102b2b:	e9 3a ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b30 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b30:	6a 00                	push   $0x0
  pushl $19
c0102b32:	6a 13                	push   $0x13
  jmp __alltraps
c0102b34:	e9 31 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b39 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b39:	6a 00                	push   $0x0
  pushl $20
c0102b3b:	6a 14                	push   $0x14
  jmp __alltraps
c0102b3d:	e9 28 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b42 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b42:	6a 00                	push   $0x0
  pushl $21
c0102b44:	6a 15                	push   $0x15
  jmp __alltraps
c0102b46:	e9 1f ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b4b <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b4b:	6a 00                	push   $0x0
  pushl $22
c0102b4d:	6a 16                	push   $0x16
  jmp __alltraps
c0102b4f:	e9 16 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b54 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b54:	6a 00                	push   $0x0
  pushl $23
c0102b56:	6a 17                	push   $0x17
  jmp __alltraps
c0102b58:	e9 0d ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b5d <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b5d:	6a 00                	push   $0x0
  pushl $24
c0102b5f:	6a 18                	push   $0x18
  jmp __alltraps
c0102b61:	e9 04 ff ff ff       	jmp    c0102a6a <__alltraps>

c0102b66 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b66:	6a 00                	push   $0x0
  pushl $25
c0102b68:	6a 19                	push   $0x19
  jmp __alltraps
c0102b6a:	e9 fb fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b6f <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b6f:	6a 00                	push   $0x0
  pushl $26
c0102b71:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b73:	e9 f2 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b78 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b78:	6a 00                	push   $0x0
  pushl $27
c0102b7a:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b7c:	e9 e9 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b81 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b81:	6a 00                	push   $0x0
  pushl $28
c0102b83:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b85:	e9 e0 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b8a <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b8a:	6a 00                	push   $0x0
  pushl $29
c0102b8c:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b8e:	e9 d7 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b93 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b93:	6a 00                	push   $0x0
  pushl $30
c0102b95:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b97:	e9 ce fe ff ff       	jmp    c0102a6a <__alltraps>

c0102b9c <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b9c:	6a 00                	push   $0x0
  pushl $31
c0102b9e:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102ba0:	e9 c5 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102ba5 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102ba5:	6a 00                	push   $0x0
  pushl $32
c0102ba7:	6a 20                	push   $0x20
  jmp __alltraps
c0102ba9:	e9 bc fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bae <vector33>:
.globl vector33
vector33:
  pushl $0
c0102bae:	6a 00                	push   $0x0
  pushl $33
c0102bb0:	6a 21                	push   $0x21
  jmp __alltraps
c0102bb2:	e9 b3 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bb7 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102bb7:	6a 00                	push   $0x0
  pushl $34
c0102bb9:	6a 22                	push   $0x22
  jmp __alltraps
c0102bbb:	e9 aa fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bc0 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bc0:	6a 00                	push   $0x0
  pushl $35
c0102bc2:	6a 23                	push   $0x23
  jmp __alltraps
c0102bc4:	e9 a1 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bc9 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bc9:	6a 00                	push   $0x0
  pushl $36
c0102bcb:	6a 24                	push   $0x24
  jmp __alltraps
c0102bcd:	e9 98 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bd2 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bd2:	6a 00                	push   $0x0
  pushl $37
c0102bd4:	6a 25                	push   $0x25
  jmp __alltraps
c0102bd6:	e9 8f fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bdb <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bdb:	6a 00                	push   $0x0
  pushl $38
c0102bdd:	6a 26                	push   $0x26
  jmp __alltraps
c0102bdf:	e9 86 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102be4 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102be4:	6a 00                	push   $0x0
  pushl $39
c0102be6:	6a 27                	push   $0x27
  jmp __alltraps
c0102be8:	e9 7d fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bed <vector40>:
.globl vector40
vector40:
  pushl $0
c0102bed:	6a 00                	push   $0x0
  pushl $40
c0102bef:	6a 28                	push   $0x28
  jmp __alltraps
c0102bf1:	e9 74 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bf6 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102bf6:	6a 00                	push   $0x0
  pushl $41
c0102bf8:	6a 29                	push   $0x29
  jmp __alltraps
c0102bfa:	e9 6b fe ff ff       	jmp    c0102a6a <__alltraps>

c0102bff <vector42>:
.globl vector42
vector42:
  pushl $0
c0102bff:	6a 00                	push   $0x0
  pushl $42
c0102c01:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c03:	e9 62 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c08 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c08:	6a 00                	push   $0x0
  pushl $43
c0102c0a:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c0c:	e9 59 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c11 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c11:	6a 00                	push   $0x0
  pushl $44
c0102c13:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c15:	e9 50 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c1a <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c1a:	6a 00                	push   $0x0
  pushl $45
c0102c1c:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c1e:	e9 47 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c23 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c23:	6a 00                	push   $0x0
  pushl $46
c0102c25:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c27:	e9 3e fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c2c <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c2c:	6a 00                	push   $0x0
  pushl $47
c0102c2e:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c30:	e9 35 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c35 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c35:	6a 00                	push   $0x0
  pushl $48
c0102c37:	6a 30                	push   $0x30
  jmp __alltraps
c0102c39:	e9 2c fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c3e <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c3e:	6a 00                	push   $0x0
  pushl $49
c0102c40:	6a 31                	push   $0x31
  jmp __alltraps
c0102c42:	e9 23 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c47 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c47:	6a 00                	push   $0x0
  pushl $50
c0102c49:	6a 32                	push   $0x32
  jmp __alltraps
c0102c4b:	e9 1a fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c50 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c50:	6a 00                	push   $0x0
  pushl $51
c0102c52:	6a 33                	push   $0x33
  jmp __alltraps
c0102c54:	e9 11 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c59 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c59:	6a 00                	push   $0x0
  pushl $52
c0102c5b:	6a 34                	push   $0x34
  jmp __alltraps
c0102c5d:	e9 08 fe ff ff       	jmp    c0102a6a <__alltraps>

c0102c62 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c62:	6a 00                	push   $0x0
  pushl $53
c0102c64:	6a 35                	push   $0x35
  jmp __alltraps
c0102c66:	e9 ff fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c6b <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c6b:	6a 00                	push   $0x0
  pushl $54
c0102c6d:	6a 36                	push   $0x36
  jmp __alltraps
c0102c6f:	e9 f6 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c74 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c74:	6a 00                	push   $0x0
  pushl $55
c0102c76:	6a 37                	push   $0x37
  jmp __alltraps
c0102c78:	e9 ed fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c7d <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c7d:	6a 00                	push   $0x0
  pushl $56
c0102c7f:	6a 38                	push   $0x38
  jmp __alltraps
c0102c81:	e9 e4 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c86 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c86:	6a 00                	push   $0x0
  pushl $57
c0102c88:	6a 39                	push   $0x39
  jmp __alltraps
c0102c8a:	e9 db fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c8f <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c8f:	6a 00                	push   $0x0
  pushl $58
c0102c91:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c93:	e9 d2 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102c98 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c98:	6a 00                	push   $0x0
  pushl $59
c0102c9a:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c9c:	e9 c9 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102ca1 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102ca1:	6a 00                	push   $0x0
  pushl $60
c0102ca3:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102ca5:	e9 c0 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102caa <vector61>:
.globl vector61
vector61:
  pushl $0
c0102caa:	6a 00                	push   $0x0
  pushl $61
c0102cac:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102cae:	e9 b7 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cb3 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102cb3:	6a 00                	push   $0x0
  pushl $62
c0102cb5:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102cb7:	e9 ae fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cbc <vector63>:
.globl vector63
vector63:
  pushl $0
c0102cbc:	6a 00                	push   $0x0
  pushl $63
c0102cbe:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cc0:	e9 a5 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cc5 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cc5:	6a 00                	push   $0x0
  pushl $64
c0102cc7:	6a 40                	push   $0x40
  jmp __alltraps
c0102cc9:	e9 9c fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cce <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cce:	6a 00                	push   $0x0
  pushl $65
c0102cd0:	6a 41                	push   $0x41
  jmp __alltraps
c0102cd2:	e9 93 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cd7 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cd7:	6a 00                	push   $0x0
  pushl $66
c0102cd9:	6a 42                	push   $0x42
  jmp __alltraps
c0102cdb:	e9 8a fd ff ff       	jmp    c0102a6a <__alltraps>

c0102ce0 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102ce0:	6a 00                	push   $0x0
  pushl $67
c0102ce2:	6a 43                	push   $0x43
  jmp __alltraps
c0102ce4:	e9 81 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102ce9 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102ce9:	6a 00                	push   $0x0
  pushl $68
c0102ceb:	6a 44                	push   $0x44
  jmp __alltraps
c0102ced:	e9 78 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cf2 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102cf2:	6a 00                	push   $0x0
  pushl $69
c0102cf4:	6a 45                	push   $0x45
  jmp __alltraps
c0102cf6:	e9 6f fd ff ff       	jmp    c0102a6a <__alltraps>

c0102cfb <vector70>:
.globl vector70
vector70:
  pushl $0
c0102cfb:	6a 00                	push   $0x0
  pushl $70
c0102cfd:	6a 46                	push   $0x46
  jmp __alltraps
c0102cff:	e9 66 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d04 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d04:	6a 00                	push   $0x0
  pushl $71
c0102d06:	6a 47                	push   $0x47
  jmp __alltraps
c0102d08:	e9 5d fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d0d <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d0d:	6a 00                	push   $0x0
  pushl $72
c0102d0f:	6a 48                	push   $0x48
  jmp __alltraps
c0102d11:	e9 54 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d16 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d16:	6a 00                	push   $0x0
  pushl $73
c0102d18:	6a 49                	push   $0x49
  jmp __alltraps
c0102d1a:	e9 4b fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d1f <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d1f:	6a 00                	push   $0x0
  pushl $74
c0102d21:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d23:	e9 42 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d28 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d28:	6a 00                	push   $0x0
  pushl $75
c0102d2a:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d2c:	e9 39 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d31 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d31:	6a 00                	push   $0x0
  pushl $76
c0102d33:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d35:	e9 30 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d3a <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d3a:	6a 00                	push   $0x0
  pushl $77
c0102d3c:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d3e:	e9 27 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d43 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d43:	6a 00                	push   $0x0
  pushl $78
c0102d45:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d47:	e9 1e fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d4c <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d4c:	6a 00                	push   $0x0
  pushl $79
c0102d4e:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d50:	e9 15 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d55 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d55:	6a 00                	push   $0x0
  pushl $80
c0102d57:	6a 50                	push   $0x50
  jmp __alltraps
c0102d59:	e9 0c fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d5e <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d5e:	6a 00                	push   $0x0
  pushl $81
c0102d60:	6a 51                	push   $0x51
  jmp __alltraps
c0102d62:	e9 03 fd ff ff       	jmp    c0102a6a <__alltraps>

c0102d67 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d67:	6a 00                	push   $0x0
  pushl $82
c0102d69:	6a 52                	push   $0x52
  jmp __alltraps
c0102d6b:	e9 fa fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d70 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d70:	6a 00                	push   $0x0
  pushl $83
c0102d72:	6a 53                	push   $0x53
  jmp __alltraps
c0102d74:	e9 f1 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d79 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d79:	6a 00                	push   $0x0
  pushl $84
c0102d7b:	6a 54                	push   $0x54
  jmp __alltraps
c0102d7d:	e9 e8 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d82 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d82:	6a 00                	push   $0x0
  pushl $85
c0102d84:	6a 55                	push   $0x55
  jmp __alltraps
c0102d86:	e9 df fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d8b <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d8b:	6a 00                	push   $0x0
  pushl $86
c0102d8d:	6a 56                	push   $0x56
  jmp __alltraps
c0102d8f:	e9 d6 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d94 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d94:	6a 00                	push   $0x0
  pushl $87
c0102d96:	6a 57                	push   $0x57
  jmp __alltraps
c0102d98:	e9 cd fc ff ff       	jmp    c0102a6a <__alltraps>

c0102d9d <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d9d:	6a 00                	push   $0x0
  pushl $88
c0102d9f:	6a 58                	push   $0x58
  jmp __alltraps
c0102da1:	e9 c4 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102da6 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102da6:	6a 00                	push   $0x0
  pushl $89
c0102da8:	6a 59                	push   $0x59
  jmp __alltraps
c0102daa:	e9 bb fc ff ff       	jmp    c0102a6a <__alltraps>

c0102daf <vector90>:
.globl vector90
vector90:
  pushl $0
c0102daf:	6a 00                	push   $0x0
  pushl $90
c0102db1:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102db3:	e9 b2 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102db8 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102db8:	6a 00                	push   $0x0
  pushl $91
c0102dba:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102dbc:	e9 a9 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102dc1 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102dc1:	6a 00                	push   $0x0
  pushl $92
c0102dc3:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102dc5:	e9 a0 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102dca <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dca:	6a 00                	push   $0x0
  pushl $93
c0102dcc:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dce:	e9 97 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102dd3 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dd3:	6a 00                	push   $0x0
  pushl $94
c0102dd5:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dd7:	e9 8e fc ff ff       	jmp    c0102a6a <__alltraps>

c0102ddc <vector95>:
.globl vector95
vector95:
  pushl $0
c0102ddc:	6a 00                	push   $0x0
  pushl $95
c0102dde:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102de0:	e9 85 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102de5 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102de5:	6a 00                	push   $0x0
  pushl $96
c0102de7:	6a 60                	push   $0x60
  jmp __alltraps
c0102de9:	e9 7c fc ff ff       	jmp    c0102a6a <__alltraps>

c0102dee <vector97>:
.globl vector97
vector97:
  pushl $0
c0102dee:	6a 00                	push   $0x0
  pushl $97
c0102df0:	6a 61                	push   $0x61
  jmp __alltraps
c0102df2:	e9 73 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102df7 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102df7:	6a 00                	push   $0x0
  pushl $98
c0102df9:	6a 62                	push   $0x62
  jmp __alltraps
c0102dfb:	e9 6a fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e00 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e00:	6a 00                	push   $0x0
  pushl $99
c0102e02:	6a 63                	push   $0x63
  jmp __alltraps
c0102e04:	e9 61 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e09 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e09:	6a 00                	push   $0x0
  pushl $100
c0102e0b:	6a 64                	push   $0x64
  jmp __alltraps
c0102e0d:	e9 58 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e12 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e12:	6a 00                	push   $0x0
  pushl $101
c0102e14:	6a 65                	push   $0x65
  jmp __alltraps
c0102e16:	e9 4f fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e1b <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e1b:	6a 00                	push   $0x0
  pushl $102
c0102e1d:	6a 66                	push   $0x66
  jmp __alltraps
c0102e1f:	e9 46 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e24 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e24:	6a 00                	push   $0x0
  pushl $103
c0102e26:	6a 67                	push   $0x67
  jmp __alltraps
c0102e28:	e9 3d fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e2d <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e2d:	6a 00                	push   $0x0
  pushl $104
c0102e2f:	6a 68                	push   $0x68
  jmp __alltraps
c0102e31:	e9 34 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e36 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e36:	6a 00                	push   $0x0
  pushl $105
c0102e38:	6a 69                	push   $0x69
  jmp __alltraps
c0102e3a:	e9 2b fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e3f <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e3f:	6a 00                	push   $0x0
  pushl $106
c0102e41:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e43:	e9 22 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e48 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e48:	6a 00                	push   $0x0
  pushl $107
c0102e4a:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e4c:	e9 19 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e51 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e51:	6a 00                	push   $0x0
  pushl $108
c0102e53:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e55:	e9 10 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e5a <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e5a:	6a 00                	push   $0x0
  pushl $109
c0102e5c:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e5e:	e9 07 fc ff ff       	jmp    c0102a6a <__alltraps>

c0102e63 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e63:	6a 00                	push   $0x0
  pushl $110
c0102e65:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e67:	e9 fe fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e6c <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e6c:	6a 00                	push   $0x0
  pushl $111
c0102e6e:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e70:	e9 f5 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e75 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e75:	6a 00                	push   $0x0
  pushl $112
c0102e77:	6a 70                	push   $0x70
  jmp __alltraps
c0102e79:	e9 ec fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e7e <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e7e:	6a 00                	push   $0x0
  pushl $113
c0102e80:	6a 71                	push   $0x71
  jmp __alltraps
c0102e82:	e9 e3 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e87 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e87:	6a 00                	push   $0x0
  pushl $114
c0102e89:	6a 72                	push   $0x72
  jmp __alltraps
c0102e8b:	e9 da fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e90 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e90:	6a 00                	push   $0x0
  pushl $115
c0102e92:	6a 73                	push   $0x73
  jmp __alltraps
c0102e94:	e9 d1 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102e99 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e99:	6a 00                	push   $0x0
  pushl $116
c0102e9b:	6a 74                	push   $0x74
  jmp __alltraps
c0102e9d:	e9 c8 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ea2 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102ea2:	6a 00                	push   $0x0
  pushl $117
c0102ea4:	6a 75                	push   $0x75
  jmp __alltraps
c0102ea6:	e9 bf fb ff ff       	jmp    c0102a6a <__alltraps>

c0102eab <vector118>:
.globl vector118
vector118:
  pushl $0
c0102eab:	6a 00                	push   $0x0
  pushl $118
c0102ead:	6a 76                	push   $0x76
  jmp __alltraps
c0102eaf:	e9 b6 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102eb4 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102eb4:	6a 00                	push   $0x0
  pushl $119
c0102eb6:	6a 77                	push   $0x77
  jmp __alltraps
c0102eb8:	e9 ad fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ebd <vector120>:
.globl vector120
vector120:
  pushl $0
c0102ebd:	6a 00                	push   $0x0
  pushl $120
c0102ebf:	6a 78                	push   $0x78
  jmp __alltraps
c0102ec1:	e9 a4 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ec6 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102ec6:	6a 00                	push   $0x0
  pushl $121
c0102ec8:	6a 79                	push   $0x79
  jmp __alltraps
c0102eca:	e9 9b fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ecf <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ecf:	6a 00                	push   $0x0
  pushl $122
c0102ed1:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ed3:	e9 92 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ed8 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102ed8:	6a 00                	push   $0x0
  pushl $123
c0102eda:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102edc:	e9 89 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ee1 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102ee1:	6a 00                	push   $0x0
  pushl $124
c0102ee3:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ee5:	e9 80 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102eea <vector125>:
.globl vector125
vector125:
  pushl $0
c0102eea:	6a 00                	push   $0x0
  pushl $125
c0102eec:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102eee:	e9 77 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102ef3 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102ef3:	6a 00                	push   $0x0
  pushl $126
c0102ef5:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ef7:	e9 6e fb ff ff       	jmp    c0102a6a <__alltraps>

c0102efc <vector127>:
.globl vector127
vector127:
  pushl $0
c0102efc:	6a 00                	push   $0x0
  pushl $127
c0102efe:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f00:	e9 65 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f05 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f05:	6a 00                	push   $0x0
  pushl $128
c0102f07:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f0c:	e9 59 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f11 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f11:	6a 00                	push   $0x0
  pushl $129
c0102f13:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f18:	e9 4d fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f1d <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f1d:	6a 00                	push   $0x0
  pushl $130
c0102f1f:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f24:	e9 41 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f29 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f29:	6a 00                	push   $0x0
  pushl $131
c0102f2b:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f30:	e9 35 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f35 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f35:	6a 00                	push   $0x0
  pushl $132
c0102f37:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f3c:	e9 29 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f41 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f41:	6a 00                	push   $0x0
  pushl $133
c0102f43:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f48:	e9 1d fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f4d <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f4d:	6a 00                	push   $0x0
  pushl $134
c0102f4f:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f54:	e9 11 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f59 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f59:	6a 00                	push   $0x0
  pushl $135
c0102f5b:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f60:	e9 05 fb ff ff       	jmp    c0102a6a <__alltraps>

c0102f65 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f65:	6a 00                	push   $0x0
  pushl $136
c0102f67:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f6c:	e9 f9 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102f71 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f71:	6a 00                	push   $0x0
  pushl $137
c0102f73:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f78:	e9 ed fa ff ff       	jmp    c0102a6a <__alltraps>

c0102f7d <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f7d:	6a 00                	push   $0x0
  pushl $138
c0102f7f:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f84:	e9 e1 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102f89 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f89:	6a 00                	push   $0x0
  pushl $139
c0102f8b:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f90:	e9 d5 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102f95 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f95:	6a 00                	push   $0x0
  pushl $140
c0102f97:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f9c:	e9 c9 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fa1 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102fa1:	6a 00                	push   $0x0
  pushl $141
c0102fa3:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fa8:	e9 bd fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fad <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fad:	6a 00                	push   $0x0
  pushl $142
c0102faf:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fb4:	e9 b1 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fb9 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fb9:	6a 00                	push   $0x0
  pushl $143
c0102fbb:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fc0:	e9 a5 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fc5 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fc5:	6a 00                	push   $0x0
  pushl $144
c0102fc7:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fcc:	e9 99 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fd1 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fd1:	6a 00                	push   $0x0
  pushl $145
c0102fd3:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fd8:	e9 8d fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fdd <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fdd:	6a 00                	push   $0x0
  pushl $146
c0102fdf:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fe4:	e9 81 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102fe9 <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fe9:	6a 00                	push   $0x0
  pushl $147
c0102feb:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102ff0:	e9 75 fa ff ff       	jmp    c0102a6a <__alltraps>

c0102ff5 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102ff5:	6a 00                	push   $0x0
  pushl $148
c0102ff7:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102ffc:	e9 69 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103001 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103001:	6a 00                	push   $0x0
  pushl $149
c0103003:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103008:	e9 5d fa ff ff       	jmp    c0102a6a <__alltraps>

c010300d <vector150>:
.globl vector150
vector150:
  pushl $0
c010300d:	6a 00                	push   $0x0
  pushl $150
c010300f:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103014:	e9 51 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103019 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103019:	6a 00                	push   $0x0
  pushl $151
c010301b:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103020:	e9 45 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103025 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103025:	6a 00                	push   $0x0
  pushl $152
c0103027:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010302c:	e9 39 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103031 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103031:	6a 00                	push   $0x0
  pushl $153
c0103033:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103038:	e9 2d fa ff ff       	jmp    c0102a6a <__alltraps>

c010303d <vector154>:
.globl vector154
vector154:
  pushl $0
c010303d:	6a 00                	push   $0x0
  pushl $154
c010303f:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103044:	e9 21 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103049 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103049:	6a 00                	push   $0x0
  pushl $155
c010304b:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103050:	e9 15 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103055 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103055:	6a 00                	push   $0x0
  pushl $156
c0103057:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010305c:	e9 09 fa ff ff       	jmp    c0102a6a <__alltraps>

c0103061 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103061:	6a 00                	push   $0x0
  pushl $157
c0103063:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103068:	e9 fd f9 ff ff       	jmp    c0102a6a <__alltraps>

c010306d <vector158>:
.globl vector158
vector158:
  pushl $0
c010306d:	6a 00                	push   $0x0
  pushl $158
c010306f:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103074:	e9 f1 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103079 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103079:	6a 00                	push   $0x0
  pushl $159
c010307b:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103080:	e9 e5 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103085 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103085:	6a 00                	push   $0x0
  pushl $160
c0103087:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010308c:	e9 d9 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103091 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103091:	6a 00                	push   $0x0
  pushl $161
c0103093:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103098:	e9 cd f9 ff ff       	jmp    c0102a6a <__alltraps>

c010309d <vector162>:
.globl vector162
vector162:
  pushl $0
c010309d:	6a 00                	push   $0x0
  pushl $162
c010309f:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030a4:	e9 c1 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030a9 <vector163>:
.globl vector163
vector163:
  pushl $0
c01030a9:	6a 00                	push   $0x0
  pushl $163
c01030ab:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030b0:	e9 b5 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030b5 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030b5:	6a 00                	push   $0x0
  pushl $164
c01030b7:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030bc:	e9 a9 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030c1 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030c1:	6a 00                	push   $0x0
  pushl $165
c01030c3:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030c8:	e9 9d f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030cd <vector166>:
.globl vector166
vector166:
  pushl $0
c01030cd:	6a 00                	push   $0x0
  pushl $166
c01030cf:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030d4:	e9 91 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030d9 <vector167>:
.globl vector167
vector167:
  pushl $0
c01030d9:	6a 00                	push   $0x0
  pushl $167
c01030db:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030e0:	e9 85 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030e5 <vector168>:
.globl vector168
vector168:
  pushl $0
c01030e5:	6a 00                	push   $0x0
  pushl $168
c01030e7:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030ec:	e9 79 f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030f1 <vector169>:
.globl vector169
vector169:
  pushl $0
c01030f1:	6a 00                	push   $0x0
  pushl $169
c01030f3:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030f8:	e9 6d f9 ff ff       	jmp    c0102a6a <__alltraps>

c01030fd <vector170>:
.globl vector170
vector170:
  pushl $0
c01030fd:	6a 00                	push   $0x0
  pushl $170
c01030ff:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103104:	e9 61 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103109 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103109:	6a 00                	push   $0x0
  pushl $171
c010310b:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103110:	e9 55 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103115 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103115:	6a 00                	push   $0x0
  pushl $172
c0103117:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010311c:	e9 49 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103121 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103121:	6a 00                	push   $0x0
  pushl $173
c0103123:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103128:	e9 3d f9 ff ff       	jmp    c0102a6a <__alltraps>

c010312d <vector174>:
.globl vector174
vector174:
  pushl $0
c010312d:	6a 00                	push   $0x0
  pushl $174
c010312f:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103134:	e9 31 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103139 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103139:	6a 00                	push   $0x0
  pushl $175
c010313b:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103140:	e9 25 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103145 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103145:	6a 00                	push   $0x0
  pushl $176
c0103147:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010314c:	e9 19 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103151 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103151:	6a 00                	push   $0x0
  pushl $177
c0103153:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103158:	e9 0d f9 ff ff       	jmp    c0102a6a <__alltraps>

c010315d <vector178>:
.globl vector178
vector178:
  pushl $0
c010315d:	6a 00                	push   $0x0
  pushl $178
c010315f:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103164:	e9 01 f9 ff ff       	jmp    c0102a6a <__alltraps>

c0103169 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103169:	6a 00                	push   $0x0
  pushl $179
c010316b:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103170:	e9 f5 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103175 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103175:	6a 00                	push   $0x0
  pushl $180
c0103177:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010317c:	e9 e9 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103181 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103181:	6a 00                	push   $0x0
  pushl $181
c0103183:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103188:	e9 dd f8 ff ff       	jmp    c0102a6a <__alltraps>

c010318d <vector182>:
.globl vector182
vector182:
  pushl $0
c010318d:	6a 00                	push   $0x0
  pushl $182
c010318f:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103194:	e9 d1 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103199 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103199:	6a 00                	push   $0x0
  pushl $183
c010319b:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01031a0:	e9 c5 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031a5 <vector184>:
.globl vector184
vector184:
  pushl $0
c01031a5:	6a 00                	push   $0x0
  pushl $184
c01031a7:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031ac:	e9 b9 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031b1 <vector185>:
.globl vector185
vector185:
  pushl $0
c01031b1:	6a 00                	push   $0x0
  pushl $185
c01031b3:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031b8:	e9 ad f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031bd <vector186>:
.globl vector186
vector186:
  pushl $0
c01031bd:	6a 00                	push   $0x0
  pushl $186
c01031bf:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031c4:	e9 a1 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031c9 <vector187>:
.globl vector187
vector187:
  pushl $0
c01031c9:	6a 00                	push   $0x0
  pushl $187
c01031cb:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031d0:	e9 95 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031d5 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031d5:	6a 00                	push   $0x0
  pushl $188
c01031d7:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031dc:	e9 89 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031e1 <vector189>:
.globl vector189
vector189:
  pushl $0
c01031e1:	6a 00                	push   $0x0
  pushl $189
c01031e3:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031e8:	e9 7d f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031ed <vector190>:
.globl vector190
vector190:
  pushl $0
c01031ed:	6a 00                	push   $0x0
  pushl $190
c01031ef:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031f4:	e9 71 f8 ff ff       	jmp    c0102a6a <__alltraps>

c01031f9 <vector191>:
.globl vector191
vector191:
  pushl $0
c01031f9:	6a 00                	push   $0x0
  pushl $191
c01031fb:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103200:	e9 65 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103205 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103205:	6a 00                	push   $0x0
  pushl $192
c0103207:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010320c:	e9 59 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103211 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103211:	6a 00                	push   $0x0
  pushl $193
c0103213:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103218:	e9 4d f8 ff ff       	jmp    c0102a6a <__alltraps>

c010321d <vector194>:
.globl vector194
vector194:
  pushl $0
c010321d:	6a 00                	push   $0x0
  pushl $194
c010321f:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103224:	e9 41 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103229 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103229:	6a 00                	push   $0x0
  pushl $195
c010322b:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103230:	e9 35 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103235 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103235:	6a 00                	push   $0x0
  pushl $196
c0103237:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010323c:	e9 29 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103241 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103241:	6a 00                	push   $0x0
  pushl $197
c0103243:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103248:	e9 1d f8 ff ff       	jmp    c0102a6a <__alltraps>

c010324d <vector198>:
.globl vector198
vector198:
  pushl $0
c010324d:	6a 00                	push   $0x0
  pushl $198
c010324f:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103254:	e9 11 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103259 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103259:	6a 00                	push   $0x0
  pushl $199
c010325b:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103260:	e9 05 f8 ff ff       	jmp    c0102a6a <__alltraps>

c0103265 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103265:	6a 00                	push   $0x0
  pushl $200
c0103267:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010326c:	e9 f9 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103271 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103271:	6a 00                	push   $0x0
  pushl $201
c0103273:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103278:	e9 ed f7 ff ff       	jmp    c0102a6a <__alltraps>

c010327d <vector202>:
.globl vector202
vector202:
  pushl $0
c010327d:	6a 00                	push   $0x0
  pushl $202
c010327f:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103284:	e9 e1 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103289 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103289:	6a 00                	push   $0x0
  pushl $203
c010328b:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103290:	e9 d5 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103295 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103295:	6a 00                	push   $0x0
  pushl $204
c0103297:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010329c:	e9 c9 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032a1 <vector205>:
.globl vector205
vector205:
  pushl $0
c01032a1:	6a 00                	push   $0x0
  pushl $205
c01032a3:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032a8:	e9 bd f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032ad <vector206>:
.globl vector206
vector206:
  pushl $0
c01032ad:	6a 00                	push   $0x0
  pushl $206
c01032af:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032b4:	e9 b1 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032b9 <vector207>:
.globl vector207
vector207:
  pushl $0
c01032b9:	6a 00                	push   $0x0
  pushl $207
c01032bb:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032c0:	e9 a5 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032c5 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032c5:	6a 00                	push   $0x0
  pushl $208
c01032c7:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032cc:	e9 99 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032d1 <vector209>:
.globl vector209
vector209:
  pushl $0
c01032d1:	6a 00                	push   $0x0
  pushl $209
c01032d3:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032d8:	e9 8d f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032dd <vector210>:
.globl vector210
vector210:
  pushl $0
c01032dd:	6a 00                	push   $0x0
  pushl $210
c01032df:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032e4:	e9 81 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032e9 <vector211>:
.globl vector211
vector211:
  pushl $0
c01032e9:	6a 00                	push   $0x0
  pushl $211
c01032eb:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032f0:	e9 75 f7 ff ff       	jmp    c0102a6a <__alltraps>

c01032f5 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032f5:	6a 00                	push   $0x0
  pushl $212
c01032f7:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032fc:	e9 69 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103301 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103301:	6a 00                	push   $0x0
  pushl $213
c0103303:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103308:	e9 5d f7 ff ff       	jmp    c0102a6a <__alltraps>

c010330d <vector214>:
.globl vector214
vector214:
  pushl $0
c010330d:	6a 00                	push   $0x0
  pushl $214
c010330f:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103314:	e9 51 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103319 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103319:	6a 00                	push   $0x0
  pushl $215
c010331b:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103320:	e9 45 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103325 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103325:	6a 00                	push   $0x0
  pushl $216
c0103327:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010332c:	e9 39 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103331 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103331:	6a 00                	push   $0x0
  pushl $217
c0103333:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103338:	e9 2d f7 ff ff       	jmp    c0102a6a <__alltraps>

c010333d <vector218>:
.globl vector218
vector218:
  pushl $0
c010333d:	6a 00                	push   $0x0
  pushl $218
c010333f:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103344:	e9 21 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103349 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103349:	6a 00                	push   $0x0
  pushl $219
c010334b:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103350:	e9 15 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103355 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103355:	6a 00                	push   $0x0
  pushl $220
c0103357:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010335c:	e9 09 f7 ff ff       	jmp    c0102a6a <__alltraps>

c0103361 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103361:	6a 00                	push   $0x0
  pushl $221
c0103363:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103368:	e9 fd f6 ff ff       	jmp    c0102a6a <__alltraps>

c010336d <vector222>:
.globl vector222
vector222:
  pushl $0
c010336d:	6a 00                	push   $0x0
  pushl $222
c010336f:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103374:	e9 f1 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103379 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103379:	6a 00                	push   $0x0
  pushl $223
c010337b:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103380:	e9 e5 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103385 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103385:	6a 00                	push   $0x0
  pushl $224
c0103387:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010338c:	e9 d9 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103391 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103391:	6a 00                	push   $0x0
  pushl $225
c0103393:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103398:	e9 cd f6 ff ff       	jmp    c0102a6a <__alltraps>

c010339d <vector226>:
.globl vector226
vector226:
  pushl $0
c010339d:	6a 00                	push   $0x0
  pushl $226
c010339f:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033a4:	e9 c1 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033a9 <vector227>:
.globl vector227
vector227:
  pushl $0
c01033a9:	6a 00                	push   $0x0
  pushl $227
c01033ab:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033b0:	e9 b5 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033b5 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033b5:	6a 00                	push   $0x0
  pushl $228
c01033b7:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033bc:	e9 a9 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033c1 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033c1:	6a 00                	push   $0x0
  pushl $229
c01033c3:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033c8:	e9 9d f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033cd <vector230>:
.globl vector230
vector230:
  pushl $0
c01033cd:	6a 00                	push   $0x0
  pushl $230
c01033cf:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033d4:	e9 91 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033d9 <vector231>:
.globl vector231
vector231:
  pushl $0
c01033d9:	6a 00                	push   $0x0
  pushl $231
c01033db:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033e0:	e9 85 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033e5 <vector232>:
.globl vector232
vector232:
  pushl $0
c01033e5:	6a 00                	push   $0x0
  pushl $232
c01033e7:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033ec:	e9 79 f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033f1 <vector233>:
.globl vector233
vector233:
  pushl $0
c01033f1:	6a 00                	push   $0x0
  pushl $233
c01033f3:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033f8:	e9 6d f6 ff ff       	jmp    c0102a6a <__alltraps>

c01033fd <vector234>:
.globl vector234
vector234:
  pushl $0
c01033fd:	6a 00                	push   $0x0
  pushl $234
c01033ff:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103404:	e9 61 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103409 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103409:	6a 00                	push   $0x0
  pushl $235
c010340b:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103410:	e9 55 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103415 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103415:	6a 00                	push   $0x0
  pushl $236
c0103417:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010341c:	e9 49 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103421 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103421:	6a 00                	push   $0x0
  pushl $237
c0103423:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103428:	e9 3d f6 ff ff       	jmp    c0102a6a <__alltraps>

c010342d <vector238>:
.globl vector238
vector238:
  pushl $0
c010342d:	6a 00                	push   $0x0
  pushl $238
c010342f:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103434:	e9 31 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103439 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103439:	6a 00                	push   $0x0
  pushl $239
c010343b:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103440:	e9 25 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103445 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103445:	6a 00                	push   $0x0
  pushl $240
c0103447:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010344c:	e9 19 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103451 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103451:	6a 00                	push   $0x0
  pushl $241
c0103453:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103458:	e9 0d f6 ff ff       	jmp    c0102a6a <__alltraps>

c010345d <vector242>:
.globl vector242
vector242:
  pushl $0
c010345d:	6a 00                	push   $0x0
  pushl $242
c010345f:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103464:	e9 01 f6 ff ff       	jmp    c0102a6a <__alltraps>

c0103469 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103469:	6a 00                	push   $0x0
  pushl $243
c010346b:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103470:	e9 f5 f5 ff ff       	jmp    c0102a6a <__alltraps>

c0103475 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103475:	6a 00                	push   $0x0
  pushl $244
c0103477:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010347c:	e9 e9 f5 ff ff       	jmp    c0102a6a <__alltraps>

c0103481 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103481:	6a 00                	push   $0x0
  pushl $245
c0103483:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103488:	e9 dd f5 ff ff       	jmp    c0102a6a <__alltraps>

c010348d <vector246>:
.globl vector246
vector246:
  pushl $0
c010348d:	6a 00                	push   $0x0
  pushl $246
c010348f:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103494:	e9 d1 f5 ff ff       	jmp    c0102a6a <__alltraps>

c0103499 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103499:	6a 00                	push   $0x0
  pushl $247
c010349b:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01034a0:	e9 c5 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034a5 <vector248>:
.globl vector248
vector248:
  pushl $0
c01034a5:	6a 00                	push   $0x0
  pushl $248
c01034a7:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034ac:	e9 b9 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034b1 <vector249>:
.globl vector249
vector249:
  pushl $0
c01034b1:	6a 00                	push   $0x0
  pushl $249
c01034b3:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034b8:	e9 ad f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034bd <vector250>:
.globl vector250
vector250:
  pushl $0
c01034bd:	6a 00                	push   $0x0
  pushl $250
c01034bf:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034c4:	e9 a1 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034c9 <vector251>:
.globl vector251
vector251:
  pushl $0
c01034c9:	6a 00                	push   $0x0
  pushl $251
c01034cb:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034d0:	e9 95 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034d5 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034d5:	6a 00                	push   $0x0
  pushl $252
c01034d7:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034dc:	e9 89 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034e1 <vector253>:
.globl vector253
vector253:
  pushl $0
c01034e1:	6a 00                	push   $0x0
  pushl $253
c01034e3:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034e8:	e9 7d f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034ed <vector254>:
.globl vector254
vector254:
  pushl $0
c01034ed:	6a 00                	push   $0x0
  pushl $254
c01034ef:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034f4:	e9 71 f5 ff ff       	jmp    c0102a6a <__alltraps>

c01034f9 <vector255>:
.globl vector255
vector255:
  pushl $0
c01034f9:	6a 00                	push   $0x0
  pushl $255
c01034fb:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103500:	e9 65 f5 ff ff       	jmp    c0102a6a <__alltraps>

c0103505 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0103505:	55                   	push   %ebp
c0103506:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0103508:	8b 55 08             	mov    0x8(%ebp),%edx
c010350b:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0103510:	29 c2                	sub    %eax,%edx
c0103512:	89 d0                	mov    %edx,%eax
c0103514:	c1 f8 05             	sar    $0x5,%eax
}
c0103517:	5d                   	pop    %ebp
c0103518:	c3                   	ret    

c0103519 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0103519:	55                   	push   %ebp
c010351a:	89 e5                	mov    %esp,%ebp
c010351c:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010351f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103522:	89 04 24             	mov    %eax,(%esp)
c0103525:	e8 db ff ff ff       	call   c0103505 <page2ppn>
c010352a:	c1 e0 0c             	shl    $0xc,%eax
}
c010352d:	c9                   	leave  
c010352e:	c3                   	ret    

c010352f <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010352f:	55                   	push   %ebp
c0103530:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103532:	8b 45 08             	mov    0x8(%ebp),%eax
c0103535:	8b 00                	mov    (%eax),%eax
}
c0103537:	5d                   	pop    %ebp
c0103538:	c3                   	ret    

c0103539 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0103539:	55                   	push   %ebp
c010353a:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010353c:	8b 45 08             	mov    0x8(%ebp),%eax
c010353f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103542:	89 10                	mov    %edx,(%eax)
}
c0103544:	5d                   	pop    %ebp
c0103545:	c3                   	ret    

c0103546 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103546:	55                   	push   %ebp
c0103547:	89 e5                	mov    %esp,%ebp
c0103549:	83 ec 10             	sub    $0x10,%esp
c010354c:	c7 45 fc dc 54 1c c0 	movl   $0xc01c54dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103553:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103556:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103559:	89 50 04             	mov    %edx,0x4(%eax)
c010355c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010355f:	8b 50 04             	mov    0x4(%eax),%edx
c0103562:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103565:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103567:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c010356e:	00 00 00 
}
c0103571:	c9                   	leave  
c0103572:	c3                   	ret    

c0103573 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103573:	55                   	push   %ebp
c0103574:	89 e5                	mov    %esp,%ebp
c0103576:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103579:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010357d:	75 24                	jne    c01035a3 <default_init_memmap+0x30>
c010357f:	c7 44 24 0c 30 e0 10 	movl   $0xc010e030,0xc(%esp)
c0103586:	c0 
c0103587:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c010358e:	c0 
c010358f:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103596:	00 
c0103597:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c010359e:	e8 37 d8 ff ff       	call   c0100dda <__panic>
    struct Page *p = base;
c01035a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01035a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01035a9:	e9 dc 00 00 00       	jmp    c010368a <default_init_memmap+0x117>
        assert(PageReserved(p));
c01035ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035b1:	83 c0 04             	add    $0x4,%eax
c01035b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01035bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01035be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035c4:	0f a3 10             	bt     %edx,(%eax)
c01035c7:	19 c0                	sbb    %eax,%eax
c01035c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01035cc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035d0:	0f 95 c0             	setne  %al
c01035d3:	0f b6 c0             	movzbl %al,%eax
c01035d6:	85 c0                	test   %eax,%eax
c01035d8:	75 24                	jne    c01035fe <default_init_memmap+0x8b>
c01035da:	c7 44 24 0c 61 e0 10 	movl   $0xc010e061,0xc(%esp)
c01035e1:	c0 
c01035e2:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01035e9:	c0 
c01035ea:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01035f1:	00 
c01035f2:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01035f9:	e8 dc d7 ff ff       	call   c0100dda <__panic>
        p->flags = 0;
c01035fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103601:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c0103608:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010360b:	83 c0 04             	add    $0x4,%eax
c010360e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103615:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103618:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010361b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010361e:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c0103621:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103624:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c010362b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103632:	00 
c0103633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103636:	89 04 24             	mov    %eax,(%esp)
c0103639:	e8 fb fe ff ff       	call   c0103539 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c010363e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103641:	83 c0 0c             	add    $0xc,%eax
c0103644:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
c010364b:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010364e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103651:	8b 00                	mov    (%eax),%eax
c0103653:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103656:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103659:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010365c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010365f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103662:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103665:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103668:	89 10                	mov    %edx,(%eax)
c010366a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010366d:	8b 10                	mov    (%eax),%edx
c010366f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103672:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103675:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103678:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010367b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010367e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103681:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103684:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103686:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010368a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010368d:	c1 e0 05             	shl    $0x5,%eax
c0103690:	89 c2                	mov    %eax,%edx
c0103692:	8b 45 08             	mov    0x8(%ebp),%eax
c0103695:	01 d0                	add    %edx,%eax
c0103697:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010369a:	0f 85 0e ff ff ff    	jne    c01035ae <default_init_memmap+0x3b>
        SetPageProperty(p);
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }
    nr_free += n;
c01036a0:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c01036a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01036a9:	01 d0                	add    %edx,%eax
c01036ab:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
    //first block
    base->property = n;
c01036b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01036b3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036b6:	89 50 08             	mov    %edx,0x8(%eax)
}
c01036b9:	c9                   	leave  
c01036ba:	c3                   	ret    

c01036bb <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01036bb:	55                   	push   %ebp
c01036bc:	89 e5                	mov    %esp,%ebp
c01036be:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c01036c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036c5:	75 24                	jne    c01036eb <default_alloc_pages+0x30>
c01036c7:	c7 44 24 0c 30 e0 10 	movl   $0xc010e030,0xc(%esp)
c01036ce:	c0 
c01036cf:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01036d6:	c0 
c01036d7:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c01036de:	00 
c01036df:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01036e6:	e8 ef d6 ff ff       	call   c0100dda <__panic>
    if (n > nr_free) {
c01036eb:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01036f0:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036f3:	73 0a                	jae    c01036ff <default_alloc_pages+0x44>
        return NULL;
c01036f5:	b8 00 00 00 00       	mov    $0x0,%eax
c01036fa:	e9 37 01 00 00       	jmp    c0103836 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c01036ff:	c7 45 f4 dc 54 1c c0 	movl   $0xc01c54dc,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c0103706:	e9 0a 01 00 00       	jmp    c0103815 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c010370b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010370e:	83 e8 0c             	sub    $0xc,%eax
c0103711:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c0103714:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103717:	8b 40 08             	mov    0x8(%eax),%eax
c010371a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010371d:	0f 82 f2 00 00 00    	jb     c0103815 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c0103723:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010372a:	eb 7c                	jmp    c01037a8 <default_alloc_pages+0xed>
c010372c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010372f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103732:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103735:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c0103738:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c010373b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010373e:	83 e8 0c             	sub    $0xc,%eax
c0103741:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c0103744:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103747:	83 c0 04             	add    $0x4,%eax
c010374a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0103751:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103754:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103757:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010375a:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c010375d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103760:	83 c0 04             	add    $0x4,%eax
c0103763:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010376a:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010376d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103770:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103773:	0f b3 10             	btr    %edx,(%eax)
c0103776:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103779:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010377c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010377f:	8b 40 04             	mov    0x4(%eax),%eax
c0103782:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103785:	8b 12                	mov    (%edx),%edx
c0103787:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010378a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010378d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103790:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103793:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103796:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103799:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010379c:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c010379e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01037a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c01037a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01037a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037ab:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037ae:	0f 82 78 ff ff ff    	jb     c010372c <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c01037b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037b7:	8b 40 08             	mov    0x8(%eax),%eax
c01037ba:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037bd:	76 12                	jbe    c01037d1 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c01037bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c2:	8d 50 f4             	lea    -0xc(%eax),%edx
c01037c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037c8:	8b 40 08             	mov    0x8(%eax),%eax
c01037cb:	2b 45 08             	sub    0x8(%ebp),%eax
c01037ce:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c01037d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037d4:	83 c0 04             	add    $0x4,%eax
c01037d7:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01037de:	89 45 bc             	mov    %eax,-0x44(%ebp)
c01037e1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01037e4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01037e7:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c01037ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ed:	83 c0 04             	add    $0x4,%eax
c01037f0:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c01037f7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01037fd:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103800:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c0103803:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103808:	2b 45 08             	sub    0x8(%ebp),%eax
c010380b:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
        return p;
c0103810:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103813:	eb 21                	jmp    c0103836 <default_alloc_pages+0x17b>
c0103815:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103818:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010381b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010381e:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c0103821:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103824:	81 7d f4 dc 54 1c c0 	cmpl   $0xc01c54dc,-0xc(%ebp)
c010382b:	0f 85 da fe ff ff    	jne    c010370b <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c0103831:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103836:	c9                   	leave  
c0103837:	c3                   	ret    

c0103838 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0103838:	55                   	push   %ebp
c0103839:	89 e5                	mov    %esp,%ebp
c010383b:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c010383e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103842:	75 24                	jne    c0103868 <default_free_pages+0x30>
c0103844:	c7 44 24 0c 30 e0 10 	movl   $0xc010e030,0xc(%esp)
c010384b:	c0 
c010384c:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103853:	c0 
c0103854:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c010385b:	00 
c010385c:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103863:	e8 72 d5 ff ff       	call   c0100dda <__panic>
    assert(PageReserved(base));
c0103868:	8b 45 08             	mov    0x8(%ebp),%eax
c010386b:	83 c0 04             	add    $0x4,%eax
c010386e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103875:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103878:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010387b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010387e:	0f a3 10             	bt     %edx,(%eax)
c0103881:	19 c0                	sbb    %eax,%eax
c0103883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return oldbit != 0;
c0103886:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010388a:	0f 95 c0             	setne  %al
c010388d:	0f b6 c0             	movzbl %al,%eax
c0103890:	85 c0                	test   %eax,%eax
c0103892:	75 24                	jne    c01038b8 <default_free_pages+0x80>
c0103894:	c7 44 24 0c 71 e0 10 	movl   $0xc010e071,0xc(%esp)
c010389b:	c0 
c010389c:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01038a3:	c0 
c01038a4:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c01038ab:	00 
c01038ac:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01038b3:	e8 22 d5 ff ff       	call   c0100dda <__panic>

    list_entry_t *le = &free_list;
c01038b8:	c7 45 f4 dc 54 1c c0 	movl   $0xc01c54dc,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c01038bf:	eb 13                	jmp    c01038d4 <default_free_pages+0x9c>
      p = le2page(le, page_link);
c01038c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038c4:	83 e8 0c             	sub    $0xc,%eax
c01038c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c01038ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038cd:	3b 45 08             	cmp    0x8(%ebp),%eax
c01038d0:	76 02                	jbe    c01038d4 <default_free_pages+0x9c>
        break;
c01038d2:	eb 18                	jmp    c01038ec <default_free_pages+0xb4>
c01038d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01038da:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038dd:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c01038e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038e3:	81 7d f4 dc 54 1c c0 	cmpl   $0xc01c54dc,-0xc(%ebp)
c01038ea:	75 d5                	jne    c01038c1 <default_free_pages+0x89>
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01038ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038f2:	eb 4b                	jmp    c010393f <default_free_pages+0x107>
      list_add_before(le, &(p->page_link));
c01038f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038f7:	8d 50 0c             	lea    0xc(%eax),%edx
c01038fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103900:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103903:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103906:	8b 00                	mov    (%eax),%eax
c0103908:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010390b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010390e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103911:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103914:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103917:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010391a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010391d:	89 10                	mov    %edx,(%eax)
c010391f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103922:	8b 10                	mov    (%eax),%edx
c0103924:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103927:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010392a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010392d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103930:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103936:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103939:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c010393b:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c010393f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103942:	c1 e0 05             	shl    $0x5,%eax
c0103945:	89 c2                	mov    %eax,%edx
c0103947:	8b 45 08             	mov    0x8(%ebp),%eax
c010394a:	01 d0                	add    %edx,%eax
c010394c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010394f:	77 a3                	ja     c01038f4 <default_free_pages+0xbc>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c0103951:	8b 45 08             	mov    0x8(%ebp),%eax
c0103954:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c010395b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0103962:	00 
c0103963:	8b 45 08             	mov    0x8(%ebp),%eax
c0103966:	89 04 24             	mov    %eax,(%esp)
c0103969:	e8 cb fb ff ff       	call   c0103539 <set_page_ref>
    ClearPageProperty(base);
c010396e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103971:	83 c0 04             	add    $0x4,%eax
c0103974:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c010397b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010397e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103981:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103984:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103987:	8b 45 08             	mov    0x8(%ebp),%eax
c010398a:	83 c0 04             	add    $0x4,%eax
c010398d:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103994:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103997:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010399a:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010399d:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c01039a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01039a3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01039a6:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c01039a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ac:	83 e8 0c             	sub    $0xc,%eax
c01039af:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c01039b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039b5:	c1 e0 05             	shl    $0x5,%eax
c01039b8:	89 c2                	mov    %eax,%edx
c01039ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01039bd:	01 d0                	add    %edx,%eax
c01039bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039c2:	75 1e                	jne    c01039e2 <default_free_pages+0x1aa>
      base->property += p->property;
c01039c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01039c7:	8b 50 08             	mov    0x8(%eax),%edx
c01039ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039cd:	8b 40 08             	mov    0x8(%eax),%eax
c01039d0:	01 c2                	add    %eax,%edx
c01039d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01039d5:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c01039d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039db:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c01039e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e5:	83 c0 0c             	add    $0xc,%eax
c01039e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01039eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039ee:	8b 00                	mov    (%eax),%eax
c01039f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c01039f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039f6:	83 e8 0c             	sub    $0xc,%eax
c01039f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c01039fc:	81 7d f4 dc 54 1c c0 	cmpl   $0xc01c54dc,-0xc(%ebp)
c0103a03:	74 57                	je     c0103a5c <default_free_pages+0x224>
c0103a05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a08:	83 e8 20             	sub    $0x20,%eax
c0103a0b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a0e:	75 4c                	jne    c0103a5c <default_free_pages+0x224>
      while(le!=&free_list){
c0103a10:	eb 41                	jmp    c0103a53 <default_free_pages+0x21b>
        if(p->property){
c0103a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a15:	8b 40 08             	mov    0x8(%eax),%eax
c0103a18:	85 c0                	test   %eax,%eax
c0103a1a:	74 20                	je     c0103a3c <default_free_pages+0x204>
          p->property += base->property;
c0103a1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a1f:	8b 50 08             	mov    0x8(%eax),%edx
c0103a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a25:	8b 40 08             	mov    0x8(%eax),%eax
c0103a28:	01 c2                	add    %eax,%edx
c0103a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a2d:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103a30:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a33:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103a3a:	eb 20                	jmp    c0103a5c <default_free_pages+0x224>
c0103a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a3f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103a42:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103a45:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103a47:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a4d:	83 e8 0c             	sub    $0xc,%eax
c0103a50:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103a53:	81 7d f4 dc 54 1c c0 	cmpl   $0xc01c54dc,-0xc(%ebp)
c0103a5a:	75 b6                	jne    c0103a12 <default_free_pages+0x1da>
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }

    nr_free += n;
c0103a5c:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c0103a62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a65:	01 d0                	add    %edx,%eax
c0103a67:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
    return ;
c0103a6c:	90                   	nop
}
c0103a6d:	c9                   	leave  
c0103a6e:	c3                   	ret    

c0103a6f <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103a6f:	55                   	push   %ebp
c0103a70:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103a72:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
}
c0103a77:	5d                   	pop    %ebp
c0103a78:	c3                   	ret    

c0103a79 <basic_check>:

static void
basic_check(void) {
c0103a79:	55                   	push   %ebp
c0103a7a:	89 e5                	mov    %esp,%ebp
c0103a7c:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103a7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103a86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a89:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103a92:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103a99:	e8 dc 15 00 00       	call   c010507a <alloc_pages>
c0103a9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103aa1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103aa5:	75 24                	jne    c0103acb <basic_check+0x52>
c0103aa7:	c7 44 24 0c 84 e0 10 	movl   $0xc010e084,0xc(%esp)
c0103aae:	c0 
c0103aaf:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103ab6:	c0 
c0103ab7:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103abe:	00 
c0103abf:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103ac6:	e8 0f d3 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103acb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ad2:	e8 a3 15 00 00       	call   c010507a <alloc_pages>
c0103ad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ada:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103ade:	75 24                	jne    c0103b04 <basic_check+0x8b>
c0103ae0:	c7 44 24 0c a0 e0 10 	movl   $0xc010e0a0,0xc(%esp)
c0103ae7:	c0 
c0103ae8:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103aef:	c0 
c0103af0:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103af7:	00 
c0103af8:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103aff:	e8 d6 d2 ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103b04:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b0b:	e8 6a 15 00 00       	call   c010507a <alloc_pages>
c0103b10:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103b13:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b17:	75 24                	jne    c0103b3d <basic_check+0xc4>
c0103b19:	c7 44 24 0c bc e0 10 	movl   $0xc010e0bc,0xc(%esp)
c0103b20:	c0 
c0103b21:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103b28:	c0 
c0103b29:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103b30:	00 
c0103b31:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103b38:	e8 9d d2 ff ff       	call   c0100dda <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103b43:	74 10                	je     c0103b55 <basic_check+0xdc>
c0103b45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b4b:	74 08                	je     c0103b55 <basic_check+0xdc>
c0103b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103b53:	75 24                	jne    c0103b79 <basic_check+0x100>
c0103b55:	c7 44 24 0c d8 e0 10 	movl   $0xc010e0d8,0xc(%esp)
c0103b5c:	c0 
c0103b5d:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103b64:	c0 
c0103b65:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103b6c:	00 
c0103b6d:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103b74:	e8 61 d2 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b7c:	89 04 24             	mov    %eax,(%esp)
c0103b7f:	e8 ab f9 ff ff       	call   c010352f <page_ref>
c0103b84:	85 c0                	test   %eax,%eax
c0103b86:	75 1e                	jne    c0103ba6 <basic_check+0x12d>
c0103b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b8b:	89 04 24             	mov    %eax,(%esp)
c0103b8e:	e8 9c f9 ff ff       	call   c010352f <page_ref>
c0103b93:	85 c0                	test   %eax,%eax
c0103b95:	75 0f                	jne    c0103ba6 <basic_check+0x12d>
c0103b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b9a:	89 04 24             	mov    %eax,(%esp)
c0103b9d:	e8 8d f9 ff ff       	call   c010352f <page_ref>
c0103ba2:	85 c0                	test   %eax,%eax
c0103ba4:	74 24                	je     c0103bca <basic_check+0x151>
c0103ba6:	c7 44 24 0c fc e0 10 	movl   $0xc010e0fc,0xc(%esp)
c0103bad:	c0 
c0103bae:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103bb5:	c0 
c0103bb6:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103bbd:	00 
c0103bbe:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103bc5:	e8 10 d2 ff ff       	call   c0100dda <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bcd:	89 04 24             	mov    %eax,(%esp)
c0103bd0:	e8 44 f9 ff ff       	call   c0103519 <page2pa>
c0103bd5:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103bdb:	c1 e2 0c             	shl    $0xc,%edx
c0103bde:	39 d0                	cmp    %edx,%eax
c0103be0:	72 24                	jb     c0103c06 <basic_check+0x18d>
c0103be2:	c7 44 24 0c 38 e1 10 	movl   $0xc010e138,0xc(%esp)
c0103be9:	c0 
c0103bea:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103bf1:	c0 
c0103bf2:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103bf9:	00 
c0103bfa:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103c01:	e8 d4 d1 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c09:	89 04 24             	mov    %eax,(%esp)
c0103c0c:	e8 08 f9 ff ff       	call   c0103519 <page2pa>
c0103c11:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103c17:	c1 e2 0c             	shl    $0xc,%edx
c0103c1a:	39 d0                	cmp    %edx,%eax
c0103c1c:	72 24                	jb     c0103c42 <basic_check+0x1c9>
c0103c1e:	c7 44 24 0c 55 e1 10 	movl   $0xc010e155,0xc(%esp)
c0103c25:	c0 
c0103c26:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103c2d:	c0 
c0103c2e:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103c35:	00 
c0103c36:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103c3d:	e8 98 d1 ff ff       	call   c0100dda <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c45:	89 04 24             	mov    %eax,(%esp)
c0103c48:	e8 cc f8 ff ff       	call   c0103519 <page2pa>
c0103c4d:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103c53:	c1 e2 0c             	shl    $0xc,%edx
c0103c56:	39 d0                	cmp    %edx,%eax
c0103c58:	72 24                	jb     c0103c7e <basic_check+0x205>
c0103c5a:	c7 44 24 0c 72 e1 10 	movl   $0xc010e172,0xc(%esp)
c0103c61:	c0 
c0103c62:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103c69:	c0 
c0103c6a:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103c71:	00 
c0103c72:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103c79:	e8 5c d1 ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c0103c7e:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c0103c83:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c0103c89:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103c8c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103c8f:	c7 45 e0 dc 54 1c c0 	movl   $0xc01c54dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103c96:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c99:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103c9c:	89 50 04             	mov    %edx,0x4(%eax)
c0103c9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ca2:	8b 50 04             	mov    0x4(%eax),%edx
c0103ca5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ca8:	89 10                	mov    %edx,(%eax)
c0103caa:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103cb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103cb4:	8b 40 04             	mov    0x4(%eax),%eax
c0103cb7:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103cba:	0f 94 c0             	sete   %al
c0103cbd:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103cc0:	85 c0                	test   %eax,%eax
c0103cc2:	75 24                	jne    c0103ce8 <basic_check+0x26f>
c0103cc4:	c7 44 24 0c 8f e1 10 	movl   $0xc010e18f,0xc(%esp)
c0103ccb:	c0 
c0103ccc:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103cd3:	c0 
c0103cd4:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103cdb:	00 
c0103cdc:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103ce3:	e8 f2 d0 ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c0103ce8:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103ced:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103cf0:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c0103cf7:	00 00 00 

    assert(alloc_page() == NULL);
c0103cfa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d01:	e8 74 13 00 00       	call   c010507a <alloc_pages>
c0103d06:	85 c0                	test   %eax,%eax
c0103d08:	74 24                	je     c0103d2e <basic_check+0x2b5>
c0103d0a:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c0103d11:	c0 
c0103d12:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103d19:	c0 
c0103d1a:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103d21:	00 
c0103d22:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103d29:	e8 ac d0 ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103d2e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d35:	00 
c0103d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d39:	89 04 24             	mov    %eax,(%esp)
c0103d3c:	e8 a4 13 00 00       	call   c01050e5 <free_pages>
    free_page(p1);
c0103d41:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d48:	00 
c0103d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d4c:	89 04 24             	mov    %eax,(%esp)
c0103d4f:	e8 91 13 00 00       	call   c01050e5 <free_pages>
    free_page(p2);
c0103d54:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103d5b:	00 
c0103d5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d5f:	89 04 24             	mov    %eax,(%esp)
c0103d62:	e8 7e 13 00 00       	call   c01050e5 <free_pages>
    assert(nr_free == 3);
c0103d67:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103d6c:	83 f8 03             	cmp    $0x3,%eax
c0103d6f:	74 24                	je     c0103d95 <basic_check+0x31c>
c0103d71:	c7 44 24 0c bb e1 10 	movl   $0xc010e1bb,0xc(%esp)
c0103d78:	c0 
c0103d79:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103d80:	c0 
c0103d81:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103d88:	00 
c0103d89:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103d90:	e8 45 d0 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103d95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d9c:	e8 d9 12 00 00       	call   c010507a <alloc_pages>
c0103da1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103da4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103da8:	75 24                	jne    c0103dce <basic_check+0x355>
c0103daa:	c7 44 24 0c 84 e0 10 	movl   $0xc010e084,0xc(%esp)
c0103db1:	c0 
c0103db2:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103db9:	c0 
c0103dba:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103dc1:	00 
c0103dc2:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103dc9:	e8 0c d0 ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103dce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103dd5:	e8 a0 12 00 00       	call   c010507a <alloc_pages>
c0103dda:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ddd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103de1:	75 24                	jne    c0103e07 <basic_check+0x38e>
c0103de3:	c7 44 24 0c a0 e0 10 	movl   $0xc010e0a0,0xc(%esp)
c0103dea:	c0 
c0103deb:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103df2:	c0 
c0103df3:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103dfa:	00 
c0103dfb:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103e02:	e8 d3 cf ff ff       	call   c0100dda <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103e07:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e0e:	e8 67 12 00 00       	call   c010507a <alloc_pages>
c0103e13:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e1a:	75 24                	jne    c0103e40 <basic_check+0x3c7>
c0103e1c:	c7 44 24 0c bc e0 10 	movl   $0xc010e0bc,0xc(%esp)
c0103e23:	c0 
c0103e24:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103e2b:	c0 
c0103e2c:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103e33:	00 
c0103e34:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103e3b:	e8 9a cf ff ff       	call   c0100dda <__panic>

    assert(alloc_page() == NULL);
c0103e40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e47:	e8 2e 12 00 00       	call   c010507a <alloc_pages>
c0103e4c:	85 c0                	test   %eax,%eax
c0103e4e:	74 24                	je     c0103e74 <basic_check+0x3fb>
c0103e50:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c0103e57:	c0 
c0103e58:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103e5f:	c0 
c0103e60:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103e67:	00 
c0103e68:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103e6f:	e8 66 cf ff ff       	call   c0100dda <__panic>

    free_page(p0);
c0103e74:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103e7b:	00 
c0103e7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e7f:	89 04 24             	mov    %eax,(%esp)
c0103e82:	e8 5e 12 00 00       	call   c01050e5 <free_pages>
c0103e87:	c7 45 d8 dc 54 1c c0 	movl   $0xc01c54dc,-0x28(%ebp)
c0103e8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103e91:	8b 40 04             	mov    0x4(%eax),%eax
c0103e94:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103e97:	0f 94 c0             	sete   %al
c0103e9a:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103e9d:	85 c0                	test   %eax,%eax
c0103e9f:	74 24                	je     c0103ec5 <basic_check+0x44c>
c0103ea1:	c7 44 24 0c c8 e1 10 	movl   $0xc010e1c8,0xc(%esp)
c0103ea8:	c0 
c0103ea9:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103eb0:	c0 
c0103eb1:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103eb8:	00 
c0103eb9:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103ec0:	e8 15 cf ff ff       	call   c0100dda <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103ec5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ecc:	e8 a9 11 00 00       	call   c010507a <alloc_pages>
c0103ed1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103ed4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103ed7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103eda:	74 24                	je     c0103f00 <basic_check+0x487>
c0103edc:	c7 44 24 0c e0 e1 10 	movl   $0xc010e1e0,0xc(%esp)
c0103ee3:	c0 
c0103ee4:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103eeb:	c0 
c0103eec:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103ef3:	00 
c0103ef4:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103efb:	e8 da ce ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0103f00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f07:	e8 6e 11 00 00       	call   c010507a <alloc_pages>
c0103f0c:	85 c0                	test   %eax,%eax
c0103f0e:	74 24                	je     c0103f34 <basic_check+0x4bb>
c0103f10:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c0103f17:	c0 
c0103f18:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103f1f:	c0 
c0103f20:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103f27:	00 
c0103f28:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103f2f:	e8 a6 ce ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c0103f34:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103f39:	85 c0                	test   %eax,%eax
c0103f3b:	74 24                	je     c0103f61 <basic_check+0x4e8>
c0103f3d:	c7 44 24 0c f9 e1 10 	movl   $0xc010e1f9,0xc(%esp)
c0103f44:	c0 
c0103f45:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0103f4c:	c0 
c0103f4d:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103f54:	00 
c0103f55:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0103f5c:	e8 79 ce ff ff       	call   c0100dda <__panic>
    free_list = free_list_store;
c0103f61:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f64:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103f67:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0103f6c:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    nr_free = nr_free_store;
c0103f72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f75:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_page(p);
c0103f7a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f81:	00 
c0103f82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f85:	89 04 24             	mov    %eax,(%esp)
c0103f88:	e8 58 11 00 00       	call   c01050e5 <free_pages>
    free_page(p1);
c0103f8d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f94:	00 
c0103f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f98:	89 04 24             	mov    %eax,(%esp)
c0103f9b:	e8 45 11 00 00       	call   c01050e5 <free_pages>
    free_page(p2);
c0103fa0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103fa7:	00 
c0103fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fab:	89 04 24             	mov    %eax,(%esp)
c0103fae:	e8 32 11 00 00       	call   c01050e5 <free_pages>
}
c0103fb3:	c9                   	leave  
c0103fb4:	c3                   	ret    

c0103fb5 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0103fb5:	55                   	push   %ebp
c0103fb6:	89 e5                	mov    %esp,%ebp
c0103fb8:	53                   	push   %ebx
c0103fb9:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0103fbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103fc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0103fcd:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103fd4:	eb 6b                	jmp    c0104041 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0103fd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fd9:	83 e8 0c             	sub    $0xc,%eax
c0103fdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0103fdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103fe2:	83 c0 04             	add    $0x4,%eax
c0103fe5:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103fec:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103fef:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103ff2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103ff5:	0f a3 10             	bt     %edx,(%eax)
c0103ff8:	19 c0                	sbb    %eax,%eax
c0103ffa:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c0103ffd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104001:	0f 95 c0             	setne  %al
c0104004:	0f b6 c0             	movzbl %al,%eax
c0104007:	85 c0                	test   %eax,%eax
c0104009:	75 24                	jne    c010402f <default_check+0x7a>
c010400b:	c7 44 24 0c 06 e2 10 	movl   $0xc010e206,0xc(%esp)
c0104012:	c0 
c0104013:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c010401a:	c0 
c010401b:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c0104022:	00 
c0104023:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c010402a:	e8 ab cd ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c010402f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104033:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104036:	8b 50 08             	mov    0x8(%eax),%edx
c0104039:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010403c:	01 d0                	add    %edx,%eax
c010403e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104041:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104044:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104047:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010404a:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010404d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104050:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c0104057:	0f 85 79 ff ff ff    	jne    c0103fd6 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c010405d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104060:	e8 b2 10 00 00       	call   c0105117 <nr_free_pages>
c0104065:	39 c3                	cmp    %eax,%ebx
c0104067:	74 24                	je     c010408d <default_check+0xd8>
c0104069:	c7 44 24 0c 16 e2 10 	movl   $0xc010e216,0xc(%esp)
c0104070:	c0 
c0104071:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104078:	c0 
c0104079:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104080:	00 
c0104081:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104088:	e8 4d cd ff ff       	call   c0100dda <__panic>

    basic_check();
c010408d:	e8 e7 f9 ff ff       	call   c0103a79 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104092:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104099:	e8 dc 0f 00 00       	call   c010507a <alloc_pages>
c010409e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c01040a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01040a5:	75 24                	jne    c01040cb <default_check+0x116>
c01040a7:	c7 44 24 0c 2f e2 10 	movl   $0xc010e22f,0xc(%esp)
c01040ae:	c0 
c01040af:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01040b6:	c0 
c01040b7:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c01040be:	00 
c01040bf:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01040c6:	e8 0f cd ff ff       	call   c0100dda <__panic>
    assert(!PageProperty(p0));
c01040cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040ce:	83 c0 04             	add    $0x4,%eax
c01040d1:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c01040d8:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01040db:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01040de:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01040e1:	0f a3 10             	bt     %edx,(%eax)
c01040e4:	19 c0                	sbb    %eax,%eax
c01040e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01040e9:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01040ed:	0f 95 c0             	setne  %al
c01040f0:	0f b6 c0             	movzbl %al,%eax
c01040f3:	85 c0                	test   %eax,%eax
c01040f5:	74 24                	je     c010411b <default_check+0x166>
c01040f7:	c7 44 24 0c 3a e2 10 	movl   $0xc010e23a,0xc(%esp)
c01040fe:	c0 
c01040ff:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104106:	c0 
c0104107:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010410e:	00 
c010410f:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104116:	e8 bf cc ff ff       	call   c0100dda <__panic>

    list_entry_t free_list_store = free_list;
c010411b:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c0104120:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c0104126:	89 45 80             	mov    %eax,-0x80(%ebp)
c0104129:	89 55 84             	mov    %edx,-0x7c(%ebp)
c010412c:	c7 45 b4 dc 54 1c c0 	movl   $0xc01c54dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104133:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104136:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0104139:	89 50 04             	mov    %edx,0x4(%eax)
c010413c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010413f:	8b 50 04             	mov    0x4(%eax),%edx
c0104142:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0104145:	89 10                	mov    %edx,(%eax)
c0104147:	c7 45 b0 dc 54 1c c0 	movl   $0xc01c54dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010414e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0104151:	8b 40 04             	mov    0x4(%eax),%eax
c0104154:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c0104157:	0f 94 c0             	sete   %al
c010415a:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010415d:	85 c0                	test   %eax,%eax
c010415f:	75 24                	jne    c0104185 <default_check+0x1d0>
c0104161:	c7 44 24 0c 8f e1 10 	movl   $0xc010e18f,0xc(%esp)
c0104168:	c0 
c0104169:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104170:	c0 
c0104171:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104178:	00 
c0104179:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104180:	e8 55 cc ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c0104185:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010418c:	e8 e9 0e 00 00       	call   c010507a <alloc_pages>
c0104191:	85 c0                	test   %eax,%eax
c0104193:	74 24                	je     c01041b9 <default_check+0x204>
c0104195:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c010419c:	c0 
c010419d:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01041a4:	c0 
c01041a5:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01041ac:	00 
c01041ad:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01041b4:	e8 21 cc ff ff       	call   c0100dda <__panic>

    unsigned int nr_free_store = nr_free;
c01041b9:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01041be:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01041c1:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c01041c8:	00 00 00 

    free_pages(p0 + 2, 3);
c01041cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041ce:	83 c0 40             	add    $0x40,%eax
c01041d1:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01041d8:	00 
c01041d9:	89 04 24             	mov    %eax,(%esp)
c01041dc:	e8 04 0f 00 00       	call   c01050e5 <free_pages>
    assert(alloc_pages(4) == NULL);
c01041e1:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01041e8:	e8 8d 0e 00 00       	call   c010507a <alloc_pages>
c01041ed:	85 c0                	test   %eax,%eax
c01041ef:	74 24                	je     c0104215 <default_check+0x260>
c01041f1:	c7 44 24 0c 4c e2 10 	movl   $0xc010e24c,0xc(%esp)
c01041f8:	c0 
c01041f9:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104200:	c0 
c0104201:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c0104208:	00 
c0104209:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104210:	e8 c5 cb ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0104215:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104218:	83 c0 40             	add    $0x40,%eax
c010421b:	83 c0 04             	add    $0x4,%eax
c010421e:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c0104225:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104228:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010422b:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010422e:	0f a3 10             	bt     %edx,(%eax)
c0104231:	19 c0                	sbb    %eax,%eax
c0104233:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c0104236:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c010423a:	0f 95 c0             	setne  %al
c010423d:	0f b6 c0             	movzbl %al,%eax
c0104240:	85 c0                	test   %eax,%eax
c0104242:	74 0e                	je     c0104252 <default_check+0x29d>
c0104244:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104247:	83 c0 40             	add    $0x40,%eax
c010424a:	8b 40 08             	mov    0x8(%eax),%eax
c010424d:	83 f8 03             	cmp    $0x3,%eax
c0104250:	74 24                	je     c0104276 <default_check+0x2c1>
c0104252:	c7 44 24 0c 64 e2 10 	movl   $0xc010e264,0xc(%esp)
c0104259:	c0 
c010425a:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104261:	c0 
c0104262:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104269:	00 
c010426a:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104271:	e8 64 cb ff ff       	call   c0100dda <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104276:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010427d:	e8 f8 0d 00 00       	call   c010507a <alloc_pages>
c0104282:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104285:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104289:	75 24                	jne    c01042af <default_check+0x2fa>
c010428b:	c7 44 24 0c 90 e2 10 	movl   $0xc010e290,0xc(%esp)
c0104292:	c0 
c0104293:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c010429a:	c0 
c010429b:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c01042a2:	00 
c01042a3:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01042aa:	e8 2b cb ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c01042af:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01042b6:	e8 bf 0d 00 00       	call   c010507a <alloc_pages>
c01042bb:	85 c0                	test   %eax,%eax
c01042bd:	74 24                	je     c01042e3 <default_check+0x32e>
c01042bf:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c01042c6:	c0 
c01042c7:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01042ce:	c0 
c01042cf:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01042d6:	00 
c01042d7:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01042de:	e8 f7 ca ff ff       	call   c0100dda <__panic>
    assert(p0 + 2 == p1);
c01042e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e6:	83 c0 40             	add    $0x40,%eax
c01042e9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01042ec:	74 24                	je     c0104312 <default_check+0x35d>
c01042ee:	c7 44 24 0c ae e2 10 	movl   $0xc010e2ae,0xc(%esp)
c01042f5:	c0 
c01042f6:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01042fd:	c0 
c01042fe:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0104305:	00 
c0104306:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c010430d:	e8 c8 ca ff ff       	call   c0100dda <__panic>

    p2 = p0 + 1;
c0104312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104315:	83 c0 20             	add    $0x20,%eax
c0104318:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c010431b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104322:	00 
c0104323:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104326:	89 04 24             	mov    %eax,(%esp)
c0104329:	e8 b7 0d 00 00       	call   c01050e5 <free_pages>
    free_pages(p1, 3);
c010432e:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104335:	00 
c0104336:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104339:	89 04 24             	mov    %eax,(%esp)
c010433c:	e8 a4 0d 00 00       	call   c01050e5 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c0104341:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104344:	83 c0 04             	add    $0x4,%eax
c0104347:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c010434e:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104351:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0104354:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104357:	0f a3 10             	bt     %edx,(%eax)
c010435a:	19 c0                	sbb    %eax,%eax
c010435c:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c010435f:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104363:	0f 95 c0             	setne  %al
c0104366:	0f b6 c0             	movzbl %al,%eax
c0104369:	85 c0                	test   %eax,%eax
c010436b:	74 0b                	je     c0104378 <default_check+0x3c3>
c010436d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104370:	8b 40 08             	mov    0x8(%eax),%eax
c0104373:	83 f8 01             	cmp    $0x1,%eax
c0104376:	74 24                	je     c010439c <default_check+0x3e7>
c0104378:	c7 44 24 0c bc e2 10 	movl   $0xc010e2bc,0xc(%esp)
c010437f:	c0 
c0104380:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104387:	c0 
c0104388:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010438f:	00 
c0104390:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104397:	e8 3e ca ff ff       	call   c0100dda <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010439c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010439f:	83 c0 04             	add    $0x4,%eax
c01043a2:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c01043a9:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043ac:	8b 45 90             	mov    -0x70(%ebp),%eax
c01043af:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01043b2:	0f a3 10             	bt     %edx,(%eax)
c01043b5:	19 c0                	sbb    %eax,%eax
c01043b7:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c01043ba:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c01043be:	0f 95 c0             	setne  %al
c01043c1:	0f b6 c0             	movzbl %al,%eax
c01043c4:	85 c0                	test   %eax,%eax
c01043c6:	74 0b                	je     c01043d3 <default_check+0x41e>
c01043c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043cb:	8b 40 08             	mov    0x8(%eax),%eax
c01043ce:	83 f8 03             	cmp    $0x3,%eax
c01043d1:	74 24                	je     c01043f7 <default_check+0x442>
c01043d3:	c7 44 24 0c e4 e2 10 	movl   $0xc010e2e4,0xc(%esp)
c01043da:	c0 
c01043db:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01043e2:	c0 
c01043e3:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c01043ea:	00 
c01043eb:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01043f2:	e8 e3 c9 ff ff       	call   c0100dda <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01043f7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01043fe:	e8 77 0c 00 00       	call   c010507a <alloc_pages>
c0104403:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104406:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104409:	83 e8 20             	sub    $0x20,%eax
c010440c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010440f:	74 24                	je     c0104435 <default_check+0x480>
c0104411:	c7 44 24 0c 0a e3 10 	movl   $0xc010e30a,0xc(%esp)
c0104418:	c0 
c0104419:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104420:	c0 
c0104421:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c0104428:	00 
c0104429:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104430:	e8 a5 c9 ff ff       	call   c0100dda <__panic>
    free_page(p0);
c0104435:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010443c:	00 
c010443d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104440:	89 04 24             	mov    %eax,(%esp)
c0104443:	e8 9d 0c 00 00       	call   c01050e5 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104448:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010444f:	e8 26 0c 00 00       	call   c010507a <alloc_pages>
c0104454:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104457:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010445a:	83 c0 20             	add    $0x20,%eax
c010445d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104460:	74 24                	je     c0104486 <default_check+0x4d1>
c0104462:	c7 44 24 0c 28 e3 10 	movl   $0xc010e328,0xc(%esp)
c0104469:	c0 
c010446a:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104471:	c0 
c0104472:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104479:	00 
c010447a:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104481:	e8 54 c9 ff ff       	call   c0100dda <__panic>

    free_pages(p0, 2);
c0104486:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010448d:	00 
c010448e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104491:	89 04 24             	mov    %eax,(%esp)
c0104494:	e8 4c 0c 00 00       	call   c01050e5 <free_pages>
    free_page(p2);
c0104499:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044a0:	00 
c01044a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044a4:	89 04 24             	mov    %eax,(%esp)
c01044a7:	e8 39 0c 00 00       	call   c01050e5 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c01044ac:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c01044b3:	e8 c2 0b 00 00       	call   c010507a <alloc_pages>
c01044b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01044bf:	75 24                	jne    c01044e5 <default_check+0x530>
c01044c1:	c7 44 24 0c 48 e3 10 	movl   $0xc010e348,0xc(%esp)
c01044c8:	c0 
c01044c9:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01044d0:	c0 
c01044d1:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c01044d8:	00 
c01044d9:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01044e0:	e8 f5 c8 ff ff       	call   c0100dda <__panic>
    assert(alloc_page() == NULL);
c01044e5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01044ec:	e8 89 0b 00 00       	call   c010507a <alloc_pages>
c01044f1:	85 c0                	test   %eax,%eax
c01044f3:	74 24                	je     c0104519 <default_check+0x564>
c01044f5:	c7 44 24 0c a6 e1 10 	movl   $0xc010e1a6,0xc(%esp)
c01044fc:	c0 
c01044fd:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104504:	c0 
c0104505:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010450c:	00 
c010450d:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104514:	e8 c1 c8 ff ff       	call   c0100dda <__panic>

    assert(nr_free == 0);
c0104519:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c010451e:	85 c0                	test   %eax,%eax
c0104520:	74 24                	je     c0104546 <default_check+0x591>
c0104522:	c7 44 24 0c f9 e1 10 	movl   $0xc010e1f9,0xc(%esp)
c0104529:	c0 
c010452a:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c0104531:	c0 
c0104532:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c0104539:	00 
c010453a:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c0104541:	e8 94 c8 ff ff       	call   c0100dda <__panic>
    nr_free = nr_free_store;
c0104546:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104549:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_list = free_list_store;
c010454e:	8b 45 80             	mov    -0x80(%ebp),%eax
c0104551:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0104554:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0104559:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    free_pages(p0, 5);
c010455f:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104566:	00 
c0104567:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010456a:	89 04 24             	mov    %eax,(%esp)
c010456d:	e8 73 0b 00 00       	call   c01050e5 <free_pages>

    le = &free_list;
c0104572:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104579:	eb 1d                	jmp    c0104598 <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010457b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010457e:	83 e8 0c             	sub    $0xc,%eax
c0104581:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104584:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104588:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010458b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010458e:	8b 40 08             	mov    0x8(%eax),%eax
c0104591:	29 c2                	sub    %eax,%edx
c0104593:	89 d0                	mov    %edx,%eax
c0104595:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104598:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010459b:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010459e:	8b 45 88             	mov    -0x78(%ebp),%eax
c01045a1:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01045a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01045a7:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c01045ae:	75 cb                	jne    c010457b <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c01045b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045b4:	74 24                	je     c01045da <default_check+0x625>
c01045b6:	c7 44 24 0c 66 e3 10 	movl   $0xc010e366,0xc(%esp)
c01045bd:	c0 
c01045be:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01045c5:	c0 
c01045c6:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01045cd:	00 
c01045ce:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01045d5:	e8 00 c8 ff ff       	call   c0100dda <__panic>
    assert(total == 0);
c01045da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01045de:	74 24                	je     c0104604 <default_check+0x64f>
c01045e0:	c7 44 24 0c 71 e3 10 	movl   $0xc010e371,0xc(%esp)
c01045e7:	c0 
c01045e8:	c7 44 24 08 36 e0 10 	movl   $0xc010e036,0x8(%esp)
c01045ef:	c0 
c01045f0:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c01045f7:	00 
c01045f8:	c7 04 24 4b e0 10 c0 	movl   $0xc010e04b,(%esp)
c01045ff:	e8 d6 c7 ff ff       	call   c0100dda <__panic>
}
c0104604:	81 c4 94 00 00 00    	add    $0x94,%esp
c010460a:	5b                   	pop    %ebx
c010460b:	5d                   	pop    %ebp
c010460c:	c3                   	ret    

c010460d <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010460d:	55                   	push   %ebp
c010460e:	89 e5                	mov    %esp,%ebp
c0104610:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104613:	9c                   	pushf  
c0104614:	58                   	pop    %eax
c0104615:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104618:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010461b:	25 00 02 00 00       	and    $0x200,%eax
c0104620:	85 c0                	test   %eax,%eax
c0104622:	74 0c                	je     c0104630 <__intr_save+0x23>
        intr_disable();
c0104624:	e8 09 da ff ff       	call   c0102032 <intr_disable>
        return 1;
c0104629:	b8 01 00 00 00       	mov    $0x1,%eax
c010462e:	eb 05                	jmp    c0104635 <__intr_save+0x28>
    }
    return 0;
c0104630:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104635:	c9                   	leave  
c0104636:	c3                   	ret    

c0104637 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104637:	55                   	push   %ebp
c0104638:	89 e5                	mov    %esp,%ebp
c010463a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010463d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104641:	74 05                	je     c0104648 <__intr_restore+0x11>
        intr_enable();
c0104643:	e8 e4 d9 ff ff       	call   c010202c <intr_enable>
    }
}
c0104648:	c9                   	leave  
c0104649:	c3                   	ret    

c010464a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010464a:	55                   	push   %ebp
c010464b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010464d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104650:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104655:	29 c2                	sub    %eax,%edx
c0104657:	89 d0                	mov    %edx,%eax
c0104659:	c1 f8 05             	sar    $0x5,%eax
}
c010465c:	5d                   	pop    %ebp
c010465d:	c3                   	ret    

c010465e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010465e:	55                   	push   %ebp
c010465f:	89 e5                	mov    %esp,%ebp
c0104661:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104664:	8b 45 08             	mov    0x8(%ebp),%eax
c0104667:	89 04 24             	mov    %eax,(%esp)
c010466a:	e8 db ff ff ff       	call   c010464a <page2ppn>
c010466f:	c1 e0 0c             	shl    $0xc,%eax
}
c0104672:	c9                   	leave  
c0104673:	c3                   	ret    

c0104674 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104674:	55                   	push   %ebp
c0104675:	89 e5                	mov    %esp,%ebp
c0104677:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010467a:	8b 45 08             	mov    0x8(%ebp),%eax
c010467d:	c1 e8 0c             	shr    $0xc,%eax
c0104680:	89 c2                	mov    %eax,%edx
c0104682:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104687:	39 c2                	cmp    %eax,%edx
c0104689:	72 1c                	jb     c01046a7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010468b:	c7 44 24 08 ac e3 10 	movl   $0xc010e3ac,0x8(%esp)
c0104692:	c0 
c0104693:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010469a:	00 
c010469b:	c7 04 24 cb e3 10 c0 	movl   $0xc010e3cb,(%esp)
c01046a2:	e8 33 c7 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c01046a7:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01046ac:	8b 55 08             	mov    0x8(%ebp),%edx
c01046af:	c1 ea 0c             	shr    $0xc,%edx
c01046b2:	c1 e2 05             	shl    $0x5,%edx
c01046b5:	01 d0                	add    %edx,%eax
}
c01046b7:	c9                   	leave  
c01046b8:	c3                   	ret    

c01046b9 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01046b9:	55                   	push   %ebp
c01046ba:	89 e5                	mov    %esp,%ebp
c01046bc:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c01046bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01046c2:	89 04 24             	mov    %eax,(%esp)
c01046c5:	e8 94 ff ff ff       	call   c010465e <page2pa>
c01046ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046d0:	c1 e8 0c             	shr    $0xc,%eax
c01046d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01046d6:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01046db:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01046de:	72 23                	jb     c0104703 <page2kva+0x4a>
c01046e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01046e7:	c7 44 24 08 dc e3 10 	movl   $0xc010e3dc,0x8(%esp)
c01046ee:	c0 
c01046ef:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01046f6:	00 
c01046f7:	c7 04 24 cb e3 10 c0 	movl   $0xc010e3cb,(%esp)
c01046fe:	e8 d7 c6 ff ff       	call   c0100dda <__panic>
c0104703:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104706:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010470b:	c9                   	leave  
c010470c:	c3                   	ret    

c010470d <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010470d:	55                   	push   %ebp
c010470e:	89 e5                	mov    %esp,%ebp
c0104710:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104713:	8b 45 08             	mov    0x8(%ebp),%eax
c0104716:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104719:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104720:	77 23                	ja     c0104745 <kva2page+0x38>
c0104722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104725:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104729:	c7 44 24 08 00 e4 10 	movl   $0xc010e400,0x8(%esp)
c0104730:	c0 
c0104731:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104738:	00 
c0104739:	c7 04 24 cb e3 10 c0 	movl   $0xc010e3cb,(%esp)
c0104740:	e8 95 c6 ff ff       	call   c0100dda <__panic>
c0104745:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104748:	05 00 00 00 40       	add    $0x40000000,%eax
c010474d:	89 04 24             	mov    %eax,(%esp)
c0104750:	e8 1f ff ff ff       	call   c0104674 <pa2page>
}
c0104755:	c9                   	leave  
c0104756:	c3                   	ret    

c0104757 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104757:	55                   	push   %ebp
c0104758:	89 e5                	mov    %esp,%ebp
c010475a:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010475d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104760:	ba 01 00 00 00       	mov    $0x1,%edx
c0104765:	89 c1                	mov    %eax,%ecx
c0104767:	d3 e2                	shl    %cl,%edx
c0104769:	89 d0                	mov    %edx,%eax
c010476b:	89 04 24             	mov    %eax,(%esp)
c010476e:	e8 07 09 00 00       	call   c010507a <alloc_pages>
c0104773:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104776:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010477a:	75 07                	jne    c0104783 <__slob_get_free_pages+0x2c>
    return NULL;
c010477c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104781:	eb 0b                	jmp    c010478e <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104783:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104786:	89 04 24             	mov    %eax,(%esp)
c0104789:	e8 2b ff ff ff       	call   c01046b9 <page2kva>
}
c010478e:	c9                   	leave  
c010478f:	c3                   	ret    

c0104790 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104790:	55                   	push   %ebp
c0104791:	89 e5                	mov    %esp,%ebp
c0104793:	53                   	push   %ebx
c0104794:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104797:	8b 45 0c             	mov    0xc(%ebp),%eax
c010479a:	ba 01 00 00 00       	mov    $0x1,%edx
c010479f:	89 c1                	mov    %eax,%ecx
c01047a1:	d3 e2                	shl    %cl,%edx
c01047a3:	89 d0                	mov    %edx,%eax
c01047a5:	89 c3                	mov    %eax,%ebx
c01047a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01047aa:	89 04 24             	mov    %eax,(%esp)
c01047ad:	e8 5b ff ff ff       	call   c010470d <kva2page>
c01047b2:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01047b6:	89 04 24             	mov    %eax,(%esp)
c01047b9:	e8 27 09 00 00       	call   c01050e5 <free_pages>
}
c01047be:	83 c4 14             	add    $0x14,%esp
c01047c1:	5b                   	pop    %ebx
c01047c2:	5d                   	pop    %ebp
c01047c3:	c3                   	ret    

c01047c4 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01047c4:	55                   	push   %ebp
c01047c5:	89 e5                	mov    %esp,%ebp
c01047c7:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01047ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01047cd:	83 c0 08             	add    $0x8,%eax
c01047d0:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01047d5:	76 24                	jbe    c01047fb <slob_alloc+0x37>
c01047d7:	c7 44 24 0c 24 e4 10 	movl   $0xc010e424,0xc(%esp)
c01047de:	c0 
c01047df:	c7 44 24 08 43 e4 10 	movl   $0xc010e443,0x8(%esp)
c01047e6:	c0 
c01047e7:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01047ee:	00 
c01047ef:	c7 04 24 58 e4 10 c0 	movl   $0xc010e458,(%esp)
c01047f6:	e8 df c5 ff ff       	call   c0100dda <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01047fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104802:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104809:	8b 45 08             	mov    0x8(%ebp),%eax
c010480c:	83 c0 07             	add    $0x7,%eax
c010480f:	c1 e8 03             	shr    $0x3,%eax
c0104812:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104815:	e8 f3 fd ff ff       	call   c010460d <__intr_save>
c010481a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c010481d:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104822:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104825:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104828:	8b 40 04             	mov    0x4(%eax),%eax
c010482b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c010482e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104832:	74 25                	je     c0104859 <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104834:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104837:	8b 45 10             	mov    0x10(%ebp),%eax
c010483a:	01 d0                	add    %edx,%eax
c010483c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010483f:	8b 45 10             	mov    0x10(%ebp),%eax
c0104842:	f7 d8                	neg    %eax
c0104844:	21 d0                	and    %edx,%eax
c0104846:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104849:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010484c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010484f:	29 c2                	sub    %eax,%edx
c0104851:	89 d0                	mov    %edx,%eax
c0104853:	c1 f8 03             	sar    $0x3,%eax
c0104856:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104859:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010485c:	8b 00                	mov    (%eax),%eax
c010485e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104861:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104864:	01 ca                	add    %ecx,%edx
c0104866:	39 d0                	cmp    %edx,%eax
c0104868:	0f 8c aa 00 00 00    	jl     c0104918 <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c010486e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104872:	74 38                	je     c01048ac <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104874:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104877:	8b 00                	mov    (%eax),%eax
c0104879:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010487c:	89 c2                	mov    %eax,%edx
c010487e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104881:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104883:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104886:	8b 50 04             	mov    0x4(%eax),%edx
c0104889:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010488c:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010488f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104892:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104895:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104898:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010489b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010489e:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01048a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01048a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c01048ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048af:	8b 00                	mov    (%eax),%eax
c01048b1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01048b4:	75 0e                	jne    c01048c4 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c01048b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048b9:	8b 50 04             	mov    0x4(%eax),%edx
c01048bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048bf:	89 50 04             	mov    %edx,0x4(%eax)
c01048c2:	eb 3c                	jmp    c0104900 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c01048c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01048c7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01048ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048d1:	01 c2                	add    %eax,%edx
c01048d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d6:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01048d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048dc:	8b 40 04             	mov    0x4(%eax),%eax
c01048df:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048e2:	8b 12                	mov    (%edx),%edx
c01048e4:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01048e7:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01048e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048ec:	8b 40 04             	mov    0x4(%eax),%eax
c01048ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048f2:	8b 52 04             	mov    0x4(%edx),%edx
c01048f5:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01048f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01048fe:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104903:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104908:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010490b:	89 04 24             	mov    %eax,(%esp)
c010490e:	e8 24 fd ff ff       	call   c0104637 <__intr_restore>
			return cur;
c0104913:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104916:	eb 7f                	jmp    c0104997 <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104918:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c010491d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104920:	75 61                	jne    c0104983 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104922:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104925:	89 04 24             	mov    %eax,(%esp)
c0104928:	e8 0a fd ff ff       	call   c0104637 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c010492d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104934:	75 07                	jne    c010493d <slob_alloc+0x179>
				return 0;
c0104936:	b8 00 00 00 00       	mov    $0x0,%eax
c010493b:	eb 5a                	jmp    c0104997 <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c010493d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104944:	00 
c0104945:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104948:	89 04 24             	mov    %eax,(%esp)
c010494b:	e8 07 fe ff ff       	call   c0104757 <__slob_get_free_pages>
c0104950:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104953:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104957:	75 07                	jne    c0104960 <slob_alloc+0x19c>
				return 0;
c0104959:	b8 00 00 00 00       	mov    $0x0,%eax
c010495e:	eb 37                	jmp    c0104997 <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104960:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104967:	00 
c0104968:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010496b:	89 04 24             	mov    %eax,(%esp)
c010496e:	e8 26 00 00 00       	call   c0104999 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104973:	e8 95 fc ff ff       	call   c010460d <__intr_save>
c0104978:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c010497b:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104980:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104983:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104986:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010498c:	8b 40 04             	mov    0x4(%eax),%eax
c010498f:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104992:	e9 97 fe ff ff       	jmp    c010482e <slob_alloc+0x6a>
}
c0104997:	c9                   	leave  
c0104998:	c3                   	ret    

c0104999 <slob_free>:

static void slob_free(void *block, int size)
{
c0104999:	55                   	push   %ebp
c010499a:	89 e5                	mov    %esp,%ebp
c010499c:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c010499f:	8b 45 08             	mov    0x8(%ebp),%eax
c01049a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01049a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01049a9:	75 05                	jne    c01049b0 <slob_free+0x17>
		return;
c01049ab:	e9 ff 00 00 00       	jmp    c0104aaf <slob_free+0x116>

	if (size)
c01049b0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01049b4:	74 10                	je     c01049c6 <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c01049b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049b9:	83 c0 07             	add    $0x7,%eax
c01049bc:	c1 e8 03             	shr    $0x3,%eax
c01049bf:	89 c2                	mov    %eax,%edx
c01049c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049c4:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01049c6:	e8 42 fc ff ff       	call   c010460d <__intr_save>
c01049cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01049ce:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c01049d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049d6:	eb 27                	jmp    c01049ff <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01049d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049db:	8b 40 04             	mov    0x4(%eax),%eax
c01049de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049e1:	77 13                	ja     c01049f6 <slob_free+0x5d>
c01049e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049e9:	77 27                	ja     c0104a12 <slob_free+0x79>
c01049eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ee:	8b 40 04             	mov    0x4(%eax),%eax
c01049f1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01049f4:	77 1c                	ja     c0104a12 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01049f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049f9:	8b 40 04             	mov    0x4(%eax),%eax
c01049fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01049ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a02:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a05:	76 d1                	jbe    c01049d8 <slob_free+0x3f>
c0104a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a0a:	8b 40 04             	mov    0x4(%eax),%eax
c0104a0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a10:	76 c6                	jbe    c01049d8 <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104a12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a15:	8b 00                	mov    (%eax),%eax
c0104a17:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a21:	01 c2                	add    %eax,%edx
c0104a23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a26:	8b 40 04             	mov    0x4(%eax),%eax
c0104a29:	39 c2                	cmp    %eax,%edx
c0104a2b:	75 25                	jne    c0104a52 <slob_free+0xb9>
		b->units += cur->next->units;
c0104a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a30:	8b 10                	mov    (%eax),%edx
c0104a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a35:	8b 40 04             	mov    0x4(%eax),%eax
c0104a38:	8b 00                	mov    (%eax),%eax
c0104a3a:	01 c2                	add    %eax,%edx
c0104a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a3f:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a44:	8b 40 04             	mov    0x4(%eax),%eax
c0104a47:	8b 50 04             	mov    0x4(%eax),%edx
c0104a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4d:	89 50 04             	mov    %edx,0x4(%eax)
c0104a50:	eb 0c                	jmp    c0104a5e <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a55:	8b 50 04             	mov    0x4(%eax),%edx
c0104a58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a5b:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a61:	8b 00                	mov    (%eax),%eax
c0104a63:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a6d:	01 d0                	add    %edx,%eax
c0104a6f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a72:	75 1f                	jne    c0104a93 <slob_free+0xfa>
		cur->units += b->units;
c0104a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a77:	8b 10                	mov    (%eax),%edx
c0104a79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a7c:	8b 00                	mov    (%eax),%eax
c0104a7e:	01 c2                	add    %eax,%edx
c0104a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a83:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104a85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a88:	8b 50 04             	mov    0x4(%eax),%edx
c0104a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8e:	89 50 04             	mov    %edx,0x4(%eax)
c0104a91:	eb 09                	jmp    c0104a9c <slob_free+0x103>
	} else
		cur->next = b;
c0104a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a96:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104a99:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104a9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a9f:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104aa7:	89 04 24             	mov    %eax,(%esp)
c0104aaa:	e8 88 fb ff ff       	call   c0104637 <__intr_restore>
}
c0104aaf:	c9                   	leave  
c0104ab0:	c3                   	ret    

c0104ab1 <slob_init>:



void
slob_init(void) {
c0104ab1:	55                   	push   %ebp
c0104ab2:	89 e5                	mov    %esp,%ebp
c0104ab4:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104ab7:	c7 04 24 6a e4 10 c0 	movl   $0xc010e46a,(%esp)
c0104abe:	e8 95 b8 ff ff       	call   c0100358 <cprintf>
}
c0104ac3:	c9                   	leave  
c0104ac4:	c3                   	ret    

c0104ac5 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104ac5:	55                   	push   %ebp
c0104ac6:	89 e5                	mov    %esp,%ebp
c0104ac8:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104acb:	e8 e1 ff ff ff       	call   c0104ab1 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104ad0:	c7 04 24 7e e4 10 c0 	movl   $0xc010e47e,(%esp)
c0104ad7:	e8 7c b8 ff ff       	call   c0100358 <cprintf>
}
c0104adc:	c9                   	leave  
c0104add:	c3                   	ret    

c0104ade <slob_allocated>:

size_t
slob_allocated(void) {
c0104ade:	55                   	push   %ebp
c0104adf:	89 e5                	mov    %esp,%ebp
  return 0;
c0104ae1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ae6:	5d                   	pop    %ebp
c0104ae7:	c3                   	ret    

c0104ae8 <kallocated>:

size_t
kallocated(void) {
c0104ae8:	55                   	push   %ebp
c0104ae9:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104aeb:	e8 ee ff ff ff       	call   c0104ade <slob_allocated>
}
c0104af0:	5d                   	pop    %ebp
c0104af1:	c3                   	ret    

c0104af2 <find_order>:

static int find_order(int size)
{
c0104af2:	55                   	push   %ebp
c0104af3:	89 e5                	mov    %esp,%ebp
c0104af5:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104af8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104aff:	eb 07                	jmp    c0104b08 <find_order+0x16>
		order++;
c0104b01:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104b05:	d1 7d 08             	sarl   0x8(%ebp)
c0104b08:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104b0f:	7f f0                	jg     c0104b01 <find_order+0xf>
		order++;
	return order;
c0104b11:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104b14:	c9                   	leave  
c0104b15:	c3                   	ret    

c0104b16 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104b16:	55                   	push   %ebp
c0104b17:	89 e5                	mov    %esp,%ebp
c0104b19:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104b1c:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104b23:	77 38                	ja     c0104b5d <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104b25:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b28:	8d 50 08             	lea    0x8(%eax),%edx
c0104b2b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b32:	00 
c0104b33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b3a:	89 14 24             	mov    %edx,(%esp)
c0104b3d:	e8 82 fc ff ff       	call   c01047c4 <slob_alloc>
c0104b42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104b45:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b49:	74 08                	je     c0104b53 <__kmalloc+0x3d>
c0104b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b4e:	83 c0 08             	add    $0x8,%eax
c0104b51:	eb 05                	jmp    c0104b58 <__kmalloc+0x42>
c0104b53:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b58:	e9 a6 00 00 00       	jmp    c0104c03 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104b5d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104b64:	00 
c0104b65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104b6c:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104b73:	e8 4c fc ff ff       	call   c01047c4 <slob_alloc>
c0104b78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104b7b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b7f:	75 07                	jne    c0104b88 <__kmalloc+0x72>
		return 0;
c0104b81:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b86:	eb 7b                	jmp    c0104c03 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104b88:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b8b:	89 04 24             	mov    %eax,(%esp)
c0104b8e:	e8 5f ff ff ff       	call   c0104af2 <find_order>
c0104b93:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b96:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104b98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b9b:	8b 00                	mov    (%eax),%eax
c0104b9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ba4:	89 04 24             	mov    %eax,(%esp)
c0104ba7:	e8 ab fb ff ff       	call   c0104757 <__slob_get_free_pages>
c0104bac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104baf:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bb5:	8b 40 04             	mov    0x4(%eax),%eax
c0104bb8:	85 c0                	test   %eax,%eax
c0104bba:	74 2f                	je     c0104beb <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104bbc:	e8 4c fa ff ff       	call   c010460d <__intr_save>
c0104bc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104bc4:	8b 15 84 33 1c c0    	mov    0xc01c3384,%edx
c0104bca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bcd:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104bd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bd3:	a3 84 33 1c c0       	mov    %eax,0xc01c3384
		spin_unlock_irqrestore(&block_lock, flags);
c0104bd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104bdb:	89 04 24             	mov    %eax,(%esp)
c0104bde:	e8 54 fa ff ff       	call   c0104637 <__intr_restore>
		return bb->pages;
c0104be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104be6:	8b 40 04             	mov    0x4(%eax),%eax
c0104be9:	eb 18                	jmp    c0104c03 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104beb:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104bf2:	00 
c0104bf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf6:	89 04 24             	mov    %eax,(%esp)
c0104bf9:	e8 9b fd ff ff       	call   c0104999 <slob_free>
	return 0;
c0104bfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104c03:	c9                   	leave  
c0104c04:	c3                   	ret    

c0104c05 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104c05:	55                   	push   %ebp
c0104c06:	89 e5                	mov    %esp,%ebp
c0104c08:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104c0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104c12:	00 
c0104c13:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c16:	89 04 24             	mov    %eax,(%esp)
c0104c19:	e8 f8 fe ff ff       	call   c0104b16 <__kmalloc>
}
c0104c1e:	c9                   	leave  
c0104c1f:	c3                   	ret    

c0104c20 <kfree>:


void kfree(void *block)
{
c0104c20:	55                   	push   %ebp
c0104c21:	89 e5                	mov    %esp,%ebp
c0104c23:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104c26:	c7 45 f0 84 33 1c c0 	movl   $0xc01c3384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104c2d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c31:	75 05                	jne    c0104c38 <kfree+0x18>
		return;
c0104c33:	e9 a2 00 00 00       	jmp    c0104cda <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104c38:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c3b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104c40:	85 c0                	test   %eax,%eax
c0104c42:	75 7f                	jne    c0104cc3 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104c44:	e8 c4 f9 ff ff       	call   c010460d <__intr_save>
c0104c49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104c4c:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c0104c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c54:	eb 5c                	jmp    c0104cb2 <kfree+0x92>
			if (bb->pages == block) {
c0104c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c59:	8b 40 04             	mov    0x4(%eax),%eax
c0104c5c:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104c5f:	75 3f                	jne    c0104ca0 <kfree+0x80>
				*last = bb->next;
c0104c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c64:	8b 50 08             	mov    0x8(%eax),%edx
c0104c67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c6a:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104c6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c6f:	89 04 24             	mov    %eax,(%esp)
c0104c72:	e8 c0 f9 ff ff       	call   c0104637 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c7a:	8b 10                	mov    (%eax),%edx
c0104c7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104c83:	89 04 24             	mov    %eax,(%esp)
c0104c86:	e8 05 fb ff ff       	call   c0104790 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104c8b:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104c92:	00 
c0104c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c96:	89 04 24             	mov    %eax,(%esp)
c0104c99:	e8 fb fc ff ff       	call   c0104999 <slob_free>
				return;
c0104c9e:	eb 3a                	jmp    c0104cda <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca3:	83 c0 08             	add    $0x8,%eax
c0104ca6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cac:	8b 40 08             	mov    0x8(%eax),%eax
c0104caf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cb2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cb6:	75 9e                	jne    c0104c56 <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104cb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104cbb:	89 04 24             	mov    %eax,(%esp)
c0104cbe:	e8 74 f9 ff ff       	call   c0104637 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104cc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cc6:	83 e8 08             	sub    $0x8,%eax
c0104cc9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cd0:	00 
c0104cd1:	89 04 24             	mov    %eax,(%esp)
c0104cd4:	e8 c0 fc ff ff       	call   c0104999 <slob_free>
	return;
c0104cd9:	90                   	nop
}
c0104cda:	c9                   	leave  
c0104cdb:	c3                   	ret    

c0104cdc <ksize>:


unsigned int ksize(const void *block)
{
c0104cdc:	55                   	push   %ebp
c0104cdd:	89 e5                	mov    %esp,%ebp
c0104cdf:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104ce2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ce6:	75 07                	jne    c0104cef <ksize+0x13>
		return 0;
c0104ce8:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ced:	eb 6b                	jmp    c0104d5a <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cef:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cf7:	85 c0                	test   %eax,%eax
c0104cf9:	75 54                	jne    c0104d4f <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104cfb:	e8 0d f9 ff ff       	call   c010460d <__intr_save>
c0104d00:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104d03:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c0104d08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d0b:	eb 31                	jmp    c0104d3e <ksize+0x62>
			if (bb->pages == block) {
c0104d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d10:	8b 40 04             	mov    0x4(%eax),%eax
c0104d13:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d16:	75 1d                	jne    c0104d35 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d1b:	89 04 24             	mov    %eax,(%esp)
c0104d1e:	e8 14 f9 ff ff       	call   c0104637 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104d23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d26:	8b 00                	mov    (%eax),%eax
c0104d28:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104d2d:	89 c1                	mov    %eax,%ecx
c0104d2f:	d3 e2                	shl    %cl,%edx
c0104d31:	89 d0                	mov    %edx,%eax
c0104d33:	eb 25                	jmp    c0104d5a <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104d35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d38:	8b 40 08             	mov    0x8(%eax),%eax
c0104d3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d42:	75 c9                	jne    c0104d0d <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d47:	89 04 24             	mov    %eax,(%esp)
c0104d4a:	e8 e8 f8 ff ff       	call   c0104637 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104d4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d52:	83 e8 08             	sub    $0x8,%eax
c0104d55:	8b 00                	mov    (%eax),%eax
c0104d57:	c1 e0 03             	shl    $0x3,%eax
}
c0104d5a:	c9                   	leave  
c0104d5b:	c3                   	ret    

c0104d5c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104d5c:	55                   	push   %ebp
c0104d5d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104d5f:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d62:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104d67:	29 c2                	sub    %eax,%edx
c0104d69:	89 d0                	mov    %edx,%eax
c0104d6b:	c1 f8 05             	sar    $0x5,%eax
}
c0104d6e:	5d                   	pop    %ebp
c0104d6f:	c3                   	ret    

c0104d70 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104d70:	55                   	push   %ebp
c0104d71:	89 e5                	mov    %esp,%ebp
c0104d73:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104d76:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d79:	89 04 24             	mov    %eax,(%esp)
c0104d7c:	e8 db ff ff ff       	call   c0104d5c <page2ppn>
c0104d81:	c1 e0 0c             	shl    $0xc,%eax
}
c0104d84:	c9                   	leave  
c0104d85:	c3                   	ret    

c0104d86 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104d86:	55                   	push   %ebp
c0104d87:	89 e5                	mov    %esp,%ebp
c0104d89:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104d8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d8f:	c1 e8 0c             	shr    $0xc,%eax
c0104d92:	89 c2                	mov    %eax,%edx
c0104d94:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104d99:	39 c2                	cmp    %eax,%edx
c0104d9b:	72 1c                	jb     c0104db9 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104d9d:	c7 44 24 08 9c e4 10 	movl   $0xc010e49c,0x8(%esp)
c0104da4:	c0 
c0104da5:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104dac:	00 
c0104dad:	c7 04 24 bb e4 10 c0 	movl   $0xc010e4bb,(%esp)
c0104db4:	e8 21 c0 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0104db9:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104dbe:	8b 55 08             	mov    0x8(%ebp),%edx
c0104dc1:	c1 ea 0c             	shr    $0xc,%edx
c0104dc4:	c1 e2 05             	shl    $0x5,%edx
c0104dc7:	01 d0                	add    %edx,%eax
}
c0104dc9:	c9                   	leave  
c0104dca:	c3                   	ret    

c0104dcb <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104dcb:	55                   	push   %ebp
c0104dcc:	89 e5                	mov    %esp,%ebp
c0104dce:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104dd1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dd4:	89 04 24             	mov    %eax,(%esp)
c0104dd7:	e8 94 ff ff ff       	call   c0104d70 <page2pa>
c0104ddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104de2:	c1 e8 0c             	shr    $0xc,%eax
c0104de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104de8:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104ded:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104df0:	72 23                	jb     c0104e15 <page2kva+0x4a>
c0104df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104df9:	c7 44 24 08 cc e4 10 	movl   $0xc010e4cc,0x8(%esp)
c0104e00:	c0 
c0104e01:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104e08:	00 
c0104e09:	c7 04 24 bb e4 10 c0 	movl   $0xc010e4bb,(%esp)
c0104e10:	e8 c5 bf ff ff       	call   c0100dda <__panic>
c0104e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e18:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104e1d:	c9                   	leave  
c0104e1e:	c3                   	ret    

c0104e1f <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104e1f:	55                   	push   %ebp
c0104e20:	89 e5                	mov    %esp,%ebp
c0104e22:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104e25:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e28:	83 e0 01             	and    $0x1,%eax
c0104e2b:	85 c0                	test   %eax,%eax
c0104e2d:	75 1c                	jne    c0104e4b <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104e2f:	c7 44 24 08 f0 e4 10 	movl   $0xc010e4f0,0x8(%esp)
c0104e36:	c0 
c0104e37:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104e3e:	00 
c0104e3f:	c7 04 24 bb e4 10 c0 	movl   $0xc010e4bb,(%esp)
c0104e46:	e8 8f bf ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104e4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104e53:	89 04 24             	mov    %eax,(%esp)
c0104e56:	e8 2b ff ff ff       	call   c0104d86 <pa2page>
}
c0104e5b:	c9                   	leave  
c0104e5c:	c3                   	ret    

c0104e5d <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104e5d:	55                   	push   %ebp
c0104e5e:	89 e5                	mov    %esp,%ebp
c0104e60:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104e63:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e66:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104e6b:	89 04 24             	mov    %eax,(%esp)
c0104e6e:	e8 13 ff ff ff       	call   c0104d86 <pa2page>
}
c0104e73:	c9                   	leave  
c0104e74:	c3                   	ret    

c0104e75 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104e75:	55                   	push   %ebp
c0104e76:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104e78:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e7b:	8b 00                	mov    (%eax),%eax
}
c0104e7d:	5d                   	pop    %ebp
c0104e7e:	c3                   	ret    

c0104e7f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104e7f:	55                   	push   %ebp
c0104e80:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104e82:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e85:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e88:	89 10                	mov    %edx,(%eax)
}
c0104e8a:	5d                   	pop    %ebp
c0104e8b:	c3                   	ret    

c0104e8c <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104e8c:	55                   	push   %ebp
c0104e8d:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e92:	8b 00                	mov    (%eax),%eax
c0104e94:	8d 50 01             	lea    0x1(%eax),%edx
c0104e97:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9a:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104e9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9f:	8b 00                	mov    (%eax),%eax
}
c0104ea1:	5d                   	pop    %ebp
c0104ea2:	c3                   	ret    

c0104ea3 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104ea3:	55                   	push   %ebp
c0104ea4:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ea9:	8b 00                	mov    (%eax),%eax
c0104eab:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104eae:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eb1:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eb6:	8b 00                	mov    (%eax),%eax
}
c0104eb8:	5d                   	pop    %ebp
c0104eb9:	c3                   	ret    

c0104eba <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104eba:	55                   	push   %ebp
c0104ebb:	89 e5                	mov    %esp,%ebp
c0104ebd:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104ec0:	9c                   	pushf  
c0104ec1:	58                   	pop    %eax
c0104ec2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104ec8:	25 00 02 00 00       	and    $0x200,%eax
c0104ecd:	85 c0                	test   %eax,%eax
c0104ecf:	74 0c                	je     c0104edd <__intr_save+0x23>
        intr_disable();
c0104ed1:	e8 5c d1 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0104ed6:	b8 01 00 00 00       	mov    $0x1,%eax
c0104edb:	eb 05                	jmp    c0104ee2 <__intr_save+0x28>
    }
    return 0;
c0104edd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ee2:	c9                   	leave  
c0104ee3:	c3                   	ret    

c0104ee4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104ee4:	55                   	push   %ebp
c0104ee5:	89 e5                	mov    %esp,%ebp
c0104ee7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104eea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104eee:	74 05                	je     c0104ef5 <__intr_restore+0x11>
        intr_enable();
c0104ef0:	e8 37 d1 ff ff       	call   c010202c <intr_enable>
    }
}
c0104ef5:	c9                   	leave  
c0104ef6:	c3                   	ret    

c0104ef7 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104ef7:	55                   	push   %ebp
c0104ef8:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efd:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104f00:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f05:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104f07:	b8 23 00 00 00       	mov    $0x23,%eax
c0104f0c:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104f0e:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f13:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104f15:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f1a:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104f1c:	b8 10 00 00 00       	mov    $0x10,%eax
c0104f21:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104f23:	ea 2a 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104f2a
}
c0104f2a:	5d                   	pop    %ebp
c0104f2b:	c3                   	ret    

c0104f2c <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104f2c:	55                   	push   %ebp
c0104f2d:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104f2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f32:	a3 c4 33 1c c0       	mov    %eax,0xc01c33c4
}
c0104f37:	5d                   	pop    %ebp
c0104f38:	c3                   	ret    

c0104f39 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104f39:	55                   	push   %ebp
c0104f3a:	89 e5                	mov    %esp,%ebp
c0104f3c:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0104f3f:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0104f44:	89 04 24             	mov    %eax,(%esp)
c0104f47:	e8 e0 ff ff ff       	call   c0104f2c <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0104f4c:	66 c7 05 c8 33 1c c0 	movw   $0x10,0xc01c33c8
c0104f53:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0104f55:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
c0104f5c:	68 00 
c0104f5e:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0104f63:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
c0104f69:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0104f6e:	c1 e8 10             	shr    $0x10,%eax
c0104f71:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
c0104f76:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f7d:	83 e0 f0             	and    $0xfffffff0,%eax
c0104f80:	83 c8 09             	or     $0x9,%eax
c0104f83:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f88:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f8f:	83 e0 ef             	and    $0xffffffef,%eax
c0104f92:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104f97:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104f9e:	83 e0 9f             	and    $0xffffff9f,%eax
c0104fa1:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104fa6:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0104fad:	83 c8 80             	or     $0xffffff80,%eax
c0104fb0:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0104fb5:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104fbc:	83 e0 f0             	and    $0xfffffff0,%eax
c0104fbf:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104fc4:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104fcb:	83 e0 ef             	and    $0xffffffef,%eax
c0104fce:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104fd3:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104fda:	83 e0 df             	and    $0xffffffdf,%eax
c0104fdd:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104fe2:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104fe9:	83 c8 40             	or     $0x40,%eax
c0104fec:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0104ff1:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0104ff8:	83 e0 7f             	and    $0x7f,%eax
c0104ffb:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105000:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0105005:	c1 e8 18             	shr    $0x18,%eax
c0105008:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c010500d:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
c0105014:	e8 de fe ff ff       	call   c0104ef7 <lgdt>
c0105019:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010501f:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0105023:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0105026:	c9                   	leave  
c0105027:	c3                   	ret    

c0105028 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0105028:	55                   	push   %ebp
c0105029:	89 e5                	mov    %esp,%ebp
c010502b:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c010502e:	c7 05 e8 54 1c c0 90 	movl   $0xc010e390,0xc01c54e8
c0105035:	e3 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105038:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c010503d:	8b 00                	mov    (%eax),%eax
c010503f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105043:	c7 04 24 1c e5 10 c0 	movl   $0xc010e51c,(%esp)
c010504a:	e8 09 b3 ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c010504f:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105054:	8b 40 04             	mov    0x4(%eax),%eax
c0105057:	ff d0                	call   *%eax
}
c0105059:	c9                   	leave  
c010505a:	c3                   	ret    

c010505b <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010505b:	55                   	push   %ebp
c010505c:	89 e5                	mov    %esp,%ebp
c010505e:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105061:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105066:	8b 40 08             	mov    0x8(%eax),%eax
c0105069:	8b 55 0c             	mov    0xc(%ebp),%edx
c010506c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105070:	8b 55 08             	mov    0x8(%ebp),%edx
c0105073:	89 14 24             	mov    %edx,(%esp)
c0105076:	ff d0                	call   *%eax
}
c0105078:	c9                   	leave  
c0105079:	c3                   	ret    

c010507a <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010507a:	55                   	push   %ebp
c010507b:	89 e5                	mov    %esp,%ebp
c010507d:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105080:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105087:	e8 2e fe ff ff       	call   c0104eba <__intr_save>
c010508c:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010508f:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105094:	8b 40 0c             	mov    0xc(%eax),%eax
c0105097:	8b 55 08             	mov    0x8(%ebp),%edx
c010509a:	89 14 24             	mov    %edx,(%esp)
c010509d:	ff d0                	call   *%eax
c010509f:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01050a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050a5:	89 04 24             	mov    %eax,(%esp)
c01050a8:	e8 37 fe ff ff       	call   c0104ee4 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01050ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050b1:	75 2d                	jne    c01050e0 <alloc_pages+0x66>
c01050b3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01050b7:	77 27                	ja     c01050e0 <alloc_pages+0x66>
c01050b9:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c01050be:	85 c0                	test   %eax,%eax
c01050c0:	74 1e                	je     c01050e0 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01050c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01050c5:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01050ca:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01050d1:	00 
c01050d2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01050d6:	89 04 24             	mov    %eax,(%esp)
c01050d9:	e8 84 1d 00 00       	call   c0106e62 <swap_out>
    }
c01050de:	eb a7                	jmp    c0105087 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01050e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01050e3:	c9                   	leave  
c01050e4:	c3                   	ret    

c01050e5 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01050e5:	55                   	push   %ebp
c01050e6:	89 e5                	mov    %esp,%ebp
c01050e8:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01050eb:	e8 ca fd ff ff       	call   c0104eba <__intr_save>
c01050f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01050f3:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01050f8:	8b 40 10             	mov    0x10(%eax),%eax
c01050fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01050fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105102:	8b 55 08             	mov    0x8(%ebp),%edx
c0105105:	89 14 24             	mov    %edx,(%esp)
c0105108:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c010510a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010510d:	89 04 24             	mov    %eax,(%esp)
c0105110:	e8 cf fd ff ff       	call   c0104ee4 <__intr_restore>
}
c0105115:	c9                   	leave  
c0105116:	c3                   	ret    

c0105117 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0105117:	55                   	push   %ebp
c0105118:	89 e5                	mov    %esp,%ebp
c010511a:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010511d:	e8 98 fd ff ff       	call   c0104eba <__intr_save>
c0105122:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0105125:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c010512a:	8b 40 14             	mov    0x14(%eax),%eax
c010512d:	ff d0                	call   *%eax
c010512f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105135:	89 04 24             	mov    %eax,(%esp)
c0105138:	e8 a7 fd ff ff       	call   c0104ee4 <__intr_restore>
    return ret;
c010513d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105140:	c9                   	leave  
c0105141:	c3                   	ret    

c0105142 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105142:	55                   	push   %ebp
c0105143:	89 e5                	mov    %esp,%ebp
c0105145:	57                   	push   %edi
c0105146:	56                   	push   %esi
c0105147:	53                   	push   %ebx
c0105148:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010514e:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105155:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010515c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105163:	c7 04 24 33 e5 10 c0 	movl   $0xc010e533,(%esp)
c010516a:	e8 e9 b1 ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010516f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105176:	e9 15 01 00 00       	jmp    c0105290 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010517b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010517e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105181:	89 d0                	mov    %edx,%eax
c0105183:	c1 e0 02             	shl    $0x2,%eax
c0105186:	01 d0                	add    %edx,%eax
c0105188:	c1 e0 02             	shl    $0x2,%eax
c010518b:	01 c8                	add    %ecx,%eax
c010518d:	8b 50 08             	mov    0x8(%eax),%edx
c0105190:	8b 40 04             	mov    0x4(%eax),%eax
c0105193:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105196:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105199:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010519c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010519f:	89 d0                	mov    %edx,%eax
c01051a1:	c1 e0 02             	shl    $0x2,%eax
c01051a4:	01 d0                	add    %edx,%eax
c01051a6:	c1 e0 02             	shl    $0x2,%eax
c01051a9:	01 c8                	add    %ecx,%eax
c01051ab:	8b 48 0c             	mov    0xc(%eax),%ecx
c01051ae:	8b 58 10             	mov    0x10(%eax),%ebx
c01051b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01051b4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01051b7:	01 c8                	add    %ecx,%eax
c01051b9:	11 da                	adc    %ebx,%edx
c01051bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01051be:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01051c1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051c7:	89 d0                	mov    %edx,%eax
c01051c9:	c1 e0 02             	shl    $0x2,%eax
c01051cc:	01 d0                	add    %edx,%eax
c01051ce:	c1 e0 02             	shl    $0x2,%eax
c01051d1:	01 c8                	add    %ecx,%eax
c01051d3:	83 c0 14             	add    $0x14,%eax
c01051d6:	8b 00                	mov    (%eax),%eax
c01051d8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01051de:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01051e1:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01051e4:	83 c0 ff             	add    $0xffffffff,%eax
c01051e7:	83 d2 ff             	adc    $0xffffffff,%edx
c01051ea:	89 c6                	mov    %eax,%esi
c01051ec:	89 d7                	mov    %edx,%edi
c01051ee:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01051f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051f4:	89 d0                	mov    %edx,%eax
c01051f6:	c1 e0 02             	shl    $0x2,%eax
c01051f9:	01 d0                	add    %edx,%eax
c01051fb:	c1 e0 02             	shl    $0x2,%eax
c01051fe:	01 c8                	add    %ecx,%eax
c0105200:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105203:	8b 58 10             	mov    0x10(%eax),%ebx
c0105206:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c010520c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105210:	89 74 24 14          	mov    %esi,0x14(%esp)
c0105214:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105218:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010521b:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010521e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105222:	89 54 24 10          	mov    %edx,0x10(%esp)
c0105226:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010522a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c010522e:	c7 04 24 40 e5 10 c0 	movl   $0xc010e540,(%esp)
c0105235:	e8 1e b1 ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010523a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010523d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105240:	89 d0                	mov    %edx,%eax
c0105242:	c1 e0 02             	shl    $0x2,%eax
c0105245:	01 d0                	add    %edx,%eax
c0105247:	c1 e0 02             	shl    $0x2,%eax
c010524a:	01 c8                	add    %ecx,%eax
c010524c:	83 c0 14             	add    $0x14,%eax
c010524f:	8b 00                	mov    (%eax),%eax
c0105251:	83 f8 01             	cmp    $0x1,%eax
c0105254:	75 36                	jne    c010528c <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c0105256:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105259:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010525c:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010525f:	77 2b                	ja     c010528c <page_init+0x14a>
c0105261:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105264:	72 05                	jb     c010526b <page_init+0x129>
c0105266:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105269:	73 21                	jae    c010528c <page_init+0x14a>
c010526b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010526f:	77 1b                	ja     c010528c <page_init+0x14a>
c0105271:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105275:	72 09                	jb     c0105280 <page_init+0x13e>
c0105277:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010527e:	77 0c                	ja     c010528c <page_init+0x14a>
                maxpa = end;
c0105280:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105283:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105286:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105289:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010528c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105290:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105293:	8b 00                	mov    (%eax),%eax
c0105295:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105298:	0f 8f dd fe ff ff    	jg     c010517b <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010529e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01052a2:	72 1d                	jb     c01052c1 <page_init+0x17f>
c01052a4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01052a8:	77 09                	ja     c01052b3 <page_init+0x171>
c01052aa:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01052b1:	76 0e                	jbe    c01052c1 <page_init+0x17f>
        maxpa = KMEMSIZE;
c01052b3:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01052ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01052c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01052c7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01052cb:	c1 ea 0c             	shr    $0xc,%edx
c01052ce:	a3 a0 33 1c c0       	mov    %eax,0xc01c33a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01052d3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01052da:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c01052df:	8d 50 ff             	lea    -0x1(%eax),%edx
c01052e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01052e5:	01 d0                	add    %edx,%eax
c01052e7:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01052ea:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01052ed:	ba 00 00 00 00       	mov    $0x0,%edx
c01052f2:	f7 75 ac             	divl   -0x54(%ebp)
c01052f5:	89 d0                	mov    %edx,%eax
c01052f7:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01052fa:	29 c2                	sub    %eax,%edx
c01052fc:	89 d0                	mov    %edx,%eax
c01052fe:	a3 f0 54 1c c0       	mov    %eax,0xc01c54f0

    for (i = 0; i < npage; i ++) {
c0105303:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010530a:	eb 27                	jmp    c0105333 <page_init+0x1f1>
        SetPageReserved(pages + i);
c010530c:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0105311:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105314:	c1 e2 05             	shl    $0x5,%edx
c0105317:	01 d0                	add    %edx,%eax
c0105319:	83 c0 04             	add    $0x4,%eax
c010531c:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0105323:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105326:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0105329:	8b 55 90             	mov    -0x70(%ebp),%edx
c010532c:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010532f:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105333:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105336:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010533b:	39 c2                	cmp    %eax,%edx
c010533d:	72 cd                	jb     c010530c <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010533f:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105344:	c1 e0 05             	shl    $0x5,%eax
c0105347:	89 c2                	mov    %eax,%edx
c0105349:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010534e:	01 d0                	add    %edx,%eax
c0105350:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105353:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010535a:	77 23                	ja     c010537f <page_init+0x23d>
c010535c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010535f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105363:	c7 44 24 08 70 e5 10 	movl   $0xc010e570,0x8(%esp)
c010536a:	c0 
c010536b:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105372:	00 
c0105373:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010537a:	e8 5b ba ff ff       	call   c0100dda <__panic>
c010537f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105382:	05 00 00 00 40       	add    $0x40000000,%eax
c0105387:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010538a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105391:	e9 74 01 00 00       	jmp    c010550a <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105396:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105399:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010539c:	89 d0                	mov    %edx,%eax
c010539e:	c1 e0 02             	shl    $0x2,%eax
c01053a1:	01 d0                	add    %edx,%eax
c01053a3:	c1 e0 02             	shl    $0x2,%eax
c01053a6:	01 c8                	add    %ecx,%eax
c01053a8:	8b 50 08             	mov    0x8(%eax),%edx
c01053ab:	8b 40 04             	mov    0x4(%eax),%eax
c01053ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01053b1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01053b4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053b7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053ba:	89 d0                	mov    %edx,%eax
c01053bc:	c1 e0 02             	shl    $0x2,%eax
c01053bf:	01 d0                	add    %edx,%eax
c01053c1:	c1 e0 02             	shl    $0x2,%eax
c01053c4:	01 c8                	add    %ecx,%eax
c01053c6:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053c9:	8b 58 10             	mov    0x10(%eax),%ebx
c01053cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01053cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01053d2:	01 c8                	add    %ecx,%eax
c01053d4:	11 da                	adc    %ebx,%edx
c01053d6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01053d9:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01053dc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053df:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053e2:	89 d0                	mov    %edx,%eax
c01053e4:	c1 e0 02             	shl    $0x2,%eax
c01053e7:	01 d0                	add    %edx,%eax
c01053e9:	c1 e0 02             	shl    $0x2,%eax
c01053ec:	01 c8                	add    %ecx,%eax
c01053ee:	83 c0 14             	add    $0x14,%eax
c01053f1:	8b 00                	mov    (%eax),%eax
c01053f3:	83 f8 01             	cmp    $0x1,%eax
c01053f6:	0f 85 0a 01 00 00    	jne    c0105506 <page_init+0x3c4>
            if (begin < freemem) {
c01053fc:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01053ff:	ba 00 00 00 00       	mov    $0x0,%edx
c0105404:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0105407:	72 17                	jb     c0105420 <page_init+0x2de>
c0105409:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010540c:	77 05                	ja     c0105413 <page_init+0x2d1>
c010540e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0105411:	76 0d                	jbe    c0105420 <page_init+0x2de>
                begin = freemem;
c0105413:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105416:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105419:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105420:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105424:	72 1d                	jb     c0105443 <page_init+0x301>
c0105426:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010542a:	77 09                	ja     c0105435 <page_init+0x2f3>
c010542c:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0105433:	76 0e                	jbe    c0105443 <page_init+0x301>
                end = KMEMSIZE;
c0105435:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010543c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105443:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105446:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105449:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010544c:	0f 87 b4 00 00 00    	ja     c0105506 <page_init+0x3c4>
c0105452:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105455:	72 09                	jb     c0105460 <page_init+0x31e>
c0105457:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010545a:	0f 83 a6 00 00 00    	jae    c0105506 <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0105460:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105467:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010546a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010546d:	01 d0                	add    %edx,%eax
c010546f:	83 e8 01             	sub    $0x1,%eax
c0105472:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105475:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105478:	ba 00 00 00 00       	mov    $0x0,%edx
c010547d:	f7 75 9c             	divl   -0x64(%ebp)
c0105480:	89 d0                	mov    %edx,%eax
c0105482:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105485:	29 c2                	sub    %eax,%edx
c0105487:	89 d0                	mov    %edx,%eax
c0105489:	ba 00 00 00 00       	mov    $0x0,%edx
c010548e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105491:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105494:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105497:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010549a:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010549d:	ba 00 00 00 00       	mov    $0x0,%edx
c01054a2:	89 c7                	mov    %eax,%edi
c01054a4:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c01054aa:	89 7d 80             	mov    %edi,-0x80(%ebp)
c01054ad:	89 d0                	mov    %edx,%eax
c01054af:	83 e0 00             	and    $0x0,%eax
c01054b2:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01054b5:	8b 45 80             	mov    -0x80(%ebp),%eax
c01054b8:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01054bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01054be:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c01054c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054c4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054c7:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054ca:	77 3a                	ja     c0105506 <page_init+0x3c4>
c01054cc:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01054cf:	72 05                	jb     c01054d6 <page_init+0x394>
c01054d1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01054d4:	73 30                	jae    c0105506 <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01054d6:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01054d9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01054dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01054df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01054e2:	29 c8                	sub    %ecx,%eax
c01054e4:	19 da                	sbb    %ebx,%edx
c01054e6:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01054ea:	c1 ea 0c             	shr    $0xc,%edx
c01054ed:	89 c3                	mov    %eax,%ebx
c01054ef:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054f2:	89 04 24             	mov    %eax,(%esp)
c01054f5:	e8 8c f8 ff ff       	call   c0104d86 <pa2page>
c01054fa:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01054fe:	89 04 24             	mov    %eax,(%esp)
c0105501:	e8 55 fb ff ff       	call   c010505b <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0105506:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010550a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010550d:	8b 00                	mov    (%eax),%eax
c010550f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105512:	0f 8f 7e fe ff ff    	jg     c0105396 <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0105518:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c010551e:	5b                   	pop    %ebx
c010551f:	5e                   	pop    %esi
c0105520:	5f                   	pop    %edi
c0105521:	5d                   	pop    %ebp
c0105522:	c3                   	ret    

c0105523 <enable_paging>:

static void
enable_paging(void) {
c0105523:	55                   	push   %ebp
c0105524:	89 e5                	mov    %esp,%ebp
c0105526:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c0105529:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010552e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0105531:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105534:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105537:	0f 20 c0             	mov    %cr0,%eax
c010553a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c010553d:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105540:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0105543:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c010554a:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c010554e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105551:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105554:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105557:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c010555a:	c9                   	leave  
c010555b:	c3                   	ret    

c010555c <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010555c:	55                   	push   %ebp
c010555d:	89 e5                	mov    %esp,%ebp
c010555f:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105562:	8b 45 14             	mov    0x14(%ebp),%eax
c0105565:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105568:	31 d0                	xor    %edx,%eax
c010556a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010556f:	85 c0                	test   %eax,%eax
c0105571:	74 24                	je     c0105597 <boot_map_segment+0x3b>
c0105573:	c7 44 24 0c a2 e5 10 	movl   $0xc010e5a2,0xc(%esp)
c010557a:	c0 
c010557b:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105582:	c0 
c0105583:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010558a:	00 
c010558b:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105592:	e8 43 b8 ff ff       	call   c0100dda <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105597:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010559e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055a1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01055a6:	89 c2                	mov    %eax,%edx
c01055a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01055ab:	01 c2                	add    %eax,%edx
c01055ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055b0:	01 d0                	add    %edx,%eax
c01055b2:	83 e8 01             	sub    $0x1,%eax
c01055b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01055b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01055bb:	ba 00 00 00 00       	mov    $0x0,%edx
c01055c0:	f7 75 f0             	divl   -0x10(%ebp)
c01055c3:	89 d0                	mov    %edx,%eax
c01055c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01055c8:	29 c2                	sub    %eax,%edx
c01055ca:	89 d0                	mov    %edx,%eax
c01055cc:	c1 e8 0c             	shr    $0xc,%eax
c01055cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01055d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01055d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01055e0:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01055e3:	8b 45 14             	mov    0x14(%ebp),%eax
c01055e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01055e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01055f1:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01055f4:	eb 6b                	jmp    c0105661 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01055f6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01055fd:	00 
c01055fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105601:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105605:	8b 45 08             	mov    0x8(%ebp),%eax
c0105608:	89 04 24             	mov    %eax,(%esp)
c010560b:	e8 d1 01 00 00       	call   c01057e1 <get_pte>
c0105610:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0105613:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105617:	75 24                	jne    c010563d <boot_map_segment+0xe1>
c0105619:	c7 44 24 0c ce e5 10 	movl   $0xc010e5ce,0xc(%esp)
c0105620:	c0 
c0105621:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105628:	c0 
c0105629:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0105630:	00 
c0105631:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105638:	e8 9d b7 ff ff       	call   c0100dda <__panic>
        *ptep = pa | PTE_P | perm;
c010563d:	8b 45 18             	mov    0x18(%ebp),%eax
c0105640:	8b 55 14             	mov    0x14(%ebp),%edx
c0105643:	09 d0                	or     %edx,%eax
c0105645:	83 c8 01             	or     $0x1,%eax
c0105648:	89 c2                	mov    %eax,%edx
c010564a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010564d:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010564f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105653:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010565a:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105661:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105665:	75 8f                	jne    c01055f6 <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105667:	c9                   	leave  
c0105668:	c3                   	ret    

c0105669 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105669:	55                   	push   %ebp
c010566a:	89 e5                	mov    %esp,%ebp
c010566c:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c010566f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105676:	e8 ff f9 ff ff       	call   c010507a <alloc_pages>
c010567b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010567e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105682:	75 1c                	jne    c01056a0 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105684:	c7 44 24 08 db e5 10 	movl   $0xc010e5db,0x8(%esp)
c010568b:	c0 
c010568c:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105693:	00 
c0105694:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010569b:	e8 3a b7 ff ff       	call   c0100dda <__panic>
    }
    return page2kva(p);
c01056a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056a3:	89 04 24             	mov    %eax,(%esp)
c01056a6:	e8 20 f7 ff ff       	call   c0104dcb <page2kva>
}
c01056ab:	c9                   	leave  
c01056ac:	c3                   	ret    

c01056ad <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01056ad:	55                   	push   %ebp
c01056ae:	89 e5                	mov    %esp,%ebp
c01056b0:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01056b3:	e8 70 f9 ff ff       	call   c0105028 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01056b8:	e8 85 fa ff ff       	call   c0105142 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01056bd:	e8 58 09 00 00       	call   c010601a <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c01056c2:	e8 a2 ff ff ff       	call   c0105669 <boot_alloc_page>
c01056c7:	a3 a4 33 1c c0       	mov    %eax,0xc01c33a4
    memset(boot_pgdir, 0, PGSIZE);
c01056cc:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01056d1:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01056d8:	00 
c01056d9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01056e0:	00 
c01056e1:	89 04 24             	mov    %eax,(%esp)
c01056e4:	e8 56 7e 00 00       	call   c010d53f <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01056e9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01056ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01056f1:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01056f8:	77 23                	ja     c010571d <pmm_init+0x70>
c01056fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056fd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105701:	c7 44 24 08 70 e5 10 	movl   $0xc010e570,0x8(%esp)
c0105708:	c0 
c0105709:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105710:	00 
c0105711:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105718:	e8 bd b6 ff ff       	call   c0100dda <__panic>
c010571d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105720:	05 00 00 00 40       	add    $0x40000000,%eax
c0105725:	a3 ec 54 1c c0       	mov    %eax,0xc01c54ec

    check_pgdir();
c010572a:	e8 09 09 00 00       	call   c0106038 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c010572f:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105734:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010573a:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010573f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105742:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105749:	77 23                	ja     c010576e <pmm_init+0xc1>
c010574b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010574e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105752:	c7 44 24 08 70 e5 10 	movl   $0xc010e570,0x8(%esp)
c0105759:	c0 
c010575a:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105761:	00 
c0105762:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105769:	e8 6c b6 ff ff       	call   c0100dda <__panic>
c010576e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105771:	05 00 00 00 40       	add    $0x40000000,%eax
c0105776:	83 c8 03             	or     $0x3,%eax
c0105779:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010577b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105780:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105787:	00 
c0105788:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010578f:	00 
c0105790:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105797:	38 
c0105798:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c010579f:	c0 
c01057a0:	89 04 24             	mov    %eax,(%esp)
c01057a3:	e8 b4 fd ff ff       	call   c010555c <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c01057a8:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01057ad:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c01057b3:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c01057b9:	89 10                	mov    %edx,(%eax)

    enable_paging();
c01057bb:	e8 63 fd ff ff       	call   c0105523 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01057c0:	e8 74 f7 ff ff       	call   c0104f39 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c01057c5:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01057ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01057d0:	e8 fe 0e 00 00       	call   c01066d3 <check_boot_pgdir>

    print_pgdir();
c01057d5:	e8 8b 13 00 00       	call   c0106b65 <print_pgdir>
    
    kmalloc_init();
c01057da:	e8 e6 f2 ff ff       	call   c0104ac5 <kmalloc_init>

}
c01057df:	c9                   	leave  
c01057e0:	c3                   	ret    

c01057e1 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01057e1:	55                   	push   %ebp
c01057e2:	89 e5                	mov    %esp,%ebp
c01057e4:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01057e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01057ea:	c1 e8 16             	shr    $0x16,%eax
c01057ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01057f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01057f7:	01 d0                	add    %edx,%eax
c01057f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {
c01057fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057ff:	8b 00                	mov    (%eax),%eax
c0105801:	83 e0 01             	and    $0x1,%eax
c0105804:	85 c0                	test   %eax,%eax
c0105806:	0f 85 af 00 00 00    	jne    c01058bb <get_pte+0xda>
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c010580c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105810:	74 15                	je     c0105827 <get_pte+0x46>
c0105812:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105819:	e8 5c f8 ff ff       	call   c010507a <alloc_pages>
c010581e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105821:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105825:	75 0a                	jne    c0105831 <get_pte+0x50>
            return NULL;
c0105827:	b8 00 00 00 00       	mov    $0x0,%eax
c010582c:	e9 e6 00 00 00       	jmp    c0105917 <get_pte+0x136>
        }
        set_page_ref(page, 1);
c0105831:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105838:	00 
c0105839:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010583c:	89 04 24             	mov    %eax,(%esp)
c010583f:	e8 3b f6 ff ff       	call   c0104e7f <set_page_ref>
        uintptr_t pa = page2pa(page);
c0105844:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105847:	89 04 24             	mov    %eax,(%esp)
c010584a:	e8 21 f5 ff ff       	call   c0104d70 <page2pa>
c010584f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105852:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105855:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105858:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010585b:	c1 e8 0c             	shr    $0xc,%eax
c010585e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105861:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105866:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105869:	72 23                	jb     c010588e <get_pte+0xad>
c010586b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010586e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105872:	c7 44 24 08 cc e4 10 	movl   $0xc010e4cc,0x8(%esp)
c0105879:	c0 
c010587a:	c7 44 24 04 97 01 00 	movl   $0x197,0x4(%esp)
c0105881:	00 
c0105882:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105889:	e8 4c b5 ff ff       	call   c0100dda <__panic>
c010588e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105891:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105896:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010589d:	00 
c010589e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01058a5:	00 
c01058a6:	89 04 24             	mov    %eax,(%esp)
c01058a9:	e8 91 7c 00 00       	call   c010d53f <memset>
        *pdep = pa | PTE_U | PTE_W | PTE_P;
c01058ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058b1:	83 c8 07             	or     $0x7,%eax
c01058b4:	89 c2                	mov    %eax,%edx
c01058b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058b9:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c01058bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058be:	8b 00                	mov    (%eax),%eax
c01058c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01058c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01058c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058cb:	c1 e8 0c             	shr    $0xc,%eax
c01058ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01058d1:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01058d6:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01058d9:	72 23                	jb     c01058fe <get_pte+0x11d>
c01058db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01058de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058e2:	c7 44 24 08 cc e4 10 	movl   $0xc010e4cc,0x8(%esp)
c01058e9:	c0 
c01058ea:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
c01058f1:	00 
c01058f2:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01058f9:	e8 dc b4 ff ff       	call   c0100dda <__panic>
c01058fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105901:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105906:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105909:	c1 ea 0c             	shr    $0xc,%edx
c010590c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105912:	c1 e2 02             	shl    $0x2,%edx
c0105915:	01 d0                	add    %edx,%eax
}
c0105917:	c9                   	leave  
c0105918:	c3                   	ret    

c0105919 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105919:	55                   	push   %ebp
c010591a:	89 e5                	mov    %esp,%ebp
c010591c:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010591f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105926:	00 
c0105927:	8b 45 0c             	mov    0xc(%ebp),%eax
c010592a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010592e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105931:	89 04 24             	mov    %eax,(%esp)
c0105934:	e8 a8 fe ff ff       	call   c01057e1 <get_pte>
c0105939:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010593c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105940:	74 08                	je     c010594a <get_page+0x31>
        *ptep_store = ptep;
c0105942:	8b 45 10             	mov    0x10(%ebp),%eax
c0105945:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105948:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010594a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010594e:	74 1b                	je     c010596b <get_page+0x52>
c0105950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105953:	8b 00                	mov    (%eax),%eax
c0105955:	83 e0 01             	and    $0x1,%eax
c0105958:	85 c0                	test   %eax,%eax
c010595a:	74 0f                	je     c010596b <get_page+0x52>
        return pa2page(*ptep);
c010595c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010595f:	8b 00                	mov    (%eax),%eax
c0105961:	89 04 24             	mov    %eax,(%esp)
c0105964:	e8 1d f4 ff ff       	call   c0104d86 <pa2page>
c0105969:	eb 05                	jmp    c0105970 <get_page+0x57>
    }
    return NULL;
c010596b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105970:	c9                   	leave  
c0105971:	c3                   	ret    

c0105972 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105972:	55                   	push   %ebp
c0105973:	89 e5                	mov    %esp,%ebp
c0105975:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105978:	8b 45 10             	mov    0x10(%ebp),%eax
c010597b:	8b 00                	mov    (%eax),%eax
c010597d:	83 e0 01             	and    $0x1,%eax
c0105980:	85 c0                	test   %eax,%eax
c0105982:	74 4d                	je     c01059d1 <page_remove_pte+0x5f>
        struct Page *page = pte2page(*ptep);
c0105984:	8b 45 10             	mov    0x10(%ebp),%eax
c0105987:	8b 00                	mov    (%eax),%eax
c0105989:	89 04 24             	mov    %eax,(%esp)
c010598c:	e8 8e f4 ff ff       	call   c0104e1f <pte2page>
c0105991:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (page_ref_dec(page) == 0) {
c0105994:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105997:	89 04 24             	mov    %eax,(%esp)
c010599a:	e8 04 f5 ff ff       	call   c0104ea3 <page_ref_dec>
c010599f:	85 c0                	test   %eax,%eax
c01059a1:	75 13                	jne    c01059b6 <page_remove_pte+0x44>
            free_page(page);
c01059a3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01059aa:	00 
c01059ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059ae:	89 04 24             	mov    %eax,(%esp)
c01059b1:	e8 2f f7 ff ff       	call   c01050e5 <free_pages>
        }
        *ptep = 0;
c01059b6:	8b 45 10             	mov    0x10(%ebp),%eax
c01059b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c01059bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01059c9:	89 04 24             	mov    %eax,(%esp)
c01059cc:	e8 18 05 00 00       	call   c0105ee9 <tlb_invalidate>
    }
}
c01059d1:	c9                   	leave  
c01059d2:	c3                   	ret    

c01059d3 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01059d3:	55                   	push   %ebp
c01059d4:	89 e5                	mov    %esp,%ebp
c01059d6:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01059d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059dc:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059e1:	85 c0                	test   %eax,%eax
c01059e3:	75 0c                	jne    c01059f1 <unmap_range+0x1e>
c01059e5:	8b 45 10             	mov    0x10(%ebp),%eax
c01059e8:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059ed:	85 c0                	test   %eax,%eax
c01059ef:	74 24                	je     c0105a15 <unmap_range+0x42>
c01059f1:	c7 44 24 0c f4 e5 10 	movl   $0xc010e5f4,0xc(%esp)
c01059f8:	c0 
c01059f9:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105a00:	c0 
c0105a01:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105a08:	00 
c0105a09:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105a10:	e8 c5 b3 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105a15:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105a1c:	76 11                	jbe    c0105a2f <unmap_range+0x5c>
c0105a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a21:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105a24:	73 09                	jae    c0105a2f <unmap_range+0x5c>
c0105a26:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105a2d:	76 24                	jbe    c0105a53 <unmap_range+0x80>
c0105a2f:	c7 44 24 0c 1d e6 10 	movl   $0xc010e61d,0xc(%esp)
c0105a36:	c0 
c0105a37:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105a3e:	c0 
c0105a3f:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105a46:	00 
c0105a47:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105a4e:	e8 87 b3 ff ff       	call   c0100dda <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105a53:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a5a:	00 
c0105a5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a5e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a65:	89 04 24             	mov    %eax,(%esp)
c0105a68:	e8 74 fd ff ff       	call   c01057e1 <get_pte>
c0105a6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105a70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a74:	75 18                	jne    c0105a8e <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105a76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a79:	05 00 00 40 00       	add    $0x400000,%eax
c0105a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105a81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a84:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105a89:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105a8c:	eb 29                	jmp    c0105ab7 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a91:	8b 00                	mov    (%eax),%eax
c0105a93:	85 c0                	test   %eax,%eax
c0105a95:	74 19                	je     c0105ab0 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a9a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105a9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aa1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105aa8:	89 04 24             	mov    %eax,(%esp)
c0105aab:	e8 c2 fe ff ff       	call   c0105972 <page_remove_pte>
        }
        start += PGSIZE;
c0105ab0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105ab7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105abb:	74 08                	je     c0105ac5 <unmap_range+0xf2>
c0105abd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ac0:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ac3:	72 8e                	jb     c0105a53 <unmap_range+0x80>
}
c0105ac5:	c9                   	leave  
c0105ac6:	c3                   	ret    

c0105ac7 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105ac7:	55                   	push   %ebp
c0105ac8:	89 e5                	mov    %esp,%ebp
c0105aca:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105acd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ad5:	85 c0                	test   %eax,%eax
c0105ad7:	75 0c                	jne    c0105ae5 <exit_range+0x1e>
c0105ad9:	8b 45 10             	mov    0x10(%ebp),%eax
c0105adc:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ae1:	85 c0                	test   %eax,%eax
c0105ae3:	74 24                	je     c0105b09 <exit_range+0x42>
c0105ae5:	c7 44 24 0c f4 e5 10 	movl   $0xc010e5f4,0xc(%esp)
c0105aec:	c0 
c0105aed:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105af4:	c0 
c0105af5:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c0105afc:	00 
c0105afd:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105b04:	e8 d1 b2 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105b09:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b10:	76 11                	jbe    c0105b23 <exit_range+0x5c>
c0105b12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b15:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b18:	73 09                	jae    c0105b23 <exit_range+0x5c>
c0105b1a:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b21:	76 24                	jbe    c0105b47 <exit_range+0x80>
c0105b23:	c7 44 24 0c 1d e6 10 	movl   $0xc010e61d,0xc(%esp)
c0105b2a:	c0 
c0105b2b:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105b32:	c0 
c0105b33:	c7 44 24 04 e7 01 00 	movl   $0x1e7,0x4(%esp)
c0105b3a:	00 
c0105b3b:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105b42:	e8 93 b2 ff ff       	call   c0100dda <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105b47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105b4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b50:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b55:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105b58:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b5b:	c1 e8 16             	shr    $0x16,%eax
c0105b5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b6e:	01 d0                	add    %edx,%eax
c0105b70:	8b 00                	mov    (%eax),%eax
c0105b72:	83 e0 01             	and    $0x1,%eax
c0105b75:	85 c0                	test   %eax,%eax
c0105b77:	74 3e                	je     c0105bb7 <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105b79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b86:	01 d0                	add    %edx,%eax
c0105b88:	8b 00                	mov    (%eax),%eax
c0105b8a:	89 04 24             	mov    %eax,(%esp)
c0105b8d:	e8 cb f2 ff ff       	call   c0104e5d <pde2page>
c0105b92:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105b99:	00 
c0105b9a:	89 04 24             	mov    %eax,(%esp)
c0105b9d:	e8 43 f5 ff ff       	call   c01050e5 <free_pages>
            pgdir[pde_idx] = 0;
c0105ba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ba5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105bac:	8b 45 08             	mov    0x8(%ebp),%eax
c0105baf:	01 d0                	add    %edx,%eax
c0105bb1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105bb7:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105bbe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105bc2:	74 08                	je     c0105bcc <exit_range+0x105>
c0105bc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bc7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bca:	72 8c                	jb     c0105b58 <exit_range+0x91>
}
c0105bcc:	c9                   	leave  
c0105bcd:	c3                   	ret    

c0105bce <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105bce:	55                   	push   %ebp
c0105bcf:	89 e5                	mov    %esp,%ebp
c0105bd1:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bd4:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bd7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bdc:	85 c0                	test   %eax,%eax
c0105bde:	75 0c                	jne    c0105bec <copy_range+0x1e>
c0105be0:	8b 45 14             	mov    0x14(%ebp),%eax
c0105be3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105be8:	85 c0                	test   %eax,%eax
c0105bea:	74 24                	je     c0105c10 <copy_range+0x42>
c0105bec:	c7 44 24 0c f4 e5 10 	movl   $0xc010e5f4,0xc(%esp)
c0105bf3:	c0 
c0105bf4:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105bfb:	c0 
c0105bfc:	c7 44 24 04 fc 01 00 	movl   $0x1fc,0x4(%esp)
c0105c03:	00 
c0105c04:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105c0b:	e8 ca b1 ff ff       	call   c0100dda <__panic>
    assert(USER_ACCESS(start, end));
c0105c10:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105c17:	76 11                	jbe    c0105c2a <copy_range+0x5c>
c0105c19:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c1c:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105c1f:	73 09                	jae    c0105c2a <copy_range+0x5c>
c0105c21:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105c28:	76 24                	jbe    c0105c4e <copy_range+0x80>
c0105c2a:	c7 44 24 0c 1d e6 10 	movl   $0xc010e61d,0xc(%esp)
c0105c31:	c0 
c0105c32:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105c39:	c0 
c0105c3a:	c7 44 24 04 fd 01 00 	movl   $0x1fd,0x4(%esp)
c0105c41:	00 
c0105c42:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105c49:	e8 8c b1 ff ff       	call   c0100dda <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105c4e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105c55:	00 
c0105c56:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c60:	89 04 24             	mov    %eax,(%esp)
c0105c63:	e8 79 fb ff ff       	call   c01057e1 <get_pte>
c0105c68:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105c6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c6f:	75 1b                	jne    c0105c8c <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105c71:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c74:	05 00 00 40 00       	add    $0x400000,%eax
c0105c79:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105c7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c7f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c84:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105c87:	e9 47 01 00 00       	jmp    c0105dd3 <copy_range+0x205>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c8f:	8b 00                	mov    (%eax),%eax
c0105c91:	83 e0 01             	and    $0x1,%eax
c0105c94:	85 c0                	test   %eax,%eax
c0105c96:	0f 84 30 01 00 00    	je     c0105dcc <copy_range+0x1fe>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105c9c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105ca3:	00 
c0105ca4:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ca7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105cab:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cae:	89 04 24             	mov    %eax,(%esp)
c0105cb1:	e8 2b fb ff ff       	call   c01057e1 <get_pte>
c0105cb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105cb9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105cbd:	75 0a                	jne    c0105cc9 <copy_range+0xfb>
                return -E_NO_MEM;
c0105cbf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105cc4:	e9 21 01 00 00       	jmp    c0105dea <copy_range+0x21c>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105cc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ccc:	8b 00                	mov    (%eax),%eax
c0105cce:	83 e0 07             	and    $0x7,%eax
c0105cd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cd7:	8b 00                	mov    (%eax),%eax
c0105cd9:	89 04 24             	mov    %eax,(%esp)
c0105cdc:	e8 3e f1 ff ff       	call   c0104e1f <pte2page>
c0105ce1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105ce4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ceb:	e8 8a f3 ff ff       	call   c010507a <alloc_pages>
c0105cf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105cf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105cf7:	75 24                	jne    c0105d1d <copy_range+0x14f>
c0105cf9:	c7 44 24 0c 35 e6 10 	movl   $0xc010e635,0xc(%esp)
c0105d00:	c0 
c0105d01:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105d08:	c0 
c0105d09:	c7 44 24 04 10 02 00 	movl   $0x210,0x4(%esp)
c0105d10:	00 
c0105d11:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105d18:	e8 bd b0 ff ff       	call   c0100dda <__panic>
        assert(npage!=NULL);
c0105d1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105d21:	75 24                	jne    c0105d47 <copy_range+0x179>
c0105d23:	c7 44 24 0c 40 e6 10 	movl   $0xc010e640,0xc(%esp)
c0105d2a:	c0 
c0105d2b:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105d32:	c0 
c0105d33:	c7 44 24 04 11 02 00 	movl   $0x211,0x4(%esp)
c0105d3a:	00 
c0105d3b:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105d42:	e8 93 b0 ff ff       	call   c0100dda <__panic>
        int ret=0;
c0105d47:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        void *va1,*va2;
		va1 = page2kva(page);
c0105d4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105d51:	89 04 24             	mov    %eax,(%esp)
c0105d54:	e8 72 f0 ff ff       	call   c0104dcb <page2kva>
c0105d59:	89 45 d8             	mov    %eax,-0x28(%ebp)
        va2 = page2kva(npage);
c0105d5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d5f:	89 04 24             	mov    %eax,(%esp)
c0105d62:	e8 64 f0 ff ff       	call   c0104dcb <page2kva>
c0105d67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        memcpy(va2,va1,PGSIZE);
c0105d6a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105d71:	00 
c0105d72:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d7c:	89 04 24             	mov    %eax,(%esp)
c0105d7f:	e8 9d 78 00 00       	call   c010d621 <memcpy>
        assert(page_insert(to, npage, start, perm) == 0);
c0105d84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d87:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105d8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d8e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105d92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105d95:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d99:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d9c:	89 04 24             	mov    %eax,(%esp)
c0105d9f:	e8 8c 00 00 00       	call   c0105e30 <page_insert>
c0105da4:	85 c0                	test   %eax,%eax
c0105da6:	74 24                	je     c0105dcc <copy_range+0x1fe>
c0105da8:	c7 44 24 0c 4c e6 10 	movl   $0xc010e64c,0xc(%esp)
c0105daf:	c0 
c0105db0:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0105db7:	c0 
c0105db8:	c7 44 24 04 25 02 00 	movl   $0x225,0x4(%esp)
c0105dbf:	00 
c0105dc0:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105dc7:	e8 0e b0 ff ff       	call   c0100dda <__panic>
        }
        start += PGSIZE;
c0105dcc:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105dd3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105dd7:	74 0c                	je     c0105de5 <copy_range+0x217>
c0105dd9:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ddc:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ddf:	0f 82 69 fe ff ff    	jb     c0105c4e <copy_range+0x80>
    return 0;
c0105de5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105dea:	c9                   	leave  
c0105deb:	c3                   	ret    

c0105dec <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105dec:	55                   	push   %ebp
c0105ded:	89 e5                	mov    %esp,%ebp
c0105def:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105df2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105df9:	00 
c0105dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105dfd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e01:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e04:	89 04 24             	mov    %eax,(%esp)
c0105e07:	e8 d5 f9 ff ff       	call   c01057e1 <get_pte>
c0105e0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105e0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e13:	74 19                	je     c0105e2e <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e18:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e1c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e1f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e23:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e26:	89 04 24             	mov    %eax,(%esp)
c0105e29:	e8 44 fb ff ff       	call   c0105972 <page_remove_pte>
    }
}
c0105e2e:	c9                   	leave  
c0105e2f:	c3                   	ret    

c0105e30 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105e30:	55                   	push   %ebp
c0105e31:	89 e5                	mov    %esp,%ebp
c0105e33:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105e36:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105e3d:	00 
c0105e3e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e45:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e48:	89 04 24             	mov    %eax,(%esp)
c0105e4b:	e8 91 f9 ff ff       	call   c01057e1 <get_pte>
c0105e50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105e53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e57:	75 0a                	jne    c0105e63 <page_insert+0x33>
        return -E_NO_MEM;
c0105e59:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105e5e:	e9 84 00 00 00       	jmp    c0105ee7 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105e63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e66:	89 04 24             	mov    %eax,(%esp)
c0105e69:	e8 1e f0 ff ff       	call   c0104e8c <page_ref_inc>
    if (*ptep & PTE_P) {
c0105e6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e71:	8b 00                	mov    (%eax),%eax
c0105e73:	83 e0 01             	and    $0x1,%eax
c0105e76:	85 c0                	test   %eax,%eax
c0105e78:	74 3e                	je     c0105eb8 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e7d:	8b 00                	mov    (%eax),%eax
c0105e7f:	89 04 24             	mov    %eax,(%esp)
c0105e82:	e8 98 ef ff ff       	call   c0104e1f <pte2page>
c0105e87:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105e8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e8d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105e90:	75 0d                	jne    c0105e9f <page_insert+0x6f>
            page_ref_dec(page);
c0105e92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e95:	89 04 24             	mov    %eax,(%esp)
c0105e98:	e8 06 f0 ff ff       	call   c0104ea3 <page_ref_dec>
c0105e9d:	eb 19                	jmp    c0105eb8 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ea6:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ea9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eb0:	89 04 24             	mov    %eax,(%esp)
c0105eb3:	e8 ba fa ff ff       	call   c0105972 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105eb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ebb:	89 04 24             	mov    %eax,(%esp)
c0105ebe:	e8 ad ee ff ff       	call   c0104d70 <page2pa>
c0105ec3:	0b 45 14             	or     0x14(%ebp),%eax
c0105ec6:	83 c8 01             	or     $0x1,%eax
c0105ec9:	89 c2                	mov    %eax,%edx
c0105ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ece:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105ed0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ed3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eda:	89 04 24             	mov    %eax,(%esp)
c0105edd:	e8 07 00 00 00       	call   c0105ee9 <tlb_invalidate>
    return 0;
c0105ee2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ee7:	c9                   	leave  
c0105ee8:	c3                   	ret    

c0105ee9 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105ee9:	55                   	push   %ebp
c0105eea:	89 e5                	mov    %esp,%ebp
c0105eec:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105eef:	0f 20 d8             	mov    %cr3,%eax
c0105ef2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c0105ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105ef8:	89 c2                	mov    %eax,%edx
c0105efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0105efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f00:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105f07:	77 23                	ja     c0105f2c <tlb_invalidate+0x43>
c0105f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f10:	c7 44 24 08 70 e5 10 	movl   $0xc010e570,0x8(%esp)
c0105f17:	c0 
c0105f18:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
c0105f1f:	00 
c0105f20:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0105f27:	e8 ae ae ff ff       	call   c0100dda <__panic>
c0105f2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f2f:	05 00 00 00 40       	add    $0x40000000,%eax
c0105f34:	39 c2                	cmp    %eax,%edx
c0105f36:	75 0c                	jne    c0105f44 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c0105f38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0105f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105f41:	0f 01 38             	invlpg (%eax)
    }
}
c0105f44:	c9                   	leave  
c0105f45:	c3                   	ret    

c0105f46 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0105f46:	55                   	push   %ebp
c0105f47:	89 e5                	mov    %esp,%ebp
c0105f49:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0105f4c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105f53:	e8 22 f1 ff ff       	call   c010507a <alloc_pages>
c0105f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0105f5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f5f:	0f 84 b0 00 00 00    	je     c0106015 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0105f65:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f68:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f6f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f76:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f7d:	89 04 24             	mov    %eax,(%esp)
c0105f80:	e8 ab fe ff ff       	call   c0105e30 <page_insert>
c0105f85:	85 c0                	test   %eax,%eax
c0105f87:	74 1a                	je     c0105fa3 <pgdir_alloc_page+0x5d>
            free_page(page);
c0105f89:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105f90:	00 
c0105f91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f94:	89 04 24             	mov    %eax,(%esp)
c0105f97:	e8 49 f1 ff ff       	call   c01050e5 <free_pages>
            return NULL;
c0105f9c:	b8 00 00 00 00       	mov    $0x0,%eax
c0105fa1:	eb 75                	jmp    c0106018 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0105fa3:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0105fa8:	85 c0                	test   %eax,%eax
c0105faa:	74 69                	je     c0106015 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0105fac:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0105fb1:	85 c0                	test   %eax,%eax
c0105fb3:	74 60                	je     c0106015 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0105fb5:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0105fba:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105fc1:	00 
c0105fc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105fc5:	89 54 24 08          	mov    %edx,0x8(%esp)
c0105fc9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105fcc:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105fd0:	89 04 24             	mov    %eax,(%esp)
c0105fd3:	e8 3e 0e 00 00       	call   c0106e16 <swap_map_swappable>
                page->pra_vaddr=la;
c0105fd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fdb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105fde:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0105fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fe4:	89 04 24             	mov    %eax,(%esp)
c0105fe7:	e8 89 ee ff ff       	call   c0104e75 <page_ref>
c0105fec:	83 f8 01             	cmp    $0x1,%eax
c0105fef:	74 24                	je     c0106015 <pgdir_alloc_page+0xcf>
c0105ff1:	c7 44 24 0c 75 e6 10 	movl   $0xc010e675,0xc(%esp)
c0105ff8:	c0 
c0105ff9:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106000:	c0 
c0106001:	c7 44 24 04 6a 02 00 	movl   $0x26a,0x4(%esp)
c0106008:	00 
c0106009:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106010:	e8 c5 ad ff ff       	call   c0100dda <__panic>
            }
        }

    }

    return page;
c0106015:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106018:	c9                   	leave  
c0106019:	c3                   	ret    

c010601a <check_alloc_page>:

static void
check_alloc_page(void) {
c010601a:	55                   	push   %ebp
c010601b:	89 e5                	mov    %esp,%ebp
c010601d:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c0106020:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0106025:	8b 40 18             	mov    0x18(%eax),%eax
c0106028:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c010602a:	c7 04 24 8c e6 10 c0 	movl   $0xc010e68c,(%esp)
c0106031:	e8 22 a3 ff ff       	call   c0100358 <cprintf>
}
c0106036:	c9                   	leave  
c0106037:	c3                   	ret    

c0106038 <check_pgdir>:

static void
check_pgdir(void) {
c0106038:	55                   	push   %ebp
c0106039:	89 e5                	mov    %esp,%ebp
c010603b:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010603e:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106043:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106048:	76 24                	jbe    c010606e <check_pgdir+0x36>
c010604a:	c7 44 24 0c ab e6 10 	movl   $0xc010e6ab,0xc(%esp)
c0106051:	c0 
c0106052:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106059:	c0 
c010605a:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c0106061:	00 
c0106062:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106069:	e8 6c ad ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010606e:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106073:	85 c0                	test   %eax,%eax
c0106075:	74 0e                	je     c0106085 <check_pgdir+0x4d>
c0106077:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010607c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106081:	85 c0                	test   %eax,%eax
c0106083:	74 24                	je     c01060a9 <check_pgdir+0x71>
c0106085:	c7 44 24 0c c8 e6 10 	movl   $0xc010e6c8,0xc(%esp)
c010608c:	c0 
c010608d:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106094:	c0 
c0106095:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010609c:	00 
c010609d:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01060a4:	e8 31 ad ff ff       	call   c0100dda <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01060a9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01060ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01060b5:	00 
c01060b6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01060bd:	00 
c01060be:	89 04 24             	mov    %eax,(%esp)
c01060c1:	e8 53 f8 ff ff       	call   c0105919 <get_page>
c01060c6:	85 c0                	test   %eax,%eax
c01060c8:	74 24                	je     c01060ee <check_pgdir+0xb6>
c01060ca:	c7 44 24 0c 00 e7 10 	movl   $0xc010e700,0xc(%esp)
c01060d1:	c0 
c01060d2:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01060d9:	c0 
c01060da:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c01060e1:	00 
c01060e2:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01060e9:	e8 ec ac ff ff       	call   c0100dda <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01060ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01060f5:	e8 80 ef ff ff       	call   c010507a <alloc_pages>
c01060fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01060fd:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106102:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106109:	00 
c010610a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106111:	00 
c0106112:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106115:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106119:	89 04 24             	mov    %eax,(%esp)
c010611c:	e8 0f fd ff ff       	call   c0105e30 <page_insert>
c0106121:	85 c0                	test   %eax,%eax
c0106123:	74 24                	je     c0106149 <check_pgdir+0x111>
c0106125:	c7 44 24 0c 28 e7 10 	movl   $0xc010e728,0xc(%esp)
c010612c:	c0 
c010612d:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106134:	c0 
c0106135:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c010613c:	00 
c010613d:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106144:	e8 91 ac ff ff       	call   c0100dda <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106149:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010614e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106155:	00 
c0106156:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010615d:	00 
c010615e:	89 04 24             	mov    %eax,(%esp)
c0106161:	e8 7b f6 ff ff       	call   c01057e1 <get_pte>
c0106166:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106169:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010616d:	75 24                	jne    c0106193 <check_pgdir+0x15b>
c010616f:	c7 44 24 0c 54 e7 10 	movl   $0xc010e754,0xc(%esp)
c0106176:	c0 
c0106177:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010617e:	c0 
c010617f:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106186:	00 
c0106187:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010618e:	e8 47 ac ff ff       	call   c0100dda <__panic>
    assert(pa2page(*ptep) == p1);
c0106193:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106196:	8b 00                	mov    (%eax),%eax
c0106198:	89 04 24             	mov    %eax,(%esp)
c010619b:	e8 e6 eb ff ff       	call   c0104d86 <pa2page>
c01061a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061a3:	74 24                	je     c01061c9 <check_pgdir+0x191>
c01061a5:	c7 44 24 0c 81 e7 10 	movl   $0xc010e781,0xc(%esp)
c01061ac:	c0 
c01061ad:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01061b4:	c0 
c01061b5:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c01061bc:	00 
c01061bd:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01061c4:	e8 11 ac ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 1);
c01061c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061cc:	89 04 24             	mov    %eax,(%esp)
c01061cf:	e8 a1 ec ff ff       	call   c0104e75 <page_ref>
c01061d4:	83 f8 01             	cmp    $0x1,%eax
c01061d7:	74 24                	je     c01061fd <check_pgdir+0x1c5>
c01061d9:	c7 44 24 0c 96 e7 10 	movl   $0xc010e796,0xc(%esp)
c01061e0:	c0 
c01061e1:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01061e8:	c0 
c01061e9:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c01061f0:	00 
c01061f1:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01061f8:	e8 dd ab ff ff       	call   c0100dda <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01061fd:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106202:	8b 00                	mov    (%eax),%eax
c0106204:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106209:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010620c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010620f:	c1 e8 0c             	shr    $0xc,%eax
c0106212:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106215:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010621a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010621d:	72 23                	jb     c0106242 <check_pgdir+0x20a>
c010621f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106222:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106226:	c7 44 24 08 cc e4 10 	movl   $0xc010e4cc,0x8(%esp)
c010622d:	c0 
c010622e:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c0106235:	00 
c0106236:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010623d:	e8 98 ab ff ff       	call   c0100dda <__panic>
c0106242:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106245:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010624a:	83 c0 04             	add    $0x4,%eax
c010624d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0106250:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106255:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010625c:	00 
c010625d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106264:	00 
c0106265:	89 04 24             	mov    %eax,(%esp)
c0106268:	e8 74 f5 ff ff       	call   c01057e1 <get_pte>
c010626d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106270:	74 24                	je     c0106296 <check_pgdir+0x25e>
c0106272:	c7 44 24 0c a8 e7 10 	movl   $0xc010e7a8,0xc(%esp)
c0106279:	c0 
c010627a:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106281:	c0 
c0106282:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c0106289:	00 
c010628a:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106291:	e8 44 ab ff ff       	call   c0100dda <__panic>

    p2 = alloc_page();
c0106296:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010629d:	e8 d8 ed ff ff       	call   c010507a <alloc_pages>
c01062a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01062a5:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01062aa:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01062b1:	00 
c01062b2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01062b9:	00 
c01062ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01062bd:	89 54 24 04          	mov    %edx,0x4(%esp)
c01062c1:	89 04 24             	mov    %eax,(%esp)
c01062c4:	e8 67 fb ff ff       	call   c0105e30 <page_insert>
c01062c9:	85 c0                	test   %eax,%eax
c01062cb:	74 24                	je     c01062f1 <check_pgdir+0x2b9>
c01062cd:	c7 44 24 0c d0 e7 10 	movl   $0xc010e7d0,0xc(%esp)
c01062d4:	c0 
c01062d5:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01062dc:	c0 
c01062dd:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c01062e4:	00 
c01062e5:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01062ec:	e8 e9 aa ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01062f1:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01062f6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062fd:	00 
c01062fe:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106305:	00 
c0106306:	89 04 24             	mov    %eax,(%esp)
c0106309:	e8 d3 f4 ff ff       	call   c01057e1 <get_pte>
c010630e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106311:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106315:	75 24                	jne    c010633b <check_pgdir+0x303>
c0106317:	c7 44 24 0c 08 e8 10 	movl   $0xc010e808,0xc(%esp)
c010631e:	c0 
c010631f:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106326:	c0 
c0106327:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c010632e:	00 
c010632f:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106336:	e8 9f aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_U);
c010633b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010633e:	8b 00                	mov    (%eax),%eax
c0106340:	83 e0 04             	and    $0x4,%eax
c0106343:	85 c0                	test   %eax,%eax
c0106345:	75 24                	jne    c010636b <check_pgdir+0x333>
c0106347:	c7 44 24 0c 38 e8 10 	movl   $0xc010e838,0xc(%esp)
c010634e:	c0 
c010634f:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106356:	c0 
c0106357:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c010635e:	00 
c010635f:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106366:	e8 6f aa ff ff       	call   c0100dda <__panic>
    assert(*ptep & PTE_W);
c010636b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010636e:	8b 00                	mov    (%eax),%eax
c0106370:	83 e0 02             	and    $0x2,%eax
c0106373:	85 c0                	test   %eax,%eax
c0106375:	75 24                	jne    c010639b <check_pgdir+0x363>
c0106377:	c7 44 24 0c 46 e8 10 	movl   $0xc010e846,0xc(%esp)
c010637e:	c0 
c010637f:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106386:	c0 
c0106387:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c010638e:	00 
c010638f:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106396:	e8 3f aa ff ff       	call   c0100dda <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010639b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01063a0:	8b 00                	mov    (%eax),%eax
c01063a2:	83 e0 04             	and    $0x4,%eax
c01063a5:	85 c0                	test   %eax,%eax
c01063a7:	75 24                	jne    c01063cd <check_pgdir+0x395>
c01063a9:	c7 44 24 0c 54 e8 10 	movl   $0xc010e854,0xc(%esp)
c01063b0:	c0 
c01063b1:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01063b8:	c0 
c01063b9:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c01063c0:	00 
c01063c1:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01063c8:	e8 0d aa ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 1);
c01063cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01063d0:	89 04 24             	mov    %eax,(%esp)
c01063d3:	e8 9d ea ff ff       	call   c0104e75 <page_ref>
c01063d8:	83 f8 01             	cmp    $0x1,%eax
c01063db:	74 24                	je     c0106401 <check_pgdir+0x3c9>
c01063dd:	c7 44 24 0c 6a e8 10 	movl   $0xc010e86a,0xc(%esp)
c01063e4:	c0 
c01063e5:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01063ec:	c0 
c01063ed:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c01063f4:	00 
c01063f5:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01063fc:	e8 d9 a9 ff ff       	call   c0100dda <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106401:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106406:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010640d:	00 
c010640e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106415:	00 
c0106416:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106419:	89 54 24 04          	mov    %edx,0x4(%esp)
c010641d:	89 04 24             	mov    %eax,(%esp)
c0106420:	e8 0b fa ff ff       	call   c0105e30 <page_insert>
c0106425:	85 c0                	test   %eax,%eax
c0106427:	74 24                	je     c010644d <check_pgdir+0x415>
c0106429:	c7 44 24 0c 7c e8 10 	movl   $0xc010e87c,0xc(%esp)
c0106430:	c0 
c0106431:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106438:	c0 
c0106439:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0106440:	00 
c0106441:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106448:	e8 8d a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p1) == 2);
c010644d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106450:	89 04 24             	mov    %eax,(%esp)
c0106453:	e8 1d ea ff ff       	call   c0104e75 <page_ref>
c0106458:	83 f8 02             	cmp    $0x2,%eax
c010645b:	74 24                	je     c0106481 <check_pgdir+0x449>
c010645d:	c7 44 24 0c a8 e8 10 	movl   $0xc010e8a8,0xc(%esp)
c0106464:	c0 
c0106465:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010646c:	c0 
c010646d:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c0106474:	00 
c0106475:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010647c:	e8 59 a9 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106481:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106484:	89 04 24             	mov    %eax,(%esp)
c0106487:	e8 e9 e9 ff ff       	call   c0104e75 <page_ref>
c010648c:	85 c0                	test   %eax,%eax
c010648e:	74 24                	je     c01064b4 <check_pgdir+0x47c>
c0106490:	c7 44 24 0c ba e8 10 	movl   $0xc010e8ba,0xc(%esp)
c0106497:	c0 
c0106498:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010649f:	c0 
c01064a0:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c01064a7:	00 
c01064a8:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01064af:	e8 26 a9 ff ff       	call   c0100dda <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01064b4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01064b9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064c0:	00 
c01064c1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01064c8:	00 
c01064c9:	89 04 24             	mov    %eax,(%esp)
c01064cc:	e8 10 f3 ff ff       	call   c01057e1 <get_pte>
c01064d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01064d8:	75 24                	jne    c01064fe <check_pgdir+0x4c6>
c01064da:	c7 44 24 0c 08 e8 10 	movl   $0xc010e808,0xc(%esp)
c01064e1:	c0 
c01064e2:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01064e9:	c0 
c01064ea:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c01064f1:	00 
c01064f2:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01064f9:	e8 dc a8 ff ff       	call   c0100dda <__panic>
    assert(pa2page(*ptep) == p1);
c01064fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106501:	8b 00                	mov    (%eax),%eax
c0106503:	89 04 24             	mov    %eax,(%esp)
c0106506:	e8 7b e8 ff ff       	call   c0104d86 <pa2page>
c010650b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010650e:	74 24                	je     c0106534 <check_pgdir+0x4fc>
c0106510:	c7 44 24 0c 81 e7 10 	movl   $0xc010e781,0xc(%esp)
c0106517:	c0 
c0106518:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010651f:	c0 
c0106520:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0106527:	00 
c0106528:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010652f:	e8 a6 a8 ff ff       	call   c0100dda <__panic>
    assert((*ptep & PTE_U) == 0);
c0106534:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106537:	8b 00                	mov    (%eax),%eax
c0106539:	83 e0 04             	and    $0x4,%eax
c010653c:	85 c0                	test   %eax,%eax
c010653e:	74 24                	je     c0106564 <check_pgdir+0x52c>
c0106540:	c7 44 24 0c cc e8 10 	movl   $0xc010e8cc,0xc(%esp)
c0106547:	c0 
c0106548:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010654f:	c0 
c0106550:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106557:	00 
c0106558:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010655f:	e8 76 a8 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, 0x0);
c0106564:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106569:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106570:	00 
c0106571:	89 04 24             	mov    %eax,(%esp)
c0106574:	e8 73 f8 ff ff       	call   c0105dec <page_remove>
    assert(page_ref(p1) == 1);
c0106579:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010657c:	89 04 24             	mov    %eax,(%esp)
c010657f:	e8 f1 e8 ff ff       	call   c0104e75 <page_ref>
c0106584:	83 f8 01             	cmp    $0x1,%eax
c0106587:	74 24                	je     c01065ad <check_pgdir+0x575>
c0106589:	c7 44 24 0c 96 e7 10 	movl   $0xc010e796,0xc(%esp)
c0106590:	c0 
c0106591:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106598:	c0 
c0106599:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c01065a0:	00 
c01065a1:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01065a8:	e8 2d a8 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c01065ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b0:	89 04 24             	mov    %eax,(%esp)
c01065b3:	e8 bd e8 ff ff       	call   c0104e75 <page_ref>
c01065b8:	85 c0                	test   %eax,%eax
c01065ba:	74 24                	je     c01065e0 <check_pgdir+0x5a8>
c01065bc:	c7 44 24 0c ba e8 10 	movl   $0xc010e8ba,0xc(%esp)
c01065c3:	c0 
c01065c4:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01065cb:	c0 
c01065cc:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01065d3:	00 
c01065d4:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01065db:	e8 fa a7 ff ff       	call   c0100dda <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01065e0:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01065e5:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01065ec:	00 
c01065ed:	89 04 24             	mov    %eax,(%esp)
c01065f0:	e8 f7 f7 ff ff       	call   c0105dec <page_remove>
    assert(page_ref(p1) == 0);
c01065f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065f8:	89 04 24             	mov    %eax,(%esp)
c01065fb:	e8 75 e8 ff ff       	call   c0104e75 <page_ref>
c0106600:	85 c0                	test   %eax,%eax
c0106602:	74 24                	je     c0106628 <check_pgdir+0x5f0>
c0106604:	c7 44 24 0c e1 e8 10 	movl   $0xc010e8e1,0xc(%esp)
c010660b:	c0 
c010660c:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106613:	c0 
c0106614:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c010661b:	00 
c010661c:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106623:	e8 b2 a7 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p2) == 0);
c0106628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010662b:	89 04 24             	mov    %eax,(%esp)
c010662e:	e8 42 e8 ff ff       	call   c0104e75 <page_ref>
c0106633:	85 c0                	test   %eax,%eax
c0106635:	74 24                	je     c010665b <check_pgdir+0x623>
c0106637:	c7 44 24 0c ba e8 10 	movl   $0xc010e8ba,0xc(%esp)
c010663e:	c0 
c010663f:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106646:	c0 
c0106647:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c010664e:	00 
c010664f:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106656:	e8 7f a7 ff ff       	call   c0100dda <__panic>

    assert(page_ref(pa2page(boot_pgdir[0])) == 1);
c010665b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106660:	8b 00                	mov    (%eax),%eax
c0106662:	89 04 24             	mov    %eax,(%esp)
c0106665:	e8 1c e7 ff ff       	call   c0104d86 <pa2page>
c010666a:	89 04 24             	mov    %eax,(%esp)
c010666d:	e8 03 e8 ff ff       	call   c0104e75 <page_ref>
c0106672:	83 f8 01             	cmp    $0x1,%eax
c0106675:	74 24                	je     c010669b <check_pgdir+0x663>
c0106677:	c7 44 24 0c f4 e8 10 	movl   $0xc010e8f4,0xc(%esp)
c010667e:	c0 
c010667f:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106686:	c0 
c0106687:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010668e:	00 
c010668f:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106696:	e8 3f a7 ff ff       	call   c0100dda <__panic>
    free_page(pa2page(boot_pgdir[0]));
c010669b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01066a0:	8b 00                	mov    (%eax),%eax
c01066a2:	89 04 24             	mov    %eax,(%esp)
c01066a5:	e8 dc e6 ff ff       	call   c0104d86 <pa2page>
c01066aa:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01066b1:	00 
c01066b2:	89 04 24             	mov    %eax,(%esp)
c01066b5:	e8 2b ea ff ff       	call   c01050e5 <free_pages>
    boot_pgdir[0] = 0;
c01066ba:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01066bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01066c5:	c7 04 24 1a e9 10 c0 	movl   $0xc010e91a,(%esp)
c01066cc:	e8 87 9c ff ff       	call   c0100358 <cprintf>
}
c01066d1:	c9                   	leave  
c01066d2:	c3                   	ret    

c01066d3 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01066d3:	55                   	push   %ebp
c01066d4:	89 e5                	mov    %esp,%ebp
c01066d6:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01066d9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01066e0:	e9 ca 00 00 00       	jmp    c01067af <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01066e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066ee:	c1 e8 0c             	shr    $0xc,%eax
c01066f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01066f4:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01066f9:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01066fc:	72 23                	jb     c0106721 <check_boot_pgdir+0x4e>
c01066fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106701:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106705:	c7 44 24 08 cc e4 10 	movl   $0xc010e4cc,0x8(%esp)
c010670c:	c0 
c010670d:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c0106714:	00 
c0106715:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010671c:	e8 b9 a6 ff ff       	call   c0100dda <__panic>
c0106721:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106724:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106729:	89 c2                	mov    %eax,%edx
c010672b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106730:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106737:	00 
c0106738:	89 54 24 04          	mov    %edx,0x4(%esp)
c010673c:	89 04 24             	mov    %eax,(%esp)
c010673f:	e8 9d f0 ff ff       	call   c01057e1 <get_pte>
c0106744:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106747:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010674b:	75 24                	jne    c0106771 <check_boot_pgdir+0x9e>
c010674d:	c7 44 24 0c 34 e9 10 	movl   $0xc010e934,0xc(%esp)
c0106754:	c0 
c0106755:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010675c:	c0 
c010675d:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
c0106764:	00 
c0106765:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010676c:	e8 69 a6 ff ff       	call   c0100dda <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106771:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106774:	8b 00                	mov    (%eax),%eax
c0106776:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010677b:	89 c2                	mov    %eax,%edx
c010677d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106780:	39 c2                	cmp    %eax,%edx
c0106782:	74 24                	je     c01067a8 <check_boot_pgdir+0xd5>
c0106784:	c7 44 24 0c 71 e9 10 	movl   $0xc010e971,0xc(%esp)
c010678b:	c0 
c010678c:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106793:	c0 
c0106794:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
c010679b:	00 
c010679c:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01067a3:	e8 32 a6 ff ff       	call   c0100dda <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067a8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01067af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01067b2:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01067b7:	39 c2                	cmp    %eax,%edx
c01067b9:	0f 82 26 ff ff ff    	jb     c01066e5 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01067bf:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01067c4:	05 ac 0f 00 00       	add    $0xfac,%eax
c01067c9:	8b 00                	mov    (%eax),%eax
c01067cb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01067d0:	89 c2                	mov    %eax,%edx
c01067d2:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01067d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01067da:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01067e1:	77 23                	ja     c0106806 <check_boot_pgdir+0x133>
c01067e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067e6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067ea:	c7 44 24 08 70 e5 10 	movl   $0xc010e570,0x8(%esp)
c01067f1:	c0 
c01067f2:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c01067f9:	00 
c01067fa:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106801:	e8 d4 a5 ff ff       	call   c0100dda <__panic>
c0106806:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106809:	05 00 00 00 40       	add    $0x40000000,%eax
c010680e:	39 c2                	cmp    %eax,%edx
c0106810:	74 24                	je     c0106836 <check_boot_pgdir+0x163>
c0106812:	c7 44 24 0c 88 e9 10 	movl   $0xc010e988,0xc(%esp)
c0106819:	c0 
c010681a:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106821:	c0 
c0106822:	c7 44 24 04 b9 02 00 	movl   $0x2b9,0x4(%esp)
c0106829:	00 
c010682a:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106831:	e8 a4 a5 ff ff       	call   c0100dda <__panic>

    assert(boot_pgdir[0] == 0);
c0106836:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010683b:	8b 00                	mov    (%eax),%eax
c010683d:	85 c0                	test   %eax,%eax
c010683f:	74 24                	je     c0106865 <check_boot_pgdir+0x192>
c0106841:	c7 44 24 0c bc e9 10 	movl   $0xc010e9bc,0xc(%esp)
c0106848:	c0 
c0106849:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c0106850:	c0 
c0106851:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106858:	00 
c0106859:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106860:	e8 75 a5 ff ff       	call   c0100dda <__panic>

    struct Page *p;
    p = alloc_page();
c0106865:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010686c:	e8 09 e8 ff ff       	call   c010507a <alloc_pages>
c0106871:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106874:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106879:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106880:	00 
c0106881:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106888:	00 
c0106889:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010688c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106890:	89 04 24             	mov    %eax,(%esp)
c0106893:	e8 98 f5 ff ff       	call   c0105e30 <page_insert>
c0106898:	85 c0                	test   %eax,%eax
c010689a:	74 24                	je     c01068c0 <check_boot_pgdir+0x1ed>
c010689c:	c7 44 24 0c d0 e9 10 	movl   $0xc010e9d0,0xc(%esp)
c01068a3:	c0 
c01068a4:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01068ab:	c0 
c01068ac:	c7 44 24 04 bf 02 00 	movl   $0x2bf,0x4(%esp)
c01068b3:	00 
c01068b4:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01068bb:	e8 1a a5 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 1);
c01068c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068c3:	89 04 24             	mov    %eax,(%esp)
c01068c6:	e8 aa e5 ff ff       	call   c0104e75 <page_ref>
c01068cb:	83 f8 01             	cmp    $0x1,%eax
c01068ce:	74 24                	je     c01068f4 <check_boot_pgdir+0x221>
c01068d0:	c7 44 24 0c fe e9 10 	movl   $0xc010e9fe,0xc(%esp)
c01068d7:	c0 
c01068d8:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01068df:	c0 
c01068e0:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c01068e7:	00 
c01068e8:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01068ef:	e8 e6 a4 ff ff       	call   c0100dda <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01068f4:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01068f9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106900:	00 
c0106901:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106908:	00 
c0106909:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010690c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106910:	89 04 24             	mov    %eax,(%esp)
c0106913:	e8 18 f5 ff ff       	call   c0105e30 <page_insert>
c0106918:	85 c0                	test   %eax,%eax
c010691a:	74 24                	je     c0106940 <check_boot_pgdir+0x26d>
c010691c:	c7 44 24 0c 10 ea 10 	movl   $0xc010ea10,0xc(%esp)
c0106923:	c0 
c0106924:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010692b:	c0 
c010692c:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0106933:	00 
c0106934:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010693b:	e8 9a a4 ff ff       	call   c0100dda <__panic>
    assert(page_ref(p) == 2);
c0106940:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106943:	89 04 24             	mov    %eax,(%esp)
c0106946:	e8 2a e5 ff ff       	call   c0104e75 <page_ref>
c010694b:	83 f8 02             	cmp    $0x2,%eax
c010694e:	74 24                	je     c0106974 <check_boot_pgdir+0x2a1>
c0106950:	c7 44 24 0c 47 ea 10 	movl   $0xc010ea47,0xc(%esp)
c0106957:	c0 
c0106958:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c010695f:	c0 
c0106960:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0106967:	00 
c0106968:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c010696f:	e8 66 a4 ff ff       	call   c0100dda <__panic>

    const char *str = "ucore: Hello world!!";
c0106974:	c7 45 dc 58 ea 10 c0 	movl   $0xc010ea58,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010697b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010697e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106982:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106989:	e8 da 68 00 00       	call   c010d268 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010698e:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106995:	00 
c0106996:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c010699d:	e8 3f 69 00 00       	call   c010d2e1 <strcmp>
c01069a2:	85 c0                	test   %eax,%eax
c01069a4:	74 24                	je     c01069ca <check_boot_pgdir+0x2f7>
c01069a6:	c7 44 24 0c 70 ea 10 	movl   $0xc010ea70,0xc(%esp)
c01069ad:	c0 
c01069ae:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01069b5:	c0 
c01069b6:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c01069bd:	00 
c01069be:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c01069c5:	e8 10 a4 ff ff       	call   c0100dda <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01069ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01069cd:	89 04 24             	mov    %eax,(%esp)
c01069d0:	e8 f6 e3 ff ff       	call   c0104dcb <page2kva>
c01069d5:	05 00 01 00 00       	add    $0x100,%eax
c01069da:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01069dd:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c01069e4:	e8 27 68 00 00       	call   c010d210 <strlen>
c01069e9:	85 c0                	test   %eax,%eax
c01069eb:	74 24                	je     c0106a11 <check_boot_pgdir+0x33e>
c01069ed:	c7 44 24 0c a8 ea 10 	movl   $0xc010eaa8,0xc(%esp)
c01069f4:	c0 
c01069f5:	c7 44 24 08 b9 e5 10 	movl   $0xc010e5b9,0x8(%esp)
c01069fc:	c0 
c01069fd:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c0106a04:	00 
c0106a05:	c7 04 24 94 e5 10 c0 	movl   $0xc010e594,(%esp)
c0106a0c:	e8 c9 a3 ff ff       	call   c0100dda <__panic>

    free_page(p);
c0106a11:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a18:	00 
c0106a19:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a1c:	89 04 24             	mov    %eax,(%esp)
c0106a1f:	e8 c1 e6 ff ff       	call   c01050e5 <free_pages>
    free_page(pa2page(PDE_ADDR(boot_pgdir[0])));
c0106a24:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106a29:	8b 00                	mov    (%eax),%eax
c0106a2b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106a30:	89 04 24             	mov    %eax,(%esp)
c0106a33:	e8 4e e3 ff ff       	call   c0104d86 <pa2page>
c0106a38:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a3f:	00 
c0106a40:	89 04 24             	mov    %eax,(%esp)
c0106a43:	e8 9d e6 ff ff       	call   c01050e5 <free_pages>
    boot_pgdir[0] = 0;
c0106a48:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106a4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106a53:	c7 04 24 cc ea 10 c0 	movl   $0xc010eacc,(%esp)
c0106a5a:	e8 f9 98 ff ff       	call   c0100358 <cprintf>
}
c0106a5f:	c9                   	leave  
c0106a60:	c3                   	ret    

c0106a61 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106a61:	55                   	push   %ebp
c0106a62:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a67:	83 e0 04             	and    $0x4,%eax
c0106a6a:	85 c0                	test   %eax,%eax
c0106a6c:	74 07                	je     c0106a75 <perm2str+0x14>
c0106a6e:	b8 75 00 00 00       	mov    $0x75,%eax
c0106a73:	eb 05                	jmp    c0106a7a <perm2str+0x19>
c0106a75:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a7a:	a2 28 34 1c c0       	mov    %al,0xc01c3428
    str[1] = 'r';
c0106a7f:	c6 05 29 34 1c c0 72 	movb   $0x72,0xc01c3429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a89:	83 e0 02             	and    $0x2,%eax
c0106a8c:	85 c0                	test   %eax,%eax
c0106a8e:	74 07                	je     c0106a97 <perm2str+0x36>
c0106a90:	b8 77 00 00 00       	mov    $0x77,%eax
c0106a95:	eb 05                	jmp    c0106a9c <perm2str+0x3b>
c0106a97:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106a9c:	a2 2a 34 1c c0       	mov    %al,0xc01c342a
    str[3] = '\0';
c0106aa1:	c6 05 2b 34 1c c0 00 	movb   $0x0,0xc01c342b
    return str;
c0106aa8:	b8 28 34 1c c0       	mov    $0xc01c3428,%eax
}
c0106aad:	5d                   	pop    %ebp
c0106aae:	c3                   	ret    

c0106aaf <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106aaf:	55                   	push   %ebp
c0106ab0:	89 e5                	mov    %esp,%ebp
c0106ab2:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106ab5:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ab8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106abb:	72 0a                	jb     c0106ac7 <get_pgtable_items+0x18>
        return 0;
c0106abd:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ac2:	e9 9c 00 00 00       	jmp    c0106b63 <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106ac7:	eb 04                	jmp    c0106acd <get_pgtable_items+0x1e>
        start ++;
c0106ac9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106acd:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ad0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ad3:	73 18                	jae    c0106aed <get_pgtable_items+0x3e>
c0106ad5:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ad8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106adf:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ae2:	01 d0                	add    %edx,%eax
c0106ae4:	8b 00                	mov    (%eax),%eax
c0106ae6:	83 e0 01             	and    $0x1,%eax
c0106ae9:	85 c0                	test   %eax,%eax
c0106aeb:	74 dc                	je     c0106ac9 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106aed:	8b 45 10             	mov    0x10(%ebp),%eax
c0106af0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106af3:	73 69                	jae    c0106b5e <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106af5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106af9:	74 08                	je     c0106b03 <get_pgtable_items+0x54>
            *left_store = start;
c0106afb:	8b 45 18             	mov    0x18(%ebp),%eax
c0106afe:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b01:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106b03:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b06:	8d 50 01             	lea    0x1(%eax),%edx
c0106b09:	89 55 10             	mov    %edx,0x10(%ebp)
c0106b0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b13:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b16:	01 d0                	add    %edx,%eax
c0106b18:	8b 00                	mov    (%eax),%eax
c0106b1a:	83 e0 07             	and    $0x7,%eax
c0106b1d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b20:	eb 04                	jmp    c0106b26 <get_pgtable_items+0x77>
            start ++;
c0106b22:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106b26:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b29:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b2c:	73 1d                	jae    c0106b4b <get_pgtable_items+0x9c>
c0106b2e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106b38:	8b 45 14             	mov    0x14(%ebp),%eax
c0106b3b:	01 d0                	add    %edx,%eax
c0106b3d:	8b 00                	mov    (%eax),%eax
c0106b3f:	83 e0 07             	and    $0x7,%eax
c0106b42:	89 c2                	mov    %eax,%edx
c0106b44:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b47:	39 c2                	cmp    %eax,%edx
c0106b49:	74 d7                	je     c0106b22 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106b4b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106b4f:	74 08                	je     c0106b59 <get_pgtable_items+0xaa>
            *right_store = start;
c0106b51:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106b54:	8b 55 10             	mov    0x10(%ebp),%edx
c0106b57:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106b59:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106b5c:	eb 05                	jmp    c0106b63 <get_pgtable_items+0xb4>
    }
    return 0;
c0106b5e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106b63:	c9                   	leave  
c0106b64:	c3                   	ret    

c0106b65 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106b65:	55                   	push   %ebp
c0106b66:	89 e5                	mov    %esp,%ebp
c0106b68:	57                   	push   %edi
c0106b69:	56                   	push   %esi
c0106b6a:	53                   	push   %ebx
c0106b6b:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106b6e:	c7 04 24 ec ea 10 c0 	movl   $0xc010eaec,(%esp)
c0106b75:	e8 de 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106b7a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106b81:	e9 fa 00 00 00       	jmp    c0106c80 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b89:	89 04 24             	mov    %eax,(%esp)
c0106b8c:	e8 d0 fe ff ff       	call   c0106a61 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106b91:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106b94:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b97:	29 d1                	sub    %edx,%ecx
c0106b99:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106b9b:	89 d6                	mov    %edx,%esi
c0106b9d:	c1 e6 16             	shl    $0x16,%esi
c0106ba0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106ba3:	89 d3                	mov    %edx,%ebx
c0106ba5:	c1 e3 16             	shl    $0x16,%ebx
c0106ba8:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106bab:	89 d1                	mov    %edx,%ecx
c0106bad:	c1 e1 16             	shl    $0x16,%ecx
c0106bb0:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106bb3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106bb6:	29 d7                	sub    %edx,%edi
c0106bb8:	89 fa                	mov    %edi,%edx
c0106bba:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106bbe:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106bc2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106bc6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106bca:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106bce:	c7 04 24 1d eb 10 c0 	movl   $0xc010eb1d,(%esp)
c0106bd5:	e8 7e 97 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106bda:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106bdd:	c1 e0 0a             	shl    $0xa,%eax
c0106be0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106be3:	eb 54                	jmp    c0106c39 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106be5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106be8:	89 04 24             	mov    %eax,(%esp)
c0106beb:	e8 71 fe ff ff       	call   c0106a61 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106bf0:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106bf3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106bf6:	29 d1                	sub    %edx,%ecx
c0106bf8:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106bfa:	89 d6                	mov    %edx,%esi
c0106bfc:	c1 e6 0c             	shl    $0xc,%esi
c0106bff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106c02:	89 d3                	mov    %edx,%ebx
c0106c04:	c1 e3 0c             	shl    $0xc,%ebx
c0106c07:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c0a:	c1 e2 0c             	shl    $0xc,%edx
c0106c0d:	89 d1                	mov    %edx,%ecx
c0106c0f:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106c12:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106c15:	29 d7                	sub    %edx,%edi
c0106c17:	89 fa                	mov    %edi,%edx
c0106c19:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c1d:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c21:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c25:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c29:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c2d:	c7 04 24 3c eb 10 c0 	movl   $0xc010eb3c,(%esp)
c0106c34:	e8 1f 97 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106c39:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106c3e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106c41:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c44:	89 ce                	mov    %ecx,%esi
c0106c46:	c1 e6 0a             	shl    $0xa,%esi
c0106c49:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106c4c:	89 cb                	mov    %ecx,%ebx
c0106c4e:	c1 e3 0a             	shl    $0xa,%ebx
c0106c51:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106c54:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106c58:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106c5b:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c5f:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c63:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c67:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106c6b:	89 1c 24             	mov    %ebx,(%esp)
c0106c6e:	e8 3c fe ff ff       	call   c0106aaf <get_pgtable_items>
c0106c73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106c76:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106c7a:	0f 85 65 ff ff ff    	jne    c0106be5 <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c80:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c0106c85:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c88:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106c8b:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106c8f:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106c92:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106c96:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106c9a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106c9e:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106ca5:	00 
c0106ca6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106cad:	e8 fd fd ff ff       	call   c0106aaf <get_pgtable_items>
c0106cb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106cb5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106cb9:	0f 85 c7 fe ff ff    	jne    c0106b86 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106cbf:	c7 04 24 60 eb 10 c0 	movl   $0xc010eb60,(%esp)
c0106cc6:	e8 8d 96 ff ff       	call   c0100358 <cprintf>
}
c0106ccb:	83 c4 4c             	add    $0x4c,%esp
c0106cce:	5b                   	pop    %ebx
c0106ccf:	5e                   	pop    %esi
c0106cd0:	5f                   	pop    %edi
c0106cd1:	5d                   	pop    %ebp
c0106cd2:	c3                   	ret    

c0106cd3 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106cd3:	55                   	push   %ebp
c0106cd4:	89 e5                	mov    %esp,%ebp
c0106cd6:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cdc:	c1 e8 0c             	shr    $0xc,%eax
c0106cdf:	89 c2                	mov    %eax,%edx
c0106ce1:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106ce6:	39 c2                	cmp    %eax,%edx
c0106ce8:	72 1c                	jb     c0106d06 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106cea:	c7 44 24 08 94 eb 10 	movl   $0xc010eb94,0x8(%esp)
c0106cf1:	c0 
c0106cf2:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106cf9:	00 
c0106cfa:	c7 04 24 b3 eb 10 c0 	movl   $0xc010ebb3,(%esp)
c0106d01:	e8 d4 a0 ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0106d06:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0106d0b:	8b 55 08             	mov    0x8(%ebp),%edx
c0106d0e:	c1 ea 0c             	shr    $0xc,%edx
c0106d11:	c1 e2 05             	shl    $0x5,%edx
c0106d14:	01 d0                	add    %edx,%eax
}
c0106d16:	c9                   	leave  
c0106d17:	c3                   	ret    

c0106d18 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106d18:	55                   	push   %ebp
c0106d19:	89 e5                	mov    %esp,%ebp
c0106d1b:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106d1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d21:	83 e0 01             	and    $0x1,%eax
c0106d24:	85 c0                	test   %eax,%eax
c0106d26:	75 1c                	jne    c0106d44 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106d28:	c7 44 24 08 c4 eb 10 	movl   $0xc010ebc4,0x8(%esp)
c0106d2f:	c0 
c0106d30:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106d37:	00 
c0106d38:	c7 04 24 b3 eb 10 c0 	movl   $0xc010ebb3,(%esp)
c0106d3f:	e8 96 a0 ff ff       	call   c0100dda <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106d44:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d47:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106d4c:	89 04 24             	mov    %eax,(%esp)
c0106d4f:	e8 7f ff ff ff       	call   c0106cd3 <pa2page>
}
c0106d54:	c9                   	leave  
c0106d55:	c3                   	ret    

c0106d56 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106d56:	55                   	push   %ebp
c0106d57:	89 e5                	mov    %esp,%ebp
c0106d59:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106d5c:	e8 20 33 00 00       	call   c010a081 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106d61:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d66:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106d6b:	76 0c                	jbe    c0106d79 <swap_init+0x23>
c0106d6d:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d72:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106d77:	76 25                	jbe    c0106d9e <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106d79:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0106d7e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106d82:	c7 44 24 08 e5 eb 10 	movl   $0xc010ebe5,0x8(%esp)
c0106d89:	c0 
c0106d8a:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106d91:	00 
c0106d92:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0106d99:	e8 3c a0 ff ff       	call   c0100dda <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106d9e:	c7 05 34 34 1c c0 60 	movl   $0xc0131a60,0xc01c3434
c0106da5:	1a 13 c0 
     int r = sm->init();
c0106da8:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106dad:	8b 40 04             	mov    0x4(%eax),%eax
c0106db0:	ff d0                	call   *%eax
c0106db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106db5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106db9:	75 26                	jne    c0106de1 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106dbb:	c7 05 2c 34 1c c0 01 	movl   $0x1,0xc01c342c
c0106dc2:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106dc5:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106dca:	8b 00                	mov    (%eax),%eax
c0106dcc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106dd0:	c7 04 24 0f ec 10 c0 	movl   $0xc010ec0f,(%esp)
c0106dd7:	e8 7c 95 ff ff       	call   c0100358 <cprintf>
          check_swap();
c0106ddc:	e8 a4 04 00 00       	call   c0107285 <check_swap>
     }

     return r;
c0106de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106de4:	c9                   	leave  
c0106de5:	c3                   	ret    

c0106de6 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106de6:	55                   	push   %ebp
c0106de7:	89 e5                	mov    %esp,%ebp
c0106de9:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106dec:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106df1:	8b 40 08             	mov    0x8(%eax),%eax
c0106df4:	8b 55 08             	mov    0x8(%ebp),%edx
c0106df7:	89 14 24             	mov    %edx,(%esp)
c0106dfa:	ff d0                	call   *%eax
}
c0106dfc:	c9                   	leave  
c0106dfd:	c3                   	ret    

c0106dfe <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106dfe:	55                   	push   %ebp
c0106dff:	89 e5                	mov    %esp,%ebp
c0106e01:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106e04:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106e09:	8b 40 0c             	mov    0xc(%eax),%eax
c0106e0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e0f:	89 14 24             	mov    %edx,(%esp)
c0106e12:	ff d0                	call   *%eax
}
c0106e14:	c9                   	leave  
c0106e15:	c3                   	ret    

c0106e16 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106e16:	55                   	push   %ebp
c0106e17:	89 e5                	mov    %esp,%ebp
c0106e19:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106e1c:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106e21:	8b 40 10             	mov    0x10(%eax),%eax
c0106e24:	8b 55 14             	mov    0x14(%ebp),%edx
c0106e27:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106e2b:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e2e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e32:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e35:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e39:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e3c:	89 14 24             	mov    %edx,(%esp)
c0106e3f:	ff d0                	call   *%eax
}
c0106e41:	c9                   	leave  
c0106e42:	c3                   	ret    

c0106e43 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106e43:	55                   	push   %ebp
c0106e44:	89 e5                	mov    %esp,%ebp
c0106e46:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106e49:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106e4e:	8b 40 14             	mov    0x14(%eax),%eax
c0106e51:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e54:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e58:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e5b:	89 14 24             	mov    %edx,(%esp)
c0106e5e:	ff d0                	call   *%eax
}
c0106e60:	c9                   	leave  
c0106e61:	c3                   	ret    

c0106e62 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106e62:	55                   	push   %ebp
c0106e63:	89 e5                	mov    %esp,%ebp
c0106e65:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106e68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106e6f:	e9 5a 01 00 00       	jmp    c0106fce <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106e74:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106e79:	8b 40 18             	mov    0x18(%eax),%eax
c0106e7c:	8b 55 10             	mov    0x10(%ebp),%edx
c0106e7f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106e83:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0106e86:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e8a:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e8d:	89 14 24             	mov    %edx,(%esp)
c0106e90:	ff d0                	call   *%eax
c0106e92:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106e95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106e99:	74 18                	je     c0106eb3 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e9e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106ea2:	c7 04 24 24 ec 10 c0 	movl   $0xc010ec24,(%esp)
c0106ea9:	e8 aa 94 ff ff       	call   c0100358 <cprintf>
c0106eae:	e9 27 01 00 00       	jmp    c0106fda <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106eb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106eb6:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106eb9:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ebf:	8b 40 0c             	mov    0xc(%eax),%eax
c0106ec2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106ec9:	00 
c0106eca:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106ecd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ed1:	89 04 24             	mov    %eax,(%esp)
c0106ed4:	e8 08 e9 ff ff       	call   c01057e1 <get_pte>
c0106ed9:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106edc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106edf:	8b 00                	mov    (%eax),%eax
c0106ee1:	83 e0 01             	and    $0x1,%eax
c0106ee4:	85 c0                	test   %eax,%eax
c0106ee6:	75 24                	jne    c0106f0c <swap_out+0xaa>
c0106ee8:	c7 44 24 0c 51 ec 10 	movl   $0xc010ec51,0xc(%esp)
c0106eef:	c0 
c0106ef0:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0106ef7:	c0 
c0106ef8:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106eff:	00 
c0106f00:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0106f07:	e8 ce 9e ff ff       	call   c0100dda <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106f0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f12:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106f15:	c1 ea 0c             	shr    $0xc,%edx
c0106f18:	83 c2 01             	add    $0x1,%edx
c0106f1b:	c1 e2 08             	shl    $0x8,%edx
c0106f1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f22:	89 14 24             	mov    %edx,(%esp)
c0106f25:	e8 11 32 00 00       	call   c010a13b <swapfs_write>
c0106f2a:	85 c0                	test   %eax,%eax
c0106f2c:	74 34                	je     c0106f62 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0106f2e:	c7 04 24 7b ec 10 c0 	movl   $0xc010ec7b,(%esp)
c0106f35:	e8 1e 94 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0106f3a:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0106f3f:	8b 40 10             	mov    0x10(%eax),%eax
c0106f42:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106f45:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106f4c:	00 
c0106f4d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106f51:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106f54:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f58:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f5b:	89 14 24             	mov    %edx,(%esp)
c0106f5e:	ff d0                	call   *%eax
c0106f60:	eb 68                	jmp    c0106fca <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0106f62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f65:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f68:	c1 e8 0c             	shr    $0xc,%eax
c0106f6b:	83 c0 01             	add    $0x1,%eax
c0106f6e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f75:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f7c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f80:	c7 04 24 94 ec 10 c0 	movl   $0xc010ec94,(%esp)
c0106f87:	e8 cc 93 ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0106f8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f8f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f92:	c1 e8 0c             	shr    $0xc,%eax
c0106f95:	83 c0 01             	add    $0x1,%eax
c0106f98:	c1 e0 08             	shl    $0x8,%eax
c0106f9b:	89 c2                	mov    %eax,%edx
c0106f9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106fa0:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106fa2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fa5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106fac:	00 
c0106fad:	89 04 24             	mov    %eax,(%esp)
c0106fb0:	e8 30 e1 ff ff       	call   c01050e5 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fb8:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fbb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fbe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fc2:	89 04 24             	mov    %eax,(%esp)
c0106fc5:	e8 1f ef ff ff       	call   c0105ee9 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0106fca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fd1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106fd4:	0f 85 9a fe ff ff    	jne    c0106e74 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0106fda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106fdd:	c9                   	leave  
c0106fde:	c3                   	ret    

c0106fdf <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106fdf:	55                   	push   %ebp
c0106fe0:	89 e5                	mov    %esp,%ebp
c0106fe2:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0106fe5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106fec:	e8 89 e0 ff ff       	call   c010507a <alloc_pages>
c0106ff1:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106ff4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ff8:	75 24                	jne    c010701e <swap_in+0x3f>
c0106ffa:	c7 44 24 0c d4 ec 10 	movl   $0xc010ecd4,0xc(%esp)
c0107001:	c0 
c0107002:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107009:	c0 
c010700a:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107011:	00 
c0107012:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107019:	e8 bc 9d ff ff       	call   c0100dda <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010701e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107021:	8b 40 0c             	mov    0xc(%eax),%eax
c0107024:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010702b:	00 
c010702c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010702f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107033:	89 04 24             	mov    %eax,(%esp)
c0107036:	e8 a6 e7 ff ff       	call   c01057e1 <get_pte>
c010703b:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010703e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107041:	8b 00                	mov    (%eax),%eax
c0107043:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107046:	89 54 24 04          	mov    %edx,0x4(%esp)
c010704a:	89 04 24             	mov    %eax,(%esp)
c010704d:	e8 77 30 00 00       	call   c010a0c9 <swapfs_read>
c0107052:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107055:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107059:	74 2a                	je     c0107085 <swap_in+0xa6>
     {
        assert(r!=0);
c010705b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010705f:	75 24                	jne    c0107085 <swap_in+0xa6>
c0107061:	c7 44 24 0c e1 ec 10 	movl   $0xc010ece1,0xc(%esp)
c0107068:	c0 
c0107069:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107070:	c0 
c0107071:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107078:	00 
c0107079:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107080:	e8 55 9d ff ff       	call   c0100dda <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107085:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107088:	8b 00                	mov    (%eax),%eax
c010708a:	c1 e8 08             	shr    $0x8,%eax
c010708d:	89 c2                	mov    %eax,%edx
c010708f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107092:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107096:	89 54 24 04          	mov    %edx,0x4(%esp)
c010709a:	c7 04 24 e8 ec 10 c0 	movl   $0xc010ece8,(%esp)
c01070a1:	e8 b2 92 ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c01070a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01070ac:	89 10                	mov    %edx,(%eax)
     return 0;
c01070ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01070b3:	c9                   	leave  
c01070b4:	c3                   	ret    

c01070b5 <check_content_set>:



static inline void
check_content_set(void)
{
c01070b5:	55                   	push   %ebp
c01070b6:	89 e5                	mov    %esp,%ebp
c01070b8:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01070bb:	b8 00 10 00 00       	mov    $0x1000,%eax
c01070c0:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01070c3:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01070c8:	83 f8 01             	cmp    $0x1,%eax
c01070cb:	74 24                	je     c01070f1 <check_content_set+0x3c>
c01070cd:	c7 44 24 0c 26 ed 10 	movl   $0xc010ed26,0xc(%esp)
c01070d4:	c0 
c01070d5:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01070dc:	c0 
c01070dd:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01070e4:	00 
c01070e5:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01070ec:	e8 e9 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01070f1:	b8 10 10 00 00       	mov    $0x1010,%eax
c01070f6:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01070f9:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01070fe:	83 f8 01             	cmp    $0x1,%eax
c0107101:	74 24                	je     c0107127 <check_content_set+0x72>
c0107103:	c7 44 24 0c 26 ed 10 	movl   $0xc010ed26,0xc(%esp)
c010710a:	c0 
c010710b:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107112:	c0 
c0107113:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010711a:	00 
c010711b:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107122:	e8 b3 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107127:	b8 00 20 00 00       	mov    $0x2000,%eax
c010712c:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010712f:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107134:	83 f8 02             	cmp    $0x2,%eax
c0107137:	74 24                	je     c010715d <check_content_set+0xa8>
c0107139:	c7 44 24 0c 35 ed 10 	movl   $0xc010ed35,0xc(%esp)
c0107140:	c0 
c0107141:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107148:	c0 
c0107149:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107150:	00 
c0107151:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107158:	e8 7d 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010715d:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107162:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107165:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010716a:	83 f8 02             	cmp    $0x2,%eax
c010716d:	74 24                	je     c0107193 <check_content_set+0xde>
c010716f:	c7 44 24 0c 35 ed 10 	movl   $0xc010ed35,0xc(%esp)
c0107176:	c0 
c0107177:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c010717e:	c0 
c010717f:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107186:	00 
c0107187:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c010718e:	e8 47 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107193:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107198:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010719b:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01071a0:	83 f8 03             	cmp    $0x3,%eax
c01071a3:	74 24                	je     c01071c9 <check_content_set+0x114>
c01071a5:	c7 44 24 0c 44 ed 10 	movl   $0xc010ed44,0xc(%esp)
c01071ac:	c0 
c01071ad:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01071b4:	c0 
c01071b5:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01071bc:	00 
c01071bd:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01071c4:	e8 11 9c ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01071c9:	b8 10 30 00 00       	mov    $0x3010,%eax
c01071ce:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01071d1:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01071d6:	83 f8 03             	cmp    $0x3,%eax
c01071d9:	74 24                	je     c01071ff <check_content_set+0x14a>
c01071db:	c7 44 24 0c 44 ed 10 	movl   $0xc010ed44,0xc(%esp)
c01071e2:	c0 
c01071e3:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01071ea:	c0 
c01071eb:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01071f2:	00 
c01071f3:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01071fa:	e8 db 9b ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01071ff:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107204:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107207:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010720c:	83 f8 04             	cmp    $0x4,%eax
c010720f:	74 24                	je     c0107235 <check_content_set+0x180>
c0107211:	c7 44 24 0c 53 ed 10 	movl   $0xc010ed53,0xc(%esp)
c0107218:	c0 
c0107219:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107220:	c0 
c0107221:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107228:	00 
c0107229:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107230:	e8 a5 9b ff ff       	call   c0100dda <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107235:	b8 10 40 00 00       	mov    $0x4010,%eax
c010723a:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010723d:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107242:	83 f8 04             	cmp    $0x4,%eax
c0107245:	74 24                	je     c010726b <check_content_set+0x1b6>
c0107247:	c7 44 24 0c 53 ed 10 	movl   $0xc010ed53,0xc(%esp)
c010724e:	c0 
c010724f:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107256:	c0 
c0107257:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010725e:	00 
c010725f:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107266:	e8 6f 9b ff ff       	call   c0100dda <__panic>
}
c010726b:	c9                   	leave  
c010726c:	c3                   	ret    

c010726d <check_content_access>:

static inline int
check_content_access(void)
{
c010726d:	55                   	push   %ebp
c010726e:	89 e5                	mov    %esp,%ebp
c0107270:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107273:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0107278:	8b 40 1c             	mov    0x1c(%eax),%eax
c010727b:	ff d0                	call   *%eax
c010727d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107280:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107283:	c9                   	leave  
c0107284:	c3                   	ret    

c0107285 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107285:	55                   	push   %ebp
c0107286:	89 e5                	mov    %esp,%ebp
c0107288:	53                   	push   %ebx
c0107289:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010728c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107293:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010729a:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01072a1:	eb 6b                	jmp    c010730e <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c01072a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072a6:	83 e8 0c             	sub    $0xc,%eax
c01072a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01072ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072af:	83 c0 04             	add    $0x4,%eax
c01072b2:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01072b9:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01072bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01072bf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01072c2:	0f a3 10             	bt     %edx,(%eax)
c01072c5:	19 c0                	sbb    %eax,%eax
c01072c7:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c01072ca:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01072ce:	0f 95 c0             	setne  %al
c01072d1:	0f b6 c0             	movzbl %al,%eax
c01072d4:	85 c0                	test   %eax,%eax
c01072d6:	75 24                	jne    c01072fc <check_swap+0x77>
c01072d8:	c7 44 24 0c 62 ed 10 	movl   $0xc010ed62,0xc(%esp)
c01072df:	c0 
c01072e0:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01072e7:	c0 
c01072e8:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01072ef:	00 
c01072f0:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01072f7:	e8 de 9a ff ff       	call   c0100dda <__panic>
        count ++, total += p->property;
c01072fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107300:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107303:	8b 50 08             	mov    0x8(%eax),%edx
c0107306:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107309:	01 d0                	add    %edx,%eax
c010730b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010730e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107311:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107314:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107317:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010731a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010731d:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c0107324:	0f 85 79 ff ff ff    	jne    c01072a3 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010732a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010732d:	e8 e5 dd ff ff       	call   c0105117 <nr_free_pages>
c0107332:	39 c3                	cmp    %eax,%ebx
c0107334:	74 24                	je     c010735a <check_swap+0xd5>
c0107336:	c7 44 24 0c 72 ed 10 	movl   $0xc010ed72,0xc(%esp)
c010733d:	c0 
c010733e:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107345:	c0 
c0107346:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010734d:	00 
c010734e:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107355:	e8 80 9a ff ff       	call   c0100dda <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010735a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010735d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107361:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107364:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107368:	c7 04 24 8c ed 10 c0 	movl   $0xc010ed8c,(%esp)
c010736f:	e8 e4 8f ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107374:	e8 9a 0a 00 00       	call   c0107e13 <mm_create>
c0107379:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010737c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107380:	75 24                	jne    c01073a6 <check_swap+0x121>
c0107382:	c7 44 24 0c b2 ed 10 	movl   $0xc010edb2,0xc(%esp)
c0107389:	c0 
c010738a:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107391:	c0 
c0107392:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107399:	00 
c010739a:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01073a1:	e8 34 9a ff ff       	call   c0100dda <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01073a6:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01073ab:	85 c0                	test   %eax,%eax
c01073ad:	74 24                	je     c01073d3 <check_swap+0x14e>
c01073af:	c7 44 24 0c bd ed 10 	movl   $0xc010edbd,0xc(%esp)
c01073b6:	c0 
c01073b7:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01073be:	c0 
c01073bf:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01073c6:	00 
c01073c7:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01073ce:	e8 07 9a ff ff       	call   c0100dda <__panic>

     check_mm_struct = mm;
c01073d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073d6:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01073db:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c01073e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073e4:	89 50 0c             	mov    %edx,0xc(%eax)
c01073e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073ea:	8b 40 0c             	mov    0xc(%eax),%eax
c01073ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01073f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01073f3:	8b 00                	mov    (%eax),%eax
c01073f5:	85 c0                	test   %eax,%eax
c01073f7:	74 24                	je     c010741d <check_swap+0x198>
c01073f9:	c7 44 24 0c d5 ed 10 	movl   $0xc010edd5,0xc(%esp)
c0107400:	c0 
c0107401:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107408:	c0 
c0107409:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107410:	00 
c0107411:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107418:	e8 bd 99 ff ff       	call   c0100dda <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010741d:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107424:	00 
c0107425:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010742c:	00 
c010742d:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107434:	e8 7f 0a 00 00       	call   c0107eb8 <vma_create>
c0107439:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010743c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107440:	75 24                	jne    c0107466 <check_swap+0x1e1>
c0107442:	c7 44 24 0c e3 ed 10 	movl   $0xc010ede3,0xc(%esp)
c0107449:	c0 
c010744a:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107451:	c0 
c0107452:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107459:	00 
c010745a:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107461:	e8 74 99 ff ff       	call   c0100dda <__panic>

     insert_vma_struct(mm, vma);
c0107466:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107469:	89 44 24 04          	mov    %eax,0x4(%esp)
c010746d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107470:	89 04 24             	mov    %eax,(%esp)
c0107473:	e8 d0 0b 00 00       	call   c0108048 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107478:	c7 04 24 f0 ed 10 c0 	movl   $0xc010edf0,(%esp)
c010747f:	e8 d4 8e ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107484:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010748b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010748e:	8b 40 0c             	mov    0xc(%eax),%eax
c0107491:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107498:	00 
c0107499:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01074a0:	00 
c01074a1:	89 04 24             	mov    %eax,(%esp)
c01074a4:	e8 38 e3 ff ff       	call   c01057e1 <get_pte>
c01074a9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c01074ac:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c01074b0:	75 24                	jne    c01074d6 <check_swap+0x251>
c01074b2:	c7 44 24 0c 24 ee 10 	movl   $0xc010ee24,0xc(%esp)
c01074b9:	c0 
c01074ba:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01074c1:	c0 
c01074c2:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01074c9:	00 
c01074ca:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01074d1:	e8 04 99 ff ff       	call   c0100dda <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01074d6:	c7 04 24 38 ee 10 c0 	movl   $0xc010ee38,(%esp)
c01074dd:	e8 76 8e ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01074e2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01074e9:	e9 a3 00 00 00       	jmp    c0107591 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01074ee:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01074f5:	e8 80 db ff ff       	call   c010507a <alloc_pages>
c01074fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01074fd:	89 04 95 00 55 1c c0 	mov    %eax,-0x3fe3ab00(,%edx,4)
          assert(check_rp[i] != NULL );
c0107504:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107507:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c010750e:	85 c0                	test   %eax,%eax
c0107510:	75 24                	jne    c0107536 <check_swap+0x2b1>
c0107512:	c7 44 24 0c 5c ee 10 	movl   $0xc010ee5c,0xc(%esp)
c0107519:	c0 
c010751a:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107521:	c0 
c0107522:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107529:	00 
c010752a:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107531:	e8 a4 98 ff ff       	call   c0100dda <__panic>
          assert(!PageProperty(check_rp[i]));
c0107536:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107539:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c0107540:	83 c0 04             	add    $0x4,%eax
c0107543:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010754a:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010754d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107550:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107553:	0f a3 10             	bt     %edx,(%eax)
c0107556:	19 c0                	sbb    %eax,%eax
c0107558:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c010755b:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010755f:	0f 95 c0             	setne  %al
c0107562:	0f b6 c0             	movzbl %al,%eax
c0107565:	85 c0                	test   %eax,%eax
c0107567:	74 24                	je     c010758d <check_swap+0x308>
c0107569:	c7 44 24 0c 70 ee 10 	movl   $0xc010ee70,0xc(%esp)
c0107570:	c0 
c0107571:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107578:	c0 
c0107579:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107580:	00 
c0107581:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107588:	e8 4d 98 ff ff       	call   c0100dda <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010758d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107591:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107595:	0f 8e 53 ff ff ff    	jle    c01074ee <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010759b:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c01075a0:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c01075a6:	89 45 98             	mov    %eax,-0x68(%ebp)
c01075a9:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01075ac:	c7 45 a8 dc 54 1c c0 	movl   $0xc01c54dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01075b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075b6:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01075b9:	89 50 04             	mov    %edx,0x4(%eax)
c01075bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075bf:	8b 50 04             	mov    0x4(%eax),%edx
c01075c2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01075c5:	89 10                	mov    %edx,(%eax)
c01075c7:	c7 45 a4 dc 54 1c c0 	movl   $0xc01c54dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01075ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01075d1:	8b 40 04             	mov    0x4(%eax),%eax
c01075d4:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01075d7:	0f 94 c0             	sete   %al
c01075da:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01075dd:	85 c0                	test   %eax,%eax
c01075df:	75 24                	jne    c0107605 <check_swap+0x380>
c01075e1:	c7 44 24 0c 8b ee 10 	movl   $0xc010ee8b,0xc(%esp)
c01075e8:	c0 
c01075e9:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01075f0:	c0 
c01075f1:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01075f8:	00 
c01075f9:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107600:	e8 d5 97 ff ff       	call   c0100dda <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0107605:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c010760a:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c010760d:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c0107614:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107617:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010761e:	eb 1e                	jmp    c010763e <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107620:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107623:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c010762a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107631:	00 
c0107632:	89 04 24             	mov    %eax,(%esp)
c0107635:	e8 ab da ff ff       	call   c01050e5 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010763a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010763e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107642:	7e dc                	jle    c0107620 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107644:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0107649:	83 f8 04             	cmp    $0x4,%eax
c010764c:	74 24                	je     c0107672 <check_swap+0x3ed>
c010764e:	c7 44 24 0c a4 ee 10 	movl   $0xc010eea4,0xc(%esp)
c0107655:	c0 
c0107656:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c010765d:	c0 
c010765e:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107665:	00 
c0107666:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c010766d:	e8 68 97 ff ff       	call   c0100dda <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107672:	c7 04 24 c8 ee 10 c0 	movl   $0xc010eec8,(%esp)
c0107679:	e8 da 8c ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010767e:	c7 05 38 34 1c c0 00 	movl   $0x0,0xc01c3438
c0107685:	00 00 00 
     
     check_content_set();
c0107688:	e8 28 fa ff ff       	call   c01070b5 <check_content_set>
     assert( nr_free == 0);         
c010768d:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0107692:	85 c0                	test   %eax,%eax
c0107694:	74 24                	je     c01076ba <check_swap+0x435>
c0107696:	c7 44 24 0c ef ee 10 	movl   $0xc010eeef,0xc(%esp)
c010769d:	c0 
c010769e:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01076a5:	c0 
c01076a6:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01076ad:	00 
c01076ae:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01076b5:	e8 20 97 ff ff       	call   c0100dda <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01076ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076c1:	eb 26                	jmp    c01076e9 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01076c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076c6:	c7 04 85 20 55 1c c0 	movl   $0xffffffff,-0x3fe3aae0(,%eax,4)
c01076cd:	ff ff ff ff 
c01076d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076d4:	8b 14 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%edx
c01076db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076de:	89 14 85 60 55 1c c0 	mov    %edx,-0x3fe3aaa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01076e5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01076e9:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01076ed:	7e d4                	jle    c01076c3 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076f6:	e9 eb 00 00 00       	jmp    c01077e6 <check_swap+0x561>
         check_ptep[i]=0;
c01076fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076fe:	c7 04 85 b4 55 1c c0 	movl   $0x0,-0x3fe3aa4c(,%eax,4)
c0107705:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107709:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010770c:	83 c0 01             	add    $0x1,%eax
c010770f:	c1 e0 0c             	shl    $0xc,%eax
c0107712:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107719:	00 
c010771a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010771e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107721:	89 04 24             	mov    %eax,(%esp)
c0107724:	e8 b8 e0 ff ff       	call   c01057e1 <get_pte>
c0107729:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010772c:	89 04 95 b4 55 1c c0 	mov    %eax,-0x3fe3aa4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107733:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107736:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c010773d:	85 c0                	test   %eax,%eax
c010773f:	75 24                	jne    c0107765 <check_swap+0x4e0>
c0107741:	c7 44 24 0c fc ee 10 	movl   $0xc010eefc,0xc(%esp)
c0107748:	c0 
c0107749:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107750:	c0 
c0107751:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107758:	00 
c0107759:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107760:	e8 75 96 ff ff       	call   c0100dda <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107768:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c010776f:	8b 00                	mov    (%eax),%eax
c0107771:	89 04 24             	mov    %eax,(%esp)
c0107774:	e8 9f f5 ff ff       	call   c0106d18 <pte2page>
c0107779:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010777c:	8b 14 95 00 55 1c c0 	mov    -0x3fe3ab00(,%edx,4),%edx
c0107783:	39 d0                	cmp    %edx,%eax
c0107785:	74 24                	je     c01077ab <check_swap+0x526>
c0107787:	c7 44 24 0c 14 ef 10 	movl   $0xc010ef14,0xc(%esp)
c010778e:	c0 
c010778f:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107796:	c0 
c0107797:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010779e:	00 
c010779f:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01077a6:	e8 2f 96 ff ff       	call   c0100dda <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01077ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077ae:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c01077b5:	8b 00                	mov    (%eax),%eax
c01077b7:	83 e0 01             	and    $0x1,%eax
c01077ba:	85 c0                	test   %eax,%eax
c01077bc:	75 24                	jne    c01077e2 <check_swap+0x55d>
c01077be:	c7 44 24 0c 3c ef 10 	movl   $0xc010ef3c,0xc(%esp)
c01077c5:	c0 
c01077c6:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c01077cd:	c0 
c01077ce:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01077d5:	00 
c01077d6:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c01077dd:	e8 f8 95 ff ff       	call   c0100dda <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077e2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077e6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077ea:	0f 8e 0b ff ff ff    	jle    c01076fb <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01077f0:	c7 04 24 58 ef 10 c0 	movl   $0xc010ef58,(%esp)
c01077f7:	e8 5c 8b ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01077fc:	e8 6c fa ff ff       	call   c010726d <check_content_access>
c0107801:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107804:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107808:	74 24                	je     c010782e <check_swap+0x5a9>
c010780a:	c7 44 24 0c 7e ef 10 	movl   $0xc010ef7e,0xc(%esp)
c0107811:	c0 
c0107812:	c7 44 24 08 66 ec 10 	movl   $0xc010ec66,0x8(%esp)
c0107819:	c0 
c010781a:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107821:	00 
c0107822:	c7 04 24 00 ec 10 c0 	movl   $0xc010ec00,(%esp)
c0107829:	e8 ac 95 ff ff       	call   c0100dda <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010782e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107835:	eb 1e                	jmp    c0107855 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107837:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010783a:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c0107841:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107848:	00 
c0107849:	89 04 24             	mov    %eax,(%esp)
c010784c:	e8 94 d8 ff ff       	call   c01050e5 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107851:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107855:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107859:	7e dc                	jle    c0107837 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pa2page(pgdir[0]));
c010785b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010785e:	8b 00                	mov    (%eax),%eax
c0107860:	89 04 24             	mov    %eax,(%esp)
c0107863:	e8 6b f4 ff ff       	call   c0106cd3 <pa2page>
c0107868:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010786f:	00 
c0107870:	89 04 24             	mov    %eax,(%esp)
c0107873:	e8 6d d8 ff ff       	call   c01050e5 <free_pages>
     pgdir[0] = 0;
c0107878:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010787b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107881:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107884:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010788b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010788e:	89 04 24             	mov    %eax,(%esp)
c0107891:	e8 e2 08 00 00       	call   c0108178 <mm_destroy>
     check_mm_struct = NULL;
c0107896:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c010789d:	00 00 00 
     
     nr_free = nr_free_store;
c01078a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01078a3:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
     free_list = free_list_store;
c01078a8:	8b 45 98             	mov    -0x68(%ebp),%eax
c01078ab:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01078ae:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c01078b3:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0

     
     le = &free_list;
c01078b9:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01078c0:	eb 1d                	jmp    c01078df <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c01078c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078c5:	83 e8 0c             	sub    $0xc,%eax
c01078c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01078cb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01078cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01078d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01078d5:	8b 40 08             	mov    0x8(%eax),%eax
c01078d8:	29 c2                	sub    %eax,%edx
c01078da:	89 d0                	mov    %edx,%eax
c01078dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01078df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01078e2:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01078e5:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01078e8:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01078eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01078ee:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c01078f5:	75 cb                	jne    c01078c2 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01078f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078fa:	89 44 24 08          	mov    %eax,0x8(%esp)
c01078fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107901:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107905:	c7 04 24 85 ef 10 c0 	movl   $0xc010ef85,(%esp)
c010790c:	e8 47 8a ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107911:	c7 04 24 9f ef 10 c0 	movl   $0xc010ef9f,(%esp)
c0107918:	e8 3b 8a ff ff       	call   c0100358 <cprintf>
}
c010791d:	83 c4 74             	add    $0x74,%esp
c0107920:	5b                   	pop    %ebx
c0107921:	5d                   	pop    %ebp
c0107922:	c3                   	ret    

c0107923 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107923:	55                   	push   %ebp
c0107924:	89 e5                	mov    %esp,%ebp
c0107926:	83 ec 10             	sub    $0x10,%esp
c0107929:	c7 45 fc c4 55 1c c0 	movl   $0xc01c55c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107930:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107933:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107936:	89 50 04             	mov    %edx,0x4(%eax)
c0107939:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010793c:	8b 50 04             	mov    0x4(%eax),%edx
c010793f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107942:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107944:	8b 45 08             	mov    0x8(%ebp),%eax
c0107947:	c7 40 14 c4 55 1c c0 	movl   $0xc01c55c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c010794e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107953:	c9                   	leave  
c0107954:	c3                   	ret    

c0107955 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107955:	55                   	push   %ebp
c0107956:	89 e5                	mov    %esp,%ebp
c0107958:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010795b:	8b 45 08             	mov    0x8(%ebp),%eax
c010795e:	8b 40 14             	mov    0x14(%eax),%eax
c0107961:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107964:	8b 45 10             	mov    0x10(%ebp),%eax
c0107967:	83 c0 14             	add    $0x14,%eax
c010796a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c010796d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107971:	74 06                	je     c0107979 <_fifo_map_swappable+0x24>
c0107973:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107977:	75 24                	jne    c010799d <_fifo_map_swappable+0x48>
c0107979:	c7 44 24 0c b8 ef 10 	movl   $0xc010efb8,0xc(%esp)
c0107980:	c0 
c0107981:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107988:	c0 
c0107989:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107990:	00 
c0107991:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107998:	e8 3d 94 ff ff       	call   c0100dda <__panic>
c010799d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01079a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01079af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01079b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01079b8:	8b 40 04             	mov    0x4(%eax),%eax
c01079bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01079be:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01079c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01079c4:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01079c7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01079ca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01079cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01079d0:	89 10                	mov    %edx,(%eax)
c01079d2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01079d5:	8b 10                	mov    (%eax),%edx
c01079d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01079da:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01079dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01079e3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01079e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079e9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01079ec:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c01079ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01079f3:	c9                   	leave  
c01079f4:	c3                   	ret    

c01079f5 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01079f5:	55                   	push   %ebp
c01079f6:	89 e5                	mov    %esp,%ebp
c01079f8:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01079fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01079fe:	8b 40 14             	mov    0x14(%eax),%eax
c0107a01:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107a04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a08:	75 24                	jne    c0107a2e <_fifo_swap_out_victim+0x39>
c0107a0a:	c7 44 24 0c ff ef 10 	movl   $0xc010efff,0xc(%esp)
c0107a11:	c0 
c0107a12:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107a19:	c0 
c0107a1a:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107a21:	00 
c0107a22:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107a29:	e8 ac 93 ff ff       	call   c0100dda <__panic>
     assert(in_tick==0);
c0107a2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107a32:	74 24                	je     c0107a58 <_fifo_swap_out_victim+0x63>
c0107a34:	c7 44 24 0c 0c f0 10 	movl   $0xc010f00c,0xc(%esp)
c0107a3b:	c0 
c0107a3c:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107a43:	c0 
c0107a44:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107a4b:	00 
c0107a4c:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107a53:	e8 82 93 ff ff       	call   c0100dda <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     /* Select the tail */
     list_entry_t *le = head->prev;
c0107a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a5b:	8b 00                	mov    (%eax),%eax
c0107a5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a63:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107a66:	75 24                	jne    c0107a8c <_fifo_swap_out_victim+0x97>
c0107a68:	c7 44 24 0c 17 f0 10 	movl   $0xc010f017,0xc(%esp)
c0107a6f:	c0 
c0107a70:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107a77:	c0 
c0107a78:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0107a7f:	00 
c0107a80:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107a87:	e8 4e 93 ff ff       	call   c0100dda <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a8f:	83 e8 14             	sub    $0x14,%eax
c0107a92:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a98:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107a9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107a9e:	8b 40 04             	mov    0x4(%eax),%eax
c0107aa1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107aa4:	8b 12                	mov    (%edx),%edx
c0107aa6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107aac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107aaf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ab2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107ab5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ab8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107abb:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107abd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107ac1:	75 24                	jne    c0107ae7 <_fifo_swap_out_victim+0xf2>
c0107ac3:	c7 44 24 0c 20 f0 10 	movl   $0xc010f020,0xc(%esp)
c0107aca:	c0 
c0107acb:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107ad2:	c0 
c0107ad3:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
c0107ada:	00 
c0107adb:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107ae2:	e8 f3 92 ff ff       	call   c0100dda <__panic>
     *ptr_page = p;
c0107ae7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107aea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107aed:	89 10                	mov    %edx,(%eax)
     return 0;
c0107aef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107af4:	c9                   	leave  
c0107af5:	c3                   	ret    

c0107af6 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107af6:	55                   	push   %ebp
c0107af7:	89 e5                	mov    %esp,%ebp
c0107af9:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107afc:	c7 04 24 2c f0 10 c0 	movl   $0xc010f02c,(%esp)
c0107b03:	e8 50 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107b08:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107b0d:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107b10:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107b15:	83 f8 04             	cmp    $0x4,%eax
c0107b18:	74 24                	je     c0107b3e <_fifo_check_swap+0x48>
c0107b1a:	c7 44 24 0c 52 f0 10 	movl   $0xc010f052,0xc(%esp)
c0107b21:	c0 
c0107b22:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107b29:	c0 
c0107b2a:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c0107b31:	00 
c0107b32:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107b39:	e8 9c 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107b3e:	c7 04 24 64 f0 10 c0 	movl   $0xc010f064,(%esp)
c0107b45:	e8 0e 88 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107b4a:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107b4f:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107b52:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107b57:	83 f8 04             	cmp    $0x4,%eax
c0107b5a:	74 24                	je     c0107b80 <_fifo_check_swap+0x8a>
c0107b5c:	c7 44 24 0c 52 f0 10 	movl   $0xc010f052,0xc(%esp)
c0107b63:	c0 
c0107b64:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107b6b:	c0 
c0107b6c:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0107b73:	00 
c0107b74:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107b7b:	e8 5a 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107b80:	c7 04 24 8c f0 10 c0 	movl   $0xc010f08c,(%esp)
c0107b87:	e8 cc 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107b8c:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107b91:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107b94:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107b99:	83 f8 04             	cmp    $0x4,%eax
c0107b9c:	74 24                	je     c0107bc2 <_fifo_check_swap+0xcc>
c0107b9e:	c7 44 24 0c 52 f0 10 	movl   $0xc010f052,0xc(%esp)
c0107ba5:	c0 
c0107ba6:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107bad:	c0 
c0107bae:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
c0107bb5:	00 
c0107bb6:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107bbd:	e8 18 92 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107bc2:	c7 04 24 b4 f0 10 c0 	movl   $0xc010f0b4,(%esp)
c0107bc9:	e8 8a 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107bce:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107bd3:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107bd6:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107bdb:	83 f8 04             	cmp    $0x4,%eax
c0107bde:	74 24                	je     c0107c04 <_fifo_check_swap+0x10e>
c0107be0:	c7 44 24 0c 52 f0 10 	movl   $0xc010f052,0xc(%esp)
c0107be7:	c0 
c0107be8:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107bef:	c0 
c0107bf0:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107bf7:	00 
c0107bf8:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107bff:	e8 d6 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107c04:	c7 04 24 dc f0 10 c0 	movl   $0xc010f0dc,(%esp)
c0107c0b:	e8 48 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107c10:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107c15:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107c18:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107c1d:	83 f8 05             	cmp    $0x5,%eax
c0107c20:	74 24                	je     c0107c46 <_fifo_check_swap+0x150>
c0107c22:	c7 44 24 0c 02 f1 10 	movl   $0xc010f102,0xc(%esp)
c0107c29:	c0 
c0107c2a:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107c31:	c0 
c0107c32:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
c0107c39:	00 
c0107c3a:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107c41:	e8 94 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107c46:	c7 04 24 b4 f0 10 c0 	movl   $0xc010f0b4,(%esp)
c0107c4d:	e8 06 87 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107c52:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107c57:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107c5a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107c5f:	83 f8 05             	cmp    $0x5,%eax
c0107c62:	74 24                	je     c0107c88 <_fifo_check_swap+0x192>
c0107c64:	c7 44 24 0c 02 f1 10 	movl   $0xc010f102,0xc(%esp)
c0107c6b:	c0 
c0107c6c:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107c73:	c0 
c0107c74:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0107c7b:	00 
c0107c7c:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107c83:	e8 52 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c88:	c7 04 24 64 f0 10 c0 	movl   $0xc010f064,(%esp)
c0107c8f:	e8 c4 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c94:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c99:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107c9c:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107ca1:	83 f8 06             	cmp    $0x6,%eax
c0107ca4:	74 24                	je     c0107cca <_fifo_check_swap+0x1d4>
c0107ca6:	c7 44 24 0c 11 f1 10 	movl   $0xc010f111,0xc(%esp)
c0107cad:	c0 
c0107cae:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107cb5:	c0 
c0107cb6:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107cbd:	00 
c0107cbe:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107cc5:	e8 10 91 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107cca:	c7 04 24 b4 f0 10 c0 	movl   $0xc010f0b4,(%esp)
c0107cd1:	e8 82 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cd6:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cdb:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107cde:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107ce3:	83 f8 07             	cmp    $0x7,%eax
c0107ce6:	74 24                	je     c0107d0c <_fifo_check_swap+0x216>
c0107ce8:	c7 44 24 0c 20 f1 10 	movl   $0xc010f120,0xc(%esp)
c0107cef:	c0 
c0107cf0:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107cf7:	c0 
c0107cf8:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0107cff:	00 
c0107d00:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107d07:	e8 ce 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d0c:	c7 04 24 2c f0 10 c0 	movl   $0xc010f02c,(%esp)
c0107d13:	e8 40 86 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d18:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d1d:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107d20:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107d25:	83 f8 08             	cmp    $0x8,%eax
c0107d28:	74 24                	je     c0107d4e <_fifo_check_swap+0x258>
c0107d2a:	c7 44 24 0c 2f f1 10 	movl   $0xc010f12f,0xc(%esp)
c0107d31:	c0 
c0107d32:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107d39:	c0 
c0107d3a:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0107d41:	00 
c0107d42:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107d49:	e8 8c 90 ff ff       	call   c0100dda <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107d4e:	c7 04 24 8c f0 10 c0 	movl   $0xc010f08c,(%esp)
c0107d55:	e8 fe 85 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107d5a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107d5f:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107d62:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107d67:	83 f8 09             	cmp    $0x9,%eax
c0107d6a:	74 24                	je     c0107d90 <_fifo_check_swap+0x29a>
c0107d6c:	c7 44 24 0c 3e f1 10 	movl   $0xc010f13e,0xc(%esp)
c0107d73:	c0 
c0107d74:	c7 44 24 08 d6 ef 10 	movl   $0xc010efd6,0x8(%esp)
c0107d7b:	c0 
c0107d7c:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0107d83:	00 
c0107d84:	c7 04 24 eb ef 10 c0 	movl   $0xc010efeb,(%esp)
c0107d8b:	e8 4a 90 ff ff       	call   c0100dda <__panic>
    return 0;
c0107d90:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d95:	c9                   	leave  
c0107d96:	c3                   	ret    

c0107d97 <_fifo_init>:


static int
_fifo_init(void)
{
c0107d97:	55                   	push   %ebp
c0107d98:	89 e5                	mov    %esp,%ebp
    return 0;
c0107d9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d9f:	5d                   	pop    %ebp
c0107da0:	c3                   	ret    

c0107da1 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107da1:	55                   	push   %ebp
c0107da2:	89 e5                	mov    %esp,%ebp
    return 0;
c0107da4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107da9:	5d                   	pop    %ebp
c0107daa:	c3                   	ret    

c0107dab <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107dab:	55                   	push   %ebp
c0107dac:	89 e5                	mov    %esp,%ebp
c0107dae:	b8 00 00 00 00       	mov    $0x0,%eax
c0107db3:	5d                   	pop    %ebp
c0107db4:	c3                   	ret    

c0107db5 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107db5:	55                   	push   %ebp
c0107db6:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107db8:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dbb:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107dbe:	5d                   	pop    %ebp
c0107dbf:	c3                   	ret    

c0107dc0 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107dc0:	55                   	push   %ebp
c0107dc1:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107dc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107dc9:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107dcc:	5d                   	pop    %ebp
c0107dcd:	c3                   	ret    

c0107dce <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107dce:	55                   	push   %ebp
c0107dcf:	89 e5                	mov    %esp,%ebp
c0107dd1:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107dd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dd7:	c1 e8 0c             	shr    $0xc,%eax
c0107dda:	89 c2                	mov    %eax,%edx
c0107ddc:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0107de1:	39 c2                	cmp    %eax,%edx
c0107de3:	72 1c                	jb     c0107e01 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107de5:	c7 44 24 08 60 f1 10 	movl   $0xc010f160,0x8(%esp)
c0107dec:	c0 
c0107ded:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107df4:	00 
c0107df5:	c7 04 24 7f f1 10 c0 	movl   $0xc010f17f,(%esp)
c0107dfc:	e8 d9 8f ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c0107e01:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0107e06:	8b 55 08             	mov    0x8(%ebp),%edx
c0107e09:	c1 ea 0c             	shr    $0xc,%edx
c0107e0c:	c1 e2 05             	shl    $0x5,%edx
c0107e0f:	01 d0                	add    %edx,%eax
}
c0107e11:	c9                   	leave  
c0107e12:	c3                   	ret    

c0107e13 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107e13:	55                   	push   %ebp
c0107e14:	89 e5                	mov    %esp,%ebp
c0107e16:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107e19:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107e20:	e8 e0 cd ff ff       	call   c0104c05 <kmalloc>
c0107e25:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107e28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e2c:	0f 84 81 00 00 00    	je     c0107eb3 <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e35:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107e3e:	89 50 04             	mov    %edx,0x4(%eax)
c0107e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e44:	8b 50 04             	mov    0x4(%eax),%edx
c0107e47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e4a:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e4f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0107e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e59:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0107e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e63:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0107e6a:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0107e6f:	85 c0                	test   %eax,%eax
c0107e71:	74 0d                	je     c0107e80 <mm_create+0x6d>
c0107e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e76:	89 04 24             	mov    %eax,(%esp)
c0107e79:	e8 68 ef ff ff       	call   c0106de6 <swap_init_mm>
c0107e7e:	eb 0a                	jmp    c0107e8a <mm_create+0x77>
        else mm->sm_priv = NULL;
c0107e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e83:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0107e8a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0107e91:	00 
c0107e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e95:	89 04 24             	mov    %eax,(%esp)
c0107e98:	e8 23 ff ff ff       	call   c0107dc0 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ea0:	83 c0 1c             	add    $0x1c,%eax
c0107ea3:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107eaa:	00 
c0107eab:	89 04 24             	mov    %eax,(%esp)
c0107eae:	e8 96 1a 00 00       	call   c0109949 <sem_init>
    }    
    return mm;
c0107eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107eb6:	c9                   	leave  
c0107eb7:	c3                   	ret    

c0107eb8 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0107eb8:	55                   	push   %ebp
c0107eb9:	89 e5                	mov    %esp,%ebp
c0107ebb:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0107ebe:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0107ec5:	e8 3b cd ff ff       	call   c0104c05 <kmalloc>
c0107eca:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0107ecd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ed1:	74 1b                	je     c0107eee <vma_create+0x36>
        vma->vm_start = vm_start;
c0107ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ed6:	8b 55 08             	mov    0x8(%ebp),%edx
c0107ed9:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0107edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107edf:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107ee2:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0107ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ee8:	8b 55 10             	mov    0x10(%ebp),%edx
c0107eeb:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0107eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107ef1:	c9                   	leave  
c0107ef2:	c3                   	ret    

c0107ef3 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0107ef3:	55                   	push   %ebp
c0107ef4:	89 e5                	mov    %esp,%ebp
c0107ef6:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0107ef9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0107f00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107f04:	0f 84 95 00 00 00    	je     c0107f9f <find_vma+0xac>
        vma = mm->mmap_cache;
c0107f0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f0d:	8b 40 08             	mov    0x8(%eax),%eax
c0107f10:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0107f13:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107f17:	74 16                	je     c0107f2f <find_vma+0x3c>
c0107f19:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f1c:	8b 40 04             	mov    0x4(%eax),%eax
c0107f1f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f22:	77 0b                	ja     c0107f2f <find_vma+0x3c>
c0107f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f27:	8b 40 08             	mov    0x8(%eax),%eax
c0107f2a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f2d:	77 61                	ja     c0107f90 <find_vma+0x9d>
                bool found = 0;
c0107f2f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0107f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f39:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0107f42:	eb 28                	jmp    c0107f6c <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0107f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f47:	83 e8 10             	sub    $0x10,%eax
c0107f4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0107f4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f50:	8b 40 04             	mov    0x4(%eax),%eax
c0107f53:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f56:	77 14                	ja     c0107f6c <find_vma+0x79>
c0107f58:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107f5b:	8b 40 08             	mov    0x8(%eax),%eax
c0107f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107f61:	76 09                	jbe    c0107f6c <find_vma+0x79>
                        found = 1;
c0107f63:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0107f6a:	eb 17                	jmp    c0107f83 <find_vma+0x90>
c0107f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107f72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107f75:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0107f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107f81:	75 c1                	jne    c0107f44 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0107f83:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0107f87:	75 07                	jne    c0107f90 <find_vma+0x9d>
                    vma = NULL;
c0107f89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0107f90:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0107f94:	74 09                	je     c0107f9f <find_vma+0xac>
            mm->mmap_cache = vma;
c0107f96:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f99:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107f9c:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0107f9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0107fa2:	c9                   	leave  
c0107fa3:	c3                   	ret    

c0107fa4 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0107fa4:	55                   	push   %ebp
c0107fa5:	89 e5                	mov    %esp,%ebp
c0107fa7:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0107faa:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fad:	8b 50 04             	mov    0x4(%eax),%edx
c0107fb0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fb3:	8b 40 08             	mov    0x8(%eax),%eax
c0107fb6:	39 c2                	cmp    %eax,%edx
c0107fb8:	72 24                	jb     c0107fde <check_vma_overlap+0x3a>
c0107fba:	c7 44 24 0c 8d f1 10 	movl   $0xc010f18d,0xc(%esp)
c0107fc1:	c0 
c0107fc2:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0107fc9:	c0 
c0107fca:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0107fd1:	00 
c0107fd2:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0107fd9:	e8 fc 8d ff ff       	call   c0100dda <__panic>
    assert(prev->vm_end <= next->vm_start);
c0107fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fe1:	8b 50 08             	mov    0x8(%eax),%edx
c0107fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107fe7:	8b 40 04             	mov    0x4(%eax),%eax
c0107fea:	39 c2                	cmp    %eax,%edx
c0107fec:	76 24                	jbe    c0108012 <check_vma_overlap+0x6e>
c0107fee:	c7 44 24 0c d0 f1 10 	movl   $0xc010f1d0,0xc(%esp)
c0107ff5:	c0 
c0107ff6:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0107ffd:	c0 
c0107ffe:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0108005:	00 
c0108006:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c010800d:	e8 c8 8d ff ff       	call   c0100dda <__panic>
    assert(next->vm_start < next->vm_end);
c0108012:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108015:	8b 50 04             	mov    0x4(%eax),%edx
c0108018:	8b 45 0c             	mov    0xc(%ebp),%eax
c010801b:	8b 40 08             	mov    0x8(%eax),%eax
c010801e:	39 c2                	cmp    %eax,%edx
c0108020:	72 24                	jb     c0108046 <check_vma_overlap+0xa2>
c0108022:	c7 44 24 0c ef f1 10 	movl   $0xc010f1ef,0xc(%esp)
c0108029:	c0 
c010802a:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108031:	c0 
c0108032:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c0108039:	00 
c010803a:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108041:	e8 94 8d ff ff       	call   c0100dda <__panic>
}
c0108046:	c9                   	leave  
c0108047:	c3                   	ret    

c0108048 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108048:	55                   	push   %ebp
c0108049:	89 e5                	mov    %esp,%ebp
c010804b:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c010804e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108051:	8b 50 04             	mov    0x4(%eax),%edx
c0108054:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108057:	8b 40 08             	mov    0x8(%eax),%eax
c010805a:	39 c2                	cmp    %eax,%edx
c010805c:	72 24                	jb     c0108082 <insert_vma_struct+0x3a>
c010805e:	c7 44 24 0c 0d f2 10 	movl   $0xc010f20d,0xc(%esp)
c0108065:	c0 
c0108066:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c010806d:	c0 
c010806e:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108075:	00 
c0108076:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c010807d:	e8 58 8d ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0108082:	8b 45 08             	mov    0x8(%ebp),%eax
c0108085:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108088:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010808b:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010808e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108091:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108094:	eb 21                	jmp    c01080b7 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108096:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108099:	83 e8 10             	sub    $0x10,%eax
c010809c:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010809f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01080a2:	8b 50 04             	mov    0x4(%eax),%edx
c01080a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a8:	8b 40 04             	mov    0x4(%eax),%eax
c01080ab:	39 c2                	cmp    %eax,%edx
c01080ad:	76 02                	jbe    c01080b1 <insert_vma_struct+0x69>
                break;
c01080af:	eb 1d                	jmp    c01080ce <insert_vma_struct+0x86>
            }
            le_prev = le;
c01080b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01080b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01080bd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01080c0:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01080c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01080cc:	75 c8                	jne    c0108096 <insert_vma_struct+0x4e>
c01080ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080d1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01080d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01080d7:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01080da:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01080dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01080e3:	74 15                	je     c01080fa <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01080e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080e8:	8d 50 f0             	lea    -0x10(%eax),%edx
c01080eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01080f2:	89 14 24             	mov    %edx,(%esp)
c01080f5:	e8 aa fe ff ff       	call   c0107fa4 <check_vma_overlap>
    }
    if (le_next != list) {
c01080fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01080fd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108100:	74 15                	je     c0108117 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0108102:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108105:	83 e8 10             	sub    $0x10,%eax
c0108108:	89 44 24 04          	mov    %eax,0x4(%esp)
c010810c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010810f:	89 04 24             	mov    %eax,(%esp)
c0108112:	e8 8d fe ff ff       	call   c0107fa4 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108117:	8b 45 0c             	mov    0xc(%ebp),%eax
c010811a:	8b 55 08             	mov    0x8(%ebp),%edx
c010811d:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010811f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108122:	8d 50 10             	lea    0x10(%eax),%edx
c0108125:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108128:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010812b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010812e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108131:	8b 40 04             	mov    0x4(%eax),%eax
c0108134:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108137:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010813a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010813d:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108140:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108143:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108146:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108149:	89 10                	mov    %edx,(%eax)
c010814b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010814e:	8b 10                	mov    (%eax),%edx
c0108150:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108153:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108156:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108159:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010815c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010815f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108162:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108165:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108167:	8b 45 08             	mov    0x8(%ebp),%eax
c010816a:	8b 40 10             	mov    0x10(%eax),%eax
c010816d:	8d 50 01             	lea    0x1(%eax),%edx
c0108170:	8b 45 08             	mov    0x8(%ebp),%eax
c0108173:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108176:	c9                   	leave  
c0108177:	c3                   	ret    

c0108178 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108178:	55                   	push   %ebp
c0108179:	89 e5                	mov    %esp,%ebp
c010817b:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010817e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108181:	89 04 24             	mov    %eax,(%esp)
c0108184:	e8 2c fc ff ff       	call   c0107db5 <mm_count>
c0108189:	85 c0                	test   %eax,%eax
c010818b:	74 24                	je     c01081b1 <mm_destroy+0x39>
c010818d:	c7 44 24 0c 29 f2 10 	movl   $0xc010f229,0xc(%esp)
c0108194:	c0 
c0108195:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c010819c:	c0 
c010819d:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01081a4:	00 
c01081a5:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c01081ac:	e8 29 8c ff ff       	call   c0100dda <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01081b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01081b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01081b7:	eb 36                	jmp    c01081ef <mm_destroy+0x77>
c01081b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01081bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081c2:	8b 40 04             	mov    0x4(%eax),%eax
c01081c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01081c8:	8b 12                	mov    (%edx),%edx
c01081ca:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01081cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01081d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01081d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01081d6:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01081d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01081dc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01081df:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01081e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081e4:	83 e8 10             	sub    $0x10,%eax
c01081e7:	89 04 24             	mov    %eax,(%esp)
c01081ea:	e8 31 ca ff ff       	call   c0104c20 <kfree>
c01081ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01081f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01081f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01081f8:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01081fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01081fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108201:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108204:	75 b3                	jne    c01081b9 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0108206:	8b 45 08             	mov    0x8(%ebp),%eax
c0108209:	89 04 24             	mov    %eax,(%esp)
c010820c:	e8 0f ca ff ff       	call   c0104c20 <kfree>
    mm=NULL;
c0108211:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108218:	c9                   	leave  
c0108219:	c3                   	ret    

c010821a <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010821a:	55                   	push   %ebp
c010821b:	89 e5                	mov    %esp,%ebp
c010821d:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108220:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108223:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108226:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108229:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010822e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108231:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0108238:	8b 45 10             	mov    0x10(%ebp),%eax
c010823b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010823e:	01 c2                	add    %eax,%edx
c0108240:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108243:	01 d0                	add    %edx,%eax
c0108245:	83 e8 01             	sub    $0x1,%eax
c0108248:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010824b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010824e:	ba 00 00 00 00       	mov    $0x0,%edx
c0108253:	f7 75 e8             	divl   -0x18(%ebp)
c0108256:	89 d0                	mov    %edx,%eax
c0108258:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010825b:	29 c2                	sub    %eax,%edx
c010825d:	89 d0                	mov    %edx,%eax
c010825f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108262:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108269:	76 11                	jbe    c010827c <mm_map+0x62>
c010826b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010826e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108271:	73 09                	jae    c010827c <mm_map+0x62>
c0108273:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c010827a:	76 0a                	jbe    c0108286 <mm_map+0x6c>
        return -E_INVAL;
c010827c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0108281:	e9 ae 00 00 00       	jmp    c0108334 <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108286:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010828a:	75 24                	jne    c01082b0 <mm_map+0x96>
c010828c:	c7 44 24 0c 3b f2 10 	movl   $0xc010f23b,0xc(%esp)
c0108293:	c0 
c0108294:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c010829b:	c0 
c010829c:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c01082a3:	00 
c01082a4:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c01082ab:	e8 2a 8b ff ff       	call   c0100dda <__panic>

    int ret = -E_INVAL;
c01082b0:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01082b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082be:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c1:	89 04 24             	mov    %eax,(%esp)
c01082c4:	e8 2a fc ff ff       	call   c0107ef3 <find_vma>
c01082c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01082cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01082d0:	74 0d                	je     c01082df <mm_map+0xc5>
c01082d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01082d5:	8b 40 04             	mov    0x4(%eax),%eax
c01082d8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01082db:	73 02                	jae    c01082df <mm_map+0xc5>
        goto out;
c01082dd:	eb 52                	jmp    c0108331 <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c01082df:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01082e6:	8b 45 14             	mov    0x14(%ebp),%eax
c01082e9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01082ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01082f0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01082f7:	89 04 24             	mov    %eax,(%esp)
c01082fa:	e8 b9 fb ff ff       	call   c0107eb8 <vma_create>
c01082ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108302:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108306:	75 02                	jne    c010830a <mm_map+0xf0>
        goto out;
c0108308:	eb 27                	jmp    c0108331 <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c010830a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010830d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108311:	8b 45 08             	mov    0x8(%ebp),%eax
c0108314:	89 04 24             	mov    %eax,(%esp)
c0108317:	e8 2c fd ff ff       	call   c0108048 <insert_vma_struct>
    if (vma_store != NULL) {
c010831c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108320:	74 08                	je     c010832a <mm_map+0x110>
        *vma_store = vma;
c0108322:	8b 45 18             	mov    0x18(%ebp),%eax
c0108325:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108328:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c010832a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c0108331:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108334:	c9                   	leave  
c0108335:	c3                   	ret    

c0108336 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108336:	55                   	push   %ebp
c0108337:	89 e5                	mov    %esp,%ebp
c0108339:	56                   	push   %esi
c010833a:	53                   	push   %ebx
c010833b:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010833e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108342:	74 06                	je     c010834a <dup_mmap+0x14>
c0108344:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108348:	75 24                	jne    c010836e <dup_mmap+0x38>
c010834a:	c7 44 24 0c 46 f2 10 	movl   $0xc010f246,0xc(%esp)
c0108351:	c0 
c0108352:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108359:	c0 
c010835a:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108361:	00 
c0108362:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108369:	e8 6c 8a ff ff       	call   c0100dda <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010836e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108371:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108374:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108377:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010837a:	e9 92 00 00 00       	jmp    c0108411 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010837f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108382:	83 e8 10             	sub    $0x10,%eax
c0108385:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108388:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010838b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010838e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108391:	8b 50 08             	mov    0x8(%eax),%edx
c0108394:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108397:	8b 40 04             	mov    0x4(%eax),%eax
c010839a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010839e:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083a2:	89 04 24             	mov    %eax,(%esp)
c01083a5:	e8 0e fb ff ff       	call   c0107eb8 <vma_create>
c01083aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01083ad:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01083b1:	75 07                	jne    c01083ba <dup_mmap+0x84>
            return -E_NO_MEM;
c01083b3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01083b8:	eb 76                	jmp    c0108430 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c01083ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01083bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01083c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01083c4:	89 04 24             	mov    %eax,(%esp)
c01083c7:	e8 7c fc ff ff       	call   c0108048 <insert_vma_struct>

        bool share = 0;
c01083cc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01083d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083d6:	8b 58 08             	mov    0x8(%eax),%ebx
c01083d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083dc:	8b 48 04             	mov    0x4(%eax),%ecx
c01083df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083e2:	8b 50 0c             	mov    0xc(%eax),%edx
c01083e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01083eb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01083ee:	89 74 24 10          	mov    %esi,0x10(%esp)
c01083f2:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01083f6:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01083fa:	89 54 24 04          	mov    %edx,0x4(%esp)
c01083fe:	89 04 24             	mov    %eax,(%esp)
c0108401:	e8 c8 d7 ff ff       	call   c0105bce <copy_range>
c0108406:	85 c0                	test   %eax,%eax
c0108408:	74 07                	je     c0108411 <dup_mmap+0xdb>
            return -E_NO_MEM;
c010840a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010840f:	eb 1f                	jmp    c0108430 <dup_mmap+0xfa>
c0108411:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108414:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108417:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010841a:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010841c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010841f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108422:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108425:	0f 85 54 ff ff ff    	jne    c010837f <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c010842b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108430:	83 c4 40             	add    $0x40,%esp
c0108433:	5b                   	pop    %ebx
c0108434:	5e                   	pop    %esi
c0108435:	5d                   	pop    %ebp
c0108436:	c3                   	ret    

c0108437 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108437:	55                   	push   %ebp
c0108438:	89 e5                	mov    %esp,%ebp
c010843a:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010843d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108441:	74 0f                	je     c0108452 <exit_mmap+0x1b>
c0108443:	8b 45 08             	mov    0x8(%ebp),%eax
c0108446:	89 04 24             	mov    %eax,(%esp)
c0108449:	e8 67 f9 ff ff       	call   c0107db5 <mm_count>
c010844e:	85 c0                	test   %eax,%eax
c0108450:	74 24                	je     c0108476 <exit_mmap+0x3f>
c0108452:	c7 44 24 0c 64 f2 10 	movl   $0xc010f264,0xc(%esp)
c0108459:	c0 
c010845a:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108461:	c0 
c0108462:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108469:	00 
c010846a:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108471:	e8 64 89 ff ff       	call   c0100dda <__panic>
    pde_t *pgdir = mm->pgdir;
c0108476:	8b 45 08             	mov    0x8(%ebp),%eax
c0108479:	8b 40 0c             	mov    0xc(%eax),%eax
c010847c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010847f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108482:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108485:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108488:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010848b:	eb 28                	jmp    c01084b5 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010848d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108490:	83 e8 10             	sub    $0x10,%eax
c0108493:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108496:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108499:	8b 50 08             	mov    0x8(%eax),%edx
c010849c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010849f:	8b 40 04             	mov    0x4(%eax),%eax
c01084a2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084a6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084ad:	89 04 24             	mov    %eax,(%esp)
c01084b0:	e8 1e d5 ff ff       	call   c01059d3 <unmap_range>
c01084b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01084bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084be:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01084c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01084c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01084ca:	75 c1                	jne    c010848d <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01084cc:	eb 28                	jmp    c01084f6 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01084ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d1:	83 e8 10             	sub    $0x10,%eax
c01084d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01084d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084da:	8b 50 08             	mov    0x8(%eax),%edx
c01084dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084e0:	8b 40 04             	mov    0x4(%eax),%eax
c01084e3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01084e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084ee:	89 04 24             	mov    %eax,(%esp)
c01084f1:	e8 d1 d5 ff ff       	call   c0105ac7 <exit_range>
c01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01084fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084ff:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108502:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108505:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108508:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010850b:	75 c1                	jne    c01084ce <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c010850d:	c9                   	leave  
c010850e:	c3                   	ret    

c010850f <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c010850f:	55                   	push   %ebp
c0108510:	89 e5                	mov    %esp,%ebp
c0108512:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0108515:	8b 45 10             	mov    0x10(%ebp),%eax
c0108518:	8b 55 18             	mov    0x18(%ebp),%edx
c010851b:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010851f:	8b 55 14             	mov    0x14(%ebp),%edx
c0108522:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108526:	89 44 24 04          	mov    %eax,0x4(%esp)
c010852a:	8b 45 08             	mov    0x8(%ebp),%eax
c010852d:	89 04 24             	mov    %eax,(%esp)
c0108530:	e8 dc 09 00 00       	call   c0108f11 <user_mem_check>
c0108535:	85 c0                	test   %eax,%eax
c0108537:	75 07                	jne    c0108540 <copy_from_user+0x31>
        return 0;
c0108539:	b8 00 00 00 00       	mov    $0x0,%eax
c010853e:	eb 1e                	jmp    c010855e <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108540:	8b 45 14             	mov    0x14(%ebp),%eax
c0108543:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108547:	8b 45 10             	mov    0x10(%ebp),%eax
c010854a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010854e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108551:	89 04 24             	mov    %eax,(%esp)
c0108554:	e8 c8 50 00 00       	call   c010d621 <memcpy>
    return 1;
c0108559:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010855e:	c9                   	leave  
c010855f:	c3                   	ret    

c0108560 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108560:	55                   	push   %ebp
c0108561:	89 e5                	mov    %esp,%ebp
c0108563:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108566:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108569:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108570:	00 
c0108571:	8b 55 14             	mov    0x14(%ebp),%edx
c0108574:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108578:	89 44 24 04          	mov    %eax,0x4(%esp)
c010857c:	8b 45 08             	mov    0x8(%ebp),%eax
c010857f:	89 04 24             	mov    %eax,(%esp)
c0108582:	e8 8a 09 00 00       	call   c0108f11 <user_mem_check>
c0108587:	85 c0                	test   %eax,%eax
c0108589:	75 07                	jne    c0108592 <copy_to_user+0x32>
        return 0;
c010858b:	b8 00 00 00 00       	mov    $0x0,%eax
c0108590:	eb 1e                	jmp    c01085b0 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108592:	8b 45 14             	mov    0x14(%ebp),%eax
c0108595:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108599:	8b 45 10             	mov    0x10(%ebp),%eax
c010859c:	89 44 24 04          	mov    %eax,0x4(%esp)
c01085a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01085a3:	89 04 24             	mov    %eax,(%esp)
c01085a6:	e8 76 50 00 00       	call   c010d621 <memcpy>
    return 1;
c01085ab:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01085b0:	c9                   	leave  
c01085b1:	c3                   	ret    

c01085b2 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c01085b2:	55                   	push   %ebp
c01085b3:	89 e5                	mov    %esp,%ebp
c01085b5:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01085b8:	e8 02 00 00 00       	call   c01085bf <check_vmm>
}
c01085bd:	c9                   	leave  
c01085be:	c3                   	ret    

c01085bf <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01085bf:	55                   	push   %ebp
c01085c0:	89 e5                	mov    %esp,%ebp
c01085c2:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01085c5:	e8 4d cb ff ff       	call   c0105117 <nr_free_pages>
c01085ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01085cd:	e8 13 00 00 00       	call   c01085e5 <check_vma_struct>
    check_pgfault();
c01085d2:	e8 a7 04 00 00       	call   c0108a7e <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c01085d7:	c7 04 24 84 f2 10 c0 	movl   $0xc010f284,(%esp)
c01085de:	e8 75 7d ff ff       	call   c0100358 <cprintf>
}
c01085e3:	c9                   	leave  
c01085e4:	c3                   	ret    

c01085e5 <check_vma_struct>:

static void
check_vma_struct(void) {
c01085e5:	55                   	push   %ebp
c01085e6:	89 e5                	mov    %esp,%ebp
c01085e8:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01085eb:	e8 27 cb ff ff       	call   c0105117 <nr_free_pages>
c01085f0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01085f3:	e8 1b f8 ff ff       	call   c0107e13 <mm_create>
c01085f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01085fb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01085ff:	75 24                	jne    c0108625 <check_vma_struct+0x40>
c0108601:	c7 44 24 0c 3b f2 10 	movl   $0xc010f23b,0xc(%esp)
c0108608:	c0 
c0108609:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108610:	c0 
c0108611:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108618:	00 
c0108619:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108620:	e8 b5 87 ff ff       	call   c0100dda <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108625:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c010862c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010862f:	89 d0                	mov    %edx,%eax
c0108631:	c1 e0 02             	shl    $0x2,%eax
c0108634:	01 d0                	add    %edx,%eax
c0108636:	01 c0                	add    %eax,%eax
c0108638:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010863b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010863e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108641:	eb 70                	jmp    c01086b3 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108643:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108646:	89 d0                	mov    %edx,%eax
c0108648:	c1 e0 02             	shl    $0x2,%eax
c010864b:	01 d0                	add    %edx,%eax
c010864d:	83 c0 02             	add    $0x2,%eax
c0108650:	89 c1                	mov    %eax,%ecx
c0108652:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108655:	89 d0                	mov    %edx,%eax
c0108657:	c1 e0 02             	shl    $0x2,%eax
c010865a:	01 d0                	add    %edx,%eax
c010865c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108663:	00 
c0108664:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108668:	89 04 24             	mov    %eax,(%esp)
c010866b:	e8 48 f8 ff ff       	call   c0107eb8 <vma_create>
c0108670:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108673:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108677:	75 24                	jne    c010869d <check_vma_struct+0xb8>
c0108679:	c7 44 24 0c 9c f2 10 	movl   $0xc010f29c,0xc(%esp)
c0108680:	c0 
c0108681:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108688:	c0 
c0108689:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108690:	00 
c0108691:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108698:	e8 3d 87 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c010869d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086a7:	89 04 24             	mov    %eax,(%esp)
c01086aa:	e8 99 f9 ff ff       	call   c0108048 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01086af:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01086b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01086b7:	7f 8a                	jg     c0108643 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01086b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086bc:	83 c0 01             	add    $0x1,%eax
c01086bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086c2:	eb 70                	jmp    c0108734 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01086c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086c7:	89 d0                	mov    %edx,%eax
c01086c9:	c1 e0 02             	shl    $0x2,%eax
c01086cc:	01 d0                	add    %edx,%eax
c01086ce:	83 c0 02             	add    $0x2,%eax
c01086d1:	89 c1                	mov    %eax,%ecx
c01086d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01086d6:	89 d0                	mov    %edx,%eax
c01086d8:	c1 e0 02             	shl    $0x2,%eax
c01086db:	01 d0                	add    %edx,%eax
c01086dd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01086e4:	00 
c01086e5:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01086e9:	89 04 24             	mov    %eax,(%esp)
c01086ec:	e8 c7 f7 ff ff       	call   c0107eb8 <vma_create>
c01086f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01086f4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01086f8:	75 24                	jne    c010871e <check_vma_struct+0x139>
c01086fa:	c7 44 24 0c 9c f2 10 	movl   $0xc010f29c,0xc(%esp)
c0108701:	c0 
c0108702:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108709:	c0 
c010870a:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108711:	00 
c0108712:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108719:	e8 bc 86 ff ff       	call   c0100dda <__panic>
        insert_vma_struct(mm, vma);
c010871e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108721:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108725:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108728:	89 04 24             	mov    %eax,(%esp)
c010872b:	e8 18 f9 ff ff       	call   c0108048 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108730:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108737:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010873a:	7e 88                	jle    c01086c4 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c010873c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010873f:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108742:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108745:	8b 40 04             	mov    0x4(%eax),%eax
c0108748:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c010874b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108752:	e9 97 00 00 00       	jmp    c01087ee <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108757:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010875a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010875d:	75 24                	jne    c0108783 <check_vma_struct+0x19e>
c010875f:	c7 44 24 0c a8 f2 10 	movl   $0xc010f2a8,0xc(%esp)
c0108766:	c0 
c0108767:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c010876e:	c0 
c010876f:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108776:	00 
c0108777:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c010877e:	e8 57 86 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108783:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108786:	83 e8 10             	sub    $0x10,%eax
c0108789:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c010878c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010878f:	8b 48 04             	mov    0x4(%eax),%ecx
c0108792:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108795:	89 d0                	mov    %edx,%eax
c0108797:	c1 e0 02             	shl    $0x2,%eax
c010879a:	01 d0                	add    %edx,%eax
c010879c:	39 c1                	cmp    %eax,%ecx
c010879e:	75 17                	jne    c01087b7 <check_vma_struct+0x1d2>
c01087a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01087a3:	8b 48 08             	mov    0x8(%eax),%ecx
c01087a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087a9:	89 d0                	mov    %edx,%eax
c01087ab:	c1 e0 02             	shl    $0x2,%eax
c01087ae:	01 d0                	add    %edx,%eax
c01087b0:	83 c0 02             	add    $0x2,%eax
c01087b3:	39 c1                	cmp    %eax,%ecx
c01087b5:	74 24                	je     c01087db <check_vma_struct+0x1f6>
c01087b7:	c7 44 24 0c c0 f2 10 	movl   $0xc010f2c0,0xc(%esp)
c01087be:	c0 
c01087bf:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c01087c6:	c0 
c01087c7:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c01087ce:	00 
c01087cf:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c01087d6:	e8 ff 85 ff ff       	call   c0100dda <__panic>
c01087db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087de:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01087e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01087e4:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01087e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01087ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087f1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01087f4:	0f 8e 5d ff ff ff    	jle    c0108757 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01087fa:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108801:	e9 cd 01 00 00       	jmp    c01089d3 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108806:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108809:	89 44 24 04          	mov    %eax,0x4(%esp)
c010880d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108810:	89 04 24             	mov    %eax,(%esp)
c0108813:	e8 db f6 ff ff       	call   c0107ef3 <find_vma>
c0108818:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c010881b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010881f:	75 24                	jne    c0108845 <check_vma_struct+0x260>
c0108821:	c7 44 24 0c f5 f2 10 	movl   $0xc010f2f5,0xc(%esp)
c0108828:	c0 
c0108829:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108830:	c0 
c0108831:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108838:	00 
c0108839:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108840:	e8 95 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108845:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108848:	83 c0 01             	add    $0x1,%eax
c010884b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010884f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108852:	89 04 24             	mov    %eax,(%esp)
c0108855:	e8 99 f6 ff ff       	call   c0107ef3 <find_vma>
c010885a:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c010885d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108861:	75 24                	jne    c0108887 <check_vma_struct+0x2a2>
c0108863:	c7 44 24 0c 02 f3 10 	movl   $0xc010f302,0xc(%esp)
c010886a:	c0 
c010886b:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108872:	c0 
c0108873:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c010887a:	00 
c010887b:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108882:	e8 53 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108887:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010888a:	83 c0 02             	add    $0x2,%eax
c010888d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108891:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108894:	89 04 24             	mov    %eax,(%esp)
c0108897:	e8 57 f6 ff ff       	call   c0107ef3 <find_vma>
c010889c:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c010889f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01088a3:	74 24                	je     c01088c9 <check_vma_struct+0x2e4>
c01088a5:	c7 44 24 0c 0f f3 10 	movl   $0xc010f30f,0xc(%esp)
c01088ac:	c0 
c01088ad:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c01088b4:	c0 
c01088b5:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c01088bc:	00 
c01088bd:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c01088c4:	e8 11 85 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01088c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088cc:	83 c0 03             	add    $0x3,%eax
c01088cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088d6:	89 04 24             	mov    %eax,(%esp)
c01088d9:	e8 15 f6 ff ff       	call   c0107ef3 <find_vma>
c01088de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c01088e1:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01088e5:	74 24                	je     c010890b <check_vma_struct+0x326>
c01088e7:	c7 44 24 0c 1c f3 10 	movl   $0xc010f31c,0xc(%esp)
c01088ee:	c0 
c01088ef:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c01088f6:	c0 
c01088f7:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c01088fe:	00 
c01088ff:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108906:	e8 cf 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010890b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010890e:	83 c0 04             	add    $0x4,%eax
c0108911:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108915:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108918:	89 04 24             	mov    %eax,(%esp)
c010891b:	e8 d3 f5 ff ff       	call   c0107ef3 <find_vma>
c0108920:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108923:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108927:	74 24                	je     c010894d <check_vma_struct+0x368>
c0108929:	c7 44 24 0c 29 f3 10 	movl   $0xc010f329,0xc(%esp)
c0108930:	c0 
c0108931:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108938:	c0 
c0108939:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108940:	00 
c0108941:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108948:	e8 8d 84 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c010894d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108950:	8b 50 04             	mov    0x4(%eax),%edx
c0108953:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108956:	39 c2                	cmp    %eax,%edx
c0108958:	75 10                	jne    c010896a <check_vma_struct+0x385>
c010895a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010895d:	8b 50 08             	mov    0x8(%eax),%edx
c0108960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108963:	83 c0 02             	add    $0x2,%eax
c0108966:	39 c2                	cmp    %eax,%edx
c0108968:	74 24                	je     c010898e <check_vma_struct+0x3a9>
c010896a:	c7 44 24 0c 38 f3 10 	movl   $0xc010f338,0xc(%esp)
c0108971:	c0 
c0108972:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108979:	c0 
c010897a:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108981:	00 
c0108982:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108989:	e8 4c 84 ff ff       	call   c0100dda <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010898e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108991:	8b 50 04             	mov    0x4(%eax),%edx
c0108994:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108997:	39 c2                	cmp    %eax,%edx
c0108999:	75 10                	jne    c01089ab <check_vma_struct+0x3c6>
c010899b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010899e:	8b 50 08             	mov    0x8(%eax),%edx
c01089a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a4:	83 c0 02             	add    $0x2,%eax
c01089a7:	39 c2                	cmp    %eax,%edx
c01089a9:	74 24                	je     c01089cf <check_vma_struct+0x3ea>
c01089ab:	c7 44 24 0c 68 f3 10 	movl   $0xc010f368,0xc(%esp)
c01089b2:	c0 
c01089b3:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c01089ba:	c0 
c01089bb:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c01089c2:	00 
c01089c3:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c01089ca:	e8 0b 84 ff ff       	call   c0100dda <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01089cf:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01089d3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01089d6:	89 d0                	mov    %edx,%eax
c01089d8:	c1 e0 02             	shl    $0x2,%eax
c01089db:	01 d0                	add    %edx,%eax
c01089dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01089e0:	0f 8d 20 fe ff ff    	jge    c0108806 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01089e6:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01089ed:	eb 70                	jmp    c0108a5f <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01089ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089f9:	89 04 24             	mov    %eax,(%esp)
c01089fc:	e8 f2 f4 ff ff       	call   c0107ef3 <find_vma>
c0108a01:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108a04:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a08:	74 27                	je     c0108a31 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108a0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a0d:	8b 50 08             	mov    0x8(%eax),%edx
c0108a10:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a13:	8b 40 04             	mov    0x4(%eax),%eax
c0108a16:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108a1a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a25:	c7 04 24 98 f3 10 c0 	movl   $0xc010f398,(%esp)
c0108a2c:	e8 27 79 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108a31:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a35:	74 24                	je     c0108a5b <check_vma_struct+0x476>
c0108a37:	c7 44 24 0c bd f3 10 	movl   $0xc010f3bd,0xc(%esp)
c0108a3e:	c0 
c0108a3f:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108a46:	c0 
c0108a47:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108a4e:	00 
c0108a4f:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108a56:	e8 7f 83 ff ff       	call   c0100dda <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108a5b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108a5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a63:	79 8a                	jns    c01089ef <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a68:	89 04 24             	mov    %eax,(%esp)
c0108a6b:	e8 08 f7 ff ff       	call   c0108178 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108a70:	c7 04 24 d4 f3 10 c0 	movl   $0xc010f3d4,(%esp)
c0108a77:	e8 dc 78 ff ff       	call   c0100358 <cprintf>
}
c0108a7c:	c9                   	leave  
c0108a7d:	c3                   	ret    

c0108a7e <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108a7e:	55                   	push   %ebp
c0108a7f:	89 e5                	mov    %esp,%ebp
c0108a81:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108a84:	e8 8e c6 ff ff       	call   c0105117 <nr_free_pages>
c0108a89:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108a8c:	e8 82 f3 ff ff       	call   c0107e13 <mm_create>
c0108a91:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc
    assert(check_mm_struct != NULL);
c0108a96:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0108a9b:	85 c0                	test   %eax,%eax
c0108a9d:	75 24                	jne    c0108ac3 <check_pgfault+0x45>
c0108a9f:	c7 44 24 0c f3 f3 10 	movl   $0xc010f3f3,0xc(%esp)
c0108aa6:	c0 
c0108aa7:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108aae:	c0 
c0108aaf:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108ab6:	00 
c0108ab7:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108abe:	e8 17 83 ff ff       	call   c0100dda <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108ac3:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0108ac8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108acb:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0108ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ad4:	89 50 0c             	mov    %edx,0xc(%eax)
c0108ad7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ada:	8b 40 0c             	mov    0xc(%eax),%eax
c0108add:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108ae0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ae3:	8b 00                	mov    (%eax),%eax
c0108ae5:	85 c0                	test   %eax,%eax
c0108ae7:	74 24                	je     c0108b0d <check_pgfault+0x8f>
c0108ae9:	c7 44 24 0c 0b f4 10 	movl   $0xc010f40b,0xc(%esp)
c0108af0:	c0 
c0108af1:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108af8:	c0 
c0108af9:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108b00:	00 
c0108b01:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108b08:	e8 cd 82 ff ff       	call   c0100dda <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108b0d:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108b14:	00 
c0108b15:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108b1c:	00 
c0108b1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108b24:	e8 8f f3 ff ff       	call   c0107eb8 <vma_create>
c0108b29:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108b2c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108b30:	75 24                	jne    c0108b56 <check_pgfault+0xd8>
c0108b32:	c7 44 24 0c 9c f2 10 	movl   $0xc010f29c,0xc(%esp)
c0108b39:	c0 
c0108b3a:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108b41:	c0 
c0108b42:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108b49:	00 
c0108b4a:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108b51:	e8 84 82 ff ff       	call   c0100dda <__panic>

    insert_vma_struct(mm, vma);
c0108b56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108b59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b60:	89 04 24             	mov    %eax,(%esp)
c0108b63:	e8 e0 f4 ff ff       	call   c0108048 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108b68:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108b6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b79:	89 04 24             	mov    %eax,(%esp)
c0108b7c:	e8 72 f3 ff ff       	call   c0107ef3 <find_vma>
c0108b81:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108b84:	74 24                	je     c0108baa <check_pgfault+0x12c>
c0108b86:	c7 44 24 0c 19 f4 10 	movl   $0xc010f419,0xc(%esp)
c0108b8d:	c0 
c0108b8e:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108b95:	c0 
c0108b96:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108b9d:	00 
c0108b9e:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108ba5:	e8 30 82 ff ff       	call   c0100dda <__panic>

    int i, sum = 0;
c0108baa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108bb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108bb8:	eb 17                	jmp    c0108bd1 <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0108bba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108bc0:	01 d0                	add    %edx,%eax
c0108bc2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108bc5:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bca:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108bcd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108bd1:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108bd5:	7e e3                	jle    c0108bba <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108bd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108bde:	eb 15                	jmp    c0108bf5 <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c0108be0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108be3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108be6:	01 d0                	add    %edx,%eax
c0108be8:	0f b6 00             	movzbl (%eax),%eax
c0108beb:	0f be c0             	movsbl %al,%eax
c0108bee:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108bf1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108bf5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108bf9:	7e e5                	jle    c0108be0 <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108bfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108bff:	74 24                	je     c0108c25 <check_pgfault+0x1a7>
c0108c01:	c7 44 24 0c 33 f4 10 	movl   $0xc010f433,0xc(%esp)
c0108c08:	c0 
c0108c09:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108c10:	c0 
c0108c11:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108c18:	00 
c0108c19:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108c20:	e8 b5 81 ff ff       	call   c0100dda <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108c25:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108c28:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108c2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108c2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108c33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c3a:	89 04 24             	mov    %eax,(%esp)
c0108c3d:	e8 aa d1 ff ff       	call   c0105dec <page_remove>
    free_page(pa2page(pgdir[0]));
c0108c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c45:	8b 00                	mov    (%eax),%eax
c0108c47:	89 04 24             	mov    %eax,(%esp)
c0108c4a:	e8 7f f1 ff ff       	call   c0107dce <pa2page>
c0108c4f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108c56:	00 
c0108c57:	89 04 24             	mov    %eax,(%esp)
c0108c5a:	e8 86 c4 ff ff       	call   c01050e5 <free_pages>
    pgdir[0] = 0;
c0108c5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108c68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c6b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108c72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c75:	89 04 24             	mov    %eax,(%esp)
c0108c78:	e8 fb f4 ff ff       	call   c0108178 <mm_destroy>
    check_mm_struct = NULL;
c0108c7d:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c0108c84:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108c87:	e8 8b c4 ff ff       	call   c0105117 <nr_free_pages>
c0108c8c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108c8f:	74 24                	je     c0108cb5 <check_pgfault+0x237>
c0108c91:	c7 44 24 0c 3c f4 10 	movl   $0xc010f43c,0xc(%esp)
c0108c98:	c0 
c0108c99:	c7 44 24 08 ab f1 10 	movl   $0xc010f1ab,0x8(%esp)
c0108ca0:	c0 
c0108ca1:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108ca8:	00 
c0108ca9:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108cb0:	e8 25 81 ff ff       	call   c0100dda <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108cb5:	c7 04 24 63 f4 10 c0 	movl   $0xc010f463,(%esp)
c0108cbc:	e8 97 76 ff ff       	call   c0100358 <cprintf>
}
c0108cc1:	c9                   	leave  
c0108cc2:	c3                   	ret    

c0108cc3 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108cc3:	55                   	push   %ebp
c0108cc4:	89 e5                	mov    %esp,%ebp
c0108cc6:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108cc9:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108cd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0108cd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cda:	89 04 24             	mov    %eax,(%esp)
c0108cdd:	e8 11 f2 ff ff       	call   c0107ef3 <find_vma>
c0108ce2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108ce5:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0108cea:	83 c0 01             	add    $0x1,%eax
c0108ced:	a3 38 34 1c c0       	mov    %eax,0xc01c3438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108cf2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108cf6:	74 0b                	je     c0108d03 <do_pgfault+0x40>
c0108cf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108cfb:	8b 40 04             	mov    0x4(%eax),%eax
c0108cfe:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108d01:	76 18                	jbe    c0108d1b <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108d03:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d06:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d0a:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108d11:	e8 42 76 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108d16:	e9 f1 01 00 00       	jmp    c0108f0c <do_pgfault+0x249>
    }
    //check the error_code
    switch (error_code & 3) {
c0108d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108d1e:	83 e0 03             	and    $0x3,%eax
c0108d21:	85 c0                	test   %eax,%eax
c0108d23:	74 36                	je     c0108d5b <do_pgfault+0x98>
c0108d25:	83 f8 01             	cmp    $0x1,%eax
c0108d28:	74 20                	je     c0108d4a <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108d2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d2d:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d30:	83 e0 02             	and    $0x2,%eax
c0108d33:	85 c0                	test   %eax,%eax
c0108d35:	75 11                	jne    c0108d48 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108d37:	c7 04 24 b0 f4 10 c0 	movl   $0xc010f4b0,(%esp)
c0108d3e:	e8 15 76 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108d43:	e9 c4 01 00 00       	jmp    c0108f0c <do_pgfault+0x249>
        }
        break;
c0108d48:	eb 2f                	jmp    c0108d79 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108d4a:	c7 04 24 10 f5 10 c0 	movl   $0xc010f510,(%esp)
c0108d51:	e8 02 76 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108d56:	e9 b1 01 00 00       	jmp    c0108f0c <do_pgfault+0x249>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108d5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d5e:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d61:	83 e0 05             	and    $0x5,%eax
c0108d64:	85 c0                	test   %eax,%eax
c0108d66:	75 11                	jne    c0108d79 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108d68:	c7 04 24 48 f5 10 c0 	movl   $0xc010f548,(%esp)
c0108d6f:	e8 e4 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108d74:	e9 93 01 00 00       	jmp    c0108f0c <do_pgfault+0x249>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108d79:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108d80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108d83:	8b 40 0c             	mov    0xc(%eax),%eax
c0108d86:	83 e0 02             	and    $0x2,%eax
c0108d89:	85 c0                	test   %eax,%eax
c0108d8b:	74 04                	je     c0108d91 <do_pgfault+0xce>
        perm |= PTE_W;
c0108d8d:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108d91:	8b 45 10             	mov    0x10(%ebp),%eax
c0108d94:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108d97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108d9f:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108da2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108da9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            goto failed;
        }
   }
#endif
    
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c0108db0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108db6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108dbd:	00 
c0108dbe:	8b 55 10             	mov    0x10(%ebp),%edx
c0108dc1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108dc5:	89 04 24             	mov    %eax,(%esp)
c0108dc8:	e8 14 ca ff ff       	call   c01057e1 <get_pte>
c0108dcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108dd0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108dd4:	75 11                	jne    c0108de7 <do_pgfault+0x124>
        cprintf("get_pte in do_pgfault failed\n");
c0108dd6:	c7 04 24 ab f5 10 c0 	movl   $0xc010f5ab,(%esp)
c0108ddd:	e8 76 75 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0108de2:	e9 25 01 00 00       	jmp    c0108f0c <do_pgfault+0x249>
    }
    
    if (*ptep == 0) { 
c0108de7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108dea:	8b 00                	mov    (%eax),%eax
c0108dec:	85 c0                	test   %eax,%eax
c0108dee:	75 35                	jne    c0108e25 <do_pgfault+0x162>
       if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c0108df0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108df3:	8b 40 0c             	mov    0xc(%eax),%eax
c0108df6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108df9:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108dfd:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e00:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108e04:	89 04 24             	mov    %eax,(%esp)
c0108e07:	e8 3a d1 ff ff       	call   c0105f46 <pgdir_alloc_page>
c0108e0c:	85 c0                	test   %eax,%eax
c0108e0e:	0f 85 f1 00 00 00    	jne    c0108f05 <do_pgfault+0x242>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108e14:	c7 04 24 cc f5 10 c0 	movl   $0xc010f5cc,(%esp)
c0108e1b:	e8 38 75 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108e20:	e9 e7 00 00 00       	jmp    c0108f0c <do_pgfault+0x249>
        }
    }
    else {
        struct Page *page=NULL;
c0108e25:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
        cprintf("do pgfault: ptep %x, pte %x\n",ptep, *ptep);
c0108e2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e2f:	8b 00                	mov    (%eax),%eax
c0108e31:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e38:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e3c:	c7 04 24 f3 f5 10 c0 	movl   $0xc010f5f3,(%esp)
c0108e43:	e8 10 75 ff ff       	call   c0100358 <cprintf>
        if (*ptep & PTE_P) {
c0108e48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e4b:	8b 00                	mov    (%eax),%eax
c0108e4d:	83 e0 01             	and    $0x1,%eax
c0108e50:	85 c0                	test   %eax,%eax
c0108e52:	74 1c                	je     c0108e70 <do_pgfault+0x1ad>
            panic("error write a non-writable pte");           
c0108e54:	c7 44 24 08 10 f6 10 	movl   $0xc010f610,0x8(%esp)
c0108e5b:	c0 
c0108e5c:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)
c0108e63:	00 
c0108e64:	c7 04 24 c0 f1 10 c0 	movl   $0xc010f1c0,(%esp)
c0108e6b:	e8 6a 7f ff ff       	call   c0100dda <__panic>
        } else{
           if(swap_init_ok) {               
c0108e70:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0108e75:	85 c0                	test   %eax,%eax
c0108e77:	74 30                	je     c0108ea9 <do_pgfault+0x1e6>
               if ((ret = swap_in(mm, addr, &page)) != 0) {
c0108e79:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0108e7c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e80:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e8a:	89 04 24             	mov    %eax,(%esp)
c0108e8d:	e8 4d e1 ff ff       	call   c0106fdf <swap_in>
c0108e92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108e95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e99:	74 26                	je     c0108ec1 <do_pgfault+0x1fe>
                   cprintf("swap_in in do_pgfault failed\n");
c0108e9b:	c7 04 24 2f f6 10 c0 	movl   $0xc010f62f,(%esp)
c0108ea2:	e8 b1 74 ff ff       	call   c0100358 <cprintf>
                   goto failed;
c0108ea7:	eb 63                	jmp    c0108f0c <do_pgfault+0x249>
               }    

           }  
           else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0108ea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eac:	8b 00                	mov    (%eax),%eax
c0108eae:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108eb2:	c7 04 24 50 f6 10 c0 	movl   $0xc010f650,(%esp)
c0108eb9:	e8 9a 74 ff ff       	call   c0100358 <cprintf>
            goto failed;
c0108ebe:	90                   	nop
c0108ebf:	eb 4b                	jmp    c0108f0c <do_pgfault+0x249>
           }
       } 
       page_insert(mm->pgdir, page, addr, perm);
c0108ec1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ec7:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eca:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0108ecd:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0108ed1:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0108ed4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108ed8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108edc:	89 04 24             	mov    %eax,(%esp)
c0108edf:	e8 4c cf ff ff       	call   c0105e30 <page_insert>
       swap_map_swappable(mm, addr, page, 1);
c0108ee4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ee7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108eee:	00 
c0108eef:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ef3:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ef6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0108efd:	89 04 24             	mov    %eax,(%esp)
c0108f00:	e8 11 df ff ff       	call   c0106e16 <swap_map_swappable>
   }
   ret = 0;
c0108f05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0108f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108f0f:	c9                   	leave  
c0108f10:	c3                   	ret    

c0108f11 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0108f11:	55                   	push   %ebp
c0108f12:	89 e5                	mov    %esp,%ebp
c0108f14:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0108f17:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108f1b:	0f 84 e0 00 00 00    	je     c0109001 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c0108f21:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108f28:	76 1c                	jbe    c0108f46 <user_mem_check+0x35>
c0108f2a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f2d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f30:	01 d0                	add    %edx,%eax
c0108f32:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f35:	76 0f                	jbe    c0108f46 <user_mem_check+0x35>
c0108f37:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f3a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f3d:	01 d0                	add    %edx,%eax
c0108f3f:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0108f44:	76 0a                	jbe    c0108f50 <user_mem_check+0x3f>
            return 0;
c0108f46:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f4b:	e9 e2 00 00 00       	jmp    c0109032 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0108f50:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f53:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108f56:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f5c:	01 d0                	add    %edx,%eax
c0108f5e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0108f61:	e9 88 00 00 00       	jmp    c0108fee <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0108f66:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f69:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f70:	89 04 24             	mov    %eax,(%esp)
c0108f73:	e8 7b ef ff ff       	call   c0107ef3 <find_vma>
c0108f78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108f7f:	74 0b                	je     c0108f8c <user_mem_check+0x7b>
c0108f81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f84:	8b 40 04             	mov    0x4(%eax),%eax
c0108f87:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108f8a:	76 0a                	jbe    c0108f96 <user_mem_check+0x85>
                return 0;
c0108f8c:	b8 00 00 00 00       	mov    $0x0,%eax
c0108f91:	e9 9c 00 00 00       	jmp    c0109032 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0108f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f99:	8b 50 0c             	mov    0xc(%eax),%edx
c0108f9c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108fa0:	74 07                	je     c0108fa9 <user_mem_check+0x98>
c0108fa2:	b8 02 00 00 00       	mov    $0x2,%eax
c0108fa7:	eb 05                	jmp    c0108fae <user_mem_check+0x9d>
c0108fa9:	b8 01 00 00 00       	mov    $0x1,%eax
c0108fae:	21 d0                	and    %edx,%eax
c0108fb0:	85 c0                	test   %eax,%eax
c0108fb2:	75 07                	jne    c0108fbb <user_mem_check+0xaa>
                return 0;
c0108fb4:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fb9:	eb 77                	jmp    c0109032 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0108fbb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108fbf:	74 24                	je     c0108fe5 <user_mem_check+0xd4>
c0108fc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fc4:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fc7:	83 e0 08             	and    $0x8,%eax
c0108fca:	85 c0                	test   %eax,%eax
c0108fcc:	74 17                	je     c0108fe5 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0108fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fd1:	8b 40 04             	mov    0x4(%eax),%eax
c0108fd4:	05 00 10 00 00       	add    $0x1000,%eax
c0108fd9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108fdc:	76 07                	jbe    c0108fe5 <user_mem_check+0xd4>
                    return 0;
c0108fde:	b8 00 00 00 00       	mov    $0x0,%eax
c0108fe3:	eb 4d                	jmp    c0109032 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0108fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fe8:	8b 40 08             	mov    0x8(%eax),%eax
c0108feb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0108fee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108ff1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0108ff4:	0f 82 6c ff ff ff    	jb     c0108f66 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0108ffa:	b8 01 00 00 00       	mov    $0x1,%eax
c0108fff:	eb 31                	jmp    c0109032 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0109001:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109008:	76 23                	jbe    c010902d <user_mem_check+0x11c>
c010900a:	8b 45 10             	mov    0x10(%ebp),%eax
c010900d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109010:	01 d0                	add    %edx,%eax
c0109012:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109015:	76 16                	jbe    c010902d <user_mem_check+0x11c>
c0109017:	8b 45 10             	mov    0x10(%ebp),%eax
c010901a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010901d:	01 d0                	add    %edx,%eax
c010901f:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109024:	77 07                	ja     c010902d <user_mem_check+0x11c>
c0109026:	b8 01 00 00 00       	mov    $0x1,%eax
c010902b:	eb 05                	jmp    c0109032 <user_mem_check+0x121>
c010902d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109032:	c9                   	leave  
c0109033:	c3                   	ret    

c0109034 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109034:	55                   	push   %ebp
c0109035:	89 e5                	mov    %esp,%ebp
c0109037:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010903a:	8b 45 08             	mov    0x8(%ebp),%eax
c010903d:	8b 04 85 e0 55 1c c0 	mov    -0x3fe3aa20(,%eax,4),%eax
c0109044:	83 f8 01             	cmp    $0x1,%eax
c0109047:	0f 85 85 00 00 00    	jne    c01090d2 <phi_test_sema+0x9e>
c010904d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109050:	8d 48 04             	lea    0x4(%eax),%ecx
c0109053:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109058:	89 c8                	mov    %ecx,%eax
c010905a:	f7 ea                	imul   %edx
c010905c:	d1 fa                	sar    %edx
c010905e:	89 c8                	mov    %ecx,%eax
c0109060:	c1 f8 1f             	sar    $0x1f,%eax
c0109063:	29 c2                	sub    %eax,%edx
c0109065:	89 d0                	mov    %edx,%eax
c0109067:	c1 e0 02             	shl    $0x2,%eax
c010906a:	01 d0                	add    %edx,%eax
c010906c:	29 c1                	sub    %eax,%ecx
c010906e:	89 ca                	mov    %ecx,%edx
c0109070:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c0109077:	83 f8 02             	cmp    $0x2,%eax
c010907a:	74 56                	je     c01090d2 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c010907c:	8b 45 08             	mov    0x8(%ebp),%eax
c010907f:	8d 48 01             	lea    0x1(%eax),%ecx
c0109082:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109087:	89 c8                	mov    %ecx,%eax
c0109089:	f7 ea                	imul   %edx
c010908b:	d1 fa                	sar    %edx
c010908d:	89 c8                	mov    %ecx,%eax
c010908f:	c1 f8 1f             	sar    $0x1f,%eax
c0109092:	29 c2                	sub    %eax,%edx
c0109094:	89 d0                	mov    %edx,%eax
c0109096:	c1 e0 02             	shl    $0x2,%eax
c0109099:	01 d0                	add    %edx,%eax
c010909b:	29 c1                	sub    %eax,%ecx
c010909d:	89 ca                	mov    %ecx,%edx
c010909f:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c01090a6:	83 f8 02             	cmp    $0x2,%eax
c01090a9:	74 27                	je     c01090d2 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01090ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01090ae:	c7 04 85 e0 55 1c c0 	movl   $0x2,-0x3fe3aa20(,%eax,4)
c01090b5:	02 00 00 00 
        up(&s[i]);
c01090b9:	8b 55 08             	mov    0x8(%ebp),%edx
c01090bc:	89 d0                	mov    %edx,%eax
c01090be:	01 c0                	add    %eax,%eax
c01090c0:	01 d0                	add    %edx,%eax
c01090c2:	c1 e0 02             	shl    $0x2,%eax
c01090c5:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c01090ca:	89 04 24             	mov    %eax,(%esp)
c01090cd:	e8 ea 09 00 00       	call   c0109abc <up>
    }
}
c01090d2:	c9                   	leave  
c01090d3:	c3                   	ret    

c01090d4 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01090d4:	55                   	push   %ebp
c01090d5:	89 e5                	mov    %esp,%ebp
c01090d7:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01090da:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01090e1:	e8 f1 09 00 00       	call   c0109ad7 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c01090e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01090e9:	c7 04 85 e0 55 1c c0 	movl   $0x1,-0x3fe3aa20(,%eax,4)
c01090f0:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c01090f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01090f7:	89 04 24             	mov    %eax,(%esp)
c01090fa:	e8 35 ff ff ff       	call   c0109034 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01090ff:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c0109106:	e8 b1 09 00 00       	call   c0109abc <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010910b:	8b 55 08             	mov    0x8(%ebp),%edx
c010910e:	89 d0                	mov    %edx,%eax
c0109110:	01 c0                	add    %eax,%eax
c0109112:	01 d0                	add    %edx,%eax
c0109114:	c1 e0 02             	shl    $0x2,%eax
c0109117:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c010911c:	89 04 24             	mov    %eax,(%esp)
c010911f:	e8 b3 09 00 00       	call   c0109ad7 <down>
}
c0109124:	c9                   	leave  
c0109125:	c3                   	ret    

c0109126 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109126:	55                   	push   %ebp
c0109127:	89 e5                	mov    %esp,%ebp
c0109129:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010912c:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c0109133:	e8 9f 09 00 00       	call   c0109ad7 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109138:	8b 45 08             	mov    0x8(%ebp),%eax
c010913b:	c7 04 85 e0 55 1c c0 	movl   $0x0,-0x3fe3aa20(,%eax,4)
c0109142:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0109146:	8b 45 08             	mov    0x8(%ebp),%eax
c0109149:	8d 48 04             	lea    0x4(%eax),%ecx
c010914c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109151:	89 c8                	mov    %ecx,%eax
c0109153:	f7 ea                	imul   %edx
c0109155:	d1 fa                	sar    %edx
c0109157:	89 c8                	mov    %ecx,%eax
c0109159:	c1 f8 1f             	sar    $0x1f,%eax
c010915c:	29 c2                	sub    %eax,%edx
c010915e:	89 d0                	mov    %edx,%eax
c0109160:	c1 e0 02             	shl    $0x2,%eax
c0109163:	01 d0                	add    %edx,%eax
c0109165:	29 c1                	sub    %eax,%ecx
c0109167:	89 ca                	mov    %ecx,%edx
c0109169:	89 14 24             	mov    %edx,(%esp)
c010916c:	e8 c3 fe ff ff       	call   c0109034 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109171:	8b 45 08             	mov    0x8(%ebp),%eax
c0109174:	8d 48 01             	lea    0x1(%eax),%ecx
c0109177:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010917c:	89 c8                	mov    %ecx,%eax
c010917e:	f7 ea                	imul   %edx
c0109180:	d1 fa                	sar    %edx
c0109182:	89 c8                	mov    %ecx,%eax
c0109184:	c1 f8 1f             	sar    $0x1f,%eax
c0109187:	29 c2                	sub    %eax,%edx
c0109189:	89 d0                	mov    %edx,%eax
c010918b:	c1 e0 02             	shl    $0x2,%eax
c010918e:	01 d0                	add    %edx,%eax
c0109190:	29 c1                	sub    %eax,%ecx
c0109192:	89 ca                	mov    %ecx,%edx
c0109194:	89 14 24             	mov    %edx,(%esp)
c0109197:	e8 98 fe ff ff       	call   c0109034 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010919c:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01091a3:	e8 14 09 00 00       	call   c0109abc <up>
}
c01091a8:	c9                   	leave  
c01091a9:	c3                   	ret    

c01091aa <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01091aa:	55                   	push   %ebp
c01091ab:	89 e5                	mov    %esp,%ebp
c01091ad:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01091b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01091b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01091bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091c4:	c7 04 24 78 f6 10 c0 	movl   $0xc010f678,(%esp)
c01091cb:	e8 88 71 ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c01091d0:	eb 62                	jmp    c0109234 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01091d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091d5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01091d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01091e0:	c7 04 24 98 f6 10 c0 	movl   $0xc010f698,(%esp)
c01091e7:	e8 6c 71 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01091ec:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01091f3:	e8 7e 2c 00 00       	call   c010be76 <do_sleep>
        phi_take_forks_sema(i); 
c01091f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091fb:	89 04 24             	mov    %eax,(%esp)
c01091fe:	e8 d1 fe ff ff       	call   c01090d4 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109203:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109206:	89 44 24 08          	mov    %eax,0x8(%esp)
c010920a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010920d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109211:	c7 04 24 c8 f6 10 c0 	movl   $0xc010f6c8,(%esp)
c0109218:	e8 3b 71 ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c010921d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109224:	e8 4d 2c 00 00       	call   c010be76 <do_sleep>
        phi_put_forks_sema(i); 
c0109229:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010922c:	89 04 24             	mov    %eax,(%esp)
c010922f:	e8 f2 fe ff ff       	call   c0109126 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0109234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109237:	8d 50 01             	lea    0x1(%eax),%edx
c010923a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010923d:	83 f8 03             	cmp    $0x3,%eax
c0109240:	7e 90                	jle    c01091d2 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0109242:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109245:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109249:	c7 04 24 f3 f6 10 c0 	movl   $0xc010f6f3,(%esp)
c0109250:	e8 03 71 ff ff       	call   c0100358 <cprintf>
    return 0;    
c0109255:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010925a:	c9                   	leave  
c010925b:	c3                   	ret    

c010925c <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c010925c:	55                   	push   %ebp
c010925d:	89 e5                	mov    %esp,%ebp
c010925f:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0109262:	8b 45 08             	mov    0x8(%ebp),%eax
c0109265:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
c010926c:	83 f8 01             	cmp    $0x1,%eax
c010926f:	0f 85 b5 00 00 00    	jne    c010932a <phi_test_condvar+0xce>
c0109275:	8b 45 08             	mov    0x8(%ebp),%eax
c0109278:	8d 48 04             	lea    0x4(%eax),%ecx
c010927b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109280:	89 c8                	mov    %ecx,%eax
c0109282:	f7 ea                	imul   %edx
c0109284:	d1 fa                	sar    %edx
c0109286:	89 c8                	mov    %ecx,%eax
c0109288:	c1 f8 1f             	sar    $0x1f,%eax
c010928b:	29 c2                	sub    %eax,%edx
c010928d:	89 d0                	mov    %edx,%eax
c010928f:	c1 e0 02             	shl    $0x2,%eax
c0109292:	01 d0                	add    %edx,%eax
c0109294:	29 c1                	sub    %eax,%ecx
c0109296:	89 ca                	mov    %ecx,%edx
c0109298:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c010929f:	83 f8 02             	cmp    $0x2,%eax
c01092a2:	0f 84 82 00 00 00    	je     c010932a <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01092a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ab:	8d 48 01             	lea    0x1(%eax),%ecx
c01092ae:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092b3:	89 c8                	mov    %ecx,%eax
c01092b5:	f7 ea                	imul   %edx
c01092b7:	d1 fa                	sar    %edx
c01092b9:	89 c8                	mov    %ecx,%eax
c01092bb:	c1 f8 1f             	sar    $0x1f,%eax
c01092be:	29 c2                	sub    %eax,%edx
c01092c0:	89 d0                	mov    %edx,%eax
c01092c2:	c1 e0 02             	shl    $0x2,%eax
c01092c5:	01 d0                	add    %edx,%eax
c01092c7:	29 c1                	sub    %eax,%ecx
c01092c9:	89 ca                	mov    %ecx,%edx
c01092cb:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01092d2:	83 f8 02             	cmp    $0x2,%eax
c01092d5:	74 53                	je     c010932a <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01092d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01092da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092de:	c7 04 24 10 f7 10 c0 	movl   $0xc010f710,(%esp)
c01092e5:	e8 6e 70 ff ff       	call   c0100358 <cprintf>
        state_condvar[i] = EATING ;
c01092ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ed:	c7 04 85 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%eax,4)
c01092f4:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01092f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01092fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092ff:	c7 04 24 44 f7 10 c0 	movl   $0xc010f744,(%esp)
c0109306:	e8 4d 70 ff ff       	call   c0100358 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c010930b:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109310:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109313:	8b 55 08             	mov    0x8(%ebp),%edx
c0109316:	89 d0                	mov    %edx,%eax
c0109318:	c1 e0 02             	shl    $0x2,%eax
c010931b:	01 d0                	add    %edx,%eax
c010931d:	c1 e0 02             	shl    $0x2,%eax
c0109320:	01 c8                	add    %ecx,%eax
c0109322:	89 04 24             	mov    %eax,(%esp)
c0109325:	e8 8f 04 00 00       	call   c01097b9 <cond_signal>
    }
}
c010932a:	c9                   	leave  
c010932b:	c3                   	ret    

c010932c <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010932c:	55                   	push   %ebp
c010932d:	89 e5                	mov    %esp,%ebp
c010932f:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c0109332:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109337:	89 04 24             	mov    %eax,(%esp)
c010933a:	e8 98 07 00 00       	call   c0109ad7 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
	 state_condvar[i]=HUNGRY; 
c010933f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109342:	c7 04 85 40 56 1c c0 	movl   $0x1,-0x3fe3a9c0(,%eax,4)
c0109349:	01 00 00 00 
     // try to get fork
	 phi_test_condvar(i); 
c010934d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109350:	89 04 24             	mov    %eax,(%esp)
c0109353:	e8 04 ff ff ff       	call   c010925c <phi_test_condvar>
      while (state_condvar[i] != EATING) {
c0109358:	eb 32                	jmp    c010938c <phi_take_forks_condvar+0x60>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
c010935a:	8b 45 08             	mov    0x8(%ebp),%eax
c010935d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109361:	c7 04 24 6c f7 10 c0 	movl   $0xc010f76c,(%esp)
c0109368:	e8 eb 6f ff ff       	call   c0100358 <cprintf>
          cond_wait(&mtp->cv[i]);
c010936d:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109372:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109375:	8b 55 08             	mov    0x8(%ebp),%edx
c0109378:	89 d0                	mov    %edx,%eax
c010937a:	c1 e0 02             	shl    $0x2,%eax
c010937d:	01 d0                	add    %edx,%eax
c010937f:	c1 e0 02             	shl    $0x2,%eax
c0109382:	01 c8                	add    %ecx,%eax
c0109384:	89 04 24             	mov    %eax,(%esp)
c0109387:	e8 cd 04 00 00       	call   c0109859 <cond_wait>
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
	 state_condvar[i]=HUNGRY; 
     // try to get fork
	 phi_test_condvar(i); 
      while (state_condvar[i] != EATING) {
c010938c:	8b 45 08             	mov    0x8(%ebp),%eax
c010938f:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
c0109396:	83 f8 02             	cmp    $0x2,%eax
c0109399:	75 bf                	jne    c010935a <phi_take_forks_condvar+0x2e>
          cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n",i);
          cond_wait(&mtp->cv[i]);
      }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c010939b:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01093a0:	8b 40 18             	mov    0x18(%eax),%eax
c01093a3:	85 c0                	test   %eax,%eax
c01093a5:	7e 12                	jle    c01093b9 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01093a7:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01093ac:	83 c0 0c             	add    $0xc,%eax
c01093af:	89 04 24             	mov    %eax,(%esp)
c01093b2:	e8 05 07 00 00       	call   c0109abc <up>
c01093b7:	eb 0d                	jmp    c01093c6 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01093b9:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01093be:	89 04 24             	mov    %eax,(%esp)
c01093c1:	e8 f6 06 00 00       	call   c0109abc <up>
}
c01093c6:	c9                   	leave  
c01093c7:	c3                   	ret    

c01093c8 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01093c8:	55                   	push   %ebp
c01093c9:	89 e5                	mov    %esp,%ebp
c01093cb:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01093ce:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01093d3:	89 04 24             	mov    %eax,(%esp)
c01093d6:	e8 fc 06 00 00       	call   c0109ad7 <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
	 state_condvar[i]=THINKING;
c01093db:	8b 45 08             	mov    0x8(%ebp),%eax
c01093de:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c01093e5:	00 00 00 00 
     // test left and right neighbors
	 phi_test_condvar(LEFT);
c01093e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01093ec:	8d 48 04             	lea    0x4(%eax),%ecx
c01093ef:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01093f4:	89 c8                	mov    %ecx,%eax
c01093f6:	f7 ea                	imul   %edx
c01093f8:	d1 fa                	sar    %edx
c01093fa:	89 c8                	mov    %ecx,%eax
c01093fc:	c1 f8 1f             	sar    $0x1f,%eax
c01093ff:	29 c2                	sub    %eax,%edx
c0109401:	89 d0                	mov    %edx,%eax
c0109403:	c1 e0 02             	shl    $0x2,%eax
c0109406:	01 d0                	add    %edx,%eax
c0109408:	29 c1                	sub    %eax,%ecx
c010940a:	89 ca                	mov    %ecx,%edx
c010940c:	89 14 24             	mov    %edx,(%esp)
c010940f:	e8 48 fe ff ff       	call   c010925c <phi_test_condvar>
      phi_test_condvar(RIGHT);
c0109414:	8b 45 08             	mov    0x8(%ebp),%eax
c0109417:	8d 48 01             	lea    0x1(%eax),%ecx
c010941a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010941f:	89 c8                	mov    %ecx,%eax
c0109421:	f7 ea                	imul   %edx
c0109423:	d1 fa                	sar    %edx
c0109425:	89 c8                	mov    %ecx,%eax
c0109427:	c1 f8 1f             	sar    $0x1f,%eax
c010942a:	29 c2                	sub    %eax,%edx
c010942c:	89 d0                	mov    %edx,%eax
c010942e:	c1 e0 02             	shl    $0x2,%eax
c0109431:	01 d0                	add    %edx,%eax
c0109433:	29 c1                	sub    %eax,%ecx
c0109435:	89 ca                	mov    %ecx,%edx
c0109437:	89 14 24             	mov    %edx,(%esp)
c010943a:	e8 1d fe ff ff       	call   c010925c <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010943f:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109444:	8b 40 18             	mov    0x18(%eax),%eax
c0109447:	85 c0                	test   %eax,%eax
c0109449:	7e 12                	jle    c010945d <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c010944b:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109450:	83 c0 0c             	add    $0xc,%eax
c0109453:	89 04 24             	mov    %eax,(%esp)
c0109456:	e8 61 06 00 00       	call   c0109abc <up>
c010945b:	eb 0d                	jmp    c010946a <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c010945d:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109462:	89 04 24             	mov    %eax,(%esp)
c0109465:	e8 52 06 00 00       	call   c0109abc <up>
}
c010946a:	c9                   	leave  
c010946b:	c3                   	ret    

c010946c <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c010946c:	55                   	push   %ebp
c010946d:	89 e5                	mov    %esp,%ebp
c010946f:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109472:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109479:	8b 45 08             	mov    0x8(%ebp),%eax
c010947c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010947f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109482:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109486:	c7 04 24 a8 f7 10 c0 	movl   $0xc010f7a8,(%esp)
c010948d:	e8 c6 6e ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c0109492:	eb 62                	jmp    c01094f6 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109494:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109497:	89 44 24 08          	mov    %eax,0x8(%esp)
c010949b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010949e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094a2:	c7 04 24 c8 f7 10 c0 	movl   $0xc010f7c8,(%esp)
c01094a9:	e8 aa 6e ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01094ae:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01094b5:	e8 bc 29 00 00       	call   c010be76 <do_sleep>
        phi_take_forks_condvar(i); 
c01094ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094bd:	89 04 24             	mov    %eax,(%esp)
c01094c0:	e8 67 fe ff ff       	call   c010932c <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01094c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094c8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01094cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094d3:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c01094da:	e8 79 6e ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01094df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01094e6:	e8 8b 29 00 00       	call   c010be76 <do_sleep>
        phi_put_forks_condvar(i); 
c01094eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094ee:	89 04 24             	mov    %eax,(%esp)
c01094f1:	e8 d2 fe ff ff       	call   c01093c8 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01094f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094f9:	8d 50 01             	lea    0x1(%eax),%edx
c01094fc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01094ff:	83 f8 03             	cmp    $0x3,%eax
c0109502:	7e 90                	jle    c0109494 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109504:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109507:	89 44 24 04          	mov    %eax,0x4(%esp)
c010950b:	c7 04 24 28 f8 10 c0 	movl   $0xc010f828,(%esp)
c0109512:	e8 41 6e ff ff       	call   c0100358 <cprintf>
    return 0;    
c0109517:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010951c:	c9                   	leave  
c010951d:	c3                   	ret    

c010951e <check_sync>:

void check_sync(void){
c010951e:	55                   	push   %ebp
c010951f:	89 e5                	mov    %esp,%ebp
c0109521:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109524:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010952b:	00 
c010952c:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c0109533:	e8 11 04 00 00       	call   c0109949 <sem_init>
    for(i=0;i<N;i++){
c0109538:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010953f:	e9 94 00 00 00       	jmp    c01095d8 <check_sync+0xba>
        sem_init(&s[i], 0);
c0109544:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109547:	89 d0                	mov    %edx,%eax
c0109549:	01 c0                	add    %eax,%eax
c010954b:	01 d0                	add    %edx,%eax
c010954d:	c1 e0 02             	shl    $0x2,%eax
c0109550:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c0109555:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010955c:	00 
c010955d:	89 04 24             	mov    %eax,(%esp)
c0109560:	e8 e4 03 00 00       	call   c0109949 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109565:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109568:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010956f:	00 
c0109570:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109574:	c7 04 24 aa 91 10 c0 	movl   $0xc01091aa,(%esp)
c010957b:	e8 5f 14 00 00       	call   c010a9df <kernel_thread>
c0109580:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109583:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109587:	7f 1c                	jg     c01095a5 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0109589:	c7 44 24 08 48 f8 10 	movl   $0xc010f848,0x8(%esp)
c0109590:	c0 
c0109591:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0109598:	00 
c0109599:	c7 04 24 7a f8 10 c0 	movl   $0xc010f87a,(%esp)
c01095a0:	e8 35 78 ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01095a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095a8:	89 04 24             	mov    %eax,(%esp)
c01095ab:	e8 bb 13 00 00       	call   c010a96b <find_proc>
c01095b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01095b3:	89 04 95 54 56 1c c0 	mov    %eax,-0x3fe3a9ac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01095ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095bd:	8b 04 85 54 56 1c c0 	mov    -0x3fe3a9ac(,%eax,4),%eax
c01095c4:	c7 44 24 04 91 f8 10 	movl   $0xc010f891,0x4(%esp)
c01095cb:	c0 
c01095cc:	89 04 24             	mov    %eax,(%esp)
c01095cf:	e8 7e 0f 00 00       	call   c010a552 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01095d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01095d8:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01095dc:	0f 8e 62 ff ff ff    	jle    c0109544 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01095e2:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01095e9:	00 
c01095ea:	c7 04 24 20 56 1c c0 	movl   $0xc01c5620,(%esp)
c01095f1:	e8 99 00 00 00       	call   c010968f <monitor_init>
    for(i=0;i<N;i++){
c01095f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01095fd:	e9 81 00 00 00       	jmp    c0109683 <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109602:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109605:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c010960c:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109610:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109613:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010961a:	00 
c010961b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010961f:	c7 04 24 6c 94 10 c0 	movl   $0xc010946c,(%esp)
c0109626:	e8 b4 13 00 00       	call   c010a9df <kernel_thread>
c010962b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c010962e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109632:	7f 1c                	jg     c0109650 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109634:	c7 44 24 08 a8 f8 10 	movl   $0xc010f8a8,0x8(%esp)
c010963b:	c0 
c010963c:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0109643:	00 
c0109644:	c7 04 24 7a f8 10 c0 	movl   $0xc010f87a,(%esp)
c010964b:	e8 8a 77 ff ff       	call   c0100dda <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109650:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109653:	89 04 24             	mov    %eax,(%esp)
c0109656:	e8 10 13 00 00       	call   c010a96b <find_proc>
c010965b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010965e:	89 04 95 f4 55 1c c0 	mov    %eax,-0x3fe3aa0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109665:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109668:	8b 04 85 f4 55 1c c0 	mov    -0x3fe3aa0c(,%eax,4),%eax
c010966f:	c7 44 24 04 d8 f8 10 	movl   $0xc010f8d8,0x4(%esp)
c0109676:	c0 
c0109677:	89 04 24             	mov    %eax,(%esp)
c010967a:	e8 d3 0e 00 00       	call   c010a552 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c010967f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109683:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109687:	0f 8e 75 ff ff ff    	jle    c0109602 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c010968d:	c9                   	leave  
c010968e:	c3                   	ret    

c010968f <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010968f:	55                   	push   %ebp
c0109690:	89 e5                	mov    %esp,%ebp
c0109692:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109695:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109699:	75 24                	jne    c01096bf <monitor_init+0x30>
c010969b:	c7 44 24 0c f4 f8 10 	movl   $0xc010f8f4,0xc(%esp)
c01096a2:	c0 
c01096a3:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c01096aa:	c0 
c01096ab:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c01096b2:	00 
c01096b3:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c01096ba:	e8 1b 77 ff ff       	call   c0100dda <__panic>
    mtp->next_count = 0;
c01096bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01096c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01096cc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01096d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096d6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096dd:	00 
c01096de:	89 04 24             	mov    %eax,(%esp)
c01096e1:	e8 63 02 00 00       	call   c0109949 <sem_init>
    sem_init(&(mtp->next), 0);
c01096e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e9:	83 c0 0c             	add    $0xc,%eax
c01096ec:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01096f3:	00 
c01096f4:	89 04 24             	mov    %eax,(%esp)
c01096f7:	e8 4d 02 00 00       	call   c0109949 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01096fc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01096ff:	89 d0                	mov    %edx,%eax
c0109701:	c1 e0 02             	shl    $0x2,%eax
c0109704:	01 d0                	add    %edx,%eax
c0109706:	c1 e0 02             	shl    $0x2,%eax
c0109709:	89 04 24             	mov    %eax,(%esp)
c010970c:	e8 f4 b4 ff ff       	call   c0104c05 <kmalloc>
c0109711:	8b 55 08             	mov    0x8(%ebp),%edx
c0109714:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109717:	8b 45 08             	mov    0x8(%ebp),%eax
c010971a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010971d:	85 c0                	test   %eax,%eax
c010971f:	75 24                	jne    c0109745 <monitor_init+0xb6>
c0109721:	c7 44 24 0c 26 f9 10 	movl   $0xc010f926,0xc(%esp)
c0109728:	c0 
c0109729:	c7 44 24 08 fd f8 10 	movl   $0xc010f8fd,0x8(%esp)
c0109730:	c0 
c0109731:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109738:	00 
c0109739:	c7 04 24 12 f9 10 c0 	movl   $0xc010f912,(%esp)
c0109740:	e8 95 76 ff ff       	call   c0100dda <__panic>
    for(i=0; i<num_cv; i++){
c0109745:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010974c:	eb 61                	jmp    c01097af <monitor_init+0x120>
        mtp->cv[i].count=0;
c010974e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109751:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109754:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109757:	89 d0                	mov    %edx,%eax
c0109759:	c1 e0 02             	shl    $0x2,%eax
c010975c:	01 d0                	add    %edx,%eax
c010975e:	c1 e0 02             	shl    $0x2,%eax
c0109761:	01 c8                	add    %ecx,%eax
c0109763:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010976a:	8b 45 08             	mov    0x8(%ebp),%eax
c010976d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109770:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109773:	89 d0                	mov    %edx,%eax
c0109775:	c1 e0 02             	shl    $0x2,%eax
c0109778:	01 d0                	add    %edx,%eax
c010977a:	c1 e0 02             	shl    $0x2,%eax
c010977d:	01 c8                	add    %ecx,%eax
c010977f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109786:	00 
c0109787:	89 04 24             	mov    %eax,(%esp)
c010978a:	e8 ba 01 00 00       	call   c0109949 <sem_init>
        mtp->cv[i].owner=mtp;
c010978f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109792:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109795:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109798:	89 d0                	mov    %edx,%eax
c010979a:	c1 e0 02             	shl    $0x2,%eax
c010979d:	01 d0                	add    %edx,%eax
c010979f:	c1 e0 02             	shl    $0x2,%eax
c01097a2:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01097a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a8:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c01097ab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01097af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097b2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01097b5:	72 97                	jb     c010974e <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01097b7:	c9                   	leave  
c01097b8:	c3                   	ret    

c01097b9 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01097b9:	55                   	push   %ebp
c01097ba:	89 e5                	mov    %esp,%ebp
c01097bc:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01097bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c2:	8b 40 10             	mov    0x10(%eax),%eax
c01097c5:	8b 50 18             	mov    0x18(%eax),%edx
c01097c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cb:	8b 40 0c             	mov    0xc(%eax),%eax
c01097ce:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01097d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01097d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097dd:	c7 04 24 34 f9 10 c0 	movl   $0xc010f934,(%esp)
c01097e4:	e8 6f 6b ff ff       	call   c0100358 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
     if(cvp->count>0) {
c01097e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01097ef:	85 c0                	test   %eax,%eax
c01097f1:	7e 3a                	jle    c010982d <cond_signal+0x74>
        cvp->owner->next_count ++;
c01097f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01097f6:	8b 40 10             	mov    0x10(%eax),%eax
c01097f9:	8b 50 18             	mov    0x18(%eax),%edx
c01097fc:	83 c2 01             	add    $0x1,%edx
c01097ff:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0109802:	8b 45 08             	mov    0x8(%ebp),%eax
c0109805:	89 04 24             	mov    %eax,(%esp)
c0109808:	e8 af 02 00 00       	call   c0109abc <up>
        down(&(cvp->owner->next));
c010980d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109810:	8b 40 10             	mov    0x10(%eax),%eax
c0109813:	83 c0 0c             	add    $0xc,%eax
c0109816:	89 04 24             	mov    %eax,(%esp)
c0109819:	e8 b9 02 00 00       	call   c0109ad7 <down>
        cvp->owner->next_count --;
c010981e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109821:	8b 40 10             	mov    0x10(%eax),%eax
c0109824:	8b 50 18             	mov    0x18(%eax),%edx
c0109827:	83 ea 01             	sub    $0x1,%edx
c010982a:	89 50 18             	mov    %edx,0x18(%eax)
      }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010982d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109830:	8b 40 10             	mov    0x10(%eax),%eax
c0109833:	8b 50 18             	mov    0x18(%eax),%edx
c0109836:	8b 45 08             	mov    0x8(%ebp),%eax
c0109839:	8b 40 0c             	mov    0xc(%eax),%eax
c010983c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109840:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109844:	8b 45 08             	mov    0x8(%ebp),%eax
c0109847:	89 44 24 04          	mov    %eax,0x4(%esp)
c010984b:	c7 04 24 7c f9 10 c0 	movl   $0xc010f97c,(%esp)
c0109852:	e8 01 6b ff ff       	call   c0100358 <cprintf>
}
c0109857:	c9                   	leave  
c0109858:	c3                   	ret    

c0109859 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109859:	55                   	push   %ebp
c010985a:	89 e5                	mov    %esp,%ebp
c010985c:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010985f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109862:	8b 40 10             	mov    0x10(%eax),%eax
c0109865:	8b 50 18             	mov    0x18(%eax),%edx
c0109868:	8b 45 08             	mov    0x8(%ebp),%eax
c010986b:	8b 40 0c             	mov    0xc(%eax),%eax
c010986e:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109872:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109876:	8b 45 08             	mov    0x8(%ebp),%eax
c0109879:	89 44 24 04          	mov    %eax,0x4(%esp)
c010987d:	c7 04 24 c0 f9 10 c0 	movl   $0xc010f9c0,(%esp)
c0109884:	e8 cf 6a ff ff       	call   c0100358 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
      cvp->count++;
c0109889:	8b 45 08             	mov    0x8(%ebp),%eax
c010988c:	8b 40 0c             	mov    0xc(%eax),%eax
c010988f:	8d 50 01             	lea    0x1(%eax),%edx
c0109892:	8b 45 08             	mov    0x8(%ebp),%eax
c0109895:	89 50 0c             	mov    %edx,0xc(%eax)
      if(cvp->owner->next_count > 0)
c0109898:	8b 45 08             	mov    0x8(%ebp),%eax
c010989b:	8b 40 10             	mov    0x10(%eax),%eax
c010989e:	8b 40 18             	mov    0x18(%eax),%eax
c01098a1:	85 c0                	test   %eax,%eax
c01098a3:	7e 13                	jle    c01098b8 <cond_wait+0x5f>
         up(&(cvp->owner->next));
c01098a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01098a8:	8b 40 10             	mov    0x10(%eax),%eax
c01098ab:	83 c0 0c             	add    $0xc,%eax
c01098ae:	89 04 24             	mov    %eax,(%esp)
c01098b1:	e8 06 02 00 00       	call   c0109abc <up>
c01098b6:	eb 0e                	jmp    c01098c6 <cond_wait+0x6d>
      else
         up(&(cvp->owner->mutex));
c01098b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01098bb:	8b 40 10             	mov    0x10(%eax),%eax
c01098be:	89 04 24             	mov    %eax,(%esp)
c01098c1:	e8 f6 01 00 00       	call   c0109abc <up>
      down(&(cvp->sem));
c01098c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c9:	89 04 24             	mov    %eax,(%esp)
c01098cc:	e8 06 02 00 00       	call   c0109ad7 <down>
      cvp->count --;
c01098d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d4:	8b 40 0c             	mov    0xc(%eax),%eax
c01098d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01098da:	8b 45 08             	mov    0x8(%ebp),%eax
c01098dd:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e3:	8b 40 10             	mov    0x10(%eax),%eax
c01098e6:	8b 50 18             	mov    0x18(%eax),%edx
c01098e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ec:	8b 40 0c             	mov    0xc(%eax),%eax
c01098ef:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01098f3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01098fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098fe:	c7 04 24 04 fa 10 c0 	movl   $0xc010fa04,(%esp)
c0109905:	e8 4e 6a ff ff       	call   c0100358 <cprintf>
}
c010990a:	c9                   	leave  
c010990b:	c3                   	ret    

c010990c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010990c:	55                   	push   %ebp
c010990d:	89 e5                	mov    %esp,%ebp
c010990f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109912:	9c                   	pushf  
c0109913:	58                   	pop    %eax
c0109914:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109917:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010991a:	25 00 02 00 00       	and    $0x200,%eax
c010991f:	85 c0                	test   %eax,%eax
c0109921:	74 0c                	je     c010992f <__intr_save+0x23>
        intr_disable();
c0109923:	e8 0a 87 ff ff       	call   c0102032 <intr_disable>
        return 1;
c0109928:	b8 01 00 00 00       	mov    $0x1,%eax
c010992d:	eb 05                	jmp    c0109934 <__intr_save+0x28>
    }
    return 0;
c010992f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109934:	c9                   	leave  
c0109935:	c3                   	ret    

c0109936 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109936:	55                   	push   %ebp
c0109937:	89 e5                	mov    %esp,%ebp
c0109939:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010993c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109940:	74 05                	je     c0109947 <__intr_restore+0x11>
        intr_enable();
c0109942:	e8 e5 86 ff ff       	call   c010202c <intr_enable>
    }
}
c0109947:	c9                   	leave  
c0109948:	c3                   	ret    

c0109949 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109949:	55                   	push   %ebp
c010994a:	89 e5                	mov    %esp,%ebp
c010994c:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c010994f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109952:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109955:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109957:	8b 45 08             	mov    0x8(%ebp),%eax
c010995a:	83 c0 04             	add    $0x4,%eax
c010995d:	89 04 24             	mov    %eax,(%esp)
c0109960:	e8 33 02 00 00       	call   c0109b98 <wait_queue_init>
}
c0109965:	c9                   	leave  
c0109966:	c3                   	ret    

c0109967 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109967:	55                   	push   %ebp
c0109968:	89 e5                	mov    %esp,%ebp
c010996a:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010996d:	e8 9a ff ff ff       	call   c010990c <__intr_save>
c0109972:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109975:	8b 45 08             	mov    0x8(%ebp),%eax
c0109978:	83 c0 04             	add    $0x4,%eax
c010997b:	89 04 24             	mov    %eax,(%esp)
c010997e:	e8 69 04 00 00       	call   c0109dec <wait_queue_first>
c0109983:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109986:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010998a:	75 0f                	jne    c010999b <__up+0x34>
            sem->value ++;
c010998c:	8b 45 08             	mov    0x8(%ebp),%eax
c010998f:	8b 00                	mov    (%eax),%eax
c0109991:	8d 50 01             	lea    0x1(%eax),%edx
c0109994:	8b 45 08             	mov    0x8(%ebp),%eax
c0109997:	89 10                	mov    %edx,(%eax)
c0109999:	eb 58                	jmp    c01099f3 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c010999b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010999e:	8b 00                	mov    (%eax),%eax
c01099a0:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01099a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01099a9:	74 24                	je     c01099cf <__up+0x68>
c01099ab:	c7 44 24 0c 48 fa 10 	movl   $0xc010fa48,0xc(%esp)
c01099b2:	c0 
c01099b3:	c7 44 24 08 6d fa 10 	movl   $0xc010fa6d,0x8(%esp)
c01099ba:	c0 
c01099bb:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c01099c2:	00 
c01099c3:	c7 04 24 82 fa 10 c0 	movl   $0xc010fa82,(%esp)
c01099ca:	e8 0b 74 ff ff       	call   c0100dda <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c01099cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d2:	8d 50 04             	lea    0x4(%eax),%edx
c01099d5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01099dc:	00 
c01099dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01099e0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099eb:	89 14 24             	mov    %edx,(%esp)
c01099ee:	e8 95 04 00 00       	call   c0109e88 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c01099f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f6:	89 04 24             	mov    %eax,(%esp)
c01099f9:	e8 38 ff ff ff       	call   c0109936 <__intr_restore>
}
c01099fe:	c9                   	leave  
c01099ff:	c3                   	ret    

c0109a00 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109a00:	55                   	push   %ebp
c0109a01:	89 e5                	mov    %esp,%ebp
c0109a03:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109a06:	e8 01 ff ff ff       	call   c010990c <__intr_save>
c0109a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109a0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a11:	8b 00                	mov    (%eax),%eax
c0109a13:	85 c0                	test   %eax,%eax
c0109a15:	7e 22                	jle    c0109a39 <__down+0x39>
        sem->value --;
c0109a17:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1a:	8b 00                	mov    (%eax),%eax
c0109a1c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a22:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109a24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a27:	89 04 24             	mov    %eax,(%esp)
c0109a2a:	e8 07 ff ff ff       	call   c0109936 <__intr_restore>
        return 0;
c0109a2f:	b8 00 00 00 00       	mov    $0x0,%eax
c0109a34:	e9 81 00 00 00       	jmp    c0109aba <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109a39:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109a3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a42:	8d 50 04             	lea    0x4(%eax),%edx
c0109a45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a48:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a53:	89 14 24             	mov    %edx,(%esp)
c0109a56:	e8 34 05 00 00       	call   c0109f8f <wait_current_set>
    local_intr_restore(intr_flag);
c0109a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a5e:	89 04 24             	mov    %eax,(%esp)
c0109a61:	e8 d0 fe ff ff       	call   c0109936 <__intr_restore>

    schedule();
c0109a66:	e8 1b 2a 00 00       	call   c010c486 <schedule>

    local_intr_save(intr_flag);
c0109a6b:	e8 9c fe ff ff       	call   c010990c <__intr_save>
c0109a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a76:	89 04 24             	mov    %eax,(%esp)
c0109a79:	e8 e2 03 00 00       	call   c0109e60 <wait_in_queue>
c0109a7e:	85 c0                	test   %eax,%eax
c0109a80:	74 15                	je     c0109a97 <__down+0x97>
c0109a82:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a85:	8d 50 04             	lea    0x4(%eax),%edx
c0109a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a8f:	89 14 24             	mov    %edx,(%esp)
c0109a92:	e8 c4 01 00 00       	call   c0109c5b <wait_queue_del>
    local_intr_restore(intr_flag);
c0109a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a9a:	89 04 24             	mov    %eax,(%esp)
c0109a9d:	e8 94 fe ff ff       	call   c0109936 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109aa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109aa5:	8b 40 04             	mov    0x4(%eax),%eax
c0109aa8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109aab:	74 08                	je     c0109ab5 <__down+0xb5>
        return wait->wakeup_flags;
c0109aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ab0:	8b 40 04             	mov    0x4(%eax),%eax
c0109ab3:	eb 05                	jmp    c0109aba <__down+0xba>
    }
    return 0;
c0109ab5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109aba:	c9                   	leave  
c0109abb:	c3                   	ret    

c0109abc <up>:

void
up(semaphore_t *sem) {
c0109abc:	55                   	push   %ebp
c0109abd:	89 e5                	mov    %esp,%ebp
c0109abf:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109ac2:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ac9:	00 
c0109aca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109acd:	89 04 24             	mov    %eax,(%esp)
c0109ad0:	e8 92 fe ff ff       	call   c0109967 <__up>
}
c0109ad5:	c9                   	leave  
c0109ad6:	c3                   	ret    

c0109ad7 <down>:

void
down(semaphore_t *sem) {
c0109ad7:	55                   	push   %ebp
c0109ad8:	89 e5                	mov    %esp,%ebp
c0109ada:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109add:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ae4:	00 
c0109ae5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae8:	89 04 24             	mov    %eax,(%esp)
c0109aeb:	e8 10 ff ff ff       	call   c0109a00 <__down>
c0109af0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109af3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109af7:	74 24                	je     c0109b1d <down+0x46>
c0109af9:	c7 44 24 0c 92 fa 10 	movl   $0xc010fa92,0xc(%esp)
c0109b00:	c0 
c0109b01:	c7 44 24 08 6d fa 10 	movl   $0xc010fa6d,0x8(%esp)
c0109b08:	c0 
c0109b09:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109b10:	00 
c0109b11:	c7 04 24 82 fa 10 c0 	movl   $0xc010fa82,(%esp)
c0109b18:	e8 bd 72 ff ff       	call   c0100dda <__panic>
}
c0109b1d:	c9                   	leave  
c0109b1e:	c3                   	ret    

c0109b1f <try_down>:

bool
try_down(semaphore_t *sem) {
c0109b1f:	55                   	push   %ebp
c0109b20:	89 e5                	mov    %esp,%ebp
c0109b22:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109b25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109b2c:	e8 db fd ff ff       	call   c010990c <__intr_save>
c0109b31:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109b34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b37:	8b 00                	mov    (%eax),%eax
c0109b39:	85 c0                	test   %eax,%eax
c0109b3b:	7e 14                	jle    c0109b51 <try_down+0x32>
        sem->value --, ret = 1;
c0109b3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b40:	8b 00                	mov    (%eax),%eax
c0109b42:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b48:	89 10                	mov    %edx,(%eax)
c0109b4a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109b51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b54:	89 04 24             	mov    %eax,(%esp)
c0109b57:	e8 da fd ff ff       	call   c0109936 <__intr_restore>
    return ret;
c0109b5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109b5f:	c9                   	leave  
c0109b60:	c3                   	ret    

c0109b61 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109b61:	55                   	push   %ebp
c0109b62:	89 e5                	mov    %esp,%ebp
c0109b64:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109b67:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b6d:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109b6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b72:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109b79:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b7c:	83 c0 0c             	add    $0xc,%eax
c0109b7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b85:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109b88:	89 50 04             	mov    %edx,0x4(%eax)
c0109b8b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b8e:	8b 50 04             	mov    0x4(%eax),%edx
c0109b91:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b94:	89 10                	mov    %edx,(%eax)
}
c0109b96:	c9                   	leave  
c0109b97:	c3                   	ret    

c0109b98 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109b98:	55                   	push   %ebp
c0109b99:	89 e5                	mov    %esp,%ebp
c0109b9b:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ba1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109ba4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ba7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109baa:	89 50 04             	mov    %edx,0x4(%eax)
c0109bad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109bb0:	8b 50 04             	mov    0x4(%eax),%edx
c0109bb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109bb6:	89 10                	mov    %edx,(%eax)
}
c0109bb8:	c9                   	leave  
c0109bb9:	c3                   	ret    

c0109bba <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109bba:	55                   	push   %ebp
c0109bbb:	89 e5                	mov    %esp,%ebp
c0109bbd:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109bc0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bc3:	83 c0 0c             	add    $0xc,%eax
c0109bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bcc:	8b 40 04             	mov    0x4(%eax),%eax
c0109bcf:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109bd2:	0f 94 c0             	sete   %al
c0109bd5:	0f b6 c0             	movzbl %al,%eax
c0109bd8:	85 c0                	test   %eax,%eax
c0109bda:	74 09                	je     c0109be5 <wait_queue_add+0x2b>
c0109bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bdf:	8b 00                	mov    (%eax),%eax
c0109be1:	85 c0                	test   %eax,%eax
c0109be3:	75 24                	jne    c0109c09 <wait_queue_add+0x4f>
c0109be5:	c7 44 24 0c a0 fa 10 	movl   $0xc010faa0,0xc(%esp)
c0109bec:	c0 
c0109bed:	c7 44 24 08 d5 fa 10 	movl   $0xc010fad5,0x8(%esp)
c0109bf4:	c0 
c0109bf5:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109bfc:	00 
c0109bfd:	c7 04 24 ea fa 10 c0 	movl   $0xc010faea,(%esp)
c0109c04:	e8 d1 71 ff ff       	call   c0100dda <__panic>
    wait->wait_queue = queue;
c0109c09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0109c0f:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109c12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c15:	8d 50 0c             	lea    0xc(%eax),%edx
c0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109c1e:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c24:	8b 00                	mov    (%eax),%eax
c0109c26:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109c29:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109c2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109c2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c32:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109c35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109c38:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109c3b:	89 10                	mov    %edx,(%eax)
c0109c3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109c40:	8b 10                	mov    (%eax),%edx
c0109c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c45:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109c48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c4b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109c4e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c54:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109c57:	89 10                	mov    %edx,(%eax)
}
c0109c59:	c9                   	leave  
c0109c5a:	c3                   	ret    

c0109c5b <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109c5b:	55                   	push   %ebp
c0109c5c:	89 e5                	mov    %esp,%ebp
c0109c5e:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109c61:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c64:	83 c0 0c             	add    $0xc,%eax
c0109c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109c6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c6d:	8b 40 04             	mov    0x4(%eax),%eax
c0109c70:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109c73:	0f 94 c0             	sete   %al
c0109c76:	0f b6 c0             	movzbl %al,%eax
c0109c79:	85 c0                	test   %eax,%eax
c0109c7b:	75 0b                	jne    c0109c88 <wait_queue_del+0x2d>
c0109c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c80:	8b 40 08             	mov    0x8(%eax),%eax
c0109c83:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109c86:	74 24                	je     c0109cac <wait_queue_del+0x51>
c0109c88:	c7 44 24 0c fc fa 10 	movl   $0xc010fafc,0xc(%esp)
c0109c8f:	c0 
c0109c90:	c7 44 24 08 d5 fa 10 	movl   $0xc010fad5,0x8(%esp)
c0109c97:	c0 
c0109c98:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109c9f:	00 
c0109ca0:	c7 04 24 ea fa 10 c0 	movl   $0xc010faea,(%esp)
c0109ca7:	e8 2e 71 ff ff       	call   c0100dda <__panic>
    list_del_init(&(wait->wait_link));
c0109cac:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109caf:	83 c0 0c             	add    $0xc,%eax
c0109cb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109cb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cb8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109cbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cbe:	8b 40 04             	mov    0x4(%eax),%eax
c0109cc1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109cc4:	8b 12                	mov    (%edx),%edx
c0109cc6:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109ccc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ccf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109cd2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109cd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cd8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109cdb:	89 10                	mov    %edx,(%eax)
c0109cdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ce0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ce3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ce6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ce9:	89 50 04             	mov    %edx,0x4(%eax)
c0109cec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109cef:	8b 50 04             	mov    0x4(%eax),%edx
c0109cf2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109cf5:	89 10                	mov    %edx,(%eax)
}
c0109cf7:	c9                   	leave  
c0109cf8:	c3                   	ret    

c0109cf9 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109cf9:	55                   	push   %ebp
c0109cfa:	89 e5                	mov    %esp,%ebp
c0109cfc:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109cff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d02:	83 c0 0c             	add    $0xc,%eax
c0109d05:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d0b:	8b 40 04             	mov    0x4(%eax),%eax
c0109d0e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109d11:	0f 94 c0             	sete   %al
c0109d14:	0f b6 c0             	movzbl %al,%eax
c0109d17:	85 c0                	test   %eax,%eax
c0109d19:	75 0b                	jne    c0109d26 <wait_queue_next+0x2d>
c0109d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d1e:	8b 40 08             	mov    0x8(%eax),%eax
c0109d21:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d24:	74 24                	je     c0109d4a <wait_queue_next+0x51>
c0109d26:	c7 44 24 0c fc fa 10 	movl   $0xc010fafc,0xc(%esp)
c0109d2d:	c0 
c0109d2e:	c7 44 24 08 d5 fa 10 	movl   $0xc010fad5,0x8(%esp)
c0109d35:	c0 
c0109d36:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109d3d:	00 
c0109d3e:	c7 04 24 ea fa 10 c0 	movl   $0xc010faea,(%esp)
c0109d45:	e8 90 70 ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d4d:	83 c0 0c             	add    $0xc,%eax
c0109d50:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109d53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d56:	8b 40 04             	mov    0x4(%eax),%eax
c0109d59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109d62:	74 08                	je     c0109d6c <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d67:	83 e8 0c             	sub    $0xc,%eax
c0109d6a:	eb 05                	jmp    c0109d71 <wait_queue_next+0x78>
    }
    return NULL;
c0109d6c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d71:	c9                   	leave  
c0109d72:	c3                   	ret    

c0109d73 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109d73:	55                   	push   %ebp
c0109d74:	89 e5                	mov    %esp,%ebp
c0109d76:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109d79:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d7c:	83 c0 0c             	add    $0xc,%eax
c0109d7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d85:	8b 40 04             	mov    0x4(%eax),%eax
c0109d88:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109d8b:	0f 94 c0             	sete   %al
c0109d8e:	0f b6 c0             	movzbl %al,%eax
c0109d91:	85 c0                	test   %eax,%eax
c0109d93:	75 0b                	jne    c0109da0 <wait_queue_prev+0x2d>
c0109d95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d98:	8b 40 08             	mov    0x8(%eax),%eax
c0109d9b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d9e:	74 24                	je     c0109dc4 <wait_queue_prev+0x51>
c0109da0:	c7 44 24 0c fc fa 10 	movl   $0xc010fafc,0xc(%esp)
c0109da7:	c0 
c0109da8:	c7 44 24 08 d5 fa 10 	movl   $0xc010fad5,0x8(%esp)
c0109daf:	c0 
c0109db0:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109db7:	00 
c0109db8:	c7 04 24 ea fa 10 c0 	movl   $0xc010faea,(%esp)
c0109dbf:	e8 16 70 ff ff       	call   c0100dda <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109dc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dc7:	83 c0 0c             	add    $0xc,%eax
c0109dca:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109dcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dd0:	8b 00                	mov    (%eax),%eax
c0109dd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109dd5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109ddb:	74 08                	je     c0109de5 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109de0:	83 e8 0c             	sub    $0xc,%eax
c0109de3:	eb 05                	jmp    c0109dea <wait_queue_prev+0x77>
    }
    return NULL;
c0109de5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109dea:	c9                   	leave  
c0109deb:	c3                   	ret    

c0109dec <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109dec:	55                   	push   %ebp
c0109ded:	89 e5                	mov    %esp,%ebp
c0109def:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109df2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df5:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109df8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109dfb:	8b 40 04             	mov    0x4(%eax),%eax
c0109dfe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109e01:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e04:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109e07:	74 08                	je     c0109e11 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109e09:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e0c:	83 e8 0c             	sub    $0xc,%eax
c0109e0f:	eb 05                	jmp    c0109e16 <wait_queue_first+0x2a>
    }
    return NULL;
c0109e11:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e16:	c9                   	leave  
c0109e17:	c3                   	ret    

c0109e18 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109e18:	55                   	push   %ebp
c0109e19:	89 e5                	mov    %esp,%ebp
c0109e1b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109e1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e21:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109e24:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e27:	8b 00                	mov    (%eax),%eax
c0109e29:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109e2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e2f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109e32:	74 08                	je     c0109e3c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109e34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e37:	83 e8 0c             	sub    $0xc,%eax
c0109e3a:	eb 05                	jmp    c0109e41 <wait_queue_last+0x29>
    }
    return NULL;
c0109e3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109e41:	c9                   	leave  
c0109e42:	c3                   	ret    

c0109e43 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109e43:	55                   	push   %ebp
c0109e44:	89 e5                	mov    %esp,%ebp
c0109e46:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109e49:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e4c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e52:	8b 40 04             	mov    0x4(%eax),%eax
c0109e55:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109e58:	0f 94 c0             	sete   %al
c0109e5b:	0f b6 c0             	movzbl %al,%eax
}
c0109e5e:	c9                   	leave  
c0109e5f:	c3                   	ret    

c0109e60 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109e60:	55                   	push   %ebp
c0109e61:	89 e5                	mov    %esp,%ebp
c0109e63:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109e66:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e69:	83 c0 0c             	add    $0xc,%eax
c0109e6c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109e6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e72:	8b 40 04             	mov    0x4(%eax),%eax
c0109e75:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109e78:	0f 94 c0             	sete   %al
c0109e7b:	0f b6 c0             	movzbl %al,%eax
c0109e7e:	85 c0                	test   %eax,%eax
c0109e80:	0f 94 c0             	sete   %al
c0109e83:	0f b6 c0             	movzbl %al,%eax
}
c0109e86:	c9                   	leave  
c0109e87:	c3                   	ret    

c0109e88 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109e88:	55                   	push   %ebp
c0109e89:	89 e5                	mov    %esp,%ebp
c0109e8b:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c0109e8e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109e92:	74 12                	je     c0109ea6 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c0109e94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e9e:	89 04 24             	mov    %eax,(%esp)
c0109ea1:	e8 b5 fd ff ff       	call   c0109c5b <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c0109ea6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ea9:	8b 55 10             	mov    0x10(%ebp),%edx
c0109eac:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109eb2:	8b 00                	mov    (%eax),%eax
c0109eb4:	89 04 24             	mov    %eax,(%esp)
c0109eb7:	e8 2e 25 00 00       	call   c010c3ea <wakeup_proc>
}
c0109ebc:	c9                   	leave  
c0109ebd:	c3                   	ret    

c0109ebe <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109ebe:	55                   	push   %ebp
c0109ebf:	89 e5                	mov    %esp,%ebp
c0109ec1:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec7:	89 04 24             	mov    %eax,(%esp)
c0109eca:	e8 1d ff ff ff       	call   c0109dec <wait_queue_first>
c0109ecf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ed2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ed6:	74 20                	je     c0109ef8 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109ed8:	8b 45 10             	mov    0x10(%ebp),%eax
c0109edb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109edf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ee2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ee9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef0:	89 04 24             	mov    %eax,(%esp)
c0109ef3:	e8 90 ff ff ff       	call   c0109e88 <wakeup_wait>
    }
}
c0109ef8:	c9                   	leave  
c0109ef9:	c3                   	ret    

c0109efa <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109efa:	55                   	push   %ebp
c0109efb:	89 e5                	mov    %esp,%ebp
c0109efd:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109f00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f03:	89 04 24             	mov    %eax,(%esp)
c0109f06:	e8 e1 fe ff ff       	call   c0109dec <wait_queue_first>
c0109f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f12:	74 79                	je     c0109f8d <wakeup_queue+0x93>
        if (del) {
c0109f14:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109f18:	74 37                	je     c0109f51 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109f1a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109f21:	00 
c0109f22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f25:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f30:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f33:	89 04 24             	mov    %eax,(%esp)
c0109f36:	e8 4d ff ff ff       	call   c0109e88 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109f3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f3e:	89 04 24             	mov    %eax,(%esp)
c0109f41:	e8 a6 fe ff ff       	call   c0109dec <wait_queue_first>
c0109f46:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f4d:	75 cb                	jne    c0109f1a <wakeup_queue+0x20>
c0109f4f:	eb 3c                	jmp    c0109f8d <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109f51:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0109f58:	00 
c0109f59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f5c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f63:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f6a:	89 04 24             	mov    %eax,(%esp)
c0109f6d:	e8 16 ff ff ff       	call   c0109e88 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109f72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f7c:	89 04 24             	mov    %eax,(%esp)
c0109f7f:	e8 75 fd ff ff       	call   c0109cf9 <wait_queue_next>
c0109f84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f8b:	75 c4                	jne    c0109f51 <wakeup_queue+0x57>
        }
    }
}
c0109f8d:	c9                   	leave  
c0109f8e:	c3                   	ret    

c0109f8f <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109f8f:	55                   	push   %ebp
c0109f90:	89 e5                	mov    %esp,%ebp
c0109f92:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c0109f95:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0109f9a:	85 c0                	test   %eax,%eax
c0109f9c:	75 24                	jne    c0109fc2 <wait_current_set+0x33>
c0109f9e:	c7 44 24 0c 39 fb 10 	movl   $0xc010fb39,0xc(%esp)
c0109fa5:	c0 
c0109fa6:	c7 44 24 08 d5 fa 10 	movl   $0xc010fad5,0x8(%esp)
c0109fad:	c0 
c0109fae:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0109fb5:	00 
c0109fb6:	c7 04 24 ea fa 10 c0 	movl   $0xc010faea,(%esp)
c0109fbd:	e8 18 6e ff ff       	call   c0100dda <__panic>
    wait_init(wait, current);
c0109fc2:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0109fc7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fce:	89 04 24             	mov    %eax,(%esp)
c0109fd1:	e8 8b fb ff ff       	call   c0109b61 <wait_init>
    current->state = PROC_SLEEPING;
c0109fd6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0109fdb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109fe1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0109fe6:	8b 55 10             	mov    0x10(%ebp),%edx
c0109fe9:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109fef:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ff2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ff6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ff9:	89 04 24             	mov    %eax,(%esp)
c0109ffc:	e8 b9 fb ff ff       	call   c0109bba <wait_queue_add>
}
c010a001:	c9                   	leave  
c010a002:	c3                   	ret    

c010a003 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a003:	55                   	push   %ebp
c010a004:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a006:	8b 55 08             	mov    0x8(%ebp),%edx
c010a009:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a00e:	29 c2                	sub    %eax,%edx
c010a010:	89 d0                	mov    %edx,%eax
c010a012:	c1 f8 05             	sar    $0x5,%eax
}
c010a015:	5d                   	pop    %ebp
c010a016:	c3                   	ret    

c010a017 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a017:	55                   	push   %ebp
c010a018:	89 e5                	mov    %esp,%ebp
c010a01a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a01d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a020:	89 04 24             	mov    %eax,(%esp)
c010a023:	e8 db ff ff ff       	call   c010a003 <page2ppn>
c010a028:	c1 e0 0c             	shl    $0xc,%eax
}
c010a02b:	c9                   	leave  
c010a02c:	c3                   	ret    

c010a02d <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a02d:	55                   	push   %ebp
c010a02e:	89 e5                	mov    %esp,%ebp
c010a030:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a033:	8b 45 08             	mov    0x8(%ebp),%eax
c010a036:	89 04 24             	mov    %eax,(%esp)
c010a039:	e8 d9 ff ff ff       	call   c010a017 <page2pa>
c010a03e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a044:	c1 e8 0c             	shr    $0xc,%eax
c010a047:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a04a:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a04f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a052:	72 23                	jb     c010a077 <page2kva+0x4a>
c010a054:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a057:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a05b:	c7 44 24 08 4c fb 10 	movl   $0xc010fb4c,0x8(%esp)
c010a062:	c0 
c010a063:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a06a:	00 
c010a06b:	c7 04 24 6f fb 10 c0 	movl   $0xc010fb6f,(%esp)
c010a072:	e8 63 6d ff ff       	call   c0100dda <__panic>
c010a077:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a07a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a07f:	c9                   	leave  
c010a080:	c3                   	ret    

c010a081 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a081:	55                   	push   %ebp
c010a082:	89 e5                	mov    %esp,%ebp
c010a084:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a087:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a08e:	e8 97 7a ff ff       	call   c0101b2a <ide_device_valid>
c010a093:	85 c0                	test   %eax,%eax
c010a095:	75 1c                	jne    c010a0b3 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a097:	c7 44 24 08 7d fb 10 	movl   $0xc010fb7d,0x8(%esp)
c010a09e:	c0 
c010a09f:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a0a6:	00 
c010a0a7:	c7 04 24 97 fb 10 c0 	movl   $0xc010fb97,(%esp)
c010a0ae:	e8 27 6d ff ff       	call   c0100dda <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a0b3:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a0ba:	e8 aa 7a ff ff       	call   c0101b69 <ide_device_size>
c010a0bf:	c1 e8 03             	shr    $0x3,%eax
c010a0c2:	a3 9c 55 1c c0       	mov    %eax,0xc01c559c
}
c010a0c7:	c9                   	leave  
c010a0c8:	c3                   	ret    

c010a0c9 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a0c9:	55                   	push   %ebp
c010a0ca:	89 e5                	mov    %esp,%ebp
c010a0cc:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a0cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0d2:	89 04 24             	mov    %eax,(%esp)
c010a0d5:	e8 53 ff ff ff       	call   c010a02d <page2kva>
c010a0da:	8b 55 08             	mov    0x8(%ebp),%edx
c010a0dd:	c1 ea 08             	shr    $0x8,%edx
c010a0e0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a0e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0e7:	74 0b                	je     c010a0f4 <swapfs_read+0x2b>
c010a0e9:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a0ef:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a0f2:	72 23                	jb     c010a117 <swapfs_read+0x4e>
c010a0f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a0fb:	c7 44 24 08 a8 fb 10 	movl   $0xc010fba8,0x8(%esp)
c010a102:	c0 
c010a103:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a10a:	00 
c010a10b:	c7 04 24 97 fb 10 c0 	movl   $0xc010fb97,(%esp)
c010a112:	e8 c3 6c ff ff       	call   c0100dda <__panic>
c010a117:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a11a:	c1 e2 03             	shl    $0x3,%edx
c010a11d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a124:	00 
c010a125:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a129:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a12d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a134:	e8 6f 7a ff ff       	call   c0101ba8 <ide_read_secs>
}
c010a139:	c9                   	leave  
c010a13a:	c3                   	ret    

c010a13b <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a13b:	55                   	push   %ebp
c010a13c:	89 e5                	mov    %esp,%ebp
c010a13e:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a141:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a144:	89 04 24             	mov    %eax,(%esp)
c010a147:	e8 e1 fe ff ff       	call   c010a02d <page2kva>
c010a14c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a14f:	c1 ea 08             	shr    $0x8,%edx
c010a152:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a155:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a159:	74 0b                	je     c010a166 <swapfs_write+0x2b>
c010a15b:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a161:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a164:	72 23                	jb     c010a189 <swapfs_write+0x4e>
c010a166:	8b 45 08             	mov    0x8(%ebp),%eax
c010a169:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a16d:	c7 44 24 08 a8 fb 10 	movl   $0xc010fba8,0x8(%esp)
c010a174:	c0 
c010a175:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a17c:	00 
c010a17d:	c7 04 24 97 fb 10 c0 	movl   $0xc010fb97,(%esp)
c010a184:	e8 51 6c ff ff       	call   c0100dda <__panic>
c010a189:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a18c:	c1 e2 03             	shl    $0x3,%edx
c010a18f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a196:	00 
c010a197:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a19b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a19f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a1a6:	e8 3f 7c ff ff       	call   c0101dea <ide_write_secs>
}
c010a1ab:	c9                   	leave  
c010a1ac:	c3                   	ret    

c010a1ad <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a1ad:	52                   	push   %edx
    call *%ebx              # call fn
c010a1ae:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a1b0:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a1b1:	e8 e2 0c 00 00       	call   c010ae98 <do_exit>

c010a1b6 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a1b6:	55                   	push   %ebp
c010a1b7:	89 e5                	mov    %esp,%ebp
c010a1b9:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a1bc:	8b 55 10             	mov    0x10(%ebp),%edx
c010a1bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c2:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1c7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a1ca:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a1cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1d0:	83 c0 08             	add    $0x8,%eax
c010a1d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a1d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a1dc:	89 50 04             	mov    %edx,0x4(%eax)
c010a1df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1e2:	8b 50 04             	mov    0x4(%eax),%edx
c010a1e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1e8:	89 10                	mov    %edx,(%eax)
    return timer;
c010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a1ed:	c9                   	leave  
c010a1ee:	c3                   	ret    

c010a1ef <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a1ef:	55                   	push   %ebp
c010a1f0:	89 e5                	mov    %esp,%ebp
c010a1f2:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a1f5:	9c                   	pushf  
c010a1f6:	58                   	pop    %eax
c010a1f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a1fd:	25 00 02 00 00       	and    $0x200,%eax
c010a202:	85 c0                	test   %eax,%eax
c010a204:	74 0c                	je     c010a212 <__intr_save+0x23>
        intr_disable();
c010a206:	e8 27 7e ff ff       	call   c0102032 <intr_disable>
        return 1;
c010a20b:	b8 01 00 00 00       	mov    $0x1,%eax
c010a210:	eb 05                	jmp    c010a217 <__intr_save+0x28>
    }
    return 0;
c010a212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a217:	c9                   	leave  
c010a218:	c3                   	ret    

c010a219 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a219:	55                   	push   %ebp
c010a21a:	89 e5                	mov    %esp,%ebp
c010a21c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a21f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a223:	74 05                	je     c010a22a <__intr_restore+0x11>
        intr_enable();
c010a225:	e8 02 7e ff ff       	call   c010202c <intr_enable>
    }
}
c010a22a:	c9                   	leave  
c010a22b:	c3                   	ret    

c010a22c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a22c:	55                   	push   %ebp
c010a22d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a22f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a232:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a237:	29 c2                	sub    %eax,%edx
c010a239:	89 d0                	mov    %edx,%eax
c010a23b:	c1 f8 05             	sar    $0x5,%eax
}
c010a23e:	5d                   	pop    %ebp
c010a23f:	c3                   	ret    

c010a240 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a240:	55                   	push   %ebp
c010a241:	89 e5                	mov    %esp,%ebp
c010a243:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a246:	8b 45 08             	mov    0x8(%ebp),%eax
c010a249:	89 04 24             	mov    %eax,(%esp)
c010a24c:	e8 db ff ff ff       	call   c010a22c <page2ppn>
c010a251:	c1 e0 0c             	shl    $0xc,%eax
}
c010a254:	c9                   	leave  
c010a255:	c3                   	ret    

c010a256 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a256:	55                   	push   %ebp
c010a257:	89 e5                	mov    %esp,%ebp
c010a259:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a25c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a25f:	c1 e8 0c             	shr    $0xc,%eax
c010a262:	89 c2                	mov    %eax,%edx
c010a264:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a269:	39 c2                	cmp    %eax,%edx
c010a26b:	72 1c                	jb     c010a289 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a26d:	c7 44 24 08 c8 fb 10 	movl   $0xc010fbc8,0x8(%esp)
c010a274:	c0 
c010a275:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a27c:	00 
c010a27d:	c7 04 24 e7 fb 10 c0 	movl   $0xc010fbe7,(%esp)
c010a284:	e8 51 6b ff ff       	call   c0100dda <__panic>
    }
    return &pages[PPN(pa)];
c010a289:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a28e:	8b 55 08             	mov    0x8(%ebp),%edx
c010a291:	c1 ea 0c             	shr    $0xc,%edx
c010a294:	c1 e2 05             	shl    $0x5,%edx
c010a297:	01 d0                	add    %edx,%eax
}
c010a299:	c9                   	leave  
c010a29a:	c3                   	ret    

c010a29b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a29b:	55                   	push   %ebp
c010a29c:	89 e5                	mov    %esp,%ebp
c010a29e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a4:	89 04 24             	mov    %eax,(%esp)
c010a2a7:	e8 94 ff ff ff       	call   c010a240 <page2pa>
c010a2ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2b2:	c1 e8 0c             	shr    $0xc,%eax
c010a2b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a2b8:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a2bd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a2c0:	72 23                	jb     c010a2e5 <page2kva+0x4a>
c010a2c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2c5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a2c9:	c7 44 24 08 f8 fb 10 	movl   $0xc010fbf8,0x8(%esp)
c010a2d0:	c0 
c010a2d1:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a2d8:	00 
c010a2d9:	c7 04 24 e7 fb 10 c0 	movl   $0xc010fbe7,(%esp)
c010a2e0:	e8 f5 6a ff ff       	call   c0100dda <__panic>
c010a2e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a2e8:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a2ed:	c9                   	leave  
c010a2ee:	c3                   	ret    

c010a2ef <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a2ef:	55                   	push   %ebp
c010a2f0:	89 e5                	mov    %esp,%ebp
c010a2f2:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a2f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2fb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a302:	77 23                	ja     c010a327 <kva2page+0x38>
c010a304:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a307:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a30b:	c7 44 24 08 1c fc 10 	movl   $0xc010fc1c,0x8(%esp)
c010a312:	c0 
c010a313:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a31a:	00 
c010a31b:	c7 04 24 e7 fb 10 c0 	movl   $0xc010fbe7,(%esp)
c010a322:	e8 b3 6a ff ff       	call   c0100dda <__panic>
c010a327:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a32a:	05 00 00 00 40       	add    $0x40000000,%eax
c010a32f:	89 04 24             	mov    %eax,(%esp)
c010a332:	e8 1f ff ff ff       	call   c010a256 <pa2page>
}
c010a337:	c9                   	leave  
c010a338:	c3                   	ret    

c010a339 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a339:	55                   	push   %ebp
c010a33a:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a33c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a33f:	8b 40 18             	mov    0x18(%eax),%eax
c010a342:	8d 50 01             	lea    0x1(%eax),%edx
c010a345:	8b 45 08             	mov    0x8(%ebp),%eax
c010a348:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a351:	5d                   	pop    %ebp
c010a352:	c3                   	ret    

c010a353 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a353:	55                   	push   %ebp
c010a354:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a356:	8b 45 08             	mov    0x8(%ebp),%eax
c010a359:	8b 40 18             	mov    0x18(%eax),%eax
c010a35c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a35f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a362:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a365:	8b 45 08             	mov    0x8(%ebp),%eax
c010a368:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a36b:	5d                   	pop    %ebp
c010a36c:	c3                   	ret    

c010a36d <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a36d:	55                   	push   %ebp
c010a36e:	89 e5                	mov    %esp,%ebp
c010a370:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a373:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a377:	74 25                	je     c010a39e <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a379:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37c:	83 c0 1c             	add    $0x1c,%eax
c010a37f:	89 04 24             	mov    %eax,(%esp)
c010a382:	e8 50 f7 ff ff       	call   c0109ad7 <down>
        if (current != NULL) {
c010a387:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a38c:	85 c0                	test   %eax,%eax
c010a38e:	74 0e                	je     c010a39e <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a390:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a395:	8b 50 04             	mov    0x4(%eax),%edx
c010a398:	8b 45 08             	mov    0x8(%ebp),%eax
c010a39b:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a39e:	c9                   	leave  
c010a39f:	c3                   	ret    

c010a3a0 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a3a0:	55                   	push   %ebp
c010a3a1:	89 e5                	mov    %esp,%ebp
c010a3a3:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a3a6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a3aa:	74 18                	je     c010a3c4 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a3ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3af:	83 c0 1c             	add    $0x1c,%eax
c010a3b2:	89 04 24             	mov    %eax,(%esp)
c010a3b5:	e8 02 f7 ff ff       	call   c0109abc <up>
        mm->locked_by = 0;
c010a3ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3bd:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a3c4:	c9                   	leave  
c010a3c5:	c3                   	ret    

c010a3c6 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a3c6:	55                   	push   %ebp
c010a3c7:	89 e5                	mov    %esp,%ebp
c010a3c9:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a3cc:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a3d3:	e8 2d a8 ff ff       	call   c0104c05 <kmalloc>
c010a3d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a3db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3df:	0f 84 68 01 00 00    	je     c010a54d <alloc_proc+0x187>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
		proc->state = PROC_UNINIT;
c010a3e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a3ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3f1:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010a3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3fb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010a402:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a405:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010a40c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a40f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a419:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010a420:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a423:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010a42a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a42d:	83 c0 1c             	add    $0x1c,%eax
c010a430:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a437:	00 
c010a438:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a43f:	00 
c010a440:	89 04 24             	mov    %eax,(%esp)
c010a443:	e8 f7 30 00 00       	call   c010d53f <memset>
        proc->tf = NULL;
c010a448:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a44b:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010a452:	8b 15 ec 54 1c c0    	mov    0xc01c54ec,%edx
c010a458:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a45b:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010a45e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a461:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010a468:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a46b:	83 c0 48             	add    $0x48,%eax
c010a46e:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a475:	00 
c010a476:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a47d:	00 
c010a47e:	89 04 24             	mov    %eax,(%esp)
c010a481:	e8 b9 30 00 00       	call   c010d53f <memset>
        proc->wait_state = 0;
c010a486:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a489:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a490:	00 00 00 
        proc->cptr = proc->optr = proc->yptr = NULL;
c010a493:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a496:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a49d:	00 00 00 
c010a4a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4a3:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a4a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4ac:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a4b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4b5:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4be:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
		proc->rq = NULL;
c010a4c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4c7:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a4ce:	00 00 00 
		list_init(&(proc->run_link));
c010a4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d4:	05 a4 00 00 00       	add    $0xa4,%eax
c010a4d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a4dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4df:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a4e2:	89 50 04             	mov    %edx,0x4(%eax)
c010a4e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4e8:	8b 50 04             	mov    0x4(%eax),%edx
c010a4eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4ee:	89 10                	mov    %edx,(%eax)
		proc->time_slice = 0;
c010a4f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4f3:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a4fa:	00 00 00 
		proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a4fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a500:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010a507:	00 00 00 
c010a50a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a50d:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010a513:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a516:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010a51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a51f:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010a525:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a528:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		//skew_heap_init(&(proc->lab6_run_pool));
		proc->lab6_stride = proc->lab6_priority = 0;
c010a52e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a531:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a538:	00 00 00 
c010a53b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a53e:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
c010a544:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a547:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    }
    return proc;
c010a54d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a550:	c9                   	leave  
c010a551:	c3                   	ret    

c010a552 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a552:	55                   	push   %ebp
c010a553:	89 e5                	mov    %esp,%ebp
c010a555:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a558:	8b 45 08             	mov    0x8(%ebp),%eax
c010a55b:	83 c0 48             	add    $0x48,%eax
c010a55e:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a565:	00 
c010a566:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a56d:	00 
c010a56e:	89 04 24             	mov    %eax,(%esp)
c010a571:	e8 c9 2f 00 00       	call   c010d53f <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a576:	8b 45 08             	mov    0x8(%ebp),%eax
c010a579:	8d 50 48             	lea    0x48(%eax),%edx
c010a57c:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a583:	00 
c010a584:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a587:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a58b:	89 14 24             	mov    %edx,(%esp)
c010a58e:	e8 8e 30 00 00       	call   c010d621 <memcpy>
}
c010a593:	c9                   	leave  
c010a594:	c3                   	ret    

c010a595 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a595:	55                   	push   %ebp
c010a596:	89 e5                	mov    %esp,%ebp
c010a598:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a59b:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a5a2:	00 
c010a5a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a5aa:	00 
c010a5ab:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a5b2:	e8 88 2f 00 00       	call   c010d53f <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a5b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ba:	83 c0 48             	add    $0x48,%eax
c010a5bd:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a5c4:	00 
c010a5c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a5c9:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a5d0:	e8 4c 30 00 00       	call   c010d621 <memcpy>
}
c010a5d5:	c9                   	leave  
c010a5d6:	c3                   	ret    

c010a5d7 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a5d7:	55                   	push   %ebp
c010a5d8:	89 e5                	mov    %esp,%ebp
c010a5da:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a5dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e0:	83 c0 7c             	add    $0x7c,%eax
c010a5e3:	c7 45 fc bc 56 1c c0 	movl   $0xc01c56bc,-0x4(%ebp)
c010a5ea:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a5ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a5f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a5f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5fc:	8b 40 04             	mov    0x4(%eax),%eax
c010a5ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a602:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a605:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a608:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a60b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a60e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a611:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a614:	89 10                	mov    %edx,(%eax)
c010a616:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a619:	8b 10                	mov    (%eax),%edx
c010a61b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a61e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a621:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a624:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a627:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a62d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a630:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a632:	8b 45 08             	mov    0x8(%ebp),%eax
c010a635:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a63c:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a63f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a642:	8b 40 14             	mov    0x14(%eax),%eax
c010a645:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a64b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a64e:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a654:	8b 45 08             	mov    0x8(%ebp),%eax
c010a657:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a65d:	85 c0                	test   %eax,%eax
c010a65f:	74 12                	je     c010a673 <set_links+0x9c>
        proc->optr->yptr = proc;
c010a661:	8b 45 08             	mov    0x8(%ebp),%eax
c010a664:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a66a:	8b 55 08             	mov    0x8(%ebp),%edx
c010a66d:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a673:	8b 45 08             	mov    0x8(%ebp),%eax
c010a676:	8b 40 14             	mov    0x14(%eax),%eax
c010a679:	8b 55 08             	mov    0x8(%ebp),%edx
c010a67c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a682:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010a687:	83 c0 01             	add    $0x1,%eax
c010a68a:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010a68f:	c9                   	leave  
c010a690:	c3                   	ret    

c010a691 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a691:	55                   	push   %ebp
c010a692:	89 e5                	mov    %esp,%ebp
c010a694:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a697:	8b 45 08             	mov    0x8(%ebp),%eax
c010a69a:	83 c0 7c             	add    $0x7c,%eax
c010a69d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a6a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a6a3:	8b 40 04             	mov    0x4(%eax),%eax
c010a6a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a6a9:	8b 12                	mov    (%edx),%edx
c010a6ab:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a6ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a6b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a6b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6b7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a6ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6bd:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a6c0:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a6c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6c5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a6cb:	85 c0                	test   %eax,%eax
c010a6cd:	74 18                	je     c010a6e7 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a6cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a6d8:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6db:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a6e1:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a6e7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6ea:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a6f0:	85 c0                	test   %eax,%eax
c010a6f2:	74 1a                	je     c010a70e <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a6f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6f7:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a6fd:	8b 55 08             	mov    0x8(%ebp),%edx
c010a700:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a706:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a70c:	eb 15                	jmp    c010a723 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a70e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a711:	8b 40 14             	mov    0x14(%eax),%eax
c010a714:	8b 55 08             	mov    0x8(%ebp),%edx
c010a717:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a71d:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a723:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010a728:	83 e8 01             	sub    $0x1,%eax
c010a72b:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010a730:	c9                   	leave  
c010a731:	c3                   	ret    

c010a732 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a732:	55                   	push   %ebp
c010a733:	89 e5                	mov    %esp,%ebp
c010a735:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a738:	c7 45 f8 bc 56 1c c0 	movl   $0xc01c56bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a73f:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a744:	83 c0 01             	add    $0x1,%eax
c010a747:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a74c:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a751:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a756:	7e 0c                	jle    c010a764 <get_pid+0x32>
        last_pid = 1;
c010a758:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a75f:	00 00 00 
        goto inside;
c010a762:	eb 13                	jmp    c010a777 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a764:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a76a:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a76f:	39 c2                	cmp    %eax,%edx
c010a771:	0f 8c ac 00 00 00    	jl     c010a823 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a777:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a77e:	20 00 00 
    repeat:
        le = list;
c010a781:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a784:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a787:	eb 7f                	jmp    c010a808 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a789:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a78c:	83 e8 7c             	sub    $0x7c,%eax
c010a78f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a792:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a795:	8b 50 04             	mov    0x4(%eax),%edx
c010a798:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a79d:	39 c2                	cmp    %eax,%edx
c010a79f:	75 3e                	jne    c010a7df <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a7a1:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a7a6:	83 c0 01             	add    $0x1,%eax
c010a7a9:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a7ae:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a7b4:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a7b9:	39 c2                	cmp    %eax,%edx
c010a7bb:	7c 4b                	jl     c010a808 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a7bd:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a7c2:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a7c7:	7e 0a                	jle    c010a7d3 <get_pid+0xa1>
                        last_pid = 1;
c010a7c9:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a7d0:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a7d3:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a7da:	20 00 00 
                    goto repeat;
c010a7dd:	eb a2                	jmp    c010a781 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7e2:	8b 50 04             	mov    0x4(%eax),%edx
c010a7e5:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a7ea:	39 c2                	cmp    %eax,%edx
c010a7ec:	7e 1a                	jle    c010a808 <get_pid+0xd6>
c010a7ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7f1:	8b 50 04             	mov    0x4(%eax),%edx
c010a7f4:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a7f9:	39 c2                	cmp    %eax,%edx
c010a7fb:	7d 0b                	jge    c010a808 <get_pid+0xd6>
                next_safe = proc->pid;
c010a7fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a800:	8b 40 04             	mov    0x4(%eax),%eax
c010a803:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
c010a808:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a80b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a80e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a811:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a814:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a817:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a81a:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a81d:	0f 85 66 ff ff ff    	jne    c010a789 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a823:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
}
c010a828:	c9                   	leave  
c010a829:	c3                   	ret    

c010a82a <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a82a:	55                   	push   %ebp
c010a82b:	89 e5                	mov    %esp,%ebp
c010a82d:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a830:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a835:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a838:	74 63                	je     c010a89d <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a83a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a83f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a842:	8b 45 08             	mov    0x8(%ebp),%eax
c010a845:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a848:	e8 a2 f9 ff ff       	call   c010a1ef <__intr_save>
c010a84d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a850:	8b 45 08             	mov    0x8(%ebp),%eax
c010a853:	a3 48 34 1c c0       	mov    %eax,0xc01c3448
            load_esp0(next->kstack + KSTACKSIZE);
c010a858:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a85b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a85e:	05 00 20 00 00       	add    $0x2000,%eax
c010a863:	89 04 24             	mov    %eax,(%esp)
c010a866:	e8 c1 a6 ff ff       	call   c0104f2c <load_esp0>
            lcr3(next->cr3);
c010a86b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a86e:	8b 40 40             	mov    0x40(%eax),%eax
c010a871:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a874:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a877:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a87a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a87d:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a880:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a883:	83 c0 1c             	add    $0x1c,%eax
c010a886:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a88a:	89 04 24             	mov    %eax,(%esp)
c010a88d:	e8 64 16 00 00       	call   c010bef6 <switch_to>
        }
        local_intr_restore(intr_flag);
c010a892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a895:	89 04 24             	mov    %eax,(%esp)
c010a898:	e8 7c f9 ff ff       	call   c010a219 <__intr_restore>
    }
}
c010a89d:	c9                   	leave  
c010a89e:	c3                   	ret    

c010a89f <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a89f:	55                   	push   %ebp
c010a8a0:	89 e5                	mov    %esp,%ebp
c010a8a2:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010a8a5:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a8aa:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a8ad:	89 04 24             	mov    %eax,(%esp)
c010a8b0:	e8 d7 81 ff ff       	call   c0102a8c <forkrets>
}
c010a8b5:	c9                   	leave  
c010a8b6:	c3                   	ret    

c010a8b7 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a8b7:	55                   	push   %ebp
c010a8b8:	89 e5                	mov    %esp,%ebp
c010a8ba:	53                   	push   %ebx
c010a8bb:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a8be:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8c1:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a8c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ca:	8b 40 04             	mov    0x4(%eax),%eax
c010a8cd:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a8d4:	00 
c010a8d5:	89 04 24             	mov    %eax,(%esp)
c010a8d8:	e8 b5 21 00 00       	call   c010ca92 <hash32>
c010a8dd:	c1 e0 03             	shl    $0x3,%eax
c010a8e0:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010a8e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8e8:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a8eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a8f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8fa:	8b 40 04             	mov    0x4(%eax),%eax
c010a8fd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a900:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a903:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a906:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a909:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a90c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a90f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a912:	89 10                	mov    %edx,(%eax)
c010a914:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a917:	8b 10                	mov    (%eax),%edx
c010a919:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a91c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a91f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a922:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a925:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a92b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a92e:	89 10                	mov    %edx,(%eax)
}
c010a930:	83 c4 34             	add    $0x34,%esp
c010a933:	5b                   	pop    %ebx
c010a934:	5d                   	pop    %ebp
c010a935:	c3                   	ret    

c010a936 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a936:	55                   	push   %ebp
c010a937:	89 e5                	mov    %esp,%ebp
c010a939:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a93c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93f:	05 84 00 00 00       	add    $0x84,%eax
c010a944:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a947:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a94a:	8b 40 04             	mov    0x4(%eax),%eax
c010a94d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a950:	8b 12                	mov    (%edx),%edx
c010a952:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a955:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a958:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a95b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a95e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a964:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a967:	89 10                	mov    %edx,(%eax)
}
c010a969:	c9                   	leave  
c010a96a:	c3                   	ret    

c010a96b <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a96b:	55                   	push   %ebp
c010a96c:	89 e5                	mov    %esp,%ebp
c010a96e:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010a971:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a975:	7e 61                	jle    c010a9d8 <find_proc+0x6d>
c010a977:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a97e:	7f 58                	jg     c010a9d8 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a980:	8b 45 08             	mov    0x8(%ebp),%eax
c010a983:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010a98a:	00 
c010a98b:	89 04 24             	mov    %eax,(%esp)
c010a98e:	e8 ff 20 00 00       	call   c010ca92 <hash32>
c010a993:	c1 e0 03             	shl    $0x3,%eax
c010a996:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010a99b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a99e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a9a4:	eb 1b                	jmp    c010a9c1 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a9a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9a9:	2d 84 00 00 00       	sub    $0x84,%eax
c010a9ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a9b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9b4:	8b 40 04             	mov    0x4(%eax),%eax
c010a9b7:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a9ba:	75 05                	jne    c010a9c1 <find_proc+0x56>
                return proc;
c010a9bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9bf:	eb 1c                	jmp    c010a9dd <find_proc+0x72>
c010a9c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a9c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9ca:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010a9cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a9d6:	75 ce                	jne    c010a9a6 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010a9d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a9dd:	c9                   	leave  
c010a9de:	c3                   	ret    

c010a9df <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a9df:	55                   	push   %ebp
c010a9e0:	89 e5                	mov    %esp,%ebp
c010a9e2:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a9e5:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a9ec:	00 
c010a9ed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a9f4:	00 
c010a9f5:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a9f8:	89 04 24             	mov    %eax,(%esp)
c010a9fb:	e8 3f 2b 00 00       	call   c010d53f <memset>
    tf.tf_cs = KERNEL_CS;
c010aa00:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010aa06:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010aa0c:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010aa10:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010aa14:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010aa18:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010aa1c:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa1f:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010aa22:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa25:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010aa28:	b8 ad a1 10 c0       	mov    $0xc010a1ad,%eax
c010aa2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010aa30:	8b 45 10             	mov    0x10(%ebp),%eax
c010aa33:	80 cc 01             	or     $0x1,%ah
c010aa36:	89 c2                	mov    %eax,%edx
c010aa38:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010aa3b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010aa3f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010aa46:	00 
c010aa47:	89 14 24             	mov    %edx,(%esp)
c010aa4a:	e8 25 03 00 00       	call   c010ad74 <do_fork>
}
c010aa4f:	c9                   	leave  
c010aa50:	c3                   	ret    

c010aa51 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010aa51:	55                   	push   %ebp
c010aa52:	89 e5                	mov    %esp,%ebp
c010aa54:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010aa57:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010aa5e:	e8 17 a6 ff ff       	call   c010507a <alloc_pages>
c010aa63:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010aa66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa6a:	74 1a                	je     c010aa86 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010aa6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa6f:	89 04 24             	mov    %eax,(%esp)
c010aa72:	e8 24 f8 ff ff       	call   c010a29b <page2kva>
c010aa77:	89 c2                	mov    %eax,%edx
c010aa79:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7c:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010aa7f:	b8 00 00 00 00       	mov    $0x0,%eax
c010aa84:	eb 05                	jmp    c010aa8b <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010aa86:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010aa8b:	c9                   	leave  
c010aa8c:	c3                   	ret    

c010aa8d <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010aa8d:	55                   	push   %ebp
c010aa8e:	89 e5                	mov    %esp,%ebp
c010aa90:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010aa93:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa96:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa99:	89 04 24             	mov    %eax,(%esp)
c010aa9c:	e8 4e f8 ff ff       	call   c010a2ef <kva2page>
c010aaa1:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010aaa8:	00 
c010aaa9:	89 04 24             	mov    %eax,(%esp)
c010aaac:	e8 34 a6 ff ff       	call   c01050e5 <free_pages>
}
c010aab1:	c9                   	leave  
c010aab2:	c3                   	ret    

c010aab3 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010aab3:	55                   	push   %ebp
c010aab4:	89 e5                	mov    %esp,%ebp
c010aab6:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010aab9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010aac0:	e8 b5 a5 ff ff       	call   c010507a <alloc_pages>
c010aac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aac8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aacc:	75 0a                	jne    c010aad8 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010aace:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010aad3:	e9 80 00 00 00       	jmp    c010ab58 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010aad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aadb:	89 04 24             	mov    %eax,(%esp)
c010aade:	e8 b8 f7 ff ff       	call   c010a29b <page2kva>
c010aae3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010aae6:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010aaeb:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010aaf2:	00 
c010aaf3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aaf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aafa:	89 04 24             	mov    %eax,(%esp)
c010aafd:	e8 1f 2b 00 00       	call   c010d621 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010ab02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab05:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010ab0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ab11:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010ab18:	77 23                	ja     c010ab3d <setup_pgdir+0x8a>
c010ab1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab1d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ab21:	c7 44 24 08 1c fc 10 	movl   $0xc010fc1c,0x8(%esp)
c010ab28:	c0 
c010ab29:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010ab30:	00 
c010ab31:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010ab38:	e8 9d 62 ff ff       	call   c0100dda <__panic>
c010ab3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab40:	05 00 00 00 40       	add    $0x40000000,%eax
c010ab45:	83 c8 03             	or     $0x3,%eax
c010ab48:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010ab4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab50:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010ab53:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ab58:	c9                   	leave  
c010ab59:	c3                   	ret    

c010ab5a <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010ab5a:	55                   	push   %ebp
c010ab5b:	89 e5                	mov    %esp,%ebp
c010ab5d:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010ab60:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab63:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab66:	89 04 24             	mov    %eax,(%esp)
c010ab69:	e8 81 f7 ff ff       	call   c010a2ef <kva2page>
c010ab6e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ab75:	00 
c010ab76:	89 04 24             	mov    %eax,(%esp)
c010ab79:	e8 67 a5 ff ff       	call   c01050e5 <free_pages>
}
c010ab7e:	c9                   	leave  
c010ab7f:	c3                   	ret    

c010ab80 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010ab80:	55                   	push   %ebp
c010ab81:	89 e5                	mov    %esp,%ebp
c010ab83:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010ab86:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ab8b:	8b 40 18             	mov    0x18(%eax),%eax
c010ab8e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010ab91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab95:	75 0a                	jne    c010aba1 <copy_mm+0x21>
        return 0;
c010ab97:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab9c:	e9 f9 00 00 00       	jmp    c010ac9a <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010aba1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba4:	25 00 01 00 00       	and    $0x100,%eax
c010aba9:	85 c0                	test   %eax,%eax
c010abab:	74 08                	je     c010abb5 <copy_mm+0x35>
        mm = oldmm;
c010abad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010abb3:	eb 78                	jmp    c010ac2d <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010abb5:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010abbc:	e8 52 d2 ff ff       	call   c0107e13 <mm_create>
c010abc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abc8:	75 05                	jne    c010abcf <copy_mm+0x4f>
        goto bad_mm;
c010abca:	e9 c8 00 00 00       	jmp    c010ac97 <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010abcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abd2:	89 04 24             	mov    %eax,(%esp)
c010abd5:	e8 d9 fe ff ff       	call   c010aab3 <setup_pgdir>
c010abda:	85 c0                	test   %eax,%eax
c010abdc:	74 05                	je     c010abe3 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010abde:	e9 a9 00 00 00       	jmp    c010ac8c <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010abe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abe6:	89 04 24             	mov    %eax,(%esp)
c010abe9:	e8 7f f7 ff ff       	call   c010a36d <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010abee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010abf1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010abf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf8:	89 04 24             	mov    %eax,(%esp)
c010abfb:	e8 36 d7 ff ff       	call   c0108336 <dup_mmap>
c010ac00:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010ac03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac06:	89 04 24             	mov    %eax,(%esp)
c010ac09:	e8 92 f7 ff ff       	call   c010a3a0 <unlock_mm>

    if (ret != 0) {
c010ac0e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ac12:	74 19                	je     c010ac2d <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010ac14:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010ac15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac18:	89 04 24             	mov    %eax,(%esp)
c010ac1b:	e8 17 d8 ff ff       	call   c0108437 <exit_mmap>
    put_pgdir(mm);
c010ac20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac23:	89 04 24             	mov    %eax,(%esp)
c010ac26:	e8 2f ff ff ff       	call   c010ab5a <put_pgdir>
c010ac2b:	eb 5f                	jmp    c010ac8c <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010ac2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac30:	89 04 24             	mov    %eax,(%esp)
c010ac33:	e8 01 f7 ff ff       	call   c010a339 <mm_count_inc>
    proc->mm = mm;
c010ac38:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ac3e:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010ac41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac44:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac47:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ac4a:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010ac51:	77 23                	ja     c010ac76 <copy_mm+0xf6>
c010ac53:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac56:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ac5a:	c7 44 24 08 1c fc 10 	movl   $0xc010fc1c,0x8(%esp)
c010ac61:	c0 
c010ac62:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c010ac69:	00 
c010ac6a:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010ac71:	e8 64 61 ff ff       	call   c0100dda <__panic>
c010ac76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac79:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ac7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac82:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010ac85:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac8a:	eb 0e                	jmp    c010ac9a <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ac8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac8f:	89 04 24             	mov    %eax,(%esp)
c010ac92:	e8 e1 d4 ff ff       	call   c0108178 <mm_destroy>
bad_mm:
    return ret;
c010ac97:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ac9a:	c9                   	leave  
c010ac9b:	c3                   	ret    

c010ac9c <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ac9c:	55                   	push   %ebp
c010ac9d:	89 e5                	mov    %esp,%ebp
c010ac9f:	57                   	push   %edi
c010aca0:	56                   	push   %esi
c010aca1:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010aca2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aca5:	8b 40 0c             	mov    0xc(%eax),%eax
c010aca8:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010acad:	89 c2                	mov    %eax,%edx
c010acaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010acb2:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010acb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010acb8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acbb:	8b 55 10             	mov    0x10(%ebp),%edx
c010acbe:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010acc3:	89 c1                	mov    %eax,%ecx
c010acc5:	83 e1 01             	and    $0x1,%ecx
c010acc8:	85 c9                	test   %ecx,%ecx
c010acca:	74 0e                	je     c010acda <copy_thread+0x3e>
c010accc:	0f b6 0a             	movzbl (%edx),%ecx
c010accf:	88 08                	mov    %cl,(%eax)
c010acd1:	83 c0 01             	add    $0x1,%eax
c010acd4:	83 c2 01             	add    $0x1,%edx
c010acd7:	83 eb 01             	sub    $0x1,%ebx
c010acda:	89 c1                	mov    %eax,%ecx
c010acdc:	83 e1 02             	and    $0x2,%ecx
c010acdf:	85 c9                	test   %ecx,%ecx
c010ace1:	74 0f                	je     c010acf2 <copy_thread+0x56>
c010ace3:	0f b7 0a             	movzwl (%edx),%ecx
c010ace6:	66 89 08             	mov    %cx,(%eax)
c010ace9:	83 c0 02             	add    $0x2,%eax
c010acec:	83 c2 02             	add    $0x2,%edx
c010acef:	83 eb 02             	sub    $0x2,%ebx
c010acf2:	89 d9                	mov    %ebx,%ecx
c010acf4:	c1 e9 02             	shr    $0x2,%ecx
c010acf7:	89 c7                	mov    %eax,%edi
c010acf9:	89 d6                	mov    %edx,%esi
c010acfb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010acfd:	89 f2                	mov    %esi,%edx
c010acff:	89 f8                	mov    %edi,%eax
c010ad01:	b9 00 00 00 00       	mov    $0x0,%ecx
c010ad06:	89 de                	mov    %ebx,%esi
c010ad08:	83 e6 02             	and    $0x2,%esi
c010ad0b:	85 f6                	test   %esi,%esi
c010ad0d:	74 0b                	je     c010ad1a <copy_thread+0x7e>
c010ad0f:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010ad13:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010ad17:	83 c1 02             	add    $0x2,%ecx
c010ad1a:	83 e3 01             	and    $0x1,%ebx
c010ad1d:	85 db                	test   %ebx,%ebx
c010ad1f:	74 07                	je     c010ad28 <copy_thread+0x8c>
c010ad21:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010ad25:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010ad28:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad2e:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010ad35:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad38:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad3b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad3e:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010ad41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad44:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad47:	8b 55 08             	mov    0x8(%ebp),%edx
c010ad4a:	8b 52 3c             	mov    0x3c(%edx),%edx
c010ad4d:	8b 52 40             	mov    0x40(%edx),%edx
c010ad50:	80 ce 02             	or     $0x2,%dh
c010ad53:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010ad56:	ba 9f a8 10 c0       	mov    $0xc010a89f,%edx
c010ad5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad5e:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010ad61:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad64:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad67:	89 c2                	mov    %eax,%edx
c010ad69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6c:	89 50 20             	mov    %edx,0x20(%eax)
}
c010ad6f:	5b                   	pop    %ebx
c010ad70:	5e                   	pop    %esi
c010ad71:	5f                   	pop    %edi
c010ad72:	5d                   	pop    %ebp
c010ad73:	c3                   	ret    

c010ad74 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010ad74:	55                   	push   %ebp
c010ad75:	89 e5                	mov    %esp,%ebp
c010ad77:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010ad7a:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010ad81:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010ad86:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010ad8b:	7e 05                	jle    c010ad92 <do_fork+0x1e>
        goto fork_out;
c010ad8d:	e9 f2 00 00 00       	jmp    c010ae84 <do_fork+0x110>
    }
    ret = -E_NO_MEM;
c010ad92:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    //    3. call copy_mm to dup OR share mm according clone_flag
    //    4. call copy_thread to setup tf & context in proc_struct
    //    5. insert proc_struct into hash_list && proc_list
    //    6. call wakup_proc to make the new child process RUNNABLE
    //    7. set ret vaule using child proc's pid
    if ((proc = alloc_proc()) == NULL) {
c010ad99:	e8 28 f6 ff ff       	call   c010a3c6 <alloc_proc>
c010ad9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ada1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ada5:	75 05                	jne    c010adac <do_fork+0x38>
        goto fork_out;
c010ada7:	e9 d8 00 00 00       	jmp    c010ae84 <do_fork+0x110>
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	proc->parent = current;
c010adac:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010adb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adb5:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010adb8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010adbd:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010adc3:	85 c0                	test   %eax,%eax
c010adc5:	74 24                	je     c010adeb <do_fork+0x77>
c010adc7:	c7 44 24 0c 54 fc 10 	movl   $0xc010fc54,0xc(%esp)
c010adce:	c0 
c010adcf:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010add6:	c0 
c010add7:	c7 44 24 04 b8 01 00 	movl   $0x1b8,0x4(%esp)
c010adde:	00 
c010addf:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010ade6:	e8 ef 5f ff ff       	call   c0100dda <__panic>

    if (setup_kstack(proc) != 0) {
c010adeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adee:	89 04 24             	mov    %eax,(%esp)
c010adf1:	e8 5b fc ff ff       	call   c010aa51 <setup_kstack>
c010adf6:	85 c0                	test   %eax,%eax
c010adf8:	74 05                	je     c010adff <do_fork+0x8b>
        goto bad_fork_cleanup_proc;
c010adfa:	e9 8a 00 00 00       	jmp    c010ae89 <do_fork+0x115>
    }
    if (copy_mm(clone_flags, proc) != 0) {
c010adff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae02:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae06:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae09:	89 04 24             	mov    %eax,(%esp)
c010ae0c:	e8 6f fd ff ff       	call   c010ab80 <copy_mm>
c010ae11:	85 c0                	test   %eax,%eax
c010ae13:	74 0e                	je     c010ae23 <do_fork+0xaf>
        goto bad_fork_cleanup_kstack;
c010ae15:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010ae16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae19:	89 04 24             	mov    %eax,(%esp)
c010ae1c:	e8 6c fc ff ff       	call   c010aa8d <put_kstack>
c010ae21:	eb 66                	jmp    c010ae89 <do_fork+0x115>
        goto bad_fork_cleanup_proc;
    }
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    copy_thread(proc, stack, tf);
c010ae23:	8b 45 10             	mov    0x10(%ebp),%eax
c010ae26:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ae2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae2d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ae31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae34:	89 04 24             	mov    %eax,(%esp)
c010ae37:	e8 60 fe ff ff       	call   c010ac9c <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010ae3c:	e8 ae f3 ff ff       	call   c010a1ef <__intr_save>
c010ae41:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010ae44:	e8 e9 f8 ff ff       	call   c010a732 <get_pid>
c010ae49:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ae4c:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010ae4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae52:	89 04 24             	mov    %eax,(%esp)
c010ae55:	e8 5d fa ff ff       	call   c010a8b7 <hash_proc>
        set_links(proc);
c010ae5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae5d:	89 04 24             	mov    %eax,(%esp)
c010ae60:	e8 72 f7 ff ff       	call   c010a5d7 <set_links>

    }
    local_intr_restore(intr_flag);
c010ae65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae68:	89 04 24             	mov    %eax,(%esp)
c010ae6b:	e8 a9 f3 ff ff       	call   c010a219 <__intr_restore>

    wakeup_proc(proc);
c010ae70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae73:	89 04 24             	mov    %eax,(%esp)
c010ae76:	e8 6f 15 00 00       	call   c010c3ea <wakeup_proc>

    ret = proc->pid;
c010ae7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae7e:	8b 40 04             	mov    0x4(%eax),%eax
c010ae81:	89 45 f4             	mov    %eax,-0xc(%ebp)
fork_out:
    return ret;
c010ae84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae87:	eb 0d                	jmp    c010ae96 <do_fork+0x122>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010ae89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8c:	89 04 24             	mov    %eax,(%esp)
c010ae8f:	e8 8c 9d ff ff       	call   c0104c20 <kfree>
    goto fork_out;
c010ae94:	eb ee                	jmp    c010ae84 <do_fork+0x110>
}
c010ae96:	c9                   	leave  
c010ae97:	c3                   	ret    

c010ae98 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010ae98:	55                   	push   %ebp
c010ae99:	89 e5                	mov    %esp,%ebp
c010ae9b:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010ae9e:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010aea4:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010aea9:	39 c2                	cmp    %eax,%edx
c010aeab:	75 1c                	jne    c010aec9 <do_exit+0x31>
        panic("idleproc exit.\n");
c010aead:	c7 44 24 08 82 fc 10 	movl   $0xc010fc82,0x8(%esp)
c010aeb4:	c0 
c010aeb5:	c7 44 24 04 e0 01 00 	movl   $0x1e0,0x4(%esp)
c010aebc:	00 
c010aebd:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010aec4:	e8 11 5f ff ff       	call   c0100dda <__panic>
    }
    if (current == initproc) {
c010aec9:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010aecf:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010aed4:	39 c2                	cmp    %eax,%edx
c010aed6:	75 1c                	jne    c010aef4 <do_exit+0x5c>
        panic("initproc exit.\n");
c010aed8:	c7 44 24 08 92 fc 10 	movl   $0xc010fc92,0x8(%esp)
c010aedf:	c0 
c010aee0:	c7 44 24 04 e3 01 00 	movl   $0x1e3,0x4(%esp)
c010aee7:	00 
c010aee8:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010aeef:	e8 e6 5e ff ff       	call   c0100dda <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010aef4:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010aef9:	8b 40 18             	mov    0x18(%eax),%eax
c010aefc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010aeff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af03:	74 4a                	je     c010af4f <do_exit+0xb7>
        lcr3(boot_cr3);
c010af05:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010af0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010af0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af10:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010af13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af16:	89 04 24             	mov    %eax,(%esp)
c010af19:	e8 35 f4 ff ff       	call   c010a353 <mm_count_dec>
c010af1e:	85 c0                	test   %eax,%eax
c010af20:	75 21                	jne    c010af43 <do_exit+0xab>
            exit_mmap(mm);
c010af22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af25:	89 04 24             	mov    %eax,(%esp)
c010af28:	e8 0a d5 ff ff       	call   c0108437 <exit_mmap>
            put_pgdir(mm);
c010af2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af30:	89 04 24             	mov    %eax,(%esp)
c010af33:	e8 22 fc ff ff       	call   c010ab5a <put_pgdir>
            mm_destroy(mm);
c010af38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af3b:	89 04 24             	mov    %eax,(%esp)
c010af3e:	e8 35 d2 ff ff       	call   c0108178 <mm_destroy>
        }
        current->mm = NULL;
c010af43:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010af48:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010af4f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010af54:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010af5a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010af5f:	8b 55 08             	mov    0x8(%ebp),%edx
c010af62:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010af68:	e8 82 f2 ff ff       	call   c010a1ef <__intr_save>
c010af6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010af70:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010af75:	8b 40 14             	mov    0x14(%eax),%eax
c010af78:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010af7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af7e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010af84:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010af89:	75 10                	jne    c010af9b <do_exit+0x103>
            wakeup_proc(proc);
c010af8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af8e:	89 04 24             	mov    %eax,(%esp)
c010af91:	e8 54 14 00 00       	call   c010c3ea <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010af96:	e9 ac 00 00 00       	jmp    c010b047 <do_exit+0x1af>
c010af9b:	e9 a7 00 00 00       	jmp    c010b047 <do_exit+0x1af>
            proc = current->cptr;
c010afa0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afa5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010afab:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010afae:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afb3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010afb6:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010afbc:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010afc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afc5:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010afcc:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010afcf:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010afd4:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010afda:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afdd:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010afe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afe6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010afec:	85 c0                	test   %eax,%eax
c010afee:	74 14                	je     c010b004 <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010aff0:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010aff5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010affb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010affe:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b004:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010b00a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b00d:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b010:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b015:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b018:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b01e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b021:	8b 00                	mov    (%eax),%eax
c010b023:	83 f8 03             	cmp    $0x3,%eax
c010b026:	75 1f                	jne    c010b047 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010b028:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b02d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b033:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b038:	75 0d                	jne    c010b047 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b03a:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b03f:	89 04 24             	mov    %eax,(%esp)
c010b042:	e8 a3 13 00 00       	call   c010c3ea <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b047:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b04c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b052:	85 c0                	test   %eax,%eax
c010b054:	0f 85 46 ff ff ff    	jne    c010afa0 <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b05a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b05d:	89 04 24             	mov    %eax,(%esp)
c010b060:	e8 b4 f1 ff ff       	call   c010a219 <__intr_restore>
    
    schedule();
c010b065:	e8 1c 14 00 00       	call   c010c486 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b06a:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b06f:	8b 40 04             	mov    0x4(%eax),%eax
c010b072:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b076:	c7 44 24 08 a4 fc 10 	movl   $0xc010fca4,0x8(%esp)
c010b07d:	c0 
c010b07e:	c7 44 24 04 0f 02 00 	movl   $0x20f,0x4(%esp)
c010b085:	00 
c010b086:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b08d:	e8 48 5d ff ff       	call   c0100dda <__panic>

c010b092 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b092:	55                   	push   %ebp
c010b093:	89 e5                	mov    %esp,%ebp
c010b095:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b098:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b09d:	8b 40 18             	mov    0x18(%eax),%eax
c010b0a0:	85 c0                	test   %eax,%eax
c010b0a2:	74 1c                	je     c010b0c0 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b0a4:	c7 44 24 08 c4 fc 10 	movl   $0xc010fcc4,0x8(%esp)
c010b0ab:	c0 
c010b0ac:	c7 44 24 04 19 02 00 	movl   $0x219,0x4(%esp)
c010b0b3:	00 
c010b0b4:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b0bb:	e8 1a 5d ff ff       	call   c0100dda <__panic>
    }

    int ret = -E_NO_MEM;
c010b0c0:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b0c7:	e8 47 cd ff ff       	call   c0107e13 <mm_create>
c010b0cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b0cf:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b0d3:	75 06                	jne    c010b0db <load_icode+0x49>
        goto bad_mm;
c010b0d5:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b0d6:	e9 ef 05 00 00       	jmp    c010b6ca <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b0db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b0de:	89 04 24             	mov    %eax,(%esp)
c010b0e1:	e8 cd f9 ff ff       	call   c010aab3 <setup_pgdir>
c010b0e6:	85 c0                	test   %eax,%eax
c010b0e8:	74 05                	je     c010b0ef <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b0ea:	e9 f6 05 00 00       	jmp    c010b6e5 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b0ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b0f5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b0f8:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b0fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0fe:	01 d0                	add    %edx,%eax
c010b100:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b103:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b106:	8b 00                	mov    (%eax),%eax
c010b108:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b10d:	74 0c                	je     c010b11b <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b10f:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b116:	e9 bf 05 00 00       	jmp    c010b6da <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b11b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b11e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b122:	0f b7 c0             	movzwl %ax,%eax
c010b125:	c1 e0 05             	shl    $0x5,%eax
c010b128:	89 c2                	mov    %eax,%edx
c010b12a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b12d:	01 d0                	add    %edx,%eax
c010b12f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b132:	e9 13 03 00 00       	jmp    c010b44a <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b137:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b13a:	8b 00                	mov    (%eax),%eax
c010b13c:	83 f8 01             	cmp    $0x1,%eax
c010b13f:	74 05                	je     c010b146 <load_icode+0xb4>
            continue ;
c010b141:	e9 00 03 00 00       	jmp    c010b446 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b146:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b149:	8b 50 10             	mov    0x10(%eax),%edx
c010b14c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b14f:	8b 40 14             	mov    0x14(%eax),%eax
c010b152:	39 c2                	cmp    %eax,%edx
c010b154:	76 0c                	jbe    c010b162 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b156:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b15d:	e9 6d 05 00 00       	jmp    c010b6cf <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b162:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b165:	8b 40 10             	mov    0x10(%eax),%eax
c010b168:	85 c0                	test   %eax,%eax
c010b16a:	75 05                	jne    c010b171 <load_icode+0xdf>
            continue ;
c010b16c:	e9 d5 02 00 00       	jmp    c010b446 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b171:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b178:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b17f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b182:	8b 40 18             	mov    0x18(%eax),%eax
c010b185:	83 e0 01             	and    $0x1,%eax
c010b188:	85 c0                	test   %eax,%eax
c010b18a:	74 04                	je     c010b190 <load_icode+0xfe>
c010b18c:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b190:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b193:	8b 40 18             	mov    0x18(%eax),%eax
c010b196:	83 e0 02             	and    $0x2,%eax
c010b199:	85 c0                	test   %eax,%eax
c010b19b:	74 04                	je     c010b1a1 <load_icode+0x10f>
c010b19d:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b1a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1a4:	8b 40 18             	mov    0x18(%eax),%eax
c010b1a7:	83 e0 04             	and    $0x4,%eax
c010b1aa:	85 c0                	test   %eax,%eax
c010b1ac:	74 04                	je     c010b1b2 <load_icode+0x120>
c010b1ae:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b1b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1b5:	83 e0 02             	and    $0x2,%eax
c010b1b8:	85 c0                	test   %eax,%eax
c010b1ba:	74 04                	je     c010b1c0 <load_icode+0x12e>
c010b1bc:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b1c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1c3:	8b 50 14             	mov    0x14(%eax),%edx
c010b1c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1c9:	8b 40 08             	mov    0x8(%eax),%eax
c010b1cc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b1d3:	00 
c010b1d4:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b1d7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b1db:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b1df:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b1e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b1e6:	89 04 24             	mov    %eax,(%esp)
c010b1e9:	e8 2c d0 ff ff       	call   c010821a <mm_map>
c010b1ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b1f5:	74 05                	je     c010b1fc <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b1f7:	e9 d3 04 00 00       	jmp    c010b6cf <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b1fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1ff:	8b 50 04             	mov    0x4(%eax),%edx
c010b202:	8b 45 08             	mov    0x8(%ebp),%eax
c010b205:	01 d0                	add    %edx,%eax
c010b207:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b20a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b20d:	8b 40 08             	mov    0x8(%eax),%eax
c010b210:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b213:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b216:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b219:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b21c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b221:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b224:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b22b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b22e:	8b 50 08             	mov    0x8(%eax),%edx
c010b231:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b234:	8b 40 10             	mov    0x10(%eax),%eax
c010b237:	01 d0                	add    %edx,%eax
c010b239:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b23c:	e9 90 00 00 00       	jmp    c010b2d1 <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b241:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b244:	8b 40 0c             	mov    0xc(%eax),%eax
c010b247:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b24a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b24e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b251:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b255:	89 04 24             	mov    %eax,(%esp)
c010b258:	e8 e9 ac ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b25d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b260:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b264:	75 05                	jne    c010b26b <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b266:	e9 64 04 00 00       	jmp    c010b6cf <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b26b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b26e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b271:	29 c2                	sub    %eax,%edx
c010b273:	89 d0                	mov    %edx,%eax
c010b275:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b278:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b27d:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b280:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b283:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b28a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b28d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b290:	73 0d                	jae    c010b29f <load_icode+0x20d>
                size -= la - end;
c010b292:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b295:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b298:	29 c2                	sub    %eax,%edx
c010b29a:	89 d0                	mov    %edx,%eax
c010b29c:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b29f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2a2:	89 04 24             	mov    %eax,(%esp)
c010b2a5:	e8 f1 ef ff ff       	call   c010a29b <page2kva>
c010b2aa:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b2ad:	01 c2                	add    %eax,%edx
c010b2af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b2b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b2b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2bd:	89 14 24             	mov    %edx,(%esp)
c010b2c0:	e8 5c 23 00 00       	call   c010d621 <memcpy>
            start += size, from += size;
c010b2c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b2c8:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b2cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b2ce:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b2d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b2d4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b2d7:	0f 82 64 ff ff ff    	jb     c010b241 <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b2dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2e0:	8b 50 08             	mov    0x8(%eax),%edx
c010b2e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2e6:	8b 40 14             	mov    0x14(%eax),%eax
c010b2e9:	01 d0                	add    %edx,%eax
c010b2eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b2ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b2f1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b2f4:	0f 83 b0 00 00 00    	jae    c010b3aa <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b2fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b2fd:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b300:	75 05                	jne    c010b307 <load_icode+0x275>
                continue ;
c010b302:	e9 3f 01 00 00       	jmp    c010b446 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b307:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b30a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b30d:	29 c2                	sub    %eax,%edx
c010b30f:	89 d0                	mov    %edx,%eax
c010b311:	05 00 10 00 00       	add    $0x1000,%eax
c010b316:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b319:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b31e:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b321:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b324:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b327:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b32a:	73 0d                	jae    c010b339 <load_icode+0x2a7>
                size -= la - end;
c010b32c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b32f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b332:	29 c2                	sub    %eax,%edx
c010b334:	89 d0                	mov    %edx,%eax
c010b336:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b33c:	89 04 24             	mov    %eax,(%esp)
c010b33f:	e8 57 ef ff ff       	call   c010a29b <page2kva>
c010b344:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b347:	01 c2                	add    %eax,%edx
c010b349:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b34c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b350:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b357:	00 
c010b358:	89 14 24             	mov    %edx,(%esp)
c010b35b:	e8 df 21 00 00       	call   c010d53f <memset>
            start += size;
c010b360:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b363:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b366:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b369:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b36c:	73 08                	jae    c010b376 <load_icode+0x2e4>
c010b36e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b371:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b374:	74 34                	je     c010b3aa <load_icode+0x318>
c010b376:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b379:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b37c:	72 08                	jb     c010b386 <load_icode+0x2f4>
c010b37e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b381:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b384:	74 24                	je     c010b3aa <load_icode+0x318>
c010b386:	c7 44 24 0c ec fc 10 	movl   $0xc010fcec,0xc(%esp)
c010b38d:	c0 
c010b38e:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010b395:	c0 
c010b396:	c7 44 24 04 6b 02 00 	movl   $0x26b,0x4(%esp)
c010b39d:	00 
c010b39e:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b3a5:	e8 30 5a ff ff       	call   c0100dda <__panic>
        }
        while (start < end) {
c010b3aa:	e9 8b 00 00 00       	jmp    c010b43a <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b3af:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b3b2:	8b 40 0c             	mov    0xc(%eax),%eax
c010b3b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b3b8:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b3bc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b3bf:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b3c3:	89 04 24             	mov    %eax,(%esp)
c010b3c6:	e8 7b ab ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b3cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b3ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b3d2:	75 05                	jne    c010b3d9 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b3d4:	e9 f6 02 00 00       	jmp    c010b6cf <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b3d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b3dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b3df:	29 c2                	sub    %eax,%edx
c010b3e1:	89 d0                	mov    %edx,%eax
c010b3e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b3e6:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b3eb:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b3ee:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b3f1:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b3f8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b3fb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b3fe:	73 0d                	jae    c010b40d <load_icode+0x37b>
                size -= la - end;
c010b400:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b403:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b406:	29 c2                	sub    %eax,%edx
c010b408:	89 d0                	mov    %edx,%eax
c010b40a:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b40d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b410:	89 04 24             	mov    %eax,(%esp)
c010b413:	e8 83 ee ff ff       	call   c010a29b <page2kva>
c010b418:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b41b:	01 c2                	add    %eax,%edx
c010b41d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b420:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b424:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b42b:	00 
c010b42c:	89 14 24             	mov    %edx,(%esp)
c010b42f:	e8 0b 21 00 00       	call   c010d53f <memset>
            start += size;
c010b434:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b437:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b43a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b43d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b440:	0f 82 69 ff ff ff    	jb     c010b3af <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b446:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b44a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b44d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b450:	0f 82 e1 fc ff ff    	jb     c010b137 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b456:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b45d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b464:	00 
c010b465:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b468:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b46c:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b473:	00 
c010b474:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b47b:	af 
c010b47c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b47f:	89 04 24             	mov    %eax,(%esp)
c010b482:	e8 93 cd ff ff       	call   c010821a <mm_map>
c010b487:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b48a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b48e:	74 05                	je     c010b495 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b490:	e9 3a 02 00 00       	jmp    c010b6cf <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b495:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b498:	8b 40 0c             	mov    0xc(%eax),%eax
c010b49b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b4a2:	00 
c010b4a3:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b4aa:	af 
c010b4ab:	89 04 24             	mov    %eax,(%esp)
c010b4ae:	e8 93 aa ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b4b3:	85 c0                	test   %eax,%eax
c010b4b5:	75 24                	jne    c010b4db <load_icode+0x449>
c010b4b7:	c7 44 24 0c 28 fd 10 	movl   $0xc010fd28,0xc(%esp)
c010b4be:	c0 
c010b4bf:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010b4c6:	c0 
c010b4c7:	c7 44 24 04 7e 02 00 	movl   $0x27e,0x4(%esp)
c010b4ce:	00 
c010b4cf:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b4d6:	e8 ff 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b4db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4de:	8b 40 0c             	mov    0xc(%eax),%eax
c010b4e1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b4e8:	00 
c010b4e9:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b4f0:	af 
c010b4f1:	89 04 24             	mov    %eax,(%esp)
c010b4f4:	e8 4d aa ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b4f9:	85 c0                	test   %eax,%eax
c010b4fb:	75 24                	jne    c010b521 <load_icode+0x48f>
c010b4fd:	c7 44 24 0c 6c fd 10 	movl   $0xc010fd6c,0xc(%esp)
c010b504:	c0 
c010b505:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010b50c:	c0 
c010b50d:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010b514:	00 
c010b515:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b51c:	e8 b9 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b521:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b524:	8b 40 0c             	mov    0xc(%eax),%eax
c010b527:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b52e:	00 
c010b52f:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b536:	af 
c010b537:	89 04 24             	mov    %eax,(%esp)
c010b53a:	e8 07 aa ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b53f:	85 c0                	test   %eax,%eax
c010b541:	75 24                	jne    c010b567 <load_icode+0x4d5>
c010b543:	c7 44 24 0c b0 fd 10 	movl   $0xc010fdb0,0xc(%esp)
c010b54a:	c0 
c010b54b:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010b552:	c0 
c010b553:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010b55a:	00 
c010b55b:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b562:	e8 73 58 ff ff       	call   c0100dda <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b567:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b56a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b56d:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b574:	00 
c010b575:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b57c:	af 
c010b57d:	89 04 24             	mov    %eax,(%esp)
c010b580:	e8 c1 a9 ff ff       	call   c0105f46 <pgdir_alloc_page>
c010b585:	85 c0                	test   %eax,%eax
c010b587:	75 24                	jne    c010b5ad <load_icode+0x51b>
c010b589:	c7 44 24 0c f4 fd 10 	movl   $0xc010fdf4,0xc(%esp)
c010b590:	c0 
c010b591:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010b598:	c0 
c010b599:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010b5a0:	00 
c010b5a1:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b5a8:	e8 2d 58 ff ff       	call   c0100dda <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b5ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b5b0:	89 04 24             	mov    %eax,(%esp)
c010b5b3:	e8 81 ed ff ff       	call   c010a339 <mm_count_inc>
    current->mm = mm;
c010b5b8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b5bd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b5c0:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b5c3:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b5c8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b5cb:	8b 52 0c             	mov    0xc(%edx),%edx
c010b5ce:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b5d1:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b5d8:	77 23                	ja     c010b5fd <load_icode+0x56b>
c010b5da:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b5dd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b5e1:	c7 44 24 08 1c fc 10 	movl   $0xc010fc1c,0x8(%esp)
c010b5e8:	c0 
c010b5e9:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c010b5f0:	00 
c010b5f1:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b5f8:	e8 dd 57 ff ff       	call   c0100dda <__panic>
c010b5fd:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b600:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b606:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b609:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b60c:	8b 40 0c             	mov    0xc(%eax),%eax
c010b60f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b612:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b619:	77 23                	ja     c010b63e <load_icode+0x5ac>
c010b61b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b61e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b622:	c7 44 24 08 1c fc 10 	movl   $0xc010fc1c,0x8(%esp)
c010b629:	c0 
c010b62a:	c7 44 24 04 87 02 00 	movl   $0x287,0x4(%esp)
c010b631:	00 
c010b632:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b639:	e8 9c 57 ff ff       	call   c0100dda <__panic>
c010b63e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b641:	05 00 00 00 40       	add    $0x40000000,%eax
c010b646:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b649:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b64c:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b64f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b654:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b657:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b65a:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b661:	00 
c010b662:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b669:	00 
c010b66a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b66d:	89 04 24             	mov    %eax,(%esp)
c010b670:	e8 ca 1e 00 00       	call   c010d53f <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b675:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b678:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b67e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b681:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b687:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b68a:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b68e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b691:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b695:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b698:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b69c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b69f:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b6a3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6a6:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b6ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b6b0:	8b 50 18             	mov    0x18(%eax),%edx
c010b6b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6b6:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b6b9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b6bc:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b6c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b6ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6cd:	eb 23                	jmp    c010b6f2 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010b6cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6d2:	89 04 24             	mov    %eax,(%esp)
c010b6d5:	e8 5d cd ff ff       	call   c0108437 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b6da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6dd:	89 04 24             	mov    %eax,(%esp)
c010b6e0:	e8 75 f4 ff ff       	call   c010ab5a <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b6e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6e8:	89 04 24             	mov    %eax,(%esp)
c010b6eb:	e8 88 ca ff ff       	call   c0108178 <mm_destroy>
bad_mm:
    goto out;
c010b6f0:	eb d8                	jmp    c010b6ca <load_icode+0x638>
}
c010b6f2:	c9                   	leave  
c010b6f3:	c3                   	ret    

c010b6f4 <do_execve>:

// do_execve - call exit_mmap(mm)&pug_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b6f4:	55                   	push   %ebp
c010b6f5:	89 e5                	mov    %esp,%ebp
c010b6f7:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010b6fa:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b6ff:	8b 40 18             	mov    0x18(%eax),%eax
c010b702:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b705:	8b 45 08             	mov    0x8(%ebp),%eax
c010b708:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b70f:	00 
c010b710:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b713:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b717:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b71b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b71e:	89 04 24             	mov    %eax,(%esp)
c010b721:	e8 eb d7 ff ff       	call   c0108f11 <user_mem_check>
c010b726:	85 c0                	test   %eax,%eax
c010b728:	75 0a                	jne    c010b734 <do_execve+0x40>
        return -E_INVAL;
c010b72a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b72f:	e9 f4 00 00 00       	jmp    c010b828 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010b734:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b738:	76 07                	jbe    c010b741 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b73a:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b741:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b748:	00 
c010b749:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b750:	00 
c010b751:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b754:	89 04 24             	mov    %eax,(%esp)
c010b757:	e8 e3 1d 00 00       	call   c010d53f <memset>
    memcpy(local_name, name, len);
c010b75c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b75f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b763:	8b 45 08             	mov    0x8(%ebp),%eax
c010b766:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b76a:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b76d:	89 04 24             	mov    %eax,(%esp)
c010b770:	e8 ac 1e 00 00       	call   c010d621 <memcpy>

    if (mm != NULL) {
c010b775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b779:	74 4a                	je     c010b7c5 <do_execve+0xd1>
        lcr3(boot_cr3);
c010b77b:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010b780:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b783:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b786:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b789:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b78c:	89 04 24             	mov    %eax,(%esp)
c010b78f:	e8 bf eb ff ff       	call   c010a353 <mm_count_dec>
c010b794:	85 c0                	test   %eax,%eax
c010b796:	75 21                	jne    c010b7b9 <do_execve+0xc5>
            exit_mmap(mm);
c010b798:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b79b:	89 04 24             	mov    %eax,(%esp)
c010b79e:	e8 94 cc ff ff       	call   c0108437 <exit_mmap>
            put_pgdir(mm);
c010b7a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7a6:	89 04 24             	mov    %eax,(%esp)
c010b7a9:	e8 ac f3 ff ff       	call   c010ab5a <put_pgdir>
            mm_destroy(mm);
c010b7ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7b1:	89 04 24             	mov    %eax,(%esp)
c010b7b4:	e8 bf c9 ff ff       	call   c0108178 <mm_destroy>
        }
        current->mm = NULL;
c010b7b9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b7be:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b7c5:	8b 45 14             	mov    0x14(%ebp),%eax
c010b7c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b7cc:	8b 45 10             	mov    0x10(%ebp),%eax
c010b7cf:	89 04 24             	mov    %eax,(%esp)
c010b7d2:	e8 bb f8 ff ff       	call   c010b092 <load_icode>
c010b7d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b7de:	74 2f                	je     c010b80f <do_execve+0x11b>
        goto execve_exit;
c010b7e0:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b7e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7e4:	89 04 24             	mov    %eax,(%esp)
c010b7e7:	e8 ac f6 ff ff       	call   c010ae98 <do_exit>
    panic("already exit: %e.\n", ret);
c010b7ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7f3:	c7 44 24 08 37 fe 10 	movl   $0xc010fe37,0x8(%esp)
c010b7fa:	c0 
c010b7fb:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c010b802:	00 
c010b803:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b80a:	e8 cb 55 ff ff       	call   c0100dda <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b80f:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b814:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b817:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b81b:	89 04 24             	mov    %eax,(%esp)
c010b81e:	e8 2f ed ff ff       	call   c010a552 <set_proc_name>
    return 0;
c010b823:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010b828:	c9                   	leave  
c010b829:	c3                   	ret    

c010b82a <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010b82a:	55                   	push   %ebp
c010b82b:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010b82d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b832:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010b839:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b83e:	5d                   	pop    %ebp
c010b83f:	c3                   	ret    

c010b840 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010b840:	55                   	push   %ebp
c010b841:	89 e5                	mov    %esp,%ebp
c010b843:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010b846:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b84b:	8b 40 18             	mov    0x18(%eax),%eax
c010b84e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b851:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b855:	74 30                	je     c010b887 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b857:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b85a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010b861:	00 
c010b862:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010b869:	00 
c010b86a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b86e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b871:	89 04 24             	mov    %eax,(%esp)
c010b874:	e8 98 d6 ff ff       	call   c0108f11 <user_mem_check>
c010b879:	85 c0                	test   %eax,%eax
c010b87b:	75 0a                	jne    c010b887 <do_wait+0x47>
            return -E_INVAL;
c010b87d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b882:	e9 57 01 00 00       	jmp    c010b9de <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b887:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b88e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b892:	74 39                	je     c010b8cd <do_wait+0x8d>
        proc = find_proc(pid);
c010b894:	8b 45 08             	mov    0x8(%ebp),%eax
c010b897:	89 04 24             	mov    %eax,(%esp)
c010b89a:	e8 cc f0 ff ff       	call   c010a96b <find_proc>
c010b89f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b8a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8a6:	74 5a                	je     c010b902 <do_wait+0xc2>
c010b8a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8ab:	8b 50 14             	mov    0x14(%eax),%edx
c010b8ae:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b8b3:	39 c2                	cmp    %eax,%edx
c010b8b5:	75 4b                	jne    c010b902 <do_wait+0xc2>
            haskid = 1;
c010b8b7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b8be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8c1:	8b 00                	mov    (%eax),%eax
c010b8c3:	83 f8 03             	cmp    $0x3,%eax
c010b8c6:	75 3a                	jne    c010b902 <do_wait+0xc2>
                goto found;
c010b8c8:	e9 89 00 00 00       	jmp    c010b956 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010b8cd:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b8d2:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b8d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b8db:	eb 1f                	jmp    c010b8fc <do_wait+0xbc>
            haskid = 1;
c010b8dd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8e7:	8b 00                	mov    (%eax),%eax
c010b8e9:	83 f8 03             	cmp    $0x3,%eax
c010b8ec:	75 02                	jne    c010b8f0 <do_wait+0xb0>
                goto found;
c010b8ee:	eb 66                	jmp    c010b956 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b8f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8f3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b8f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b900:	75 db                	jne    c010b8dd <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b902:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b906:	74 44                	je     c010b94c <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010b908:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b90d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b913:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b918:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010b91f:	00 00 80 
        schedule();
c010b922:	e8 5f 0b 00 00       	call   c010c486 <schedule>
        if (current->flags & PF_EXITING) {
c010b927:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b92c:	8b 40 44             	mov    0x44(%eax),%eax
c010b92f:	83 e0 01             	and    $0x1,%eax
c010b932:	85 c0                	test   %eax,%eax
c010b934:	74 11                	je     c010b947 <do_wait+0x107>
            do_exit(-E_KILLED);
c010b936:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010b93d:	e8 56 f5 ff ff       	call   c010ae98 <do_exit>
        }
        goto repeat;
c010b942:	e9 40 ff ff ff       	jmp    c010b887 <do_wait+0x47>
c010b947:	e9 3b ff ff ff       	jmp    c010b887 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010b94c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b951:	e9 88 00 00 00       	jmp    c010b9de <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010b956:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010b95b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b95e:	74 0a                	je     c010b96a <do_wait+0x12a>
c010b960:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b965:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b968:	75 1c                	jne    c010b986 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010b96a:	c7 44 24 08 4a fe 10 	movl   $0xc010fe4a,0x8(%esp)
c010b971:	c0 
c010b972:	c7 44 24 04 02 03 00 	movl   $0x302,0x4(%esp)
c010b979:	00 
c010b97a:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010b981:	e8 54 54 ff ff       	call   c0100dda <__panic>
    }
    if (code_store != NULL) {
c010b986:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b98a:	74 0e                	je     c010b99a <do_wait+0x15a>
        *code_store = proc->exit_code;
c010b98c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b98f:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b995:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b998:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b99a:	e8 50 e8 ff ff       	call   c010a1ef <__intr_save>
c010b99f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b9a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9a5:	89 04 24             	mov    %eax,(%esp)
c010b9a8:	e8 89 ef ff ff       	call   c010a936 <unhash_proc>
        remove_links(proc);
c010b9ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9b0:	89 04 24             	mov    %eax,(%esp)
c010b9b3:	e8 d9 ec ff ff       	call   c010a691 <remove_links>
    }
    local_intr_restore(intr_flag);
c010b9b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b9bb:	89 04 24             	mov    %eax,(%esp)
c010b9be:	e8 56 e8 ff ff       	call   c010a219 <__intr_restore>
    put_kstack(proc);
c010b9c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9c6:	89 04 24             	mov    %eax,(%esp)
c010b9c9:	e8 bf f0 ff ff       	call   c010aa8d <put_kstack>
    kfree(proc);
c010b9ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9d1:	89 04 24             	mov    %eax,(%esp)
c010b9d4:	e8 47 92 ff ff       	call   c0104c20 <kfree>
    return 0;
c010b9d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b9de:	c9                   	leave  
c010b9df:	c3                   	ret    

c010b9e0 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b9e0:	55                   	push   %ebp
c010b9e1:	89 e5                	mov    %esp,%ebp
c010b9e3:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b9e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e9:	89 04 24             	mov    %eax,(%esp)
c010b9ec:	e8 7a ef ff ff       	call   c010a96b <find_proc>
c010b9f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b9f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b9f8:	74 44                	je     c010ba3e <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010b9fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9fd:	8b 40 44             	mov    0x44(%eax),%eax
c010ba00:	83 e0 01             	and    $0x1,%eax
c010ba03:	85 c0                	test   %eax,%eax
c010ba05:	75 30                	jne    c010ba37 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010ba07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba0a:	8b 40 44             	mov    0x44(%eax),%eax
c010ba0d:	83 c8 01             	or     $0x1,%eax
c010ba10:	89 c2                	mov    %eax,%edx
c010ba12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba15:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010ba18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba1b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ba21:	85 c0                	test   %eax,%eax
c010ba23:	79 0b                	jns    c010ba30 <do_kill+0x50>
                wakeup_proc(proc);
c010ba25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba28:	89 04 24             	mov    %eax,(%esp)
c010ba2b:	e8 ba 09 00 00       	call   c010c3ea <wakeup_proc>
            }
            return 0;
c010ba30:	b8 00 00 00 00       	mov    $0x0,%eax
c010ba35:	eb 0c                	jmp    c010ba43 <do_kill+0x63>
        }
        return -E_KILLED;
c010ba37:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010ba3c:	eb 05                	jmp    c010ba43 <do_kill+0x63>
    }
    return -E_INVAL;
c010ba3e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010ba43:	c9                   	leave  
c010ba44:	c3                   	ret    

c010ba45 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010ba45:	55                   	push   %ebp
c010ba46:	89 e5                	mov    %esp,%ebp
c010ba48:	57                   	push   %edi
c010ba49:	56                   	push   %esi
c010ba4a:	53                   	push   %ebx
c010ba4b:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010ba4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba51:	89 04 24             	mov    %eax,(%esp)
c010ba54:	e8 b7 17 00 00       	call   c010d210 <strlen>
c010ba59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010ba5c:	b8 04 00 00 00       	mov    $0x4,%eax
c010ba61:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba64:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010ba67:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ba6a:	8b 75 10             	mov    0x10(%ebp),%esi
c010ba6d:	89 f7                	mov    %esi,%edi
c010ba6f:	cd 80                	int    $0x80
c010ba71:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010ba74:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010ba77:	83 c4 2c             	add    $0x2c,%esp
c010ba7a:	5b                   	pop    %ebx
c010ba7b:	5e                   	pop    %esi
c010ba7c:	5f                   	pop    %edi
c010ba7d:	5d                   	pop    %ebp
c010ba7e:	c3                   	ret    

c010ba7f <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010ba7f:	55                   	push   %ebp
c010ba80:	89 e5                	mov    %esp,%ebp
c010ba82:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010ba85:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ba8a:	8b 40 04             	mov    0x4(%eax),%eax
c010ba8d:	c7 44 24 08 66 fe 10 	movl   $0xc010fe66,0x8(%esp)
c010ba94:	c0 
c010ba95:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba99:	c7 04 24 70 fe 10 c0 	movl   $0xc010fe70,(%esp)
c010baa0:	e8 b3 48 ff ff       	call   c0100358 <cprintf>
c010baa5:	b8 04 7a 00 00       	mov    $0x7a04,%eax
c010baaa:	89 44 24 08          	mov    %eax,0x8(%esp)
c010baae:	c7 44 24 04 e0 63 17 	movl   $0xc01763e0,0x4(%esp)
c010bab5:	c0 
c010bab6:	c7 04 24 66 fe 10 c0 	movl   $0xc010fe66,(%esp)
c010babd:	e8 83 ff ff ff       	call   c010ba45 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010bac2:	c7 44 24 08 97 fe 10 	movl   $0xc010fe97,0x8(%esp)
c010bac9:	c0 
c010baca:	c7 44 24 04 4b 03 00 	movl   $0x34b,0x4(%esp)
c010bad1:	00 
c010bad2:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bad9:	e8 fc 52 ff ff       	call   c0100dda <__panic>

c010bade <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bade:	55                   	push   %ebp
c010badf:	89 e5                	mov    %esp,%ebp
c010bae1:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bae4:	e8 2e 96 ff ff       	call   c0105117 <nr_free_pages>
c010bae9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010baec:	e8 f7 8f ff ff       	call   c0104ae8 <kallocated>
c010baf1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010baf4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bafb:	00 
c010bafc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb03:	00 
c010bb04:	c7 04 24 7f ba 10 c0 	movl   $0xc010ba7f,(%esp)
c010bb0b:	e8 cf ee ff ff       	call   c010a9df <kernel_thread>
c010bb10:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bb13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bb17:	7f 1c                	jg     c010bb35 <init_main+0x57>
        panic("create user_main failed.\n");
c010bb19:	c7 44 24 08 b1 fe 10 	movl   $0xc010feb1,0x8(%esp)
c010bb20:	c0 
c010bb21:	c7 44 24 04 56 03 00 	movl   $0x356,0x4(%esp)
c010bb28:	00 
c010bb29:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bb30:	e8 a5 52 ff ff       	call   c0100dda <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bb35:	e8 e4 d9 ff ff       	call   c010951e <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bb3a:	eb 05                	jmp    c010bb41 <init_main+0x63>
        schedule();
c010bb3c:	e8 45 09 00 00       	call   c010c486 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bb41:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb48:	00 
c010bb49:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bb50:	e8 eb fc ff ff       	call   c010b840 <do_wait>
c010bb55:	85 c0                	test   %eax,%eax
c010bb57:	74 e3                	je     c010bb3c <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010bb59:	c7 04 24 cc fe 10 c0 	movl   $0xc010fecc,(%esp)
c010bb60:	e8 f3 47 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bb65:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bb6a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bb70:	85 c0                	test   %eax,%eax
c010bb72:	75 1e                	jne    c010bb92 <init_main+0xb4>
c010bb74:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bb79:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bb7f:	85 c0                	test   %eax,%eax
c010bb81:	75 0f                	jne    c010bb92 <init_main+0xb4>
c010bb83:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bb88:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bb8e:	85 c0                	test   %eax,%eax
c010bb90:	74 24                	je     c010bbb6 <init_main+0xd8>
c010bb92:	c7 44 24 0c f0 fe 10 	movl   $0xc010fef0,0xc(%esp)
c010bb99:	c0 
c010bb9a:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010bba1:	c0 
c010bba2:	c7 44 24 04 60 03 00 	movl   $0x360,0x4(%esp)
c010bba9:	00 
c010bbaa:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bbb1:	e8 24 52 ff ff       	call   c0100dda <__panic>
    assert(nr_process == 2);
c010bbb6:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010bbbb:	83 f8 02             	cmp    $0x2,%eax
c010bbbe:	74 24                	je     c010bbe4 <init_main+0x106>
c010bbc0:	c7 44 24 0c 3b ff 10 	movl   $0xc010ff3b,0xc(%esp)
c010bbc7:	c0 
c010bbc8:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010bbcf:	c0 
c010bbd0:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010bbd7:	00 
c010bbd8:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bbdf:	e8 f6 51 ff ff       	call   c0100dda <__panic>
c010bbe4:	c7 45 e8 bc 56 1c c0 	movl   $0xc01c56bc,-0x18(%ebp)
c010bbeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bbee:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bbf1:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010bbf7:	83 c2 7c             	add    $0x7c,%edx
c010bbfa:	39 d0                	cmp    %edx,%eax
c010bbfc:	74 24                	je     c010bc22 <init_main+0x144>
c010bbfe:	c7 44 24 0c 4c ff 10 	movl   $0xc010ff4c,0xc(%esp)
c010bc05:	c0 
c010bc06:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010bc0d:	c0 
c010bc0e:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010bc15:	00 
c010bc16:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bc1d:	e8 b8 51 ff ff       	call   c0100dda <__panic>
c010bc22:	c7 45 e4 bc 56 1c c0 	movl   $0xc01c56bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010bc29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc2c:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bc2e:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010bc34:	83 c2 7c             	add    $0x7c,%edx
c010bc37:	39 d0                	cmp    %edx,%eax
c010bc39:	74 24                	je     c010bc5f <init_main+0x181>
c010bc3b:	c7 44 24 0c 7c ff 10 	movl   $0xc010ff7c,0xc(%esp)
c010bc42:	c0 
c010bc43:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010bc4a:	c0 
c010bc4b:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010bc52:	00 
c010bc53:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bc5a:	e8 7b 51 ff ff       	call   c0100dda <__panic>

    cprintf("init check memory pass.\n");
c010bc5f:	c7 04 24 ac ff 10 c0 	movl   $0xc010ffac,(%esp)
c010bc66:	e8 ed 46 ff ff       	call   c0100358 <cprintf>
    return 0;
c010bc6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc70:	c9                   	leave  
c010bc71:	c3                   	ret    

c010bc72 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010bc72:	55                   	push   %ebp
c010bc73:	89 e5                	mov    %esp,%ebp
c010bc75:	83 ec 28             	sub    $0x28,%esp
c010bc78:	c7 45 ec bc 56 1c c0 	movl   $0xc01c56bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bc7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc82:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bc85:	89 50 04             	mov    %edx,0x4(%eax)
c010bc88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc8b:	8b 50 04             	mov    0x4(%eax),%edx
c010bc8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc91:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bc93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010bc9a:	eb 26                	jmp    c010bcc2 <proc_init+0x50>
        list_init(hash_list + i);
c010bc9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc9f:	c1 e0 03             	shl    $0x3,%eax
c010bca2:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010bca7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bcaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bcad:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bcb0:	89 50 04             	mov    %edx,0x4(%eax)
c010bcb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bcb6:	8b 50 04             	mov    0x4(%eax),%edx
c010bcb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bcbc:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bcbe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010bcc2:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010bcc9:	7e d1                	jle    c010bc9c <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010bccb:	e8 f6 e6 ff ff       	call   c010a3c6 <alloc_proc>
c010bcd0:	a3 40 34 1c c0       	mov    %eax,0xc01c3440
c010bcd5:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bcda:	85 c0                	test   %eax,%eax
c010bcdc:	75 1c                	jne    c010bcfa <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010bcde:	c7 44 24 08 c5 ff 10 	movl   $0xc010ffc5,0x8(%esp)
c010bce5:	c0 
c010bce6:	c7 44 24 04 75 03 00 	movl   $0x375,0x4(%esp)
c010bced:	00 
c010bcee:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bcf5:	e8 e0 50 ff ff       	call   c0100dda <__panic>
    }

    idleproc->pid = 0;
c010bcfa:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bcff:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010bd06:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd0b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010bd11:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd16:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010bd1b:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010bd1e:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd23:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010bd2a:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd2f:	c7 44 24 04 dd ff 10 	movl   $0xc010ffdd,0x4(%esp)
c010bd36:	c0 
c010bd37:	89 04 24             	mov    %eax,(%esp)
c010bd3a:	e8 13 e8 ff ff       	call   c010a552 <set_proc_name>
    nr_process ++;
c010bd3f:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010bd44:	83 c0 01             	add    $0x1,%eax
c010bd47:	a3 60 54 1c c0       	mov    %eax,0xc01c5460

    current = idleproc;
c010bd4c:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd51:	a3 48 34 1c c0       	mov    %eax,0xc01c3448

    int pid = kernel_thread(init_main, NULL, 0);
c010bd56:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bd5d:	00 
c010bd5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bd65:	00 
c010bd66:	c7 04 24 de ba 10 c0 	movl   $0xc010bade,(%esp)
c010bd6d:	e8 6d ec ff ff       	call   c010a9df <kernel_thread>
c010bd72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010bd75:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bd79:	7f 1c                	jg     c010bd97 <proc_init+0x125>
        panic("create init_main failed.\n");
c010bd7b:	c7 44 24 08 e2 ff 10 	movl   $0xc010ffe2,0x8(%esp)
c010bd82:	c0 
c010bd83:	c7 44 24 04 83 03 00 	movl   $0x383,0x4(%esp)
c010bd8a:	00 
c010bd8b:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bd92:	e8 43 50 ff ff       	call   c0100dda <__panic>
    }

    initproc = find_proc(pid);
c010bd97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd9a:	89 04 24             	mov    %eax,(%esp)
c010bd9d:	e8 c9 eb ff ff       	call   c010a96b <find_proc>
c010bda2:	a3 44 34 1c c0       	mov    %eax,0xc01c3444
    set_proc_name(initproc, "init");
c010bda7:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bdac:	c7 44 24 04 fc ff 10 	movl   $0xc010fffc,0x4(%esp)
c010bdb3:	c0 
c010bdb4:	89 04 24             	mov    %eax,(%esp)
c010bdb7:	e8 96 e7 ff ff       	call   c010a552 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010bdbc:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bdc1:	85 c0                	test   %eax,%eax
c010bdc3:	74 0c                	je     c010bdd1 <proc_init+0x15f>
c010bdc5:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bdca:	8b 40 04             	mov    0x4(%eax),%eax
c010bdcd:	85 c0                	test   %eax,%eax
c010bdcf:	74 24                	je     c010bdf5 <proc_init+0x183>
c010bdd1:	c7 44 24 0c 04 00 11 	movl   $0xc0110004,0xc(%esp)
c010bdd8:	c0 
c010bdd9:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010bde0:	c0 
c010bde1:	c7 44 24 04 89 03 00 	movl   $0x389,0x4(%esp)
c010bde8:	00 
c010bde9:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010bdf0:	e8 e5 4f ff ff       	call   c0100dda <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010bdf5:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bdfa:	85 c0                	test   %eax,%eax
c010bdfc:	74 0d                	je     c010be0b <proc_init+0x199>
c010bdfe:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010be03:	8b 40 04             	mov    0x4(%eax),%eax
c010be06:	83 f8 01             	cmp    $0x1,%eax
c010be09:	74 24                	je     c010be2f <proc_init+0x1bd>
c010be0b:	c7 44 24 0c 2c 00 11 	movl   $0xc011002c,0xc(%esp)
c010be12:	c0 
c010be13:	c7 44 24 08 6d fc 10 	movl   $0xc010fc6d,0x8(%esp)
c010be1a:	c0 
c010be1b:	c7 44 24 04 8a 03 00 	movl   $0x38a,0x4(%esp)
c010be22:	00 
c010be23:	c7 04 24 40 fc 10 c0 	movl   $0xc010fc40,(%esp)
c010be2a:	e8 ab 4f ff ff       	call   c0100dda <__panic>
}
c010be2f:	c9                   	leave  
c010be30:	c3                   	ret    

c010be31 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010be31:	55                   	push   %ebp
c010be32:	89 e5                	mov    %esp,%ebp
c010be34:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010be37:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010be3c:	8b 40 10             	mov    0x10(%eax),%eax
c010be3f:	85 c0                	test   %eax,%eax
c010be41:	74 07                	je     c010be4a <cpu_idle+0x19>
            schedule();
c010be43:	e8 3e 06 00 00       	call   c010c486 <schedule>
        }
    }
c010be48:	eb ed                	jmp    c010be37 <cpu_idle+0x6>
c010be4a:	eb eb                	jmp    c010be37 <cpu_idle+0x6>

c010be4c <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010be4c:	55                   	push   %ebp
c010be4d:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010be4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be53:	75 11                	jne    c010be66 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010be55:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010be5a:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010be61:	00 00 00 
c010be64:	eb 0e                	jmp    c010be74 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010be66:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010be6b:	8b 55 08             	mov    0x8(%ebp),%edx
c010be6e:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010be74:	5d                   	pop    %ebp
c010be75:	c3                   	ret    

c010be76 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010be76:	55                   	push   %ebp
c010be77:	89 e5                	mov    %esp,%ebp
c010be79:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010be7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010be80:	75 07                	jne    c010be89 <do_sleep+0x13>
        return 0;
c010be82:	b8 00 00 00 00       	mov    $0x0,%eax
c010be87:	eb 6b                	jmp    c010bef4 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010be89:	e8 61 e3 ff ff       	call   c010a1ef <__intr_save>
c010be8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010be91:	8b 55 08             	mov    0x8(%ebp),%edx
c010be94:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010be99:	89 54 24 08          	mov    %edx,0x8(%esp)
c010be9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bea1:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010bea4:	89 04 24             	mov    %eax,(%esp)
c010bea7:	e8 0a e3 ff ff       	call   c010a1b6 <timer_init>
c010beac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010beaf:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010beb4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010beba:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bebf:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010bec6:	00 00 80 
    add_timer(timer);
c010bec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010becc:	89 04 24             	mov    %eax,(%esp)
c010becf:	e8 3d 06 00 00       	call   c010c511 <add_timer>
    local_intr_restore(intr_flag);
c010bed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bed7:	89 04 24             	mov    %eax,(%esp)
c010beda:	e8 3a e3 ff ff       	call   c010a219 <__intr_restore>

    schedule();
c010bedf:	e8 a2 05 00 00       	call   c010c486 <schedule>

    del_timer(timer);
c010bee4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bee7:	89 04 24             	mov    %eax,(%esp)
c010beea:	e8 60 07 00 00       	call   c010c64f <del_timer>
    return 0;
c010beef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bef4:	c9                   	leave  
c010bef5:	c3                   	ret    

c010bef6 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010bef6:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010befa:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010befc:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010beff:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010bf02:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010bf05:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010bf08:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010bf0b:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010bf0e:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010bf11:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010bf15:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010bf18:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010bf1b:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010bf1e:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010bf21:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010bf24:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010bf27:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010bf2a:	ff 30                	pushl  (%eax)

    ret
c010bf2c:	c3                   	ret    

c010bf2d <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010bf2d:	55                   	push   %ebp
c010bf2e:	89 e5                	mov    %esp,%ebp
c010bf30:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010bf33:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf37:	75 08                	jne    c010bf41 <skew_heap_merge+0x14>
c010bf39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf3c:	e9 bd 00 00 00       	jmp    c010bffe <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010bf41:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bf45:	75 08                	jne    c010bf4f <skew_heap_merge+0x22>
c010bf47:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf4a:	e9 af 00 00 00       	jmp    c010bffe <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010bf4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf52:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf56:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf59:	89 04 24             	mov    %eax,(%esp)
c010bf5c:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf5f:	ff d0                	call   *%eax
c010bf61:	83 f8 ff             	cmp    $0xffffffff,%eax
c010bf64:	75 4d                	jne    c010bfb3 <skew_heap_merge+0x86>
     {
          r = a->left;
c010bf66:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf69:	8b 40 04             	mov    0x4(%eax),%eax
c010bf6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010bf6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf72:	8b 40 08             	mov    0x8(%eax),%eax
c010bf75:	8b 55 10             	mov    0x10(%ebp),%edx
c010bf78:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bf7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bf7f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bf83:	89 04 24             	mov    %eax,(%esp)
c010bf86:	e8 a2 ff ff ff       	call   c010bf2d <skew_heap_merge>
c010bf8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010bf8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf91:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bf94:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010bf97:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf9d:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010bfa0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bfa4:	74 08                	je     c010bfae <skew_heap_merge+0x81>
c010bfa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfa9:	8b 55 08             	mov    0x8(%ebp),%edx
c010bfac:	89 10                	mov    %edx,(%eax)

          return a;
c010bfae:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb1:	eb 4b                	jmp    c010bffe <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010bfb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfb6:	8b 40 04             	mov    0x4(%eax),%eax
c010bfb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010bfbc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfbf:	8b 40 08             	mov    0x8(%eax),%eax
c010bfc2:	8b 55 10             	mov    0x10(%ebp),%edx
c010bfc5:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bfc9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bfcd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd0:	89 04 24             	mov    %eax,(%esp)
c010bfd3:	e8 55 ff ff ff       	call   c010bf2d <skew_heap_merge>
c010bfd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010bfdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfde:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bfe1:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010bfe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bfe7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bfea:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010bfed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bff1:	74 08                	je     c010bffb <skew_heap_merge+0xce>
c010bff3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bff6:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bff9:	89 10                	mov    %edx,(%eax)

          return b;
c010bffb:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010bffe:	c9                   	leave  
c010bfff:	c3                   	ret    

c010c000 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c000:	55                   	push   %ebp
c010c001:	89 e5                	mov    %esp,%ebp
c010c003:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c006:	8b 45 08             	mov    0x8(%ebp),%eax
c010c009:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c00e:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c011:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c014:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c019:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c01c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c01f:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c025:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c028:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c02e:	29 c2                	sub    %eax,%edx
c010c030:	89 d0                	mov    %edx,%eax
c010c032:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c035:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c039:	7e 07                	jle    c010c042 <proc_stride_comp_f+0x42>
c010c03b:	b8 01 00 00 00       	mov    $0x1,%eax
c010c040:	eb 12                	jmp    c010c054 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010c042:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c046:	75 07                	jne    c010c04f <proc_stride_comp_f+0x4f>
c010c048:	b8 00 00 00 00       	mov    $0x0,%eax
c010c04d:	eb 05                	jmp    c010c054 <proc_stride_comp_f+0x54>
     else return -1;
c010c04f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c054:	c9                   	leave  
c010c055:	c3                   	ret    

c010c056 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see proj13.1/libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c056:	55                   	push   %ebp
c010c057:	89 e5                	mov    %esp,%ebp
c010c059:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
     list_init(&(rq->run_list));
c010c05c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c05f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c062:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c065:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c068:	89 50 04             	mov    %edx,0x4(%eax)
c010c06b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c06e:	8b 50 04             	mov    0x4(%eax),%edx
c010c071:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c074:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010c076:	8b 45 08             	mov    0x8(%ebp),%eax
c010c079:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010c080:	8b 45 08             	mov    0x8(%ebp),%eax
c010c083:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c08a:	c9                   	leave  
c010c08b:	c3                   	ret    

c010c08c <stride_enqueue>:
 * 
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c08c:	55                   	push   %ebp
c010c08d:	89 e5                	mov    %esp,%ebp
c010c08f:	83 ec 28             	sub    $0x28,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c092:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c095:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c09b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c09e:	8b 40 10             	mov    0x10(%eax),%eax
c010c0a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0a4:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c0a7:	c7 45 ec 00 c0 10 c0 	movl   $0xc010c000,-0x14(%ebp)
c010c0ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010c0b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c0bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0c0:	8b 10                	mov    (%eax),%edx
c010c0c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0c5:	89 50 08             	mov    %edx,0x8(%eax)
c010c0c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0cb:	8b 50 08             	mov    0x8(%eax),%edx
c010c0ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0d1:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c0d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0d7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c0db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0de:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c0e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e5:	89 04 24             	mov    %eax,(%esp)
c010c0e8:	e8 40 fe ff ff       	call   c010bf2d <skew_heap_merge>
c010c0ed:	89 c2                	mov    %eax,%edx
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010c0ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f2:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
#endif
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c0f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0f8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c0fe:	85 c0                	test   %eax,%eax
c010c100:	74 13                	je     c010c115 <stride_enqueue+0x89>
c010c102:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c105:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c10b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c10e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c111:	39 c2                	cmp    %eax,%edx
c010c113:	7e 0f                	jle    c010c124 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010c115:	8b 45 08             	mov    0x8(%ebp),%eax
c010c118:	8b 50 0c             	mov    0xc(%eax),%edx
c010c11b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c11e:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     proc->rq = rq;
c010c124:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c127:	8b 55 08             	mov    0x8(%ebp),%edx
c010c12a:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     rq->proc_num ++;
c010c130:	8b 45 08             	mov    0x8(%ebp),%eax
c010c133:	8b 40 08             	mov    0x8(%eax),%eax
c010c136:	8d 50 01             	lea    0x1(%eax),%edx
c010c139:	8b 45 08             	mov    0x8(%ebp),%eax
c010c13c:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c13f:	c9                   	leave  
c010c140:	c3                   	ret    

c010c141 <stride_dequeue>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c141:	55                   	push   %ebp
c010c142:	89 e5                	mov    %esp,%ebp
c010c144:	83 ec 38             	sub    $0x38,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c147:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c14a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c150:	8b 45 08             	mov    0x8(%ebp),%eax
c010c153:	8b 40 10             	mov    0x10(%eax),%eax
c010c156:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c159:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c15c:	c7 45 ec 00 c0 10 c0 	movl   $0xc010c000,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c166:	8b 00                	mov    (%eax),%eax
c010c168:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c16b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c16e:	8b 50 08             	mov    0x8(%eax),%edx
c010c171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c174:	8b 40 04             	mov    0x4(%eax),%eax
c010c177:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c17a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c17e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c182:	89 04 24             	mov    %eax,(%esp)
c010c185:	e8 a3 fd ff ff       	call   c010bf2d <skew_heap_merge>
c010c18a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c18d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c191:	74 08                	je     c010c19b <stride_dequeue+0x5a>
c010c193:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c196:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c199:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c19b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c19f:	74 24                	je     c010c1c5 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c1a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1a4:	8b 40 04             	mov    0x4(%eax),%eax
c010c1a7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c1aa:	75 0b                	jne    c010c1b7 <stride_dequeue+0x76>
               p->left = rep;
c010c1ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c1b2:	89 50 04             	mov    %edx,0x4(%eax)
c010c1b5:	eb 09                	jmp    c010c1c0 <stride_dequeue+0x7f>
          else p->right = rep;
c010c1b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c1ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c1bd:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c1c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1c3:	eb 03                	jmp    c010c1c8 <stride_dequeue+0x87>
     }
     else return rep;
c010c1c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c1c8:	89 c2                	mov    %eax,%edx
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     rq->lab6_run_pool =
c010c1ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1cd:	89 50 10             	mov    %edx,0x10(%eax)
          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
#else
     assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
     list_del_init(&(proc->run_link));
#endif
     rq->proc_num --;
c010c1d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1d3:	8b 40 08             	mov    0x8(%eax),%eax
c010c1d6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c1d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1dc:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c1df:	c9                   	leave  
c010c1e0:	c3                   	ret    

c010c1e1 <stride_pick_next>:
 *
 * hint: see proj13.1/libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c1e1:	55                   	push   %ebp
c010c1e2:	89 e5                	mov    %esp,%ebp
c010c1e4:	53                   	push   %ebx
c010c1e5:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: YOUR CODE */
#if USE_SKEW_HEAP
     if (rq->lab6_run_pool == NULL) return NULL;
c010c1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1eb:	8b 40 10             	mov    0x10(%eax),%eax
c010c1ee:	85 c0                	test   %eax,%eax
c010c1f0:	75 07                	jne    c010c1f9 <stride_pick_next+0x18>
c010c1f2:	b8 00 00 00 00       	mov    $0x0,%eax
c010c1f7:	eb 62                	jmp    c010c25b <stride_pick_next+0x7a>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010c1f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1fc:	8b 40 10             	mov    0x10(%eax),%eax
c010c1ff:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c204:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if ((int32_t)(p->lab6_stride - q->lab6_stride) > 0)
               p = q;
          le = list_next(le);
     }
#endif
     if (p->lab6_priority == 0)
c010c207:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c20a:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c210:	85 c0                	test   %eax,%eax
c010c212:	75 1a                	jne    c010c22e <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010c214:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c217:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c21d:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010c223:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c226:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010c22c:	eb 2a                	jmp    c010c258 <stride_pick_next+0x77>
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c22e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c231:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c237:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c23a:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010c240:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010c245:	ba 00 00 00 00       	mov    $0x0,%edx
c010c24a:	f7 f3                	div    %ebx
c010c24c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c24f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c252:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010c258:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c25b:	83 c4 10             	add    $0x10,%esp
c010c25e:	5b                   	pop    %ebx
c010c25f:	5d                   	pop    %ebp
c010c260:	c3                   	ret    

c010c261 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c261:	55                   	push   %ebp
c010c262:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010c264:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c267:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c26d:	85 c0                	test   %eax,%eax
c010c26f:	7e 15                	jle    c010c286 <stride_proc_tick+0x25>
          proc->time_slice --;
c010c271:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c274:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c27a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c27d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c280:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010c286:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c289:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c28f:	85 c0                	test   %eax,%eax
c010c291:	75 0a                	jne    c010c29d <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010c293:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c296:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010c29d:	5d                   	pop    %ebp
c010c29e:	c3                   	ret    

c010c29f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c29f:	55                   	push   %ebp
c010c2a0:	89 e5                	mov    %esp,%ebp
c010c2a2:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c2a5:	9c                   	pushf  
c010c2a6:	58                   	pop    %eax
c010c2a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c2aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c2ad:	25 00 02 00 00       	and    $0x200,%eax
c010c2b2:	85 c0                	test   %eax,%eax
c010c2b4:	74 0c                	je     c010c2c2 <__intr_save+0x23>
        intr_disable();
c010c2b6:	e8 77 5d ff ff       	call   c0102032 <intr_disable>
        return 1;
c010c2bb:	b8 01 00 00 00       	mov    $0x1,%eax
c010c2c0:	eb 05                	jmp    c010c2c7 <__intr_save+0x28>
    }
    return 0;
c010c2c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2c7:	c9                   	leave  
c010c2c8:	c3                   	ret    

c010c2c9 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c2c9:	55                   	push   %ebp
c010c2ca:	89 e5                	mov    %esp,%ebp
c010c2cc:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c2cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c2d3:	74 05                	je     c010c2da <__intr_restore+0x11>
        intr_enable();
c010c2d5:	e8 52 5d ff ff       	call   c010202c <intr_enable>
    }
}
c010c2da:	c9                   	leave  
c010c2db:	c3                   	ret    

c010c2dc <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c2dc:	55                   	push   %ebp
c010c2dd:	89 e5                	mov    %esp,%ebp
c010c2df:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c2e2:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c2e7:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c2ea:	74 1a                	je     c010c306 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c2ec:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c2f1:	8b 40 08             	mov    0x8(%eax),%eax
c010c2f4:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c2fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c2fd:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c301:	89 14 24             	mov    %edx,(%esp)
c010c304:	ff d0                	call   *%eax
    }
}
c010c306:	c9                   	leave  
c010c307:	c3                   	ret    

c010c308 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c308:	55                   	push   %ebp
c010c309:	89 e5                	mov    %esp,%ebp
c010c30b:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c30e:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c313:	8b 40 0c             	mov    0xc(%eax),%eax
c010c316:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c31c:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c31f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c323:	89 14 24             	mov    %edx,(%esp)
c010c326:	ff d0                	call   *%eax
}
c010c328:	c9                   	leave  
c010c329:	c3                   	ret    

c010c32a <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c32a:	55                   	push   %ebp
c010c32b:	89 e5                	mov    %esp,%ebp
c010c32d:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c330:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c335:	8b 40 10             	mov    0x10(%eax),%eax
c010c338:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c33e:	89 14 24             	mov    %edx,(%esp)
c010c341:	ff d0                	call   *%eax
}
c010c343:	c9                   	leave  
c010c344:	c3                   	ret    

c010c345 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c345:	55                   	push   %ebp
c010c346:	89 e5                	mov    %esp,%ebp
c010c348:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c34b:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c350:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c353:	74 1c                	je     c010c371 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c355:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c35a:	8b 40 14             	mov    0x14(%eax),%eax
c010c35d:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c363:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c366:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c36a:	89 14 24             	mov    %edx,(%esp)
c010c36d:	ff d0                	call   *%eax
c010c36f:	eb 0a                	jmp    c010c37b <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010c371:	8b 45 08             	mov    0x8(%ebp),%eax
c010c374:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c37b:	c9                   	leave  
c010c37c:	c3                   	ret    

c010c37d <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c37d:	55                   	push   %ebp
c010c37e:	89 e5                	mov    %esp,%ebp
c010c380:	83 ec 28             	sub    $0x28,%esp
c010c383:	c7 45 f4 b4 54 1c c0 	movl   $0xc01c54b4,-0xc(%ebp)
c010c38a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c38d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c390:	89 50 04             	mov    %edx,0x4(%eax)
c010c393:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c396:	8b 50 04             	mov    0x4(%eax),%edx
c010c399:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c39c:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c39e:	c7 05 bc 54 1c c0 8c 	movl   $0xc0131a8c,0xc01c54bc
c010c3a5:	1a 13 c0 

    rq = &__rq;
c010c3a8:	c7 05 c0 54 1c c0 c4 	movl   $0xc01c54c4,0xc01c54c0
c010c3af:	54 1c c0 
    rq->max_time_slice = 5;
c010c3b2:	a1 c0 54 1c c0       	mov    0xc01c54c0,%eax
c010c3b7:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010c3be:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c3c3:	8b 40 04             	mov    0x4(%eax),%eax
c010c3c6:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c3cc:	89 14 24             	mov    %edx,(%esp)
c010c3cf:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010c3d1:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c3d6:	8b 00                	mov    (%eax),%eax
c010c3d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c3dc:	c7 04 24 64 00 11 c0 	movl   $0xc0110064,(%esp)
c010c3e3:	e8 70 3f ff ff       	call   c0100358 <cprintf>
}
c010c3e8:	c9                   	leave  
c010c3e9:	c3                   	ret    

c010c3ea <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c3ea:	55                   	push   %ebp
c010c3eb:	89 e5                	mov    %esp,%ebp
c010c3ed:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c3f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f3:	8b 00                	mov    (%eax),%eax
c010c3f5:	83 f8 03             	cmp    $0x3,%eax
c010c3f8:	75 24                	jne    c010c41e <wakeup_proc+0x34>
c010c3fa:	c7 44 24 0c 75 00 11 	movl   $0xc0110075,0xc(%esp)
c010c401:	c0 
c010c402:	c7 44 24 08 90 00 11 	movl   $0xc0110090,0x8(%esp)
c010c409:	c0 
c010c40a:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c411:	00 
c010c412:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c419:	e8 bc 49 ff ff       	call   c0100dda <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c41e:	e8 7c fe ff ff       	call   c010c29f <__intr_save>
c010c423:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c426:	8b 45 08             	mov    0x8(%ebp),%eax
c010c429:	8b 00                	mov    (%eax),%eax
c010c42b:	83 f8 02             	cmp    $0x2,%eax
c010c42e:	74 2d                	je     c010c45d <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c430:	8b 45 08             	mov    0x8(%ebp),%eax
c010c433:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c439:	8b 45 08             	mov    0x8(%ebp),%eax
c010c43c:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c443:	00 00 00 
            if (proc != current) {
c010c446:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c44b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c44e:	74 29                	je     c010c479 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c450:	8b 45 08             	mov    0x8(%ebp),%eax
c010c453:	89 04 24             	mov    %eax,(%esp)
c010c456:	e8 81 fe ff ff       	call   c010c2dc <sched_class_enqueue>
c010c45b:	eb 1c                	jmp    c010c479 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c45d:	c7 44 24 08 bb 00 11 	movl   $0xc01100bb,0x8(%esp)
c010c464:	c0 
c010c465:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c46c:	00 
c010c46d:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c474:	e8 cd 49 ff ff       	call   c0100e46 <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c479:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c47c:	89 04 24             	mov    %eax,(%esp)
c010c47f:	e8 45 fe ff ff       	call   c010c2c9 <__intr_restore>
}
c010c484:	c9                   	leave  
c010c485:	c3                   	ret    

c010c486 <schedule>:

void
schedule(void) {
c010c486:	55                   	push   %ebp
c010c487:	89 e5                	mov    %esp,%ebp
c010c489:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c48c:	e8 0e fe ff ff       	call   c010c29f <__intr_save>
c010c491:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c494:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c499:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c4a0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c4a5:	8b 00                	mov    (%eax),%eax
c010c4a7:	83 f8 02             	cmp    $0x2,%eax
c010c4aa:	75 0d                	jne    c010c4b9 <schedule+0x33>
            sched_class_enqueue(current);
c010c4ac:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c4b1:	89 04 24             	mov    %eax,(%esp)
c010c4b4:	e8 23 fe ff ff       	call   c010c2dc <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c4b9:	e8 6c fe ff ff       	call   c010c32a <sched_class_pick_next>
c010c4be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4c5:	74 0b                	je     c010c4d2 <schedule+0x4c>
            sched_class_dequeue(next);
c010c4c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ca:	89 04 24             	mov    %eax,(%esp)
c010c4cd:	e8 36 fe ff ff       	call   c010c308 <sched_class_dequeue>
        }
        if (next == NULL) {
c010c4d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4d6:	75 08                	jne    c010c4e0 <schedule+0x5a>
            next = idleproc;
c010c4d8:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c4dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c4e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4e3:	8b 40 08             	mov    0x8(%eax),%eax
c010c4e6:	8d 50 01             	lea    0x1(%eax),%edx
c010c4e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ec:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c4ef:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c4f4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c4f7:	74 0b                	je     c010c504 <schedule+0x7e>
            proc_run(next);
c010c4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4fc:	89 04 24             	mov    %eax,(%esp)
c010c4ff:	e8 26 e3 ff ff       	call   c010a82a <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c504:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c507:	89 04 24             	mov    %eax,(%esp)
c010c50a:	e8 ba fd ff ff       	call   c010c2c9 <__intr_restore>
}
c010c50f:	c9                   	leave  
c010c510:	c3                   	ret    

c010c511 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c511:	55                   	push   %ebp
c010c512:	89 e5                	mov    %esp,%ebp
c010c514:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c517:	e8 83 fd ff ff       	call   c010c29f <__intr_save>
c010c51c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c51f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c522:	8b 00                	mov    (%eax),%eax
c010c524:	85 c0                	test   %eax,%eax
c010c526:	74 0a                	je     c010c532 <add_timer+0x21>
c010c528:	8b 45 08             	mov    0x8(%ebp),%eax
c010c52b:	8b 40 04             	mov    0x4(%eax),%eax
c010c52e:	85 c0                	test   %eax,%eax
c010c530:	75 24                	jne    c010c556 <add_timer+0x45>
c010c532:	c7 44 24 0c d8 00 11 	movl   $0xc01100d8,0xc(%esp)
c010c539:	c0 
c010c53a:	c7 44 24 08 90 00 11 	movl   $0xc0110090,0x8(%esp)
c010c541:	c0 
c010c542:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c549:	00 
c010c54a:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c551:	e8 84 48 ff ff       	call   c0100dda <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c556:	8b 45 08             	mov    0x8(%ebp),%eax
c010c559:	83 c0 08             	add    $0x8,%eax
c010c55c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c55f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c562:	8b 40 04             	mov    0x4(%eax),%eax
c010c565:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c568:	0f 94 c0             	sete   %al
c010c56b:	0f b6 c0             	movzbl %al,%eax
c010c56e:	85 c0                	test   %eax,%eax
c010c570:	75 24                	jne    c010c596 <add_timer+0x85>
c010c572:	c7 44 24 0c 04 01 11 	movl   $0xc0110104,0xc(%esp)
c010c579:	c0 
c010c57a:	c7 44 24 08 90 00 11 	movl   $0xc0110090,0x8(%esp)
c010c581:	c0 
c010c582:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c589:	00 
c010c58a:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c591:	e8 44 48 ff ff       	call   c0100dda <__panic>
c010c596:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c59d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5a0:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c5a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c5a6:	eb 4a                	jmp    c010c5f2 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c5a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5ab:	83 e8 08             	sub    $0x8,%eax
c010c5ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c5b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5b4:	8b 10                	mov    (%eax),%edx
c010c5b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5b9:	8b 00                	mov    (%eax),%eax
c010c5bb:	39 c2                	cmp    %eax,%edx
c010c5bd:	73 13                	jae    c010c5d2 <add_timer+0xc1>
                next->expires -= timer->expires;
c010c5bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5c2:	8b 10                	mov    (%eax),%edx
c010c5c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5c7:	8b 00                	mov    (%eax),%eax
c010c5c9:	29 c2                	sub    %eax,%edx
c010c5cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5ce:	89 10                	mov    %edx,(%eax)
                break;
c010c5d0:	eb 29                	jmp    c010c5fb <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c5d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d5:	8b 10                	mov    (%eax),%edx
c010c5d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5da:	8b 00                	mov    (%eax),%eax
c010c5dc:	29 c2                	sub    %eax,%edx
c010c5de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e1:	89 10                	mov    %edx,(%eax)
c010c5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c5e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c5ec:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c5ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c5f2:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c5f9:	75 ad                	jne    c010c5a8 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c5fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5fe:	8d 50 08             	lea    0x8(%eax),%edx
c010c601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c604:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c607:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c60a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c60d:	8b 00                	mov    (%eax),%eax
c010c60f:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c612:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c615:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c618:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c61b:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c61e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c621:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c624:	89 10                	mov    %edx,(%eax)
c010c626:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c629:	8b 10                	mov    (%eax),%edx
c010c62b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c62e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c631:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c634:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c637:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c63a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c63d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c640:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c645:	89 04 24             	mov    %eax,(%esp)
c010c648:	e8 7c fc ff ff       	call   c010c2c9 <__intr_restore>
}
c010c64d:	c9                   	leave  
c010c64e:	c3                   	ret    

c010c64f <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c64f:	55                   	push   %ebp
c010c650:	89 e5                	mov    %esp,%ebp
c010c652:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c655:	e8 45 fc ff ff       	call   c010c29f <__intr_save>
c010c65a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c65d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c660:	83 c0 08             	add    $0x8,%eax
c010c663:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c666:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c669:	8b 40 04             	mov    0x4(%eax),%eax
c010c66c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c66f:	0f 94 c0             	sete   %al
c010c672:	0f b6 c0             	movzbl %al,%eax
c010c675:	85 c0                	test   %eax,%eax
c010c677:	0f 85 89 00 00 00    	jne    c010c706 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c67d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c680:	8b 00                	mov    (%eax),%eax
c010c682:	85 c0                	test   %eax,%eax
c010c684:	74 35                	je     c010c6bb <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c686:	8b 45 08             	mov    0x8(%ebp),%eax
c010c689:	83 c0 08             	add    $0x8,%eax
c010c68c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c68f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c692:	8b 40 04             	mov    0x4(%eax),%eax
c010c695:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c698:	81 7d f0 b4 54 1c c0 	cmpl   $0xc01c54b4,-0x10(%ebp)
c010c69f:	74 1a                	je     c010c6bb <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c6a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6a4:	83 e8 08             	sub    $0x8,%eax
c010c6a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c6aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6ad:	8b 10                	mov    (%eax),%edx
c010c6af:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6b2:	8b 00                	mov    (%eax),%eax
c010c6b4:	01 c2                	add    %eax,%edx
c010c6b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6b9:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c6bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6be:	83 c0 08             	add    $0x8,%eax
c010c6c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c6c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c6ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6cd:	8b 40 04             	mov    0x4(%eax),%eax
c010c6d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c6d3:	8b 12                	mov    (%edx),%edx
c010c6d5:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c6d8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c6db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c6e1:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c6e4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c6e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c6ea:	89 10                	mov    %edx,(%eax)
c010c6ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c6ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c6f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c6f5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c6f8:	89 50 04             	mov    %edx,0x4(%eax)
c010c6fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c6fe:	8b 50 04             	mov    0x4(%eax),%edx
c010c701:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c704:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c709:	89 04 24             	mov    %eax,(%esp)
c010c70c:	e8 b8 fb ff ff       	call   c010c2c9 <__intr_restore>
}
c010c711:	c9                   	leave  
c010c712:	c3                   	ret    

c010c713 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c713:	55                   	push   %ebp
c010c714:	89 e5                	mov    %esp,%ebp
c010c716:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c719:	e8 81 fb ff ff       	call   c010c29f <__intr_save>
c010c71e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c721:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c728:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c72b:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c72e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c731:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c738:	0f 84 fb 00 00 00    	je     c010c839 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010c73e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c741:	83 e8 08             	sub    $0x8,%eax
c010c744:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c747:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c74a:	8b 00                	mov    (%eax),%eax
c010c74c:	85 c0                	test   %eax,%eax
c010c74e:	75 24                	jne    c010c774 <run_timer_list+0x61>
c010c750:	c7 44 24 0c 25 01 11 	movl   $0xc0110125,0xc(%esp)
c010c757:	c0 
c010c758:	c7 44 24 08 90 00 11 	movl   $0xc0110090,0x8(%esp)
c010c75f:	c0 
c010c760:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c767:	00 
c010c768:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c76f:	e8 66 46 ff ff       	call   c0100dda <__panic>
            timer->expires --;
c010c774:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c777:	8b 00                	mov    (%eax),%eax
c010c779:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c77c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c77f:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c781:	e9 a6 00 00 00       	jmp    c010c82c <run_timer_list+0x119>
c010c786:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c789:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c78c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c78f:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c792:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c795:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c798:	8b 40 04             	mov    0x4(%eax),%eax
c010c79b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c79e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7a1:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c7a7:	85 c0                	test   %eax,%eax
c010c7a9:	74 31                	je     c010c7dc <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c7ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7ae:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c7b4:	85 c0                	test   %eax,%eax
c010c7b6:	78 4a                	js     c010c802 <run_timer_list+0xef>
c010c7b8:	c7 44 24 0c 3c 01 11 	movl   $0xc011013c,0xc(%esp)
c010c7bf:	c0 
c010c7c0:	c7 44 24 08 90 00 11 	movl   $0xc0110090,0x8(%esp)
c010c7c7:	c0 
c010c7c8:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c7cf:	00 
c010c7d0:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c7d7:	e8 fe 45 ff ff       	call   c0100dda <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c7dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7df:	8b 40 04             	mov    0x4(%eax),%eax
c010c7e2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c7e6:	c7 44 24 08 60 01 11 	movl   $0xc0110160,0x8(%esp)
c010c7ed:	c0 
c010c7ee:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c7f5:	00 
c010c7f6:	c7 04 24 a5 00 11 c0 	movl   $0xc01100a5,(%esp)
c010c7fd:	e8 44 46 ff ff       	call   c0100e46 <__warn>
                }
                wakeup_proc(proc);
c010c802:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c805:	89 04 24             	mov    %eax,(%esp)
c010c808:	e8 dd fb ff ff       	call   c010c3ea <wakeup_proc>
                del_timer(timer);
c010c80d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c810:	89 04 24             	mov    %eax,(%esp)
c010c813:	e8 37 fe ff ff       	call   c010c64f <del_timer>
                if (le == &timer_list) {
c010c818:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010c81f:	75 02                	jne    c010c823 <run_timer_list+0x110>
                    break;
c010c821:	eb 16                	jmp    c010c839 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010c823:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c826:	83 e8 08             	sub    $0x8,%eax
c010c829:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010c82c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c82f:	8b 00                	mov    (%eax),%eax
c010c831:	85 c0                	test   %eax,%eax
c010c833:	0f 84 4d ff ff ff    	je     c010c786 <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010c839:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c83e:	89 04 24             	mov    %eax,(%esp)
c010c841:	e8 ff fa ff ff       	call   c010c345 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010c846:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c849:	89 04 24             	mov    %eax,(%esp)
c010c84c:	e8 78 fa ff ff       	call   c010c2c9 <__intr_restore>
}
c010c851:	c9                   	leave  
c010c852:	c3                   	ret    

c010c853 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010c853:	55                   	push   %ebp
c010c854:	89 e5                	mov    %esp,%ebp
c010c856:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010c859:	8b 45 08             	mov    0x8(%ebp),%eax
c010c85c:	8b 00                	mov    (%eax),%eax
c010c85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010c861:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c864:	89 04 24             	mov    %eax,(%esp)
c010c867:	e8 2c e6 ff ff       	call   c010ae98 <do_exit>
}
c010c86c:	c9                   	leave  
c010c86d:	c3                   	ret    

c010c86e <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010c86e:	55                   	push   %ebp
c010c86f:	89 e5                	mov    %esp,%ebp
c010c871:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c874:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c879:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c87c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010c87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c882:	8b 40 44             	mov    0x44(%eax),%eax
c010c885:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010c888:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c88b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c88f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c892:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c896:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010c89d:	e8 d2 e4 ff ff       	call   c010ad74 <do_fork>
}
c010c8a2:	c9                   	leave  
c010c8a3:	c3                   	ret    

c010c8a4 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010c8a4:	55                   	push   %ebp
c010c8a5:	89 e5                	mov    %esp,%ebp
c010c8a7:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c8aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8ad:	8b 00                	mov    (%eax),%eax
c010c8af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010c8b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b5:	83 c0 04             	add    $0x4,%eax
c010c8b8:	8b 00                	mov    (%eax),%eax
c010c8ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010c8bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c8c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8c7:	89 04 24             	mov    %eax,(%esp)
c010c8ca:	e8 71 ef ff ff       	call   c010b840 <do_wait>
}
c010c8cf:	c9                   	leave  
c010c8d0:	c3                   	ret    

c010c8d1 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010c8d1:	55                   	push   %ebp
c010c8d2:	89 e5                	mov    %esp,%ebp
c010c8d4:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010c8d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8da:	8b 00                	mov    (%eax),%eax
c010c8dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010c8df:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8e2:	8b 40 04             	mov    0x4(%eax),%eax
c010c8e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010c8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8eb:	83 c0 08             	add    $0x8,%eax
c010c8ee:	8b 00                	mov    (%eax),%eax
c010c8f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010c8f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8f6:	8b 40 0c             	mov    0xc(%eax),%eax
c010c8f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010c8fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c8ff:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c903:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c906:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c90a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c90d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c914:	89 04 24             	mov    %eax,(%esp)
c010c917:	e8 d8 ed ff ff       	call   c010b6f4 <do_execve>
}
c010c91c:	c9                   	leave  
c010c91d:	c3                   	ret    

c010c91e <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010c91e:	55                   	push   %ebp
c010c91f:	89 e5                	mov    %esp,%ebp
c010c921:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010c924:	e8 01 ef ff ff       	call   c010b82a <do_yield>
}
c010c929:	c9                   	leave  
c010c92a:	c3                   	ret    

c010c92b <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010c92b:	55                   	push   %ebp
c010c92c:	89 e5                	mov    %esp,%ebp
c010c92e:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010c931:	8b 45 08             	mov    0x8(%ebp),%eax
c010c934:	8b 00                	mov    (%eax),%eax
c010c936:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c93c:	89 04 24             	mov    %eax,(%esp)
c010c93f:	e8 9c f0 ff ff       	call   c010b9e0 <do_kill>
}
c010c944:	c9                   	leave  
c010c945:	c3                   	ret    

c010c946 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c946:	55                   	push   %ebp
c010c947:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c949:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c94e:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c951:	5d                   	pop    %ebp
c010c952:	c3                   	ret    

c010c953 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c953:	55                   	push   %ebp
c010c954:	89 e5                	mov    %esp,%ebp
c010c956:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010c959:	8b 45 08             	mov    0x8(%ebp),%eax
c010c95c:	8b 00                	mov    (%eax),%eax
c010c95e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c964:	89 04 24             	mov    %eax,(%esp)
c010c967:	e8 12 3a ff ff       	call   c010037e <cputchar>
    return 0;
c010c96c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c971:	c9                   	leave  
c010c972:	c3                   	ret    

c010c973 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c973:	55                   	push   %ebp
c010c974:	89 e5                	mov    %esp,%ebp
c010c976:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c979:	e8 e7 a1 ff ff       	call   c0106b65 <print_pgdir>
    return 0;
c010c97e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c983:	c9                   	leave  
c010c984:	c3                   	ret    

c010c985 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010c985:	55                   	push   %ebp
c010c986:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c988:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
}
c010c98d:	5d                   	pop    %ebp
c010c98e:	c3                   	ret    

c010c98f <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010c98f:	55                   	push   %ebp
c010c990:	89 e5                	mov    %esp,%ebp
c010c992:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c995:	8b 45 08             	mov    0x8(%ebp),%eax
c010c998:	8b 00                	mov    (%eax),%eax
c010c99a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c99d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9a0:	89 04 24             	mov    %eax,(%esp)
c010c9a3:	e8 a4 f4 ff ff       	call   c010be4c <lab6_set_priority>
    return 0;
c010c9a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c9ad:	c9                   	leave  
c010c9ae:	c3                   	ret    

c010c9af <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010c9af:	55                   	push   %ebp
c010c9b0:	89 e5                	mov    %esp,%ebp
c010c9b2:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010c9b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9b8:	8b 00                	mov    (%eax),%eax
c010c9ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010c9bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9c0:	89 04 24             	mov    %eax,(%esp)
c010c9c3:	e8 ae f4 ff ff       	call   c010be76 <do_sleep>
}
c010c9c8:	c9                   	leave  
c010c9c9:	c3                   	ret    

c010c9ca <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c9ca:	55                   	push   %ebp
c010c9cb:	89 e5                	mov    %esp,%ebp
c010c9cd:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010c9d0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c9d5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c9d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c9db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9de:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c9e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c9e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c9e8:	78 60                	js     c010ca4a <syscall+0x80>
c010c9ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9ed:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c9f2:	77 56                	ja     c010ca4a <syscall+0x80>
        if (syscalls[num] != NULL) {
c010c9f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9f7:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010c9fe:	85 c0                	test   %eax,%eax
c010ca00:	74 48                	je     c010ca4a <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ca02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca05:	8b 40 14             	mov    0x14(%eax),%eax
c010ca08:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ca0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca0e:	8b 40 18             	mov    0x18(%eax),%eax
c010ca11:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ca14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca17:	8b 40 10             	mov    0x10(%eax),%eax
c010ca1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ca1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca20:	8b 00                	mov    (%eax),%eax
c010ca22:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ca25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca28:	8b 40 04             	mov    0x4(%eax),%eax
c010ca2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ca2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca31:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010ca38:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ca3b:	89 14 24             	mov    %edx,(%esp)
c010ca3e:	ff d0                	call   *%eax
c010ca40:	89 c2                	mov    %eax,%edx
c010ca42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca45:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ca48:	eb 46                	jmp    c010ca90 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ca4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca4d:	89 04 24             	mov    %eax,(%esp)
c010ca50:	e8 9b 59 ff ff       	call   c01023f0 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ca55:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ca5a:	8d 50 48             	lea    0x48(%eax),%edx
c010ca5d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ca62:	8b 40 04             	mov    0x4(%eax),%eax
c010ca65:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ca69:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ca6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca70:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ca74:	c7 44 24 08 80 01 11 	movl   $0xc0110180,0x8(%esp)
c010ca7b:	c0 
c010ca7c:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010ca83:	00 
c010ca84:	c7 04 24 ac 01 11 c0 	movl   $0xc01101ac,(%esp)
c010ca8b:	e8 4a 43 ff ff       	call   c0100dda <__panic>
            num, current->pid, current->name);
}
c010ca90:	c9                   	leave  
c010ca91:	c3                   	ret    

c010ca92 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010ca92:	55                   	push   %ebp
c010ca93:	89 e5                	mov    %esp,%ebp
c010ca95:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010ca98:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca9b:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010caa1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010caa4:	b8 20 00 00 00       	mov    $0x20,%eax
c010caa9:	2b 45 0c             	sub    0xc(%ebp),%eax
c010caac:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010caaf:	89 c1                	mov    %eax,%ecx
c010cab1:	d3 ea                	shr    %cl,%edx
c010cab3:	89 d0                	mov    %edx,%eax
}
c010cab5:	c9                   	leave  
c010cab6:	c3                   	ret    

c010cab7 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010cab7:	55                   	push   %ebp
c010cab8:	89 e5                	mov    %esp,%ebp
c010caba:	83 ec 58             	sub    $0x58,%esp
c010cabd:	8b 45 10             	mov    0x10(%ebp),%eax
c010cac0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010cac3:	8b 45 14             	mov    0x14(%ebp),%eax
c010cac6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010cac9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cacc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cacf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cad2:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010cad5:	8b 45 18             	mov    0x18(%ebp),%eax
c010cad8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cadb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cade:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cae1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cae4:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010cae7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010caed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010caf1:	74 1c                	je     c010cb0f <printnum+0x58>
c010caf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caf6:	ba 00 00 00 00       	mov    $0x0,%edx
c010cafb:	f7 75 e4             	divl   -0x1c(%ebp)
c010cafe:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010cb01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb04:	ba 00 00 00 00       	mov    $0x0,%edx
c010cb09:	f7 75 e4             	divl   -0x1c(%ebp)
c010cb0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cb0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cb15:	f7 75 e4             	divl   -0x1c(%ebp)
c010cb18:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cb1b:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010cb1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb21:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cb24:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cb27:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cb2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cb2d:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cb30:	8b 45 18             	mov    0x18(%ebp),%eax
c010cb33:	ba 00 00 00 00       	mov    $0x0,%edx
c010cb38:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cb3b:	77 56                	ja     c010cb93 <printnum+0xdc>
c010cb3d:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cb40:	72 05                	jb     c010cb47 <printnum+0x90>
c010cb42:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010cb45:	77 4c                	ja     c010cb93 <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010cb47:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cb4a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cb4d:	8b 45 20             	mov    0x20(%ebp),%eax
c010cb50:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cb54:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cb58:	8b 45 18             	mov    0x18(%ebp),%eax
c010cb5b:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cb5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cb62:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cb65:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cb69:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cb6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb74:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb77:	89 04 24             	mov    %eax,(%esp)
c010cb7a:	e8 38 ff ff ff       	call   c010cab7 <printnum>
c010cb7f:	eb 1c                	jmp    c010cb9d <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cb81:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb84:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cb88:	8b 45 20             	mov    0x20(%ebp),%eax
c010cb8b:	89 04 24             	mov    %eax,(%esp)
c010cb8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb91:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cb93:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cb97:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cb9b:	7f e4                	jg     c010cb81 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cb9d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cba0:	05 e4 02 11 c0       	add    $0xc01102e4,%eax
c010cba5:	0f b6 00             	movzbl (%eax),%eax
c010cba8:	0f be c0             	movsbl %al,%eax
c010cbab:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cbae:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cbb2:	89 04 24             	mov    %eax,(%esp)
c010cbb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbb8:	ff d0                	call   *%eax
}
c010cbba:	c9                   	leave  
c010cbbb:	c3                   	ret    

c010cbbc <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cbbc:	55                   	push   %ebp
c010cbbd:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cbbf:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cbc3:	7e 14                	jle    c010cbd9 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cbc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbc8:	8b 00                	mov    (%eax),%eax
c010cbca:	8d 48 08             	lea    0x8(%eax),%ecx
c010cbcd:	8b 55 08             	mov    0x8(%ebp),%edx
c010cbd0:	89 0a                	mov    %ecx,(%edx)
c010cbd2:	8b 50 04             	mov    0x4(%eax),%edx
c010cbd5:	8b 00                	mov    (%eax),%eax
c010cbd7:	eb 30                	jmp    c010cc09 <getuint+0x4d>
    }
    else if (lflag) {
c010cbd9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cbdd:	74 16                	je     c010cbf5 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010cbdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbe2:	8b 00                	mov    (%eax),%eax
c010cbe4:	8d 48 04             	lea    0x4(%eax),%ecx
c010cbe7:	8b 55 08             	mov    0x8(%ebp),%edx
c010cbea:	89 0a                	mov    %ecx,(%edx)
c010cbec:	8b 00                	mov    (%eax),%eax
c010cbee:	ba 00 00 00 00       	mov    $0x0,%edx
c010cbf3:	eb 14                	jmp    c010cc09 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010cbf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf8:	8b 00                	mov    (%eax),%eax
c010cbfa:	8d 48 04             	lea    0x4(%eax),%ecx
c010cbfd:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc00:	89 0a                	mov    %ecx,(%edx)
c010cc02:	8b 00                	mov    (%eax),%eax
c010cc04:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010cc09:	5d                   	pop    %ebp
c010cc0a:	c3                   	ret    

c010cc0b <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010cc0b:	55                   	push   %ebp
c010cc0c:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cc0e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cc12:	7e 14                	jle    c010cc28 <getint+0x1d>
        return va_arg(*ap, long long);
c010cc14:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc17:	8b 00                	mov    (%eax),%eax
c010cc19:	8d 48 08             	lea    0x8(%eax),%ecx
c010cc1c:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc1f:	89 0a                	mov    %ecx,(%edx)
c010cc21:	8b 50 04             	mov    0x4(%eax),%edx
c010cc24:	8b 00                	mov    (%eax),%eax
c010cc26:	eb 28                	jmp    c010cc50 <getint+0x45>
    }
    else if (lflag) {
c010cc28:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cc2c:	74 12                	je     c010cc40 <getint+0x35>
        return va_arg(*ap, long);
c010cc2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc31:	8b 00                	mov    (%eax),%eax
c010cc33:	8d 48 04             	lea    0x4(%eax),%ecx
c010cc36:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc39:	89 0a                	mov    %ecx,(%edx)
c010cc3b:	8b 00                	mov    (%eax),%eax
c010cc3d:	99                   	cltd   
c010cc3e:	eb 10                	jmp    c010cc50 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010cc40:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc43:	8b 00                	mov    (%eax),%eax
c010cc45:	8d 48 04             	lea    0x4(%eax),%ecx
c010cc48:	8b 55 08             	mov    0x8(%ebp),%edx
c010cc4b:	89 0a                	mov    %ecx,(%edx)
c010cc4d:	8b 00                	mov    (%eax),%eax
c010cc4f:	99                   	cltd   
    }
}
c010cc50:	5d                   	pop    %ebp
c010cc51:	c3                   	ret    

c010cc52 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010cc52:	55                   	push   %ebp
c010cc53:	89 e5                	mov    %esp,%ebp
c010cc55:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010cc58:	8d 45 14             	lea    0x14(%ebp),%eax
c010cc5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010cc5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc61:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc65:	8b 45 10             	mov    0x10(%ebp),%eax
c010cc68:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cc6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc73:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc76:	89 04 24             	mov    %eax,(%esp)
c010cc79:	e8 02 00 00 00       	call   c010cc80 <vprintfmt>
    va_end(ap);
}
c010cc7e:	c9                   	leave  
c010cc7f:	c3                   	ret    

c010cc80 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010cc80:	55                   	push   %ebp
c010cc81:	89 e5                	mov    %esp,%ebp
c010cc83:	56                   	push   %esi
c010cc84:	53                   	push   %ebx
c010cc85:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cc88:	eb 18                	jmp    c010cca2 <vprintfmt+0x22>
            if (ch == '\0') {
c010cc8a:	85 db                	test   %ebx,%ebx
c010cc8c:	75 05                	jne    c010cc93 <vprintfmt+0x13>
                return;
c010cc8e:	e9 d1 03 00 00       	jmp    c010d064 <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010cc93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc96:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cc9a:	89 1c 24             	mov    %ebx,(%esp)
c010cc9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cca0:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010cca2:	8b 45 10             	mov    0x10(%ebp),%eax
c010cca5:	8d 50 01             	lea    0x1(%eax),%edx
c010cca8:	89 55 10             	mov    %edx,0x10(%ebp)
c010ccab:	0f b6 00             	movzbl (%eax),%eax
c010ccae:	0f b6 d8             	movzbl %al,%ebx
c010ccb1:	83 fb 25             	cmp    $0x25,%ebx
c010ccb4:	75 d4                	jne    c010cc8a <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010ccb6:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010ccba:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010ccc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ccc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010ccc7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010ccce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ccd1:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010ccd4:	8b 45 10             	mov    0x10(%ebp),%eax
c010ccd7:	8d 50 01             	lea    0x1(%eax),%edx
c010ccda:	89 55 10             	mov    %edx,0x10(%ebp)
c010ccdd:	0f b6 00             	movzbl (%eax),%eax
c010cce0:	0f b6 d8             	movzbl %al,%ebx
c010cce3:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010cce6:	83 f8 55             	cmp    $0x55,%eax
c010cce9:	0f 87 44 03 00 00    	ja     c010d033 <vprintfmt+0x3b3>
c010ccef:	8b 04 85 08 03 11 c0 	mov    -0x3feefcf8(,%eax,4),%eax
c010ccf6:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010ccf8:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010ccfc:	eb d6                	jmp    c010ccd4 <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010ccfe:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010cd02:	eb d0                	jmp    c010ccd4 <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cd04:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010cd0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cd0e:	89 d0                	mov    %edx,%eax
c010cd10:	c1 e0 02             	shl    $0x2,%eax
c010cd13:	01 d0                	add    %edx,%eax
c010cd15:	01 c0                	add    %eax,%eax
c010cd17:	01 d8                	add    %ebx,%eax
c010cd19:	83 e8 30             	sub    $0x30,%eax
c010cd1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010cd1f:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd22:	0f b6 00             	movzbl (%eax),%eax
c010cd25:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010cd28:	83 fb 2f             	cmp    $0x2f,%ebx
c010cd2b:	7e 0b                	jle    c010cd38 <vprintfmt+0xb8>
c010cd2d:	83 fb 39             	cmp    $0x39,%ebx
c010cd30:	7f 06                	jg     c010cd38 <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cd32:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010cd36:	eb d3                	jmp    c010cd0b <vprintfmt+0x8b>
            goto process_precision;
c010cd38:	eb 33                	jmp    c010cd6d <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010cd3a:	8b 45 14             	mov    0x14(%ebp),%eax
c010cd3d:	8d 50 04             	lea    0x4(%eax),%edx
c010cd40:	89 55 14             	mov    %edx,0x14(%ebp)
c010cd43:	8b 00                	mov    (%eax),%eax
c010cd45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010cd48:	eb 23                	jmp    c010cd6d <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010cd4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd4e:	79 0c                	jns    c010cd5c <vprintfmt+0xdc>
                width = 0;
c010cd50:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010cd57:	e9 78 ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>
c010cd5c:	e9 73 ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010cd61:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010cd68:	e9 67 ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010cd6d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cd71:	79 12                	jns    c010cd85 <vprintfmt+0x105>
                width = precision, precision = -1;
c010cd73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cd76:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cd79:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010cd80:	e9 4f ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>
c010cd85:	e9 4a ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010cd8a:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010cd8e:	e9 41 ff ff ff       	jmp    c010ccd4 <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010cd93:	8b 45 14             	mov    0x14(%ebp),%eax
c010cd96:	8d 50 04             	lea    0x4(%eax),%edx
c010cd99:	89 55 14             	mov    %edx,0x14(%ebp)
c010cd9c:	8b 00                	mov    (%eax),%eax
c010cd9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cda1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cda5:	89 04 24             	mov    %eax,(%esp)
c010cda8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdab:	ff d0                	call   *%eax
            break;
c010cdad:	e9 ac 02 00 00       	jmp    c010d05e <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010cdb2:	8b 45 14             	mov    0x14(%ebp),%eax
c010cdb5:	8d 50 04             	lea    0x4(%eax),%edx
c010cdb8:	89 55 14             	mov    %edx,0x14(%ebp)
c010cdbb:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010cdbd:	85 db                	test   %ebx,%ebx
c010cdbf:	79 02                	jns    c010cdc3 <vprintfmt+0x143>
                err = -err;
c010cdc1:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010cdc3:	83 fb 18             	cmp    $0x18,%ebx
c010cdc6:	7f 0b                	jg     c010cdd3 <vprintfmt+0x153>
c010cdc8:	8b 34 9d 80 02 11 c0 	mov    -0x3feefd80(,%ebx,4),%esi
c010cdcf:	85 f6                	test   %esi,%esi
c010cdd1:	75 23                	jne    c010cdf6 <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010cdd3:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010cdd7:	c7 44 24 08 f5 02 11 	movl   $0xc01102f5,0x8(%esp)
c010cdde:	c0 
c010cddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cde2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cde6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cde9:	89 04 24             	mov    %eax,(%esp)
c010cdec:	e8 61 fe ff ff       	call   c010cc52 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010cdf1:	e9 68 02 00 00       	jmp    c010d05e <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010cdf6:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010cdfa:	c7 44 24 08 fe 02 11 	movl   $0xc01102fe,0x8(%esp)
c010ce01:	c0 
c010ce02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce05:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce09:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce0c:	89 04 24             	mov    %eax,(%esp)
c010ce0f:	e8 3e fe ff ff       	call   c010cc52 <printfmt>
            }
            break;
c010ce14:	e9 45 02 00 00       	jmp    c010d05e <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010ce19:	8b 45 14             	mov    0x14(%ebp),%eax
c010ce1c:	8d 50 04             	lea    0x4(%eax),%edx
c010ce1f:	89 55 14             	mov    %edx,0x14(%ebp)
c010ce22:	8b 30                	mov    (%eax),%esi
c010ce24:	85 f6                	test   %esi,%esi
c010ce26:	75 05                	jne    c010ce2d <vprintfmt+0x1ad>
                p = "(null)";
c010ce28:	be 01 03 11 c0       	mov    $0xc0110301,%esi
            }
            if (width > 0 && padc != '-') {
c010ce2d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ce31:	7e 3e                	jle    c010ce71 <vprintfmt+0x1f1>
c010ce33:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010ce37:	74 38                	je     c010ce71 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010ce39:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010ce3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ce3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce43:	89 34 24             	mov    %esi,(%esp)
c010ce46:	e8 ed 03 00 00       	call   c010d238 <strnlen>
c010ce4b:	29 c3                	sub    %eax,%ebx
c010ce4d:	89 d8                	mov    %ebx,%eax
c010ce4f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ce52:	eb 17                	jmp    c010ce6b <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010ce54:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010ce58:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ce5b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010ce5f:	89 04 24             	mov    %eax,(%esp)
c010ce62:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce65:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010ce67:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ce6b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ce6f:	7f e3                	jg     c010ce54 <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010ce71:	eb 38                	jmp    c010ceab <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010ce73:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010ce77:	74 1f                	je     c010ce98 <vprintfmt+0x218>
c010ce79:	83 fb 1f             	cmp    $0x1f,%ebx
c010ce7c:	7e 05                	jle    c010ce83 <vprintfmt+0x203>
c010ce7e:	83 fb 7e             	cmp    $0x7e,%ebx
c010ce81:	7e 15                	jle    c010ce98 <vprintfmt+0x218>
                    putch('?', putdat);
c010ce83:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce86:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce8a:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010ce91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce94:	ff d0                	call   *%eax
c010ce96:	eb 0f                	jmp    c010cea7 <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010ce98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ce9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ce9f:	89 1c 24             	mov    %ebx,(%esp)
c010cea2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cea5:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010cea7:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ceab:	89 f0                	mov    %esi,%eax
c010cead:	8d 70 01             	lea    0x1(%eax),%esi
c010ceb0:	0f b6 00             	movzbl (%eax),%eax
c010ceb3:	0f be d8             	movsbl %al,%ebx
c010ceb6:	85 db                	test   %ebx,%ebx
c010ceb8:	74 10                	je     c010ceca <vprintfmt+0x24a>
c010ceba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cebe:	78 b3                	js     c010ce73 <vprintfmt+0x1f3>
c010cec0:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010cec4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010cec8:	79 a9                	jns    c010ce73 <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ceca:	eb 17                	jmp    c010cee3 <vprintfmt+0x263>
                putch(' ', putdat);
c010cecc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cecf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ced3:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010ceda:	8b 45 08             	mov    0x8(%ebp),%eax
c010cedd:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010cedf:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010cee3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cee7:	7f e3                	jg     c010cecc <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010cee9:	e9 70 01 00 00       	jmp    c010d05e <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ceee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cef1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cef5:	8d 45 14             	lea    0x14(%ebp),%eax
c010cef8:	89 04 24             	mov    %eax,(%esp)
c010cefb:	e8 0b fd ff ff       	call   c010cc0b <getint>
c010cf00:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf03:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010cf06:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf09:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf0c:	85 d2                	test   %edx,%edx
c010cf0e:	79 26                	jns    c010cf36 <vprintfmt+0x2b6>
                putch('-', putdat);
c010cf10:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf13:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf17:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010cf1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf21:	ff d0                	call   *%eax
                num = -(long long)num;
c010cf23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf26:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf29:	f7 d8                	neg    %eax
c010cf2b:	83 d2 00             	adc    $0x0,%edx
c010cf2e:	f7 da                	neg    %edx
c010cf30:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf33:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010cf36:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cf3d:	e9 a8 00 00 00       	jmp    c010cfea <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010cf42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf45:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf49:	8d 45 14             	lea    0x14(%ebp),%eax
c010cf4c:	89 04 24             	mov    %eax,(%esp)
c010cf4f:	e8 68 fc ff ff       	call   c010cbbc <getuint>
c010cf54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf57:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010cf5a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010cf61:	e9 84 00 00 00       	jmp    c010cfea <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010cf66:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf69:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf6d:	8d 45 14             	lea    0x14(%ebp),%eax
c010cf70:	89 04 24             	mov    %eax,(%esp)
c010cf73:	e8 44 fc ff ff       	call   c010cbbc <getuint>
c010cf78:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf7b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010cf7e:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010cf85:	eb 63                	jmp    c010cfea <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010cf87:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf8a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf8e:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010cf95:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf98:	ff d0                	call   *%eax
            putch('x', putdat);
c010cf9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf9d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfa1:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010cfa8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfab:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cfad:	8b 45 14             	mov    0x14(%ebp),%eax
c010cfb0:	8d 50 04             	lea    0x4(%eax),%edx
c010cfb3:	89 55 14             	mov    %edx,0x14(%ebp)
c010cfb6:	8b 00                	mov    (%eax),%eax
c010cfb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cfbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cfc2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cfc9:	eb 1f                	jmp    c010cfea <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cfcb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cfce:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfd2:	8d 45 14             	lea    0x14(%ebp),%eax
c010cfd5:	89 04 24             	mov    %eax,(%esp)
c010cfd8:	e8 df fb ff ff       	call   c010cbbc <getuint>
c010cfdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cfe0:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cfe3:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cfea:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cfee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cff1:	89 54 24 18          	mov    %edx,0x18(%esp)
c010cff5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cff8:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cffc:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d000:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d003:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d006:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d00a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d00e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d011:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d015:	8b 45 08             	mov    0x8(%ebp),%eax
c010d018:	89 04 24             	mov    %eax,(%esp)
c010d01b:	e8 97 fa ff ff       	call   c010cab7 <printnum>
            break;
c010d020:	eb 3c                	jmp    c010d05e <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d022:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d025:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d029:	89 1c 24             	mov    %ebx,(%esp)
c010d02c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02f:	ff d0                	call   *%eax
            break;
c010d031:	eb 2b                	jmp    c010d05e <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d033:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d036:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d03a:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d041:	8b 45 08             	mov    0x8(%ebp),%eax
c010d044:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d046:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d04a:	eb 04                	jmp    c010d050 <vprintfmt+0x3d0>
c010d04c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d050:	8b 45 10             	mov    0x10(%ebp),%eax
c010d053:	83 e8 01             	sub    $0x1,%eax
c010d056:	0f b6 00             	movzbl (%eax),%eax
c010d059:	3c 25                	cmp    $0x25,%al
c010d05b:	75 ef                	jne    c010d04c <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010d05d:	90                   	nop
        }
    }
c010d05e:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d05f:	e9 3e fc ff ff       	jmp    c010cca2 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010d064:	83 c4 40             	add    $0x40,%esp
c010d067:	5b                   	pop    %ebx
c010d068:	5e                   	pop    %esi
c010d069:	5d                   	pop    %ebp
c010d06a:	c3                   	ret    

c010d06b <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d06b:	55                   	push   %ebp
c010d06c:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d06e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d071:	8b 40 08             	mov    0x8(%eax),%eax
c010d074:	8d 50 01             	lea    0x1(%eax),%edx
c010d077:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d07a:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d07d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d080:	8b 10                	mov    (%eax),%edx
c010d082:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d085:	8b 40 04             	mov    0x4(%eax),%eax
c010d088:	39 c2                	cmp    %eax,%edx
c010d08a:	73 12                	jae    c010d09e <sprintputch+0x33>
        *b->buf ++ = ch;
c010d08c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d08f:	8b 00                	mov    (%eax),%eax
c010d091:	8d 48 01             	lea    0x1(%eax),%ecx
c010d094:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d097:	89 0a                	mov    %ecx,(%edx)
c010d099:	8b 55 08             	mov    0x8(%ebp),%edx
c010d09c:	88 10                	mov    %dl,(%eax)
    }
}
c010d09e:	5d                   	pop    %ebp
c010d09f:	c3                   	ret    

c010d0a0 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d0a0:	55                   	push   %ebp
c010d0a1:	89 e5                	mov    %esp,%ebp
c010d0a3:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d0a6:	8d 45 14             	lea    0x14(%ebp),%eax
c010d0a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d0ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d0b3:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d0ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c4:	89 04 24             	mov    %eax,(%esp)
c010d0c7:	e8 08 00 00 00       	call   c010d0d4 <vsnprintf>
c010d0cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d0cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d0d2:	c9                   	leave  
c010d0d3:	c3                   	ret    

c010d0d4 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d0d4:	55                   	push   %ebp
c010d0d5:	89 e5                	mov    %esp,%ebp
c010d0d7:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d0da:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0e3:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d0e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0e9:	01 d0                	add    %edx,%eax
c010d0eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d0ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d0f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d0f9:	74 0a                	je     c010d105 <vsnprintf+0x31>
c010d0fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d0fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d101:	39 c2                	cmp    %eax,%edx
c010d103:	76 07                	jbe    c010d10c <vsnprintf+0x38>
        return -E_INVAL;
c010d105:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d10a:	eb 2a                	jmp    c010d136 <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d10c:	8b 45 14             	mov    0x14(%ebp),%eax
c010d10f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d113:	8b 45 10             	mov    0x10(%ebp),%eax
c010d116:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d11a:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d11d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d121:	c7 04 24 6b d0 10 c0 	movl   $0xc010d06b,(%esp)
c010d128:	e8 53 fb ff ff       	call   c010cc80 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d12d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d130:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d133:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d136:	c9                   	leave  
c010d137:	c3                   	ret    

c010d138 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d138:	55                   	push   %ebp
c010d139:	89 e5                	mov    %esp,%ebp
c010d13b:	57                   	push   %edi
c010d13c:	56                   	push   %esi
c010d13d:	53                   	push   %ebx
c010d13e:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d141:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d146:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d14c:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d152:	6b f0 05             	imul   $0x5,%eax,%esi
c010d155:	01 f7                	add    %esi,%edi
c010d157:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d15c:	f7 e6                	mul    %esi
c010d15e:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d161:	89 f2                	mov    %esi,%edx
c010d163:	83 c0 0b             	add    $0xb,%eax
c010d166:	83 d2 00             	adc    $0x0,%edx
c010d169:	89 c7                	mov    %eax,%edi
c010d16b:	83 e7 ff             	and    $0xffffffff,%edi
c010d16e:	89 f9                	mov    %edi,%ecx
c010d170:	0f b7 da             	movzwl %dx,%ebx
c010d173:	89 0d c0 1e 13 c0    	mov    %ecx,0xc0131ec0
c010d179:	89 1d c4 1e 13 c0    	mov    %ebx,0xc0131ec4
    unsigned long long result = (next >> 12);
c010d17f:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d184:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d18a:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d18e:	c1 ea 0c             	shr    $0xc,%edx
c010d191:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d194:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d197:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d19e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d1a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d1a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d1a7:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d1aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d1b0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d1b4:	74 1c                	je     c010d1d2 <rand+0x9a>
c010d1b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1b9:	ba 00 00 00 00       	mov    $0x0,%edx
c010d1be:	f7 75 dc             	divl   -0x24(%ebp)
c010d1c1:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d1c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1c7:	ba 00 00 00 00       	mov    $0x0,%edx
c010d1cc:	f7 75 dc             	divl   -0x24(%ebp)
c010d1cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d1d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d1d8:	f7 75 dc             	divl   -0x24(%ebp)
c010d1db:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d1de:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d1e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d1e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d1e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d1ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d1ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d1f0:	83 c4 24             	add    $0x24,%esp
c010d1f3:	5b                   	pop    %ebx
c010d1f4:	5e                   	pop    %esi
c010d1f5:	5f                   	pop    %edi
c010d1f6:	5d                   	pop    %ebp
c010d1f7:	c3                   	ret    

c010d1f8 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d1f8:	55                   	push   %ebp
c010d1f9:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d1fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1fe:	ba 00 00 00 00       	mov    $0x0,%edx
c010d203:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
c010d208:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
}
c010d20e:	5d                   	pop    %ebp
c010d20f:	c3                   	ret    

c010d210 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d210:	55                   	push   %ebp
c010d211:	89 e5                	mov    %esp,%ebp
c010d213:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d216:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d21d:	eb 04                	jmp    c010d223 <strlen+0x13>
        cnt ++;
c010d21f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d223:	8b 45 08             	mov    0x8(%ebp),%eax
c010d226:	8d 50 01             	lea    0x1(%eax),%edx
c010d229:	89 55 08             	mov    %edx,0x8(%ebp)
c010d22c:	0f b6 00             	movzbl (%eax),%eax
c010d22f:	84 c0                	test   %al,%al
c010d231:	75 ec                	jne    c010d21f <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d233:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d236:	c9                   	leave  
c010d237:	c3                   	ret    

c010d238 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d238:	55                   	push   %ebp
c010d239:	89 e5                	mov    %esp,%ebp
c010d23b:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d23e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d245:	eb 04                	jmp    c010d24b <strnlen+0x13>
        cnt ++;
c010d247:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d24b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d24e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d251:	73 10                	jae    c010d263 <strnlen+0x2b>
c010d253:	8b 45 08             	mov    0x8(%ebp),%eax
c010d256:	8d 50 01             	lea    0x1(%eax),%edx
c010d259:	89 55 08             	mov    %edx,0x8(%ebp)
c010d25c:	0f b6 00             	movzbl (%eax),%eax
c010d25f:	84 c0                	test   %al,%al
c010d261:	75 e4                	jne    c010d247 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d263:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d266:	c9                   	leave  
c010d267:	c3                   	ret    

c010d268 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d268:	55                   	push   %ebp
c010d269:	89 e5                	mov    %esp,%ebp
c010d26b:	57                   	push   %edi
c010d26c:	56                   	push   %esi
c010d26d:	83 ec 20             	sub    $0x20,%esp
c010d270:	8b 45 08             	mov    0x8(%ebp),%eax
c010d273:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d276:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d279:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d27c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d27f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d282:	89 d1                	mov    %edx,%ecx
c010d284:	89 c2                	mov    %eax,%edx
c010d286:	89 ce                	mov    %ecx,%esi
c010d288:	89 d7                	mov    %edx,%edi
c010d28a:	ac                   	lods   %ds:(%esi),%al
c010d28b:	aa                   	stos   %al,%es:(%edi)
c010d28c:	84 c0                	test   %al,%al
c010d28e:	75 fa                	jne    c010d28a <strcpy+0x22>
c010d290:	89 fa                	mov    %edi,%edx
c010d292:	89 f1                	mov    %esi,%ecx
c010d294:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d297:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d29a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d29d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d2a0:	83 c4 20             	add    $0x20,%esp
c010d2a3:	5e                   	pop    %esi
c010d2a4:	5f                   	pop    %edi
c010d2a5:	5d                   	pop    %ebp
c010d2a6:	c3                   	ret    

c010d2a7 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d2a7:	55                   	push   %ebp
c010d2a8:	89 e5                	mov    %esp,%ebp
c010d2aa:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d2ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d2b3:	eb 21                	jmp    c010d2d6 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d2b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2b8:	0f b6 10             	movzbl (%eax),%edx
c010d2bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d2be:	88 10                	mov    %dl,(%eax)
c010d2c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d2c3:	0f b6 00             	movzbl (%eax),%eax
c010d2c6:	84 c0                	test   %al,%al
c010d2c8:	74 04                	je     c010d2ce <strncpy+0x27>
            src ++;
c010d2ca:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d2ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d2d2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d2d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d2da:	75 d9                	jne    c010d2b5 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d2dc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d2df:	c9                   	leave  
c010d2e0:	c3                   	ret    

c010d2e1 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d2e1:	55                   	push   %ebp
c010d2e2:	89 e5                	mov    %esp,%ebp
c010d2e4:	57                   	push   %edi
c010d2e5:	56                   	push   %esi
c010d2e6:	83 ec 20             	sub    $0x20,%esp
c010d2e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d2ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d2f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d2f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2fb:	89 d1                	mov    %edx,%ecx
c010d2fd:	89 c2                	mov    %eax,%edx
c010d2ff:	89 ce                	mov    %ecx,%esi
c010d301:	89 d7                	mov    %edx,%edi
c010d303:	ac                   	lods   %ds:(%esi),%al
c010d304:	ae                   	scas   %es:(%edi),%al
c010d305:	75 08                	jne    c010d30f <strcmp+0x2e>
c010d307:	84 c0                	test   %al,%al
c010d309:	75 f8                	jne    c010d303 <strcmp+0x22>
c010d30b:	31 c0                	xor    %eax,%eax
c010d30d:	eb 04                	jmp    c010d313 <strcmp+0x32>
c010d30f:	19 c0                	sbb    %eax,%eax
c010d311:	0c 01                	or     $0x1,%al
c010d313:	89 fa                	mov    %edi,%edx
c010d315:	89 f1                	mov    %esi,%ecx
c010d317:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d31a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d31d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d320:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d323:	83 c4 20             	add    $0x20,%esp
c010d326:	5e                   	pop    %esi
c010d327:	5f                   	pop    %edi
c010d328:	5d                   	pop    %ebp
c010d329:	c3                   	ret    

c010d32a <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d32a:	55                   	push   %ebp
c010d32b:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d32d:	eb 0c                	jmp    c010d33b <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d32f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d333:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d337:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d33b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d33f:	74 1a                	je     c010d35b <strncmp+0x31>
c010d341:	8b 45 08             	mov    0x8(%ebp),%eax
c010d344:	0f b6 00             	movzbl (%eax),%eax
c010d347:	84 c0                	test   %al,%al
c010d349:	74 10                	je     c010d35b <strncmp+0x31>
c010d34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d34e:	0f b6 10             	movzbl (%eax),%edx
c010d351:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d354:	0f b6 00             	movzbl (%eax),%eax
c010d357:	38 c2                	cmp    %al,%dl
c010d359:	74 d4                	je     c010d32f <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d35b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d35f:	74 18                	je     c010d379 <strncmp+0x4f>
c010d361:	8b 45 08             	mov    0x8(%ebp),%eax
c010d364:	0f b6 00             	movzbl (%eax),%eax
c010d367:	0f b6 d0             	movzbl %al,%edx
c010d36a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d36d:	0f b6 00             	movzbl (%eax),%eax
c010d370:	0f b6 c0             	movzbl %al,%eax
c010d373:	29 c2                	sub    %eax,%edx
c010d375:	89 d0                	mov    %edx,%eax
c010d377:	eb 05                	jmp    c010d37e <strncmp+0x54>
c010d379:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d37e:	5d                   	pop    %ebp
c010d37f:	c3                   	ret    

c010d380 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d380:	55                   	push   %ebp
c010d381:	89 e5                	mov    %esp,%ebp
c010d383:	83 ec 04             	sub    $0x4,%esp
c010d386:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d389:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d38c:	eb 14                	jmp    c010d3a2 <strchr+0x22>
        if (*s == c) {
c010d38e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d391:	0f b6 00             	movzbl (%eax),%eax
c010d394:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d397:	75 05                	jne    c010d39e <strchr+0x1e>
            return (char *)s;
c010d399:	8b 45 08             	mov    0x8(%ebp),%eax
c010d39c:	eb 13                	jmp    c010d3b1 <strchr+0x31>
        }
        s ++;
c010d39e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d3a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3a5:	0f b6 00             	movzbl (%eax),%eax
c010d3a8:	84 c0                	test   %al,%al
c010d3aa:	75 e2                	jne    c010d38e <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d3ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d3b1:	c9                   	leave  
c010d3b2:	c3                   	ret    

c010d3b3 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d3b3:	55                   	push   %ebp
c010d3b4:	89 e5                	mov    %esp,%ebp
c010d3b6:	83 ec 04             	sub    $0x4,%esp
c010d3b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3bc:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d3bf:	eb 11                	jmp    c010d3d2 <strfind+0x1f>
        if (*s == c) {
c010d3c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3c4:	0f b6 00             	movzbl (%eax),%eax
c010d3c7:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d3ca:	75 02                	jne    c010d3ce <strfind+0x1b>
            break;
c010d3cc:	eb 0e                	jmp    c010d3dc <strfind+0x29>
        }
        s ++;
c010d3ce:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d3d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3d5:	0f b6 00             	movzbl (%eax),%eax
c010d3d8:	84 c0                	test   %al,%al
c010d3da:	75 e5                	jne    c010d3c1 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d3dc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d3df:	c9                   	leave  
c010d3e0:	c3                   	ret    

c010d3e1 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d3e1:	55                   	push   %ebp
c010d3e2:	89 e5                	mov    %esp,%ebp
c010d3e4:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d3e7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d3ee:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d3f5:	eb 04                	jmp    c010d3fb <strtol+0x1a>
        s ++;
c010d3f7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d3fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3fe:	0f b6 00             	movzbl (%eax),%eax
c010d401:	3c 20                	cmp    $0x20,%al
c010d403:	74 f2                	je     c010d3f7 <strtol+0x16>
c010d405:	8b 45 08             	mov    0x8(%ebp),%eax
c010d408:	0f b6 00             	movzbl (%eax),%eax
c010d40b:	3c 09                	cmp    $0x9,%al
c010d40d:	74 e8                	je     c010d3f7 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d40f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d412:	0f b6 00             	movzbl (%eax),%eax
c010d415:	3c 2b                	cmp    $0x2b,%al
c010d417:	75 06                	jne    c010d41f <strtol+0x3e>
        s ++;
c010d419:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d41d:	eb 15                	jmp    c010d434 <strtol+0x53>
    }
    else if (*s == '-') {
c010d41f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d422:	0f b6 00             	movzbl (%eax),%eax
c010d425:	3c 2d                	cmp    $0x2d,%al
c010d427:	75 0b                	jne    c010d434 <strtol+0x53>
        s ++, neg = 1;
c010d429:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d42d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d434:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d438:	74 06                	je     c010d440 <strtol+0x5f>
c010d43a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d43e:	75 24                	jne    c010d464 <strtol+0x83>
c010d440:	8b 45 08             	mov    0x8(%ebp),%eax
c010d443:	0f b6 00             	movzbl (%eax),%eax
c010d446:	3c 30                	cmp    $0x30,%al
c010d448:	75 1a                	jne    c010d464 <strtol+0x83>
c010d44a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d44d:	83 c0 01             	add    $0x1,%eax
c010d450:	0f b6 00             	movzbl (%eax),%eax
c010d453:	3c 78                	cmp    $0x78,%al
c010d455:	75 0d                	jne    c010d464 <strtol+0x83>
        s += 2, base = 16;
c010d457:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d45b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d462:	eb 2a                	jmp    c010d48e <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d464:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d468:	75 17                	jne    c010d481 <strtol+0xa0>
c010d46a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d46d:	0f b6 00             	movzbl (%eax),%eax
c010d470:	3c 30                	cmp    $0x30,%al
c010d472:	75 0d                	jne    c010d481 <strtol+0xa0>
        s ++, base = 8;
c010d474:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d478:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d47f:	eb 0d                	jmp    c010d48e <strtol+0xad>
    }
    else if (base == 0) {
c010d481:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d485:	75 07                	jne    c010d48e <strtol+0xad>
        base = 10;
c010d487:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d491:	0f b6 00             	movzbl (%eax),%eax
c010d494:	3c 2f                	cmp    $0x2f,%al
c010d496:	7e 1b                	jle    c010d4b3 <strtol+0xd2>
c010d498:	8b 45 08             	mov    0x8(%ebp),%eax
c010d49b:	0f b6 00             	movzbl (%eax),%eax
c010d49e:	3c 39                	cmp    $0x39,%al
c010d4a0:	7f 11                	jg     c010d4b3 <strtol+0xd2>
            dig = *s - '0';
c010d4a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4a5:	0f b6 00             	movzbl (%eax),%eax
c010d4a8:	0f be c0             	movsbl %al,%eax
c010d4ab:	83 e8 30             	sub    $0x30,%eax
c010d4ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d4b1:	eb 48                	jmp    c010d4fb <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d4b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4b6:	0f b6 00             	movzbl (%eax),%eax
c010d4b9:	3c 60                	cmp    $0x60,%al
c010d4bb:	7e 1b                	jle    c010d4d8 <strtol+0xf7>
c010d4bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4c0:	0f b6 00             	movzbl (%eax),%eax
c010d4c3:	3c 7a                	cmp    $0x7a,%al
c010d4c5:	7f 11                	jg     c010d4d8 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d4c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4ca:	0f b6 00             	movzbl (%eax),%eax
c010d4cd:	0f be c0             	movsbl %al,%eax
c010d4d0:	83 e8 57             	sub    $0x57,%eax
c010d4d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d4d6:	eb 23                	jmp    c010d4fb <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4db:	0f b6 00             	movzbl (%eax),%eax
c010d4de:	3c 40                	cmp    $0x40,%al
c010d4e0:	7e 3d                	jle    c010d51f <strtol+0x13e>
c010d4e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4e5:	0f b6 00             	movzbl (%eax),%eax
c010d4e8:	3c 5a                	cmp    $0x5a,%al
c010d4ea:	7f 33                	jg     c010d51f <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d4ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4ef:	0f b6 00             	movzbl (%eax),%eax
c010d4f2:	0f be c0             	movsbl %al,%eax
c010d4f5:	83 e8 37             	sub    $0x37,%eax
c010d4f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d4fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4fe:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d501:	7c 02                	jl     c010d505 <strtol+0x124>
            break;
c010d503:	eb 1a                	jmp    c010d51f <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d505:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d509:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d50c:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d510:	89 c2                	mov    %eax,%edx
c010d512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d515:	01 d0                	add    %edx,%eax
c010d517:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d51a:	e9 6f ff ff ff       	jmp    c010d48e <strtol+0xad>

    if (endptr) {
c010d51f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d523:	74 08                	je     c010d52d <strtol+0x14c>
        *endptr = (char *) s;
c010d525:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d528:	8b 55 08             	mov    0x8(%ebp),%edx
c010d52b:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d52d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d531:	74 07                	je     c010d53a <strtol+0x159>
c010d533:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d536:	f7 d8                	neg    %eax
c010d538:	eb 03                	jmp    c010d53d <strtol+0x15c>
c010d53a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d53d:	c9                   	leave  
c010d53e:	c3                   	ret    

c010d53f <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d53f:	55                   	push   %ebp
c010d540:	89 e5                	mov    %esp,%ebp
c010d542:	57                   	push   %edi
c010d543:	83 ec 24             	sub    $0x24,%esp
c010d546:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d549:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d54c:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d550:	8b 55 08             	mov    0x8(%ebp),%edx
c010d553:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d556:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d559:	8b 45 10             	mov    0x10(%ebp),%eax
c010d55c:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d55f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d562:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d566:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d569:	89 d7                	mov    %edx,%edi
c010d56b:	f3 aa                	rep stos %al,%es:(%edi)
c010d56d:	89 fa                	mov    %edi,%edx
c010d56f:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d572:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d575:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d578:	83 c4 24             	add    $0x24,%esp
c010d57b:	5f                   	pop    %edi
c010d57c:	5d                   	pop    %ebp
c010d57d:	c3                   	ret    

c010d57e <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d57e:	55                   	push   %ebp
c010d57f:	89 e5                	mov    %esp,%ebp
c010d581:	57                   	push   %edi
c010d582:	56                   	push   %esi
c010d583:	53                   	push   %ebx
c010d584:	83 ec 30             	sub    $0x30,%esp
c010d587:	8b 45 08             	mov    0x8(%ebp),%eax
c010d58a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d58d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d590:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d593:	8b 45 10             	mov    0x10(%ebp),%eax
c010d596:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d599:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d59c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d59f:	73 42                	jae    c010d5e3 <memmove+0x65>
c010d5a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d5a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d5a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d5ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d5b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d5b6:	c1 e8 02             	shr    $0x2,%eax
c010d5b9:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d5bb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d5be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d5c1:	89 d7                	mov    %edx,%edi
c010d5c3:	89 c6                	mov    %eax,%esi
c010d5c5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d5c7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d5ca:	83 e1 03             	and    $0x3,%ecx
c010d5cd:	74 02                	je     c010d5d1 <memmove+0x53>
c010d5cf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d5d1:	89 f0                	mov    %esi,%eax
c010d5d3:	89 fa                	mov    %edi,%edx
c010d5d5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d5d8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d5db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d5de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d5e1:	eb 36                	jmp    c010d619 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d5e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5e6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d5e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d5ec:	01 c2                	add    %eax,%edx
c010d5ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5f1:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010d5f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d5f7:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d5fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5fd:	89 c1                	mov    %eax,%ecx
c010d5ff:	89 d8                	mov    %ebx,%eax
c010d601:	89 d6                	mov    %edx,%esi
c010d603:	89 c7                	mov    %eax,%edi
c010d605:	fd                   	std    
c010d606:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d608:	fc                   	cld    
c010d609:	89 f8                	mov    %edi,%eax
c010d60b:	89 f2                	mov    %esi,%edx
c010d60d:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d610:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010d613:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d616:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d619:	83 c4 30             	add    $0x30,%esp
c010d61c:	5b                   	pop    %ebx
c010d61d:	5e                   	pop    %esi
c010d61e:	5f                   	pop    %edi
c010d61f:	5d                   	pop    %ebp
c010d620:	c3                   	ret    

c010d621 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d621:	55                   	push   %ebp
c010d622:	89 e5                	mov    %esp,%ebp
c010d624:	57                   	push   %edi
c010d625:	56                   	push   %esi
c010d626:	83 ec 20             	sub    $0x20,%esp
c010d629:	8b 45 08             	mov    0x8(%ebp),%eax
c010d62c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d62f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d632:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d635:	8b 45 10             	mov    0x10(%ebp),%eax
c010d638:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d63b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d63e:	c1 e8 02             	shr    $0x2,%eax
c010d641:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d643:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d646:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d649:	89 d7                	mov    %edx,%edi
c010d64b:	89 c6                	mov    %eax,%esi
c010d64d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d64f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010d652:	83 e1 03             	and    $0x3,%ecx
c010d655:	74 02                	je     c010d659 <memcpy+0x38>
c010d657:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d659:	89 f0                	mov    %esi,%eax
c010d65b:	89 fa                	mov    %edi,%edx
c010d65d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d660:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d663:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d666:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d669:	83 c4 20             	add    $0x20,%esp
c010d66c:	5e                   	pop    %esi
c010d66d:	5f                   	pop    %edi
c010d66e:	5d                   	pop    %ebp
c010d66f:	c3                   	ret    

c010d670 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d670:	55                   	push   %ebp
c010d671:	89 e5                	mov    %esp,%ebp
c010d673:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d676:	8b 45 08             	mov    0x8(%ebp),%eax
c010d679:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d67c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d67f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d682:	eb 30                	jmp    c010d6b4 <memcmp+0x44>
        if (*s1 != *s2) {
c010d684:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d687:	0f b6 10             	movzbl (%eax),%edx
c010d68a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d68d:	0f b6 00             	movzbl (%eax),%eax
c010d690:	38 c2                	cmp    %al,%dl
c010d692:	74 18                	je     c010d6ac <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d694:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d697:	0f b6 00             	movzbl (%eax),%eax
c010d69a:	0f b6 d0             	movzbl %al,%edx
c010d69d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d6a0:	0f b6 00             	movzbl (%eax),%eax
c010d6a3:	0f b6 c0             	movzbl %al,%eax
c010d6a6:	29 c2                	sub    %eax,%edx
c010d6a8:	89 d0                	mov    %edx,%eax
c010d6aa:	eb 1a                	jmp    c010d6c6 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010d6ac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d6b0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d6b4:	8b 45 10             	mov    0x10(%ebp),%eax
c010d6b7:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d6ba:	89 55 10             	mov    %edx,0x10(%ebp)
c010d6bd:	85 c0                	test   %eax,%eax
c010d6bf:	75 c3                	jne    c010d684 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d6c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d6c6:	c9                   	leave  
c010d6c7:	c3                   	ret    
